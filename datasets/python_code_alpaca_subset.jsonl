{"name": "python_code_alpaca_subset", "version": "0.0.1", "license": "No license, sourced from https://huggingface.co/datasets/iamtarun/python_code_instructions_18k_alpaca"}
{"question":"Write a Python program to load the sklearn package.","input":"","expected_output":"import sklearn","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to load the sklearn package.\n\n### Input:\n\n\n### Output:\nimport sklearn","tok_input_length":40,"tok_output_length":3,"system_prompt":"","index":11087}
{"question":"Normalize a string in Python.","input":"","expected_output":"def normalize(string):\n    return string.lower().strip()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nNormalize a string in Python.\n\n### Input:\n\n\n### Output:\ndef normalize(string):\n    return string.lower().strip()","tok_input_length":45,"tok_output_length":12,"system_prompt":"","index":11069}
{"question":"Complete the code to print \"Hello, World!\" using Python.","input":"","expected_output":"print(\"Hello, World!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the code to print \"Hello, World!\" using Python.\n\n### Input:\n\n\n### Output:\nprint(\"Hello, World!\")","tok_input_length":47,"tok_output_length":7,"system_prompt":"","index":15832}
{"question":"Insert missing keyword in this Python statement.","input":"for i in range():","expected_output":"for i in range(10):","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nInsert missing keyword in this Python statement.\n\n### Input:\nfor i in range():\n\n### Output:\nfor i in range(10):","tok_input_length":48,"tok_output_length":8,"system_prompt":"","index":5251}
{"question":"Correct the errors and run this Python code.","input":"print(\"Hello&%World\")","expected_output":"print(\"Hello World\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCorrect the errors and run this Python code.\n\n### Input:\nprint(\"Hello&%World\")\n\n### Output:\nprint(\"Hello World\")","tok_input_length":49,"tok_output_length":6,"system_prompt":"","index":6560}
{"question":"Write a Python program that takes an input string and reverses all of its words.","input":"hello world","expected_output":"world hello","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes an input string and reverses all of its words.\n\n### Input:\nhello world\n\n### Output:\nworld hello","tok_input_length":50,"tok_output_length":3,"system_prompt":"","index":8300}
{"question":"Generate a Python program to convert all characters to lowercase","input":"","expected_output":"def convert_to_lowercase(string):\n    return string.lower()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to convert all characters to lowercase\n\n### Input:\n\n\n### Output:\ndef convert_to_lowercase(string):\n    return string.lower()","tok_input_length":50,"tok_output_length":12,"system_prompt":"","index":7819}
{"question":"Implement a Python function to encode a URL.","input":"","expected_output":"def encode_url(url):\n    return urllib.parse.quote_plus(url)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to encode a URL.\n\n### Input:\n\n\n### Output:\ndef encode_url(url):\n    return urllib.parse.quote_plus(url)","tok_input_length":50,"tok_output_length":14,"system_prompt":"","index":11239}
{"question":"Create a python program to check the length of a given string","input":"","expected_output":"def check_length(string):\n    return len(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to check the length of a given string\n\n### Input:\n\n\n### Output:\ndef check_length(string):\n    return len(string)","tok_input_length":51,"tok_output_length":11,"system_prompt":"","index":3542}
{"question":"Write a Bash script to activate a python virtual environment.","input":"","expected_output":"# activate the virtual environment \nsource venv\/bin\/activate","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Bash script to activate a python virtual environment.\n\n### Input:\n\n\n### Output:\n# activate the virtual environment \nsource venv\/bin\/activate","tok_input_length":51,"tok_output_length":13,"system_prompt":"","index":14468}
{"question":"Generate a single line of code to add a new item to an existing list in Python.","input":"","expected_output":"existing_list.append(new_item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a single line of code to add a new item to an existing list in Python.\n\n### Input:\n\n\n### Output:\nexisting_list.append(new_item)","tok_input_length":52,"tok_output_length":7,"system_prompt":"","index":8308}
{"question":"Generate a random number between 0 and 9 using Python.","input":"","expected_output":"import random\nrandom.randint(0, 9)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number between 0 and 9 using Python.\n\n### Input:\n\n\n### Output:\nimport random\nrandom.randint(0, 9)","tok_input_length":52,"tok_output_length":12,"system_prompt":"","index":2943}
{"question":"Convert a string into a valid python program that prints the string on the terminal.","input":"Hello World!","expected_output":"print('Hello World!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a string into a valid python program that prints the string on the terminal.\n\n### Input:\nHello World!\n\n### Output:\nprint('Hello World!')","tok_input_length":53,"tok_output_length":7,"system_prompt":"","index":1045}
{"question":"Write a Python code snippet to print the current date and time.","input":"","expected_output":"import datetime\n\nnow = datetime.datetime.now()\nprint(now)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to print the current date and time.\n\n### Input:\n\n\n### Output:\nimport datetime\n\nnow = datetime.datetime.now()\nprint(now)","tok_input_length":53,"tok_output_length":13,"system_prompt":"","index":5934}
{"question":"Write a Python script that computes the sum of two given integers.","input":"","expected_output":"def sum_two_ints(a, b):\n return a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that computes the sum of two given integers.\n\n### Input:\n\n\n### Output:\ndef sum_two_ints(a, b):\n return a + b","tok_input_length":54,"tok_output_length":14,"system_prompt":"","index":1043}
{"question":"Generate a unique 32-bit number in Python.","input":"","expected_output":"import uuid\n\nunique_number = uuid.uuid4().int\nprint(unique_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a unique 32-bit number in Python.\n\n### Input:\n\n\n### Output:\nimport uuid\n\nunique_number = uuid.uuid4().int\nprint(unique_number)","tok_input_length":54,"tok_output_length":17,"system_prompt":"","index":9050}
{"question":"Write a Python program that takes in a string and returns the reverse of it.","input":"","expected_output":"def reverse_string(string):\n    return string[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes in a string and returns the reverse of it.\n\n### Input:\n\n\n### Output:\ndef reverse_string(string):\n    return string[::-1]","tok_input_length":55,"tok_output_length":12,"system_prompt":"","index":8739}
{"question":"Write a Python program to convert a given string to all uppercase letters.","input":"","expected_output":"def convert_string_to_uppercase(string):\n    return string.upper()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given string to all uppercase letters.\n\n### Input:\n\n\n### Output:\ndef convert_string_to_uppercase(string):\n    return string.upper()","tok_input_length":55,"tok_output_length":14,"system_prompt":"","index":10550}
{"question":"Generate a random number using the built-in function of Python.","input":"","expected_output":"import random\n\nnumber = random.randint(1,100)\nprint(number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number using the built-in function of Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nnumber = random.randint(1,100)\nprint(number)","tok_input_length":55,"tok_output_length":16,"system_prompt":"","index":17501}
{"question":"Create a string reverse function in Python.","input":"","expected_output":"def string_reverse(string):\n  return string[::-1]\n\nprint(string_reverse(\"Hello world!\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a string reverse function in Python.\n\n### Input:\n\n\n### Output:\ndef string_reverse(string):\n  return string[::-1]\n\nprint(string_reverse(\"Hello world!\"))","tok_input_length":55,"tok_output_length":20,"system_prompt":"","index":16414}
{"question":"Rearrange the following code so that it works in Python.","input":"y, x = x, y","expected_output":"x, y = y, x","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRearrange the following code so that it works in Python.\n\n### Input:\ny, x = x, y\n\n### Output:\nx, y = y, x","tok_input_length":56,"tok_output_length":8,"system_prompt":"","index":12335}
{"question":"Develop a function in Python to remove all the whitespaces from a given string.","input":"","expected_output":"def remove_whitespace(s):\n    return s.replace(\" \", \"\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to remove all the whitespaces from a given string.\n\n### Input:\n\n\n### Output:\ndef remove_whitespace(s):\n    return s.replace(\" \", \"\")","tok_input_length":56,"tok_output_length":13,"system_prompt":"","index":2143}
{"question":"Write a loop in Python for printing \u2018Hello World\u2019 10 times","input":"","expected_output":"for _ in range(10):\n  print('Hello World')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a loop in Python for printing \u2018Hello World\u2019 10 times\n\n### Input:\n\n\n### Output:\nfor _ in range(10):\n  print('Hello World')","tok_input_length":56,"tok_output_length":14,"system_prompt":"","index":14181}
{"question":"Create a python program to include a web-page rendering feature.","input":"","expected_output":"import webbrowser\n\nurl = \"www.example.com\"\nwebbrowser.open(url)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to include a web-page rendering feature.\n\n### Input:\n\n\n### Output:\nimport webbrowser\n\nurl = \"www.example.com\"\nwebbrowser.open(url)","tok_input_length":56,"tok_output_length":17,"system_prompt":"","index":612}
{"question":"Generate a Python script to convert cents to dollars.","input":"","expected_output":"def convert_cents_to_dollars(cents): \n    return cents \/ 100","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to convert cents to dollars.\n\n### Input:\n\n\n### Output:\ndef convert_cents_to_dollars(cents): \n    return cents \/ 100","tok_input_length":56,"tok_output_length":19,"system_prompt":"","index":13873}
{"question":"Utilize a for loop in Python to print all numbers from 0 to 9","input":"","expected_output":"for i in range(10):\n  print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilize a for loop in Python to print all numbers from 0 to 9\n\n### Input:\n\n\n### Output:\nfor i in range(10):\n  print(i)","tok_input_length":57,"tok_output_length":12,"system_prompt":"","index":4349}
{"question":"Write a python loop to print all the numbers from 1 to 10.","input":"","expected_output":"for i in range(1,11):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python loop to print all the numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1,11):\n    print(i)","tok_input_length":57,"tok_output_length":14,"system_prompt":"","index":17016}
{"question":"Generate a Python program to print out square numbers up to 10.","input":"","expected_output":"for i in range(1,11):\n    print(i**2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print out square numbers up to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1,11):\n    print(i**2)","tok_input_length":57,"tok_output_length":16,"system_prompt":"","index":9779}
{"question":"Write a Python function that returns the sum of two integers.","input":"","expected_output":"def sum_integers(num1, num2):\n   return num1 + num2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that returns the sum of two integers.\n\n### Input:\n\n\n### Output:\ndef sum_integers(num1, num2):\n   return num1 + num2","tok_input_length":57,"tok_output_length":18,"system_prompt":"","index":10260}
{"question":"Write a code snippet in Python to print the last 3 characters of a given string","input":"string = \"Hello, World!\"","expected_output":"print(string[-3:])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet in Python to print the last 3 characters of a given string\n\n### Input:\nstring = \"Hello, World!\"\n\n### Output:\nprint(string[-3:])","tok_input_length":58,"tok_output_length":6,"system_prompt":"","index":5225}
{"question":"Create a Python program to extract the first three characters of a string.","input":"string = \"programming\"","expected_output":"result = string[:3]\nprint(result) #pro","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to extract the first three characters of a string.\n\n### Input:\nstring = \"programming\"\n\n### Output:\nresult = string[:3]\nprint(result) #pro","tok_input_length":58,"tok_output_length":12,"system_prompt":"","index":7842}
{"question":"Translate the following Python code to JavaScript:\n\ndef sum(a, b):","input":"Not applicable","expected_output":"function sum(a, b) {\n return a + b;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following Python code to JavaScript:\n\ndef sum(a, b):\n\n### Input:\nNot applicable\n\n### Output:\nfunction sum(a, b) {\n return a + b;\n}","tok_input_length":58,"tok_output_length":14,"system_prompt":"","index":8735}
{"question":"Create a Python program to print all the numbers between 1 and 5.","input":"","expected_output":"for num in range(1, 6):\n    print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print all the numbers between 1 and 5.\n\n### Input:\n\n\n### Output:\nfor num in range(1, 6):\n    print(num)","tok_input_length":58,"tok_output_length":15,"system_prompt":"","index":16091}
{"question":"Write a Python function to round a float to 2 decimal places.","input":"","expected_output":"def round_to_two_decimal_places(n):\n    return round(n, 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to round a float to 2 decimal places.\n\n### Input:\n\n\n### Output:\ndef round_to_two_decimal_places(n):\n    return round(n, 2)","tok_input_length":58,"tok_output_length":17,"system_prompt":"","index":8696}
{"question":"Create a python program to calculate the average of three numbers.","input":"","expected_output":"def average(a,b,c):\n    return (a + b + c) \/ 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the average of three numbers.\n\n### Input:\n\n\n### Output:\ndef average(a,b,c):\n    return (a + b + c) \/ 3","tok_input_length":58,"tok_output_length":19,"system_prompt":"","index":7293}
{"question":"Convert the following JavaScript function to Python.","input":"function double(x) {\n  return 2 * x;\n}","expected_output":"def double(x):\n  return 2 * x","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following JavaScript function to Python.\n\n### Input:\nfunction double(x) {\n  return 2 * x;\n}\n\n### Output:\ndef double(x):\n  return 2 * x","tok_input_length":59,"tok_output_length":11,"system_prompt":"","index":13467}
{"question":"Write a Python function to take the given list and return its elements joined into a single string.","input":"","expected_output":"def join_list(lst):\n    return \" \".join(lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to take the given list and return its elements joined into a single string.\n\n### Input:\n\n\n### Output:\ndef join_list(lst):\n    return \" \".join(lst)","tok_input_length":59,"tok_output_length":13,"system_prompt":"","index":16322}
{"question":"Generate a valid Python code for checking if a given string is a palindrome or not?","input":"","expected_output":"def is_palindrome(string):\n  return string == string[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid Python code for checking if a given string is a palindrome or not?\n\n### Input:\n\n\n### Output:\ndef is_palindrome(string):\n  return string == string[::-1]","tok_input_length":59,"tok_output_length":15,"system_prompt":"","index":8670}
{"question":"Develop a Python script to print the first 10 cubes of natural numbers.","input":"","expected_output":"for i in range(1, 11):\n    print(i**3)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to print the first 10 cubes of natural numbers.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    print(i**3)","tok_input_length":59,"tok_output_length":17,"system_prompt":"","index":632}
{"question":"Can you write a code to securely hash a given string in Python?","input":"","expected_output":"import hashlib\n \ndef secure_hash(string):\n return hashlib.sha256(string.encode()).hexdigest()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a code to securely hash a given string in Python?\n\n### Input:\n\n\n### Output:\nimport hashlib\n \ndef secure_hash(string):\n return hashlib.sha256(string.encode()).hexdigest()","tok_input_length":59,"tok_output_length":18,"system_prompt":"","index":14550}
{"question":"Create a Python function to break a string into its component words.","input":"","expected_output":"def break_string(string):\n string = string.lower()\n words = string.split(\" \")\n return words","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to break a string into its component words.\n\n### Input:\n\n\n### Output:\ndef break_string(string):\n string = string.lower()\n words = string.split(\" \")\n return words","tok_input_length":59,"tok_output_length":19,"system_prompt":"","index":17061}
{"question":"Create a list of ten random numbers in Python.","input":"","expected_output":"import random\n\nrandom_numbers = [random.randint(1,50) for _ in range(10)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list of ten random numbers in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_numbers = [random.randint(1,50) for _ in range(10)]","tok_input_length":59,"tok_output_length":22,"system_prompt":"","index":933}
{"question":"Convert the given equation in Python to a mathematical expression.","input":"x = y + 2z - 7","expected_output":"x = y + 2*z - 7","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given equation in Python to a mathematical expression.\n\n### Input:\nx = y + 2z - 7\n\n### Output:\nx = y + 2*z - 7","tok_input_length":60,"tok_output_length":11,"system_prompt":"","index":15433}
{"question":"Create a Python function named 'get_date' that returns the current date and time upon invocation.","input":"","expected_output":"def get_date():\n\tfrom datetime import datetime\n\treturn datetime.now()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function named 'get_date' that returns the current date and time upon invocation.\n\n### Input:\n\n\n### Output:\ndef get_date():\n\tfrom datetime import datetime\n\treturn datetime.now()","tok_input_length":60,"tok_output_length":14,"system_prompt":"","index":9953}
{"question":"Write a code to perform strings concatenation in Python","input":"\"Hello\", \"World\"","expected_output":"result = \"Hello\" + \" \" + \"World\"\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to perform strings concatenation in Python\n\n### Input:\n\"Hello\", \"World\"\n\n### Output:\nresult = \"Hello\" + \" \" + \"World\"\nprint(result)","tok_input_length":60,"tok_output_length":16,"system_prompt":"","index":3180}
{"question":"Convert a given sentence to uppercase using Python.","input":"This is a sample sentence.","expected_output":"sentence = \"This is a sample sentence.\"\noutput = sentence.upper()\nprint(output)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given sentence to uppercase using Python.\n\n### Input:\nThis is a sample sentence.\n\n### Output:\nsentence = \"This is a sample sentence.\"\noutput = sentence.upper()\nprint(output)","tok_input_length":60,"tok_output_length":18,"system_prompt":"","index":1222}
{"question":"Design an algorithm in Python to compute the intersection of two given arrays.","input":"","expected_output":"def intersection(arr1,arr2):\n  return set(arr1).intersection(set(arr2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to compute the intersection of two given arrays.\n\n### Input:\n\n\n### Output:\ndef intersection(arr1,arr2):\n  return set(arr1).intersection(set(arr2))","tok_input_length":60,"tok_output_length":19,"system_prompt":"","index":1392}
{"question":"Develop a function to convert kilometers to miles in Python.","input":"","expected_output":"def kms_to_miles(kms):\n  miles = kms \/ 1.609\n  return miles","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function to convert kilometers to miles in Python.\n\n### Input:\n\n\n### Output:\ndef kms_to_miles(kms):\n  miles = kms \/ 1.609\n  return miles","tok_input_length":60,"tok_output_length":22,"system_prompt":"","index":9041}
{"question":"Code a function in Python that takes an array as input and returns an array with the elements in reverse order.","input":"","expected_output":"def reverse_array(arr):\n    return arr[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a function in Python that takes an array as input and returns an array with the elements in reverse order.\n\n### Input:\n\n\n### Output:\ndef reverse_array(arr):\n    return arr[::-1]","tok_input_length":61,"tok_output_length":12,"system_prompt":"","index":8575}
{"question":"Create a Python program to print out the given string in all uppercase.","input":"\"This is a test string\"","expected_output":"string = \"This is a test string\"\n\nprint(string.upper())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out the given string in all uppercase.\n\n### Input:\n\"This is a test string\"\n\n### Output:\nstring = \"This is a test string\"\n\nprint(string.upper())","tok_input_length":61,"tok_output_length":14,"system_prompt":"","index":8314}
{"question":"Write a Python script to generate a random number between 0 and 9.","input":"","expected_output":"import random\n\nrandom_num = random.randint(0,9)\nprint(random_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a random number between 0 and 9.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_num = random.randint(0,9)\nprint(random_num)","tok_input_length":61,"tok_output_length":18,"system_prompt":"","index":300}
{"question":"Create a function to parse JSON input in Python.","input":"Not applicable","expected_output":"import json\n\ndef parse_json(input_string):\n    data = json.loads(input_string)\n    return data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to parse JSON input in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport json\n\ndef parse_json(input_string):\n    data = json.loads(input_string)\n    return data","tok_input_length":61,"tok_output_length":21,"system_prompt":"","index":15987}
{"question":"Identify a code segment's language from a given snippet.","input":"if a > b:\n    print(\"a is bigger\")\nelse:\n    print(\"b is bigger\")","expected_output":"Python","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify a code segment's language from a given snippet.\n\n### Input:\nif a > b:\n    print(\"a is bigger\")\nelse:\n    print(\"b is bigger\")\n\n### Output:\nPython","tok_input_length":62,"tok_output_length":2,"system_prompt":"","index":2065}
{"question":"Rewrite the following python code using a lambda expression","input":"def function_name(x): \n    return x * 2","expected_output":"function_name = lambda x: x * 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following python code using a lambda expression\n\n### Input:\ndef function_name(x): \n    return x * 2\n\n### Output:\nfunction_name = lambda x: x * 2","tok_input_length":62,"tok_output_length":11,"system_prompt":"","index":16950}
{"question":"Construct a SQL query to find all the authors whose book titles contain \"python\" in a given database.","input":"","expected_output":"SELECT author \nFROM books \nWHERE title LIKE '%python%';","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a SQL query to find all the authors whose book titles contain \"python\" in a given database.\n\n### Input:\n\n\n### Output:\nSELECT author \nFROM books \nWHERE title LIKE '%python%';","tok_input_length":62,"tok_output_length":14,"system_prompt":"","index":885}
{"question":"Create a Python program to print out the numbers in reverse order from 100 to 1.","input":"","expected_output":"for i in range (100,0,-1):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out the numbers in reverse order from 100 to 1.\n\n### Input:\n\n\n### Output:\nfor i in range (100,0,-1):\n    print(i)","tok_input_length":62,"tok_output_length":16,"system_prompt":"","index":18128}
{"question":"Create a Python program to print numbers from 1 to 10 in reverse order.","input":"","expected_output":"for i in range(10, 0, -1):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print numbers from 1 to 10 in reverse order.\n\n### Input:\n\n\n### Output:\nfor i in range(10, 0, -1):\n    print(i)","tok_input_length":62,"tok_output_length":18,"system_prompt":"","index":12076}
{"question":"Create a function in Python to display numbers from 1 to 10.","input":"","expected_output":"def display_nums():\n    for i in range(1, 11):\n        print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to display numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\ndef display_nums():\n    for i in range(1, 11):\n        print(i)","tok_input_length":62,"tok_output_length":20,"system_prompt":"","index":1170}
{"question":"Generate a Python program to delete an item from a given list","input":"","expected_output":"def delete_item(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to delete an item from a given list\n\n### Input:\n\n\n### Output:\ndef delete_item(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst","tok_input_length":62,"tok_output_length":22,"system_prompt":"","index":1871}
{"question":"Construct a while loop that executes 20 times in Python.","input":"","expected_output":"i = 0\n\nwhile i < 20:\n    # do something useful\n    i += 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a while loop that executes 20 times in Python.\n\n### Input:\n\n\n### Output:\ni = 0\n\nwhile i < 20:\n    # do something useful\n    i += 1","tok_input_length":62,"tok_output_length":23,"system_prompt":"","index":18207}
{"question":"Create a python program to convert the given time value to 24-hour time format.","input":"time = '08:45 PM'","expected_output":"time_24_hour = '20:45'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to convert the given time value to 24-hour time format.\n\n### Input:\ntime = '08:45 PM'\n\n### Output:\ntime_24_hour = '20:45'","tok_input_length":63,"tok_output_length":11,"system_prompt":"","index":4842}
{"question":"Create a Python program to print the numbers from 1 to 10 using a for loop.","input":"Not applicable","expected_output":"for i in range(1,11):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print the numbers from 1 to 10 using a for loop.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(1,11):\n    print(i)","tok_input_length":63,"tok_output_length":14,"system_prompt":"","index":5261}
{"question":"Compose a Python program to change all `a` characters to `A` in a string.","input":"","expected_output":"def change_a_to_A(s):\n  return s.replace('a','A')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to change all `a` characters to `A` in a string.\n\n### Input:\n\n\n### Output:\ndef change_a_to_A(s):\n  return s.replace('a','A')","tok_input_length":63,"tok_output_length":17,"system_prompt":"","index":7685}
{"question":"Write a code snippet to generate a random number from 1 to 10 in Python.","input":"","expected_output":"import random\n\ndef randNumber():\n    return random.randint(1, 10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to generate a random number from 1 to 10 in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef randNumber():\n    return random.randint(1, 10)","tok_input_length":63,"tok_output_length":18,"system_prompt":"","index":18468}
{"question":"Write a python code to check if an input string is a palindrome.","input":"","expected_output":"def is_palindrome(input_str):\n reversed_str = input_str[::-1]\n return input_str == reversed_str","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to check if an input string is a palindrome.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(input_str):\n reversed_str = input_str[::-1]\n return input_str == reversed_str","tok_input_length":63,"tok_output_length":22,"system_prompt":"","index":1784}
{"question":"Create an object in Python that stores a string of text.","input":"","expected_output":"my_string = \"This is a string of text\"\n\nmy_object = {\n    \"string\": my_string\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object in Python that stores a string of text.\n\n### Input:\n\n\n### Output:\nmy_string = \"This is a string of text\"\n\nmy_object = {\n    \"string\": my_string\n}","tok_input_length":63,"tok_output_length":24,"system_prompt":"","index":14381}
{"question":"Classify the following Python code as syntactically correct or incorrect","input":"def add():\n a=1\n    b=2\n    c=a+b\n    print(c)","expected_output":"incorrect","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify the following Python code as syntactically correct or incorrect\n\n### Input:\ndef add():\n a=1\n    b=2\n    c=a+b\n    print(c)\n\n### Output:\nincorrect","tok_input_length":64,"tok_output_length":2,"system_prompt":"","index":4341}
{"question":"Write a Python program to replace all occurrences of the word \"hello\" with \"hi\".","input":"This is a sentence with hello","expected_output":"updated_sentence = sentence.replace(\"hello\", \"hi\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to replace all occurrences of the word \"hello\" with \"hi\".\n\n### Input:\nThis is a sentence with hello\n\n### Output:\nupdated_sentence = sentence.replace(\"hello\", \"hi\")","tok_input_length":64,"tok_output_length":12,"system_prompt":"","index":15372}
{"question":"Write a Python program to extract the first 100 characters from a given string.","input":"This is a test string","expected_output":"def extract_first_100_chars(string):\n    return string[:100]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract the first 100 characters from a given string.\n\n### Input:\nThis is a test string\n\n### Output:\ndef extract_first_100_chars(string):\n    return string[:100]","tok_input_length":64,"tok_output_length":15,"system_prompt":"","index":16170}
{"question":"Create a python 3 script to generate a list of integers from 0 to 100.","input":"","expected_output":"list_of_integers = [x for x in range(0, 101)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python 3 script to generate a list of integers from 0 to 100.\n\n### Input:\n\n\n### Output:\nlist_of_integers = [x for x in range(0, 101)]","tok_input_length":64,"tok_output_length":18,"system_prompt":"","index":1738}
{"question":"Compose a Python program to generate a list of numbers from 1 to 50.","input":"","expected_output":"number_list = [i for i in range(1, 51)]\nprint(number_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to generate a list of numbers from 1 to 50.\n\n### Input:\n\n\n### Output:\nnumber_list = [i for i in range(1, 51)]\nprint(number_list)","tok_input_length":64,"tok_output_length":20,"system_prompt":"","index":13036}
{"question":"Can you write a Python code that can sort dictionaries based on the values","input":"","expected_output":"def sort_dict_by_values(dict):\n  return sorted(dict.items(), key=lambda kv: kv[1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a Python code that can sort dictionaries based on the values\n\n### Input:\n\n\n### Output:\ndef sort_dict_by_values(dict):\n  return sorted(dict.items(), key=lambda kv: kv[1])","tok_input_length":64,"tok_output_length":22,"system_prompt":"","index":15718}
{"question":"Use a Python program to print out the first five odd numbers.","input":"","expected_output":"for num in range(1,11):\n    if num % 2 != 0:\n        print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a Python program to print out the first five odd numbers.\n\n### Input:\n\n\n### Output:\nfor num in range(1,11):\n    if num % 2 != 0:\n        print(num)","tok_input_length":64,"tok_output_length":24,"system_prompt":"","index":8355}
{"question":"Edit the following Python code to sort a list of numbers in reversed order.","input":"numbers = [15, 2, 5, 12, 8]","expected_output":"numbers.sort(reverse=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to sort a list of numbers in reversed order.\n\n### Input:\nnumbers = [15, 2, 5, 12, 8]\n\n### Output:\nnumbers.sort(reverse=True)","tok_input_length":65,"tok_output_length":6,"system_prompt":"","index":2798}
{"question":"Create a new Python list containing the square of the values in the given list.","input":"[2, 4, 6]","expected_output":"new_list = [4, 16, 36]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new Python list containing the square of the values in the given list.\n\n### Input:\n[2, 4, 6]\n\n### Output:\nnew_list = [4, 16, 36]","tok_input_length":65,"tok_output_length":13,"system_prompt":"","index":4260}
{"question":"Provide a Python script that returns the number of words in a given sentence","input":"This is a test sentence","expected_output":"def word_count(sentence):\n    words = sentence.split()\n    return len(words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a Python script that returns the number of words in a given sentence\n\n### Input:\nThis is a test sentence\n\n### Output:\ndef word_count(sentence):\n    words = sentence.split()\n    return len(words)","tok_input_length":65,"tok_output_length":17,"system_prompt":"","index":13487}
{"question":"Generate a Python program to generate a random permutation of the integers in a given list","input":"","expected_output":"from random import shuffle \n\ndef random_permutation(lst): \n    shuffle(lst) \n    return lst","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a random permutation of the integers in a given list\n\n### Input:\n\n\n### Output:\nfrom random import shuffle \n\ndef random_permutation(lst): \n    shuffle(lst) \n    return lst","tok_input_length":65,"tok_output_length":21,"system_prompt":"","index":8647}
{"question":"Create a Python script that adds two numbers together and prints the result.","input":"","expected_output":"def add(a, b):\n    sum = a + b\n    print(sum)\n\nadd(5,7)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that adds two numbers together and prints the result.\n\n### Input:\n\n\n### Output:\ndef add(a, b):\n    sum = a + b\n    print(sum)\n\nadd(5,7)","tok_input_length":65,"tok_output_length":24,"system_prompt":"","index":223}
{"question":"Write a Python code to display the following output","input":"","expected_output":"print(\"*\" * 10)\nfor i in range(4):\n    print(\"*      *\")\nprint(\"*\" * 10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to display the following output\n\n### Input:\n\n\n### Output:\nprint(\"*\" * 10)\nfor i in range(4):\n    print(\"*      *\")\nprint(\"*\" * 10)","tok_input_length":65,"tok_output_length":28,"system_prompt":"","index":2174}
{"question":"Modify the the following python program so that it can be run in Python 3","input":"words = raw_input(\"Enter words:\")\nprint words","expected_output":"words = input(\"Enter words:\")\nprint(words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the the following python program so that it can be run in Python 3\n\n### Input:\nwords = raw_input(\"Enter words:\")\nprint words\n\n### Output:\nwords = input(\"Enter words:\")\nprint(words)","tok_input_length":66,"tok_output_length":11,"system_prompt":"","index":2148}
{"question":"Generate a Python program to transform the following string 'Welcome to GPT world!' into an all upper-case string.","input":"","expected_output":"my_string = \"Welcome to GPT world!\"\nprint(my_string.upper())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to transform the following string 'Welcome to GPT world!' into an all upper-case string.\n\n### Input:\n\n\n### Output:\nmy_string = \"Welcome to GPT world!\"\nprint(my_string.upper())","tok_input_length":66,"tok_output_length":16,"system_prompt":"","index":15325}
{"question":"Create a Python program to calculate the simple interest given the principal amount, rate of interest and time.","input":"","expected_output":"def simple_interest(p,r,t): \n  return (p * r * t)\/100","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the simple interest given the principal amount, rate of interest and time.\n\n### Input:\n\n\n### Output:\ndef simple_interest(p,r,t): \n  return (p * r * t)\/100","tok_input_length":66,"tok_output_length":19,"system_prompt":"","index":3919}
{"question":"Generate a python program that inputs a temperature in celsius and outputs the temperature in Fahrenheit","input":"","expected_output":"def celsius_to_fahrenheit(temp):\n    return temp * (9\/5) + 32","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that inputs a temperature in celsius and outputs the temperature in Fahrenheit\n\n### Input:\n\n\n### Output:\ndef celsius_to_fahrenheit(temp):\n    return temp * (9\/5) + 32","tok_input_length":66,"tok_output_length":21,"system_prompt":"","index":13592}
{"question":"Create an algorithm that checks if a given String is a valid identifier in Python.","input":"","expected_output":"def is_valid_identifier(string):\n  if string.isidentifier():\n    return True\n  else:\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm that checks if a given String is a valid identifier in Python.\n\n### Input:\n\n\n### Output:\ndef is_valid_identifier(string):\n  if string.isidentifier():\n    return True\n  else:\n    return False","tok_input_length":66,"tok_output_length":23,"system_prompt":"","index":3950}
{"question":"Generate a Python script that prints the numbers from 1 to 10.","input":"","expected_output":"# Print numbers 1 to 10\nfor num in range(1, 11):\n    print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that prints the numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\n# Print numbers 1 to 10\nfor num in range(1, 11):\n    print(num)","tok_input_length":66,"tok_output_length":24,"system_prompt":"","index":10896}
{"question":"Make a python program to check the palindrome of a given word","input":"","expected_output":"def palindrome(word): \n    if word == word[::-1]: \n        return True\n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a python program to check the palindrome of a given word\n\n### Input:\n\n\n### Output:\ndef palindrome(word): \n    if word == word[::-1]: \n        return True\n    else: \n        return False","tok_input_length":66,"tok_output_length":26,"system_prompt":"","index":17766}
{"question":"Create a for loop in python to print all the items in the given list.","input":"List = [1, 2, 3, 4]","expected_output":"for item in List:\n    print(item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for loop in python to print all the items in the given list.\n\n### Input:\nList = [1, 2, 3, 4]\n\n### Output:\nfor item in List:\n    print(item)","tok_input_length":67,"tok_output_length":10,"system_prompt":"","index":14444}
{"question":"Design a Python program to predict output given input","input":"Given two numbers x and y, predict the division output given x\/y.","expected_output":"def predict_divison_output(x, y):\n    return x \/ y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to predict output given input\n\n### Input:\nGiven two numbers x and y, predict the division output given x\/y.\n\n### Output:\ndef predict_divison_output(x, y):\n    return x \/ y","tok_input_length":67,"tok_output_length":15,"system_prompt":"","index":10350}
{"question":"Create a function in Python to print out all of the stuff in a given dictionary.","input":"Not applicable","expected_output":"def print_dict(dict):\n for key in dict:\n   print(key,\":\", dict[key])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to print out all of the stuff in a given dictionary.\n\n### Input:\nNot applicable\n\n### Output:\ndef print_dict(dict):\n for key in dict:\n   print(key,\":\", dict[key])","tok_input_length":67,"tok_output_length":20,"system_prompt":"","index":7834}
{"question":"Create a function in Python to generate a random matrix of size (m, n).","input":"","expected_output":"import numpy as np\n\ndef generateRandomMatrix(m, n):\n  return np.random.randn(m, n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to generate a random matrix of size (m, n).\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef generateRandomMatrix(m, n):\n  return np.random.randn(m, n)","tok_input_length":67,"tok_output_length":23,"system_prompt":"","index":10140}
{"question":"Create a simple Python program to sum the values of two variables.","input":"<input>","expected_output":"x = 5\ny = 4\n\ntotal = x + y\n\nprint(total) # Output: 9","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python program to sum the values of two variables.\n\n### Input:\n<input>\n\n### Output:\nx = 5\ny = 4\n\ntotal = x + y\n\nprint(total) # Output: 9","tok_input_length":67,"tok_output_length":25,"system_prompt":"","index":3828}
{"question":"Create a Python class \"Person\" with a name and age.","input":"","expected_output":"class Person(object):\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class \"Person\" with a name and age.\n\n### Input:\n\n\n### Output:\nclass Person(object):\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age","tok_input_length":67,"tok_output_length":27,"system_prompt":"","index":6344}
{"question":"Write a Python class for representing a tree node.","input":"","expected_output":"class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class for representing a tree node.\n\n### Input:\n\n\n### Output:\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None","tok_input_length":67,"tok_output_length":30,"system_prompt":"","index":3356}
{"question":"Rewrite the following Python code snippet to use list comprehension:\n\nitems = []\nfor item in range(10):\n items.append(item)","input":"Not applicable","expected_output":"items = [item for item in range(10)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python code snippet to use list comprehension:\n\nitems = []\nfor item in range(10):\n items.append(item)\n\n### Input:\nNot applicable\n\n### Output:\nitems = [item for item in range(10)]","tok_input_length":68,"tok_output_length":12,"system_prompt":"","index":8451}
{"question":"Write a Python function to detect geographical coordinates of a given address.","input":"Address: 1 Rockefeller Plaza, New York City, NY","expected_output":"(40.7588972, -73.9787129)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to detect geographical coordinates of a given address.\n\n### Input:\nAddress: 1 Rockefeller Plaza, New York City, NY\n\n### Output:\n(40.7588972, -73.9787129)","tok_input_length":68,"tok_output_length":15,"system_prompt":"","index":1094}
{"question":"Convert the following Python code to equivalent JavaScript code.","input":"def add_two_numbers(a, b):\n    return a + b","expected_output":"function add_two_numbers(a, b) {\n  return a + b;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Python code to equivalent JavaScript code.\n\n### Input:\ndef add_two_numbers(a, b):\n    return a + b\n\n### Output:\nfunction add_two_numbers(a, b) {\n  return a + b;\n}","tok_input_length":68,"tok_output_length":17,"system_prompt":"","index":15159}
{"question":"Write a Python program to create a list of powers of x for any given x.","input":"x = 2","expected_output":"def power_list(x):\n    return [x**i for i in range(16)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a list of powers of x for any given x.\n\n### Input:\nx = 2\n\n### Output:\ndef power_list(x):\n    return [x**i for i in range(16)]","tok_input_length":68,"tok_output_length":19,"system_prompt":"","index":9588}
{"question":"Create a Python program to remove all white-space from a given string.","input":"\"Hello World   \"","expected_output":"string = \"Hello World   \"\n\nno_space_string = string.replace(' ', '')\n\nprint(no_space_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to remove all white-space from a given string.\n\n### Input:\n\"Hello World   \"\n\n### Output:\nstring = \"Hello World   \"\n\nno_space_string = string.replace(' ', '')\n\nprint(no_space_string)","tok_input_length":68,"tok_output_length":22,"system_prompt":"","index":8294}
{"question":"Create a Python program to print out the following message and its variables.","input":"Name: John","expected_output":"name = \"John\"\n\nprint(\"Hello \" + name + \"!\")  # Outputs: \"Hello John!\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out the following message and its variables.\n\n### Input:\nName: John\n\n### Output:\nname = \"John\"\n\nprint(\"Hello \" + name + \"!\")  # Outputs: \"Hello John!\"","tok_input_length":68,"tok_output_length":23,"system_prompt":"","index":16136}
{"question":"Build a python program that reads in two strings and combines them into a single string.","input":"","expected_output":"def combine_strings(string1, string2):\n    combined_string = string1 + string2\n    return combined_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a python program that reads in two strings and combines them into a single string.\n\n### Input:\n\n\n### Output:\ndef combine_strings(string1, string2):\n    combined_string = string1 + string2\n    return combined_string","tok_input_length":68,"tok_output_length":24,"system_prompt":"","index":13958}
{"question":"Design an algorithm in Python to check if a number is divisible by three.","input":"","expected_output":"def is_divisible_by_three(num):\n  if num % 3 == 0:\n    return True\n  return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to check if a number is divisible by three.\n\n### Input:\n\n\n### Output:\ndef is_divisible_by_three(num):\n  if num % 3 == 0:\n    return True\n  return False","tok_input_length":68,"tok_output_length":26,"system_prompt":"","index":11131}
{"question":"Write a Python program to detect if a string contains any special characters.","input":"","expected_output":"def has_special_characters(string):\n    import re\n    return bool(re.search('[^a-zA-Z0-9]', string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect if a string contains any special characters.\n\n### Input:\n\n\n### Output:\ndef has_special_characters(string):\n    import re\n    return bool(re.search('[^a-zA-Z0-9]', string))","tok_input_length":68,"tok_output_length":27,"system_prompt":"","index":16628}
{"question":"Implement a code in Python for reversing a string.","input":"","expected_output":"def reverse_string(string):\n  reversed_string = \"\"\n  \n  for char in string:\n    reversed_string = char + reversed_string\n  \n  return reversed_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a code in Python for reversing a string.\n\n### Input:\n\n\n### Output:\ndef reverse_string(string):\n  reversed_string = \"\"\n  \n  for char in string:\n    reversed_string = char + reversed_string\n  \n  return reversed_string","tok_input_length":68,"tok_output_length":31,"system_prompt":"","index":16995}
{"question":"Create a Python program which takes a series of integers as input and returns the largest.","input":"ins = [1, 5, 8, 3]","expected_output":"def get_max(ins):\n    return max(ins)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes a series of integers as input and returns the largest.\n\n### Input:\nins = [1, 5, 8, 3]\n\n### Output:\ndef get_max(ins):\n    return max(ins)","tok_input_length":69,"tok_output_length":11,"system_prompt":"","index":8510}
{"question":"Develop a function in Python to randomly select one element from a given array.","input":"[1, 2, 3, 4]","expected_output":"import random\n\ndef randomElement(arr):\n    return random.choice(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to randomly select one element from a given array.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\nimport random\n\ndef randomElement(arr):\n    return random.choice(arr)","tok_input_length":69,"tok_output_length":15,"system_prompt":"","index":634}
{"question":"Write code in Python to generate all the possible permutations of a given list.","input":"list = [1,2,3]","expected_output":"import itertools\n\ndef permute(list):\n    return list(itertools.permutations(list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to generate all the possible permutations of a given list.\n\n### Input:\nlist = [1,2,3]\n\n### Output:\nimport itertools\n\ndef permute(list):\n    return list(itertools.permutations(list))","tok_input_length":69,"tok_output_length":18,"system_prompt":"","index":12483}
{"question":"Generate an array of random integers between 10-20 with a length of 50 using Python.","input":"","expected_output":"import random\n\nrandom_array = random.sample(range(10,20), 50)\nprint(random_array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an array of random integers between 10-20 with a length of 50 using Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_array = random.sample(range(10,20), 50)\nprint(random_array)","tok_input_length":69,"tok_output_length":22,"system_prompt":"","index":8578}
{"question":"Create a python script that evaluates a binary expression.","input":"Expr: 1 + 0","expected_output":"def evalBinaryExpr(expr): \n    return eval(expr) \n  \nprint(evalBinaryExpr(\"1 + 0\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that evaluates a binary expression.\n\n### Input:\nExpr: 1 + 0\n\n### Output:\ndef evalBinaryExpr(expr): \n    return eval(expr) \n  \nprint(evalBinaryExpr(\"1 + 0\"))","tok_input_length":69,"tok_output_length":24,"system_prompt":"","index":6134}
{"question":"Convert the following imperative statement into a Python function.","input":"Return the sum of two numbers.","expected_output":"def add_numbers(a, b):\n    '''This function will return the sum of two numbers'''\n    return a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following imperative statement into a Python function.\n\n### Input:\nReturn the sum of two numbers.\n\n### Output:\ndef add_numbers(a, b):\n    '''This function will return the sum of two numbers'''\n    return a + b","tok_input_length":69,"tok_output_length":25,"system_prompt":"","index":17202}
{"question":"Create a new Python class named \"Student\" with name and age as attributes.","input":"","expected_output":"class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new Python class named \"Student\" with name and age as attributes.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age","tok_input_length":69,"tok_output_length":26,"system_prompt":"","index":14836}
{"question":"Create a function in Python to print a random element from a list.","input":"","expected_output":"import random\n\ndef print_random_element(list):\n    index = random.randint(0, len(list)-1)\n    print(list[index])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to print a random element from a list.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef print_random_element(list):\n    index = random.randint(0, len(list)-1)\n    print(list[index])","tok_input_length":69,"tok_output_length":28,"system_prompt":"","index":14816}
{"question":"Define a function in Python to check if a number is even.","input":"","expected_output":"def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a function in Python to check if a number is even.\n\n### Input:\n\n\n### Output:\ndef is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False","tok_input_length":69,"tok_output_length":29,"system_prompt":"","index":10172}
{"question":"Using Python, create a program to print the following pattern.","input":"","expected_output":"for i in range(7):\n    print(\"*\" * i)\nfor i in reversed(range(7)):\n    print(\"*\" * i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a program to print the following pattern.\n\n### Input:\n\n\n### Output:\nfor i in range(7):\n    print(\"*\" * i)\nfor i in reversed(range(7)):\n    print(\"*\" * i)","tok_input_length":69,"tok_output_length":30,"system_prompt":"","index":15816}
{"question":"Given the following Python code, determine how many lines of code are in the code.","input":"def foo(x):\n    y = x\/2\n    z = x\/3\n    return x+y-z","expected_output":"4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following Python code, determine how many lines of code are in the code.\n\n### Input:\ndef foo(x):\n    y = x\/2\n    z = x\/3\n    return x+y-z\n\n### Output:\n4","tok_input_length":70,"tok_output_length":2,"system_prompt":"","index":879}
{"question":"Write a Python script to sort a given list in descending order.","input":"[5, 3, 2, 1, 4]","expected_output":"def sort_desc(lst): \n    return sorted(lst, reverse=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to sort a given list in descending order.\n\n### Input:\n[5, 3, 2, 1, 4]\n\n### Output:\ndef sort_desc(lst): \n    return sorted(lst, reverse=True)","tok_input_length":70,"tok_output_length":15,"system_prompt":"","index":7861}
{"question":"Develop a function to make an HTTP request using python and store the response into a variable.","input":"\"https:\/\/www.example.com\"","expected_output":"import requests\n\ndef http_request(url):\n    response = requests.get(url)\n    return response","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function to make an HTTP request using python and store the response into a variable.\n\n### Input:\n\"https:\/\/www.example.com\"\n\n### Output:\nimport requests\n\ndef http_request(url):\n    response = requests.get(url)\n    return response","tok_input_length":70,"tok_output_length":19,"system_prompt":"","index":4324}
{"question":"Write Python code to create an array of 10 numbers with random values between 1 and 100.","input":"","expected_output":"import random\n\narr = [random.randint(1, 100) for _ in range(10)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to create an array of 10 numbers with random values between 1 and 100.\n\n### Input:\n\n\n### Output:\nimport random\n\narr = [random.randint(1, 100) for _ in range(10)]","tok_input_length":70,"tok_output_length":22,"system_prompt":"","index":2349}
{"question":"Create a Python program to calculate the sum of all numbers between 1 and 50 inclusive.","input":"","expected_output":"total = 0\n\nfor i in range(1, 51):\n    total += i\n\nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the sum of all numbers between 1 and 50 inclusive.\n\n### Input:\n\n\n### Output:\ntotal = 0\n\nfor i in range(1, 51):\n    total += i\n\nprint(total)","tok_input_length":70,"tok_output_length":24,"system_prompt":"","index":3249}
{"question":"Design an algorithm to analyze text data and identify patterns.","input":"Text data to be analyzed.","expected_output":"A Python implementation of the algorithm that takes the text data as input, identifies patterns in the data, and produces meaningful results.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to analyze text data and identify patterns.\n\n### Input:\nText data to be analyzed.\n\n### Output:\nA Python implementation of the algorithm that takes the text data as input, identifies patterns in the data, and produces meaningful results.","tok_input_length":70,"tok_output_length":26,"system_prompt":"","index":3051}
{"question":"Generate a random 2D array in Python of size 10x7","input":"","expected_output":"import numpy as np\n\narray = np.random.randint(1, 10, size=(10, 7))\nprint(array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 2D array in Python of size 10x7\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\narray = np.random.randint(1, 10, size=(10, 7))\nprint(array)","tok_input_length":70,"tok_output_length":27,"system_prompt":"","index":1941}
{"question":"Program a function in Python that will recognize if a given number is even.","input":"","expected_output":"def is_even(num):\n\u00a0 \u00a0 if num % 2 == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 return True\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a function in Python that will recognize if a given number is even.\n\n### Input:\n\n\n### Output:\ndef is_even(num):\n\u00a0 \u00a0 if num % 2 == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 return True\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 return False","tok_input_length":70,"tok_output_length":28,"system_prompt":"","index":2120}
{"question":"Create a Python program that generates a factorial for a given number n.","input":"","expected_output":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that generates a factorial for a given number n.\n\n### Input:\n\n\n### Output:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)","tok_input_length":70,"tok_output_length":29,"system_prompt":"","index":7867}
{"question":"Write a Python script to generate a valid Checksum number.","input":"","expected_output":"def calculate_checksum (data):\n    checksum = 0\n    for char in data:\n        checksum += ord(char)\n    return checksum % 256","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a valid Checksum number.\n\n### Input:\n\n\n### Output:\ndef calculate_checksum (data):\n    checksum = 0\n    for char in data:\n        checksum += ord(char)\n    return checksum % 256","tok_input_length":70,"tok_output_length":31,"system_prompt":"","index":4389}
{"question":"Write a Python function to calculate factorial using recursion.","input":"","expected_output":"def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n*factorial(n-1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate factorial using recursion.\n\n### Input:\n\n\n### Output:\ndef factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n*factorial(n-1)","tok_input_length":70,"tok_output_length":33,"system_prompt":"","index":2903}
{"question":"Extract the 2nd and 3rd element from a given list in Python.","input":"list = [1, 2, 3, 4, 5]","expected_output":"new_list = list[1:3]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExtract the 2nd and 3rd element from a given list in Python.\n\n### Input:\nlist = [1, 2, 3, 4, 5]\n\n### Output:\nnew_list = list[1:3]","tok_input_length":71,"tok_output_length":10,"system_prompt":"","index":7423}
{"question":"Write a function in Python that takes in a string and returns true if it is a palindrome, and false otherwise.","input":"text = \"racecar\"","expected_output":"def is_palindrome(text):\n    return text == text[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in a string and returns true if it is a palindrome, and false otherwise.\n\n### Input:\ntext = \"racecar\"\n\n### Output:\ndef is_palindrome(text):\n    return text == text[::-1]","tok_input_length":71,"tok_output_length":15,"system_prompt":"","index":12052}
{"question":"Create a Python dictionary to store the number of occurrences of each character of the given string.","input":"String = \u201cabracadabra\u201d","expected_output":"str_dict = {i:list(str).count(i) for i in set(str)}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary to store the number of occurrences of each character of the given string.\n\n### Input:\nString = \u201cabracadabra\u201d\n\n### Output:\nstr_dict = {i:list(str).count(i) for i in set(str)}","tok_input_length":71,"tok_output_length":18,"system_prompt":"","index":9272}
{"question":"Create a program in Python that takes an integer n as input and prints out n lines of \"Hello World!\"","input":"5","expected_output":"def hello_world_lines(n):\n    for i in range(n):\n        print(\"Hello World!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes an integer n as input and prints out n lines of \"Hello World!\"\n\n### Input:\n5\n\n### Output:\ndef hello_world_lines(n):\n    for i in range(n):\n        print(\"Hello World!\")","tok_input_length":71,"tok_output_length":20,"system_prompt":"","index":880}
{"question":"Create a Python 3 function to calculate the length of a string.","input":"string = 'hello, world!'","expected_output":"def get_str_length(string):\n  return len(string)\n\nprint(get_str_length(string)) # outputs 13","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python 3 function to calculate the length of a string.\n\n### Input:\nstring = 'hello, world!'\n\n### Output:\ndef get_str_length(string):\n  return len(string)\n\nprint(get_str_length(string)) # outputs 13","tok_input_length":71,"tok_output_length":22,"system_prompt":"","index":16039}
{"question":"Create a Python module that provides a way to add two numbers and a way to subtract two numbers.","input":"","expected_output":"def add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that provides a way to add two numbers and a way to subtract two numbers.\n\n### Input:\n\n\n### Output:\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y","tok_input_length":71,"tok_output_length":24,"system_prompt":"","index":9269}
{"question":"Create a Python program that takes a string and replaces all spaces with underscores.","input":"Hello World","expected_output":"def replace_spaces(string):\n    return string.replace(' ', '_')\n\nstring = 'Hello World'\n\nprint(replace_spaces(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a string and replaces all spaces with underscores.\n\n### Input:\nHello World\n\n### Output:\ndef replace_spaces(string):\n    return string.replace(' ', '_')\n\nstring = 'Hello World'\n\nprint(replace_spaces(string))","tok_input_length":71,"tok_output_length":26,"system_prompt":"","index":7420}
{"question":"Write a Python function to sort the given list of tuples based on their second elements.","input":"","expected_output":"def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to sort the given list of tuples based on their second elements.\n\n### Input:\n\n\n### Output:\ndef sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order","tok_input_length":71,"tok_output_length":27,"system_prompt":"","index":16914}
{"question":"Write a python code to","input":"Extract the mean from a list of numbers.","expected_output":"def mean(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total \/ len(lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to\n\n### Input:\nExtract the mean from a list of numbers.\n\n### Output:\ndef mean(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total \/ len(lst)","tok_input_length":71,"tok_output_length":29,"system_prompt":"","index":17428}
{"question":"Create a function in Python to remove duplicate elements from a list.","input":"","expected_output":"def removeDuplicates(list):\n  newList = []\n  for element in list:\n    if element not in newList:\n      newList.append(element)\n  return newList","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to remove duplicate elements from a list.\n\n### Input:\n\n\n### Output:\ndef removeDuplicates(list):\n  newList = []\n  for element in list:\n    if element not in newList:\n      newList.append(element)\n  return newList","tok_input_length":71,"tok_output_length":31,"system_prompt":"","index":5978}
{"question":"Generate code to calculate factorial using a while loop in Python","input":"","expected_output":"def factorial(n):\n    fact = 1\n    while(n>0):\n        fact=fact*n\n        n=n-1\n    return fact","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to calculate factorial using a while loop in Python\n\n### Input:\n\n\n### Output:\ndef factorial(n):\n    fact = 1\n    while(n>0):\n        fact=fact*n\n        n=n-1\n    return fact","tok_input_length":71,"tok_output_length":32,"system_prompt":"","index":6614}
{"question":"Launch a web server in Docker using Python","input":"","expected_output":"FROM python:3\n\nWORKDIR \/app\n\nCOPY . \/app\n\nRUN pip install flask\n\nEXPOSE 5000\n\nCMD [\"python\", \"app.py\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nLaunch a web server in Docker using Python\n\n### Input:\n\n\n### Output:\nFROM python:3\n\nWORKDIR \/app\n\nCOPY . \/app\n\nRUN pip install flask\n\nEXPOSE 5000\n\nCMD [\"python\", \"app.py\"]","tok_input_length":71,"tok_output_length":35,"system_prompt":"","index":14652}
{"question":"Generate a lambda expression in Python that takes a list of numbers and returns the maximum value.","input":"[16, 25, 4, 12, 6]","expected_output":"max_value = lambda num_list: max(num_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a lambda expression in Python that takes a list of numbers and returns the maximum value.\n\n### Input:\n[16, 25, 4, 12, 6]\n\n### Output:\nmax_value = lambda num_list: max(num_list)","tok_input_length":72,"tok_output_length":12,"system_prompt":"","index":4395}
{"question":"Write a Python script to calculate the total marks by adding the marks of two subjects.","input":"subject1 = 78\nsubject2 = 85","expected_output":"total = subject1 + subject2\nprint(\"Total Marks:\", total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the total marks by adding the marks of two subjects.\n\n### Input:\nsubject1 = 78\nsubject2 = 85\n\n### Output:\ntotal = subject1 + subject2\nprint(\"Total Marks:\", total)","tok_input_length":72,"tok_output_length":16,"system_prompt":"","index":9700}
{"question":"Write a Python program that takes a URL and downloads the HTML page as a string.","input":"url = \"https:\/\/www.example.com\"","expected_output":"import requests\n\ndef get_html_page(url):\n response = requests.get(url)\n return response.text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a URL and downloads the HTML page as a string.\n\n### Input:\nurl = \"https:\/\/www.example.com\"\n\n### Output:\nimport requests\n\ndef get_html_page(url):\n response = requests.get(url)\n return response.text","tok_input_length":72,"tok_output_length":19,"system_prompt":"","index":11605}
{"question":"Write a Python program to create a 3x3x3 array (3D array) filled with zeros.","input":"","expected_output":"import numpy as np\narr = np.zeros((3, 3, 3))\nprint(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a 3x3x3 array (3D array) filled with zeros.\n\n### Input:\n\n\n### Output:\nimport numpy as np\narr = np.zeros((3, 3, 3))\nprint(arr)","tok_input_length":72,"tok_output_length":22,"system_prompt":"","index":12504}
{"question":"Write a Python function that the user can call to pseudorandomly shuffle a given list","input":"","expected_output":"import random \ndef shuffle_list(lst):\n    if len(lst) > 1:\n        random.shuffle(lst)\n    return lst","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that the user can call to pseudorandomly shuffle a given list\n\n### Input:\n\n\n### Output:\nimport random \ndef shuffle_list(lst):\n    if len(lst) > 1:\n        random.shuffle(lst)\n    return lst","tok_input_length":72,"tok_output_length":26,"system_prompt":"","index":4458}
{"question":"Construct a for loop in Python to calculate the sum of the first 10 even numbers.","input":"","expected_output":"total = 0\nfor x in range(2, 21, 2):\n    total += x\n    \nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop in Python to calculate the sum of the first 10 even numbers.\n\n### Input:\n\n\n### Output:\ntotal = 0\nfor x in range(2, 21, 2):\n    total += x\n    \nprint(total)","tok_input_length":72,"tok_output_length":27,"system_prompt":"","index":16650}
{"question":"Find the average of the numbers 10 and 15 in a python program.","input":"","expected_output":"def average(x, y):\n return (x + y) \/ 2\n\nresult = average(10, 15)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the average of the numbers 10 and 15 in a python program.\n\n### Input:\n\n\n### Output:\ndef average(x, y):\n return (x + y) \/ 2\n\nresult = average(10, 15)\nprint(result)","tok_input_length":72,"tok_output_length":29,"system_prompt":"","index":10909}
{"question":"Create a function in Python for calculating Factorial of a number (n!).","input":"","expected_output":"def factorial(n): \n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python for calculating Factorial of a number (n!).\n\n### Input:\n\n\n### Output:\ndef factorial(n): \n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)","tok_input_length":72,"tok_output_length":30,"system_prompt":"","index":10220}
{"question":"Create an array using Python containing the numbers 0 to 9.","input":"","expected_output":"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array using Python containing the numbers 0 to 9.\n\n### Input:\n\n\n### Output:\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","tok_input_length":72,"tok_output_length":31,"system_prompt":"","index":17632}
{"question":"Design a function in Python to calculate the average of given numbers.","input":"","expected_output":"def calculate_average(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total \/ len(numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to calculate the average of given numbers.\n\n### Input:\n\n\n### Output:\ndef calculate_average(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total \/ len(numbers)","tok_input_length":72,"tok_output_length":32,"system_prompt":"","index":18192}
{"question":"Edit the following code snippet in Python to remove the duplicates from a list.","input":"my_list = [1,2,2,3,4,5,5,5]","expected_output":"my_list = list(dict.fromkeys(my_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code snippet in Python to remove the duplicates from a list.\n\n### Input:\nmy_list = [1,2,2,3,4,5,5,5]\n\n### Output:\nmy_list = list(dict.fromkeys(my_list))","tok_input_length":73,"tok_output_length":11,"system_prompt":"","index":10164}
{"question":"Create a Python program to find the total number of elements in a stack.","input":"Stack: [1, 2, 3, 4, 5]","expected_output":"def findNumOfElements(stack): \n    return len(stack)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the total number of elements in a stack.\n\n### Input:\nStack: [1, 2, 3, 4, 5]\n\n### Output:\ndef findNumOfElements(stack): \n    return len(stack)","tok_input_length":73,"tok_output_length":14,"system_prompt":"","index":742}
{"question":"Modify the following Python code to print the length of a given string.","input":"string = \"Hello World!\"\n\ndef print_length(string):\n    print(string)","expected_output":"string = \"Hello World!\"\n\ndef print_length(string):\n    print(len(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to print the length of a given string.\n\n### Input:\nstring = \"Hello World!\"\n\ndef print_length(string):\n    print(string)\n\n### Output:\nstring = \"Hello World!\"\n\ndef print_length(string):\n    print(len(string))","tok_input_length":73,"tok_output_length":17,"system_prompt":"","index":7979}
{"question":"In Python, find the index of a character in a given string.","input":"string = \"Hello World\"\ncharacter = 'l'","expected_output":"string = \"Hello World\"\ncharacter = 'l'\n\nindex = string.index(character)\nprint(index)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, find the index of a character in a given string.\n\n### Input:\nstring = \"Hello World\"\ncharacter = 'l'\n\n### Output:\nstring = \"Hello World\"\ncharacter = 'l'\n\nindex = string.index(character)\nprint(index)","tok_input_length":73,"tok_output_length":21,"system_prompt":"","index":11590}
{"question":"Create a set of Python functions to manipulate strings: one to reverse a string and one to capitalize a string.","input":"","expected_output":"def reverseString(s): \n    return s[::-1] \n  \ndef capitalizeString(s):\n    return s.capitalize()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a set of Python functions to manipulate strings: one to reverse a string and one to capitalize a string.\n\n### Input:\n\n\n### Output:\ndef reverseString(s): \n    return s[::-1] \n  \ndef capitalizeString(s):\n    return s.capitalize()","tok_input_length":73,"tok_output_length":24,"system_prompt":"","index":8410}
{"question":"Port a Python code snippet to Java.","input":"def add(a, b):\n    return a + b","expected_output":"public class Add {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPort a Python code snippet to Java.\n\n### Input:\ndef add(a, b):\n    return a + b\n\n### Output:\npublic class Add {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}","tok_input_length":73,"tok_output_length":26,"system_prompt":"","index":10766}
{"question":"Write a Python program to convert a given string to its equivalent base-64 encoding.","input":"","expected_output":"def encode_base64(data): \n    b64 = base64.b64encode(data.encode(\"utf-8\")) \n    return b64","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given string to its equivalent base-64 encoding.\n\n### Input:\n\n\n### Output:\ndef encode_base64(data): \n    b64 = base64.b64encode(data.encode(\"utf-8\")) \n    return b64","tok_input_length":73,"tok_output_length":29,"system_prompt":"","index":17778}
{"question":"Evaluate a given mathematical expression using Python.","input":"2 + (3 * 5)","expected_output":"def eval_expr(expr):\n  return eval(expr)\n\nprint(eval_expr(\"2 + (3 * 5)\"))\n\n# Output\n# 17","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEvaluate a given mathematical expression using Python.\n\n### Input:\n2 + (3 * 5)\n\n### Output:\ndef eval_expr(expr):\n  return eval(expr)\n\nprint(eval_expr(\"2 + (3 * 5)\"))\n\n# Output\n# 17","tok_input_length":73,"tok_output_length":30,"system_prompt":"","index":17299}
{"question":"Calculate the greater of two numbers using Python.","input":"5, 7","expected_output":"if (5 > 7):\n    greater = 5\nelse:\n    greater = 7\n\nprint(\"The greater number is: \", greater)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the greater of two numbers using Python.\n\n### Input:\n5, 7\n\n### Output:\nif (5 > 7):\n    greater = 5\nelse:\n    greater = 7\n\nprint(\"The greater number is: \", greater)","tok_input_length":73,"tok_output_length":32,"system_prompt":"","index":10713}
{"question":"Write a Python program to print the following pattern in each row.","input":"","expected_output":"for i in range(1, 5):\n    for j in range(1, i+1):\n        print(i, end=\" \")\n    print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the following pattern in each row.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 5):\n    for j in range(1, i+1):\n        print(i, end=\" \")\n    print()","tok_input_length":73,"tok_output_length":33,"system_prompt":"","index":8081}
{"question":"Construct a for loop in Python to print all the values from a list of numbers.","input":"mylist = [1, 2, 3, 4, 5]","expected_output":"for x in mylist: \n  print(x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop in Python to print all the values from a list of numbers.\n\n### Input:\nmylist = [1, 2, 3, 4, 5]\n\n### Output:\nfor x in mylist: \n  print(x)","tok_input_length":74,"tok_output_length":12,"system_prompt":"","index":14116}
{"question":"Rewrite the given code in Python.","input":"int sum = 0\nfor (int i=0; i<n; i++)\n    sum += i;","expected_output":"sum = 0\nfor i in range(n):\n    sum += i","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the given code in Python.\n\n### Input:\nint sum = 0\nfor (int i=0; i<n; i++)\n    sum += i;\n\n### Output:\nsum = 0\nfor i in range(n):\n    sum += i","tok_input_length":74,"tok_output_length":16,"system_prompt":"","index":3706}
{"question":"Create a python function to parse a character-separated string","input":"Parse a string \"Harry,30,England\" using comma as separator","expected_output":"def parse_str(str, separator):\n    strList = str.split(separator) \n    return strList","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function to parse a character-separated string\n\n### Input:\nParse a string \"Harry,30,England\" using comma as separator\n\n### Output:\ndef parse_str(str, separator):\n    strList = str.split(separator) \n    return strList","tok_input_length":74,"tok_output_length":21,"system_prompt":"","index":9961}
{"question":"Write a Python program to evaluate a given string and return a Boolean value.","input":"String = \u201cThe sky is blue\u201d","expected_output":"def evaluate_string(string):\n if string == 'The sky is blue':\n  return True\n else:\n  return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to evaluate a given string and return a Boolean value.\n\n### Input:\nString = \u201cThe sky is blue\u201d\n\n### Output:\ndef evaluate_string(string):\n if string == 'The sky is blue':\n  return True\n else:\n  return False","tok_input_length":74,"tok_output_length":24,"system_prompt":"","index":1376}
{"question":"Design a Python program to convert all the characters of a string to upper case.","input":"This is a sample sentence.","expected_output":"def to_upper(s):\n    return s.upper()\n\nresult = to_upper(\"This is a sample sentence.\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to convert all the characters of a string to upper case.\n\n### Input:\nThis is a sample sentence.\n\n### Output:\ndef to_upper(s):\n    return s.upper()\n\nresult = to_upper(\"This is a sample sentence.\")\nprint(result)","tok_input_length":74,"tok_output_length":25,"system_prompt":"","index":11434}
{"question":"Create a Python program to decide whether a given string is a valid JSON or an invalid one.","input":"","expected_output":"import json\n\ndef is_valid_json(string):\n    try:\n        json.loads(string)\n        return True\n    except:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to decide whether a given string is a valid JSON or an invalid one.\n\n### Input:\n\n\n### Output:\nimport json\n\ndef is_valid_json(string):\n    try:\n        json.loads(string)\n        return True\n    except:\n        return False","tok_input_length":74,"tok_output_length":28,"system_prompt":"","index":2190}
{"question":"Create a Python program to generate 10 random numbers between 0 and 10.","input":"","expected_output":"import random\n\nrandom_numbers = []\n\nfor i in range(10):\n    random_numbers.append(random.randint(0,10))\n\nprint(random_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate 10 random numbers between 0 and 10.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_numbers = []\n\nfor i in range(10):\n    random_numbers.append(random.randint(0,10))\n\nprint(random_numbers)","tok_input_length":74,"tok_output_length":30,"system_prompt":"","index":3360}
{"question":"Design a program in Python to check whether an input number is a prime number.","input":"","expected_output":"def is_prime(n):\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to check whether an input number is a prime number.\n\n### Input:\n\n\n### Output:\ndef is_prime(n):\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True","tok_input_length":74,"tok_output_length":31,"system_prompt":"","index":12802}
{"question":"Create a program in Python to select the data from a list of items.","input":"","expected_output":"def select_data(my_list):\n    result = []\n    for item in my_list:\n        if item['selected']:\n            result.append(item)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to select the data from a list of items.\n\n### Input:\n\n\n### Output:\ndef select_data(my_list):\n    result = []\n    for item in my_list:\n        if item['selected']:\n            result.append(item)\n    return result","tok_input_length":74,"tok_output_length":32,"system_prompt":"","index":11747}
{"question":"Create a class to store the details of a person in Python.","input":"","expected_output":"class Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to store the details of a person in Python.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address","tok_input_length":74,"tok_output_length":34,"system_prompt":"","index":4140}
{"question":"Create a text classifier in Python using Naive Bayes.","input":"","expected_output":"from sklearn.naive_bayes import MultinomialNB \n\nclf = MultinomialNB(alpha=1.0)\nclf.fit(X_train, y_train)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text classifier in Python using Naive Bayes.\n\n### Input:\n\n\n### Output:\nfrom sklearn.naive_bayes import MultinomialNB \n\nclf = MultinomialNB(alpha=1.0)\nclf.fit(X_train, y_train)","tok_input_length":74,"tok_output_length":35,"system_prompt":"","index":17890}
{"question":"Construct a python snippet to list out the keys present in a dictionary.","input":"dictionary = {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}","expected_output":"for key in dictionary.keys():\n    print(key)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python snippet to list out the keys present in a dictionary.\n\n### Input:\ndictionary = {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}\n\n### Output:\nfor key in dictionary.keys():\n    print(key)","tok_input_length":75,"tok_output_length":11,"system_prompt":"","index":14830}
{"question":"Generate Python code that uses a list comprehension to take a given list of numbers and multiple each by 10.","input":"[1,2,3,4]","expected_output":"[x * 10 for x in [1,2,3,4]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code that uses a list comprehension to take a given list of numbers and multiple each by 10.\n\n### Input:\n[1,2,3,4]\n\n### Output:\n[x * 10 for x in [1,2,3,4]]","tok_input_length":75,"tok_output_length":17,"system_prompt":"","index":992}
{"question":"Modify the given code such that a python list of strings is created based on the input.","input":"lst = [1, 2, 3]","expected_output":"lst_strs = []\nfor i in lst:\n    lst_strs.append(str(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given code such that a python list of strings is created based on the input.\n\n### Input:\nlst = [1, 2, 3]\n\n### Output:\nlst_strs = []\nfor i in lst:\n    lst_strs.append(str(i))","tok_input_length":75,"tok_output_length":19,"system_prompt":"","index":15723}
{"question":"Construct a Python dictionary based on the following data","input":"keys = [\"car\", \"bike\"]\nvalues = [\"Ford\", \"Honda\"]","expected_output":"dict = {\n    \"car\" : \"Ford\", \n    \"bike\" : \"Honda\"\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python dictionary based on the following data\n\n### Input:\nkeys = [\"car\", \"bike\"]\nvalues = [\"Ford\", \"Honda\"]\n\n### Output:\ndict = {\n    \"car\" : \"Ford\", \n    \"bike\" : \"Honda\"\n}","tok_input_length":75,"tok_output_length":22,"system_prompt":"","index":17272}
{"question":"Write a Python script to calculate the sum of two numbers.","input":"num1 = 5\nnum2 = 10","expected_output":"num1 = 5\nnum2 = 10\ntotal = num1 + num2\n\nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the sum of two numbers.\n\n### Input:\nnum1 = 5\nnum2 = 10\n\n### Output:\nnum1 = 5\nnum2 = 10\ntotal = num1 + num2\n\nprint(total)","tok_input_length":75,"tok_output_length":24,"system_prompt":"","index":16424}
{"question":"Create a basic function in Python to extract the first digit from a number.","input":"Number: 2458","expected_output":"def firstDigit(num):\n\treturn int(str(num)[0])\n\nnum = 2458\nprint(firstDigit(num)) # 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic function in Python to extract the first digit from a number.\n\n### Input:\nNumber: 2458\n\n### Output:\ndef firstDigit(num):\n\treturn int(str(num)[0])\n\nnum = 2458\nprint(firstDigit(num)) # 2","tok_input_length":75,"tok_output_length":27,"system_prompt":"","index":1932}
{"question":"Write a python program to classify the source of an error.","input":"Error message: Connection timed out","expected_output":"def classify_error(message):\n    if 'Connection timed out' in message:\n        return 'Network'\n    else:\n        return 'Other'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify the source of an error.\n\n### Input:\nError message: Connection timed out\n\n### Output:\ndef classify_error(message):\n    if 'Connection timed out' in message:\n        return 'Network'\n    else:\n        return 'Other'","tok_input_length":75,"tok_output_length":29,"system_prompt":"","index":2625}
{"question":"Implement a solution in Python to convert the given number to its binary representation.","input":"155","expected_output":"def convertToBinary(x): \n    return bin(x).replace(\"0b\", \"\") \n\nx = 155\nprint(convertToBinary(x))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a solution in Python to convert the given number to its binary representation.\n\n### Input:\n155\n\n### Output:\ndef convertToBinary(x): \n    return bin(x).replace(\"0b\", \"\") \n\nx = 155\nprint(convertToBinary(x))","tok_input_length":75,"tok_output_length":31,"system_prompt":"","index":5705}
{"question":"Write a Python function to filter strings using a filter function as a parameter.","input":"","expected_output":"def filter_strings(strings, filter_function):\n    filtered = []\n    for string in strings:\n        if filter_function(string):\n            filtered.append(string)\n    return filtered","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to filter strings using a filter function as a parameter.\n\n### Input:\n\n\n### Output:\ndef filter_strings(strings, filter_function):\n    filtered = []\n    for string in strings:\n        if filter_function(string):\n            filtered.append(string)\n    return filtered","tok_input_length":75,"tok_output_length":33,"system_prompt":"","index":1221}
{"question":"Write a Python program to search for a given element in a list.","input":"","expected_output":"def search_element(element, list_):\n    for i in range(len(list_)):\n        if element == list_[i]:\n            return i\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search for a given element in a list.\n\n### Input:\n\n\n### Output:\ndef search_element(element, list_):\n    for i in range(len(list_)):\n        if element == list_[i]:\n            return i\n    return -1","tok_input_length":75,"tok_output_length":34,"system_prompt":"","index":12487}
{"question":"Implement a function for making web requests in Python.","input":"","expected_output":"import requests\n\ndef make_web_request(url):\n    '''This function makes an HTTP request to the given URL and returns the response.'''\n    response = requests.get(url)\n    return response.text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function for making web requests in Python.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef make_web_request(url):\n    '''This function makes an HTTP request to the given URL and returns the response.'''\n    response = requests.get(url)\n    return response.text","tok_input_length":75,"tok_output_length":38,"system_prompt":"","index":18348}
{"question":"Edit the following code snippet in Python to make it more efficient.\n\ni = 1\nwhile i <= 10:\n    print(i)\n    i += 1","input":"","expected_output":"for i in range(1, 11):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code snippet in Python to make it more efficient.\n\ni = 1\nwhile i <= 10:\n    print(i)\n    i += 1\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    print(i)","tok_input_length":76,"tok_output_length":15,"system_prompt":"","index":7852}
{"question":"Express the following task using Python code: Calculate the area of a triangle, given the base and height.","input":"base = 10\nheight = 8","expected_output":"def triangle_area(base, height):\n    return 0.5 * base * height","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExpress the following task using Python code: Calculate the area of a triangle, given the base and height.\n\n### Input:\nbase = 10\nheight = 8\n\n### Output:\ndef triangle_area(base, height):\n    return 0.5 * base * height","tok_input_length":76,"tok_output_length":18,"system_prompt":"","index":9008}
{"question":"Write a PYTHON program to find the profit or loss after selling a product.","input":"cost_price = 10\nselling_price = 15","expected_output":"def find_profit(cost_price, selling_price):\n    profit = selling_price - cost_price\n    return profit","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a PYTHON program to find the profit or loss after selling a product.\n\n### Input:\ncost_price = 10\nselling_price = 15\n\n### Output:\ndef find_profit(cost_price, selling_price):\n    profit = selling_price - cost_price\n    return profit","tok_input_length":76,"tok_output_length":22,"system_prompt":"","index":9545}
{"question":"Generate a function in Python that takes a list of numbers and returns the average value of all the numbers.","input":"Not applicable","expected_output":"def average(numbers):\n sum = 0\n for number in numbers:\n sum += number\n return sum \/ len(numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes a list of numbers and returns the average value of all the numbers.\n\n### Input:\nNot applicable\n\n### Output:\ndef average(numbers):\n sum = 0\n for number in numbers:\n sum += number\n return sum \/ len(numbers)","tok_input_length":76,"tok_output_length":25,"system_prompt":"","index":9168}
{"question":"Create a Python program to generate a random list of length 10 involving integers between 0 and 10.","input":"","expected_output":"import random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nprint(random_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random list of length 10 involving integers between 0 and 10.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nprint(random_list)","tok_input_length":76,"tok_output_length":27,"system_prompt":"","index":10117}
{"question":"In Python, code to present permutations of a certain list of strings \"AB\", \"CD\"","input":"","expected_output":"from itertools import permutations\n\nstrings = ['AB', 'CD']\n\nperm = permutations(strings)\n\nfor string in list(perm):\n    print(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, code to present permutations of a certain list of strings \"AB\", \"CD\"\n\n### Input:\n\n\n### Output:\nfrom itertools import permutations\n\nstrings = ['AB', 'CD']\n\nperm = permutations(strings)\n\nfor string in list(perm):\n    print(string)","tok_input_length":76,"tok_output_length":30,"system_prompt":"","index":8659}
{"question":"Create a generator function using Python to generate random numbers from 1 to 10.","input":"","expected_output":"import random\n\ndef random_number_generator():\n    return random.randint(1, 10)\n\nfor _ in range (10):\n    print(random_number_generator())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a generator function using Python to generate random numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_number_generator():\n    return random.randint(1, 10)\n\nfor _ in range (10):\n    print(random_number_generator())","tok_input_length":76,"tok_output_length":32,"system_prompt":"","index":10019}
{"question":"Generate a Python statement to find all prime numbers between 1 and 10.","input":"","expected_output":"lst = []\nfor num in range(1,11):\n   if all(num%i!=0 for i in range(2,num)):\n       lst.append(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python statement to find all prime numbers between 1 and 10.\n\n### Input:\n\n\n### Output:\nlst = []\nfor num in range(1,11):\n   if all(num%i!=0 for i in range(2,num)):\n       lst.append(num)","tok_input_length":76,"tok_output_length":33,"system_prompt":"","index":18067}
{"question":"Write a Python function to display the first and last elements of a list.","input":"","expected_output":"def display_first_last_elements(lst):\n    print(\"First element of the list:\", lst[0])\n    print(\"Last element of the list:\", lst[-1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to display the first and last elements of a list.\n\n### Input:\n\n\n### Output:\ndef display_first_last_elements(lst):\n    print(\"First element of the list:\", lst[0])\n    print(\"Last element of the list:\", lst[-1])","tok_input_length":76,"tok_output_length":34,"system_prompt":"","index":8876}
{"question":"Write a Python function to find the largest number in a given list.","input":"","expected_output":"def find_largest_number(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if number > largest:\n            largest = number\n\n    return largest","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the largest number in a given list.\n\n### Input:\n\n\n### Output:\ndef find_largest_number(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if number > largest:\n            largest = number\n\n    return largest","tok_input_length":76,"tok_output_length":35,"system_prompt":"","index":4356}
{"question":"Generate a Python program which creates an acronym for a given sentence.","input":"","expected_output":"def create_acronym(sentence):\n    acronym = ''\n    words = sentence.split(' ')\n    for word in words:\n        acronym += word[0].upper()\n    return acronym","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which creates an acronym for a given sentence.\n\n### Input:\n\n\n### Output:\ndef create_acronym(sentence):\n    acronym = ''\n    words = sentence.split(' ')\n    for word in words:\n        acronym += word[0].upper()\n    return acronym","tok_input_length":76,"tok_output_length":36,"system_prompt":"","index":10918}
{"question":"Generate a random string using Python.","input":"","expected_output":"import string\nimport random\n\ndef random_string(stringLength):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nprint(random_string(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random string using Python.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef random_string(stringLength):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nprint(random_string(10))","tok_input_length":76,"tok_output_length":42,"system_prompt":"","index":12257}
{"question":"Convert the following Java program to Python.","input":"public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}","expected_output":"# Program to print \"Hello, World!\"\n\nprint(\"Hello, World!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Java program to Python.\n\n### Input:\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n\n### Output:\n# Program to print \"Hello, World!\"\n\nprint(\"Hello, World!\")","tok_input_length":77,"tok_output_length":16,"system_prompt":"","index":12346}
{"question":"EDIT this Python function to print the number of characters in its argument.","input":"def print_length(text):\n    print(\"Length of text is \" + text.length())","expected_output":"def print_length(text):\n    print(\"Length of text is \" + str(len(text)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEDIT this Python function to print the number of characters in its argument.\n\n### Input:\ndef print_length(text):\n    print(\"Length of text is \" + text.length())\n\n### Output:\ndef print_length(text):\n    print(\"Length of text is \" + str(len(text)))","tok_input_length":77,"tok_output_length":19,"system_prompt":"","index":10983}
{"question":"Write a Python program that takes two strings and returns their combined length.","input":"word1 = \u2018Hello\u2019 \nword2 = \u2018world\u2019","expected_output":"def combine_string_lengths(word1, word2): \n  return len(word1) + len(word2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes two strings and returns their combined length.\n\n### Input:\nword1 = \u2018Hello\u2019 \nword2 = \u2018world\u2019\n\n### Output:\ndef combine_string_lengths(word1, word2): \n  return len(word1) + len(word2)","tok_input_length":77,"tok_output_length":23,"system_prompt":"","index":11446}
{"question":"Generate a Python list comprehension that creates a new list containing all the odd numbers between 0 and 10.","input":"Not applicable","expected_output":"odd_numbers = [x for x in range(0, 11) if x % 2 != 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python list comprehension that creates a new list containing all the odd numbers between 0 and 10.\n\n### Input:\nNot applicable\n\n### Output:\nodd_numbers = [x for x in range(0, 11) if x % 2 != 0]","tok_input_length":77,"tok_output_length":25,"system_prompt":"","index":16715}
{"question":"Design a Python script to print out a list of unique numbers from 0 to N.","input":"N = 10","expected_output":"numbers = [i for i in range(0, N+1)]\nunique_numbers = list(set(numbers))\n\nprint(unique_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to print out a list of unique numbers from 0 to N.\n\n### Input:\nN = 10\n\n### Output:\nnumbers = [i for i in range(0, N+1)]\nunique_numbers = list(set(numbers))\n\nprint(unique_numbers)","tok_input_length":77,"tok_output_length":27,"system_prompt":"","index":17240}
{"question":"Create a Python function to format a string with the proper case and punctuation","input":"string=\"hello, world\"","expected_output":"def format_string(string):\n    \"\"\"Function to format a string with the proper case and punctuation\"\"\"\n    return string.lower().capitalize() + \".\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to format a string with the proper case and punctuation\n\n### Input:\nstring=\"hello, world\"\n\n### Output:\ndef format_string(string):\n    \"\"\"Function to format a string with the proper case and punctuation\"\"\"\n    return string.lower().capitalize() + \".\"","tok_input_length":77,"tok_output_length":29,"system_prompt":"","index":1071}
{"question":"Convert this Python list to a JSON object.","input":"['Apple', 'Banana', 'Coconut']","expected_output":"import json\n\ninputList = ['Apple', 'Banana', 'Coconut']\njsonObj = json.dumps(inputList)\nprint(jsonObj)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this Python list to a JSON object.\n\n### Input:\n['Apple', 'Banana', 'Coconut']\n\n### Output:\nimport json\n\ninputList = ['Apple', 'Banana', 'Coconut']\njsonObj = json.dumps(inputList)\nprint(jsonObj)","tok_input_length":77,"tok_output_length":30,"system_prompt":"","index":14386}
{"question":"Create a function in Python that takes four parameters and returns the highest value.","input":"Not applicable","expected_output":"def get_highest(val1, val2, val3, val4):\n return max([val1, val2, val3, val4])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes four parameters and returns the highest value.\n\n### Input:\nNot applicable\n\n### Output:\ndef get_highest(val1, val2, val3, val4):\n return max([val1, val2, val3, val4])","tok_input_length":77,"tok_output_length":32,"system_prompt":"","index":6839}
{"question":"Which of the following options is the best way to declare a constant variable in Python?","input":"","expected_output":"The best way to declare a constant variable in Python is by using the `const` keyword. For example:\n\n```\nconst MAX_VAL = 100\n```","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhich of the following options is the best way to declare a constant variable in Python?\n\n### Input:\n\n\n### Output:\nThe best way to declare a constant variable in Python is by using the `const` keyword. For example:\n\n```\nconst MAX_VAL = 100\n```","tok_input_length":77,"tok_output_length":33,"system_prompt":"","index":17300}
{"question":"Write a Python function to check if a given list contains any duplicate elements.","input":"","expected_output":"def check_duplicates(A):\n    seen = set()\n    for elem in A:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check if a given list contains any duplicate elements.\n\n### Input:\n\n\n### Output:\ndef check_duplicates(A):\n    seen = set()\n    for elem in A:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False","tok_input_length":77,"tok_output_length":35,"system_prompt":"","index":712}
{"question":"Generate a Python program to compare two strings and return the largest string.","input":"","expected_output":"def largest_string(str1, str2): \n    if len(str1) >= len(str2): \n        return str1 \n    else: \n        return str2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to compare two strings and return the largest string.\n\n### Input:\n\n\n### Output:\ndef largest_string(str1, str2): \n    if len(str1) >= len(str2): \n        return str1 \n    else: \n        return str2","tok_input_length":77,"tok_output_length":36,"system_prompt":"","index":3702}
{"question":"Write a Python script to find the factorial of any given number.","input":"","expected_output":"def factorial(num):\n    result = 1\n    if num > 1:\n        for i in range(2,num+1):\n            result *= i\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the factorial of any given number.\n\n### Input:\n\n\n### Output:\ndef factorial(num):\n    result = 1\n    if num > 1:\n        for i in range(2,num+1):\n            result *= i\n    return result","tok_input_length":77,"tok_output_length":37,"system_prompt":"","index":9192}
{"question":"Create a Python script to scrape a given website.","input":"","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = '<your website url>'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Scraping code goes here....","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape a given website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = '<your website url>'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Scraping code goes here....","tok_input_length":77,"tok_output_length":40,"system_prompt":"","index":336}
{"question":"Write a Python program to replace all the occurences of a substring in a string with a new substring.","input":"String: This is a string\nOld substring: is\nNew substring: was","expected_output":"new_string = string.replace('is', 'was')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to replace all the occurences of a substring in a string with a new substring.\n\n### Input:\nString: This is a string\nOld substring: is\nNew substring: was\n\n### Output:\nnew_string = string.replace('is', 'was')","tok_input_length":78,"tok_output_length":12,"system_prompt":"","index":15969}
{"question":"Edit the following Python code so that it will run without any errors.","input":"print(\"Hello World\")\nif a == b\nprint(\"A is equal to B\")","expected_output":"print(\"Hello World\")\nif a == b:\n print(\"A is equal to B\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code so that it will run without any errors.\n\n### Input:\nprint(\"Hello World\")\nif a == b\nprint(\"A is equal to B\")\n\n### Output:\nprint(\"Hello World\")\nif a == b:\n print(\"A is equal to B\")","tok_input_length":78,"tok_output_length":19,"system_prompt":"","index":4540}
{"question":"Find the highest number in a list of numbers in Python.","input":"[7, 4, 5, 100, 2]","expected_output":"max_number = max([7, 4, 5, 100, 2])\nprint(max_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the highest number in a list of numbers in Python.\n\n### Input:\n[7, 4, 5, 100, 2]\n\n### Output:\nmax_number = max([7, 4, 5, 100, 2])\nprint(max_number)","tok_input_length":78,"tok_output_length":24,"system_prompt":"","index":2424}
{"question":"Create a Python program that takes a number and prints the product of that number and its next two values.","input":"num = 5","expected_output":"def product(num):\n\treturn num * (num + 1) * (num + 2)\n\nprint(product(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a number and prints the product of that number and its next two values.\n\n### Input:\nnum = 5\n\n### Output:\ndef product(num):\n\treturn num * (num + 1) * (num + 2)\n\nprint(product(num))","tok_input_length":78,"tok_output_length":25,"system_prompt":"","index":16889}
{"question":"Using Python, create a program to convert the string 'Hello, world!' to titlecase.","input":"\"Hello, world!\"","expected_output":"import string\n\ndef toTitlecase(inputString):\n    return inputString.title()\n\nprint(toTitlecase(\"Hello, world!\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a program to convert the string 'Hello, world!' to titlecase.\n\n### Input:\n\"Hello, world!\"\n\n### Output:\nimport string\n\ndef toTitlecase(inputString):\n    return inputString.title()\n\nprint(toTitlecase(\"Hello, world!\"))","tok_input_length":78,"tok_output_length":27,"system_prompt":"","index":15669}
{"question":"Using a while loop, create a Python program that prints the Fibonacci sequence from 0 to 100.","input":"","expected_output":"a, b = 0, 1\nwhile b <= 100:\n    print(b)\n    a, b = b, a+b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a while loop, create a Python program that prints the Fibonacci sequence from 0 to 100.\n\n### Input:\n\n\n### Output:\na, b = 0, 1\nwhile b <= 100:\n    print(b)\n    a, b = b, a+b","tok_input_length":78,"tok_output_length":30,"system_prompt":"","index":2009}
{"question":"Write a python method to identify whether the given string is a palindrome.","input":"String: \"racecar\"","expected_output":"def is_palindrome(s):\n  s = s.lower()\n  return s == s[::-1]\n\nprint(is_palindrome(\"racecar\")) # True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python method to identify whether the given string is a palindrome.\n\n### Input:\nString: \"racecar\"\n\n### Output:\ndef is_palindrome(s):\n  s = s.lower()\n  return s == s[::-1]\n\nprint(is_palindrome(\"racecar\")) # True","tok_input_length":78,"tok_output_length":31,"system_prompt":"","index":8005}
{"question":"Write a Python program to check if a provided string is valid JSON.","input":"\"<noinput>\"","expected_output":"def is_valid_json(s):\n    valid = True\n    try:\n        json.loads(s)\n    except ValueError:\n        valid = False\n    return valid","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if a provided string is valid JSON.\n\n### Input:\n\"<noinput>\"\n\n### Output:\ndef is_valid_json(s):\n    valid = True\n    try:\n        json.loads(s)\n    except ValueError:\n        valid = False\n    return valid","tok_input_length":78,"tok_output_length":32,"system_prompt":"","index":11258}
{"question":"Design an algorithm in Python to calculate the maximum of two numbers.","input":"10, 11","expected_output":"def max_of_two(a,b):\n    if a> b:\n        return a\n    else:\n        return b\n\nmax_of_two(10,11)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to calculate the maximum of two numbers.\n\n### Input:\n10, 11\n\n### Output:\ndef max_of_two(a,b):\n    if a> b:\n        return a\n    else:\n        return b\n\nmax_of_two(10,11)","tok_input_length":78,"tok_output_length":33,"system_prompt":"","index":15172}
{"question":"Generate a python program to read 10 numbers and store their sum in a variable.","input":"","expected_output":"sum = 0\n\nfor i in range(10):\n    num = int(input(\"Input number: \"))\n    sum += num\n\nprint(\"Sum:\", sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to read 10 numbers and store their sum in a variable.\n\n### Input:\n\n\n### Output:\nsum = 0\n\nfor i in range(10):\n    num = int(input(\"Input number: \"))\n    sum += num\n\nprint(\"Sum:\", sum)","tok_input_length":78,"tok_output_length":34,"system_prompt":"","index":12472}
{"question":"Develop a Python script to convert Numbers to binary","input":"Number = 7","expected_output":"def toBinary(num):\n    if num > 1:\n        toBinary(num \/\/ 2)\n    print(num % 2, end = '')\n\ntoBinary(7)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to convert Numbers to binary\n\n### Input:\nNumber = 7\n\n### Output:\ndef toBinary(num):\n    if num > 1:\n        toBinary(num \/\/ 2)\n    print(num % 2, end = '')\n\ntoBinary(7)","tok_input_length":78,"tok_output_length":36,"system_prompt":"","index":18200}
{"question":"Develop a class in Python that tracks the number of objects created.","input":"","expected_output":"class Counter:\n    count = 0\n\n    def __init__(self):\n        Counter.count += 1\n    \n    @classmethod\n    def get_count(cls):\n        return cls.count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class in Python that tracks the number of objects created.\n\n### Input:\n\n\n### Output:\nclass Counter:\n    count = 0\n\n    def __init__(self):\n        Counter.count += 1\n    \n    @classmethod\n    def get_count(cls):\n        return cls.count","tok_input_length":78,"tok_output_length":38,"system_prompt":"","index":6681}
{"question":"Generate a python algorithm to swap two elements in an array","input":"","expected_output":"def swap_array(arr, pos_1, pos_2):\n    arr[pos_1], arr[pos_2] = arr[pos_2], arr[pos_1]\n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python algorithm to swap two elements in an array\n\n### Input:\n\n\n### Output:\ndef swap_array(arr, pos_1, pos_2):\n    arr[pos_1], arr[pos_2] = arr[pos_2], arr[pos_1]\n    return arr","tok_input_length":78,"tok_output_length":39,"system_prompt":"","index":15070}
{"question":"Create a Python program that validates the date format.","input":"","expected_output":"def validate_date(date):\n  # check if input format is valid\n  try:\n    datetime.strptime(date, '%d\/%m\/%Y')\n    return True\n  except ValueError:\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that validates the date format.\n\n### Input:\n\n\n### Output:\ndef validate_date(date):\n  # check if input format is valid\n  try:\n    datetime.strptime(date, '%d\/%m\/%Y')\n    return True\n  except ValueError:\n    return False","tok_input_length":78,"tok_output_length":41,"system_prompt":"","index":6264}
{"question":"Design a function in Python that takes in two parameters, x and y, and returns the sum of squares of those parameters (x^2 + y^2).","input":"","expected_output":"def sum_of_squares(x, y):\n  return x**2 + y**2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes in two parameters, x and y, and returns the sum of squares of those parameters (x^2 + y^2).\n\n### Input:\n\n\n### Output:\ndef sum_of_squares(x, y):\n  return x**2 + y**2","tok_input_length":79,"tok_output_length":19,"system_prompt":"","index":3559}
{"question":"Write a python program to reverses a list while preserving the order of the elements","input":"lst = [1,2,3,4,5]","expected_output":"lst.reverse()\nprint(lst)  #output: [5,4,3,2,1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to reverses a list while preserving the order of the elements\n\n### Input:\nlst = [1,2,3,4,5]\n\n### Output:\nlst.reverse()\nprint(lst)  #output: [5,4,3,2,1]","tok_input_length":79,"tok_output_length":22,"system_prompt":"","index":2852}
{"question":"Optimize the following Python code for adding two numbers","input":"a = 3\nb = 4\nc = a + b","expected_output":"def addTwoNum(a, b):\n return a + b\n\nc = addTwoNum(3, 4)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code for adding two numbers\n\n### Input:\na = 3\nb = 4\nc = a + b\n\n### Output:\ndef addTwoNum(a, b):\n return a + b\n\nc = addTwoNum(3, 4)","tok_input_length":79,"tok_output_length":25,"system_prompt":"","index":13614}
{"question":"Edit this Python code to execute the following tasks:","input":"for i in range(1, 11):\n    print(i)","expected_output":"for i in range(1, 11):\n    print(str(i) + \" squared is \" + str(i ** 2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python code to execute the following tasks:\n\n### Input:\nfor i in range(1, 11):\n    print(i)\n\n### Output:\nfor i in range(1, 11):\n    print(str(i) + \" squared is \" + str(i ** 2))","tok_input_length":79,"tok_output_length":28,"system_prompt":"","index":1242}
{"question":"Create a python program that calculates the maximum of three numbers.","input":"Numbers: 5, 8, 3","expected_output":"def max_three(a, b, c):\n    m = max(a, b)\n    m = max(m, c)\n    return m","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that calculates the maximum of three numbers.\n\n### Input:\nNumbers: 5, 8, 3\n\n### Output:\ndef max_three(a, b, c):\n    m = max(a, b)\n    m = max(m, c)\n    return m","tok_input_length":79,"tok_output_length":29,"system_prompt":"","index":12348}
{"question":"Create a python function that takes two integers as parameters, and return the greater of the two numbers.","input":"","expected_output":"def greater_of_two_numbers(int1, int2):\n    if int1 > int2:\n        return int1\n    else:\n        return int2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that takes two integers as parameters, and return the greater of the two numbers.\n\n### Input:\n\n\n### Output:\ndef greater_of_two_numbers(int1, int2):\n    if int1 > int2:\n        return int1\n    else:\n        return int2","tok_input_length":79,"tok_output_length":32,"system_prompt":"","index":1909}
{"question":"Create a python program that prints \"Hello World\" if the user inputs the letter 'y'","input":"","expected_output":"user_input = input(\"Do you want to print 'Hello World'? (y\/n): \")\n\nif user_input == 'y':\n    print(\"Hello World\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that prints \"Hello World\" if the user inputs the letter 'y'\n\n### Input:\n\n\n### Output:\nuser_input = input(\"Do you want to print 'Hello World'? (y\/n): \")\n\nif user_input == 'y':\n    print(\"Hello World\")","tok_input_length":79,"tok_output_length":33,"system_prompt":"","index":14869}
{"question":"Create a program in Python to capitalize the first letter of a given string.","input":"hello world","expected_output":"def capitalize_first_letter(text):\n  return text[0].upper() + text[1:]\n\nprint(capitalize_first_letter(\"hello world\")) # Output: Hello world","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to capitalize the first letter of a given string.\n\n### Input:\nhello world\n\n### Output:\ndef capitalize_first_letter(text):\n  return text[0].upper() + text[1:]\n\nprint(capitalize_first_letter(\"hello world\")) # Output: Hello world","tok_input_length":79,"tok_output_length":34,"system_prompt":"","index":13484}
{"question":"Generate a python script for creating a list containing the first 20 square numbers","input":"","expected_output":"sq_list = []\nn = 1\nwhile len(sq_list) <= 19:\n    sq_list.append(n*n)\n    n += 1\nprint(sq_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script for creating a list containing the first 20 square numbers\n\n### Input:\n\n\n### Output:\nsq_list = []\nn = 1\nwhile len(sq_list) <= 19:\n    sq_list.append(n*n)\n    n += 1\nprint(sq_list)","tok_input_length":79,"tok_output_length":36,"system_prompt":"","index":10690}
{"question":"Create a Python program to reverse the character order in a given string.","input":"","expected_output":"def reverse_string(s):\n reversed_string = ''.join(reversed(s))\n return reversed_string\n\nstring = 'Hello World!'\nreversed_string = reverse_string(string)\nprint(reversed_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to reverse the character order in a given string.\n\n### Input:\n\n\n### Output:\ndef reverse_string(s):\n reversed_string = ''.join(reversed(s))\n return reversed_string\n\nstring = 'Hello World!'\nreversed_string = reverse_string(string)\nprint(reversed_string)","tok_input_length":79,"tok_output_length":38,"system_prompt":"","index":9304}
{"question":"Generate a correct Python program that implements a depth-first search algorithm.","input":"","expected_output":"def dfs(graph, node, visited):\n    if node not in visited:\n        visited.append(node)\n        for n in graph[node]:\n            dfs(graph, n, visited)\n    return visited","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct Python program that implements a depth-first search algorithm.\n\n### Input:\n\n\n### Output:\ndef dfs(graph, node, visited):\n    if node not in visited:\n        visited.append(node)\n        for n in graph[node]:\n            dfs(graph, n, visited)\n    return visited","tok_input_length":79,"tok_output_length":39,"system_prompt":"","index":16171}
{"question":"Create a Python program to reverse a string.","input":"Hello","expected_output":"def reverse_string(string):\n    reversed_string = \"\"\n    for c in string:\n        reversed_string = c + reversed_string\n    return reversed_string\n\nstring = \"Hello\"\nprint(reverse_string(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to reverse a string.\n\n### Input:\nHello\n\n### Output:\ndef reverse_string(string):\n    reversed_string = \"\"\n    for c in string:\n        reversed_string = c + reversed_string\n    return reversed_string\n\nstring = \"Hello\"\nprint(reverse_string(string))","tok_input_length":79,"tok_output_length":41,"system_prompt":"","index":16481}
{"question":"Using the given lists, create a Python dictionary that contains the expected output.","input":"key_list = ['a', 'b', 'c']\nvalue_list = [1, 2, 3]","expected_output":"dictionary = dict(zip(key_list, value_list))\nprint(dictionary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given lists, create a Python dictionary that contains the expected output.\n\n### Input:\nkey_list = ['a', 'b', 'c']\nvalue_list = [1, 2, 3]\n\n### Output:\ndictionary = dict(zip(key_list, value_list))\nprint(dictionary)","tok_input_length":80,"tok_output_length":14,"system_prompt":"","index":12696}
{"question":"Create a class in Python with a method to sort the given array in an ascending order.","input":"[3, 2, 5, 1, 4]","expected_output":"class Sort: \n    def sort_arr(self, arr):\n        arr.sort()\n        return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python with a method to sort the given array in an ascending order.\n\n### Input:\n[3, 2, 5, 1, 4]\n\n### Output:\nclass Sort: \n    def sort_arr(self, arr):\n        arr.sort()\n        return arr","tok_input_length":80,"tok_output_length":20,"system_prompt":"","index":17514}
{"question":"Create a custom function in python to compute the total cost of an item.","input":"price=200\nquantity=4\nshipping=20\ntax=8","expected_output":"def compute_total_cost(price, quantity, shipping, tax):\n    return price * quantity + shipping + tax","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a custom function in python to compute the total cost of an item.\n\n### Input:\nprice=200\nquantity=4\nshipping=20\ntax=8\n\n### Output:\ndef compute_total_cost(price, quantity, shipping, tax):\n    return price * quantity + shipping + tax","tok_input_length":80,"tok_output_length":22,"system_prompt":"","index":6262}
{"question":"Create a Python program that takes a 3-word string and prints individual words in the same order on separate lines.","input":"Hooray! Great!","expected_output":"sentence = \"Hooray! Great!\"\nwords = sentence.split(' ')\nfor word in words:\n print(word)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a 3-word string and prints individual words in the same order on separate lines.\n\n### Input:\nHooray! Great!\n\n### Output:\nsentence = \"Hooray! Great!\"\nwords = sentence.split(' ')\nfor word in words:\n print(word)","tok_input_length":80,"tok_output_length":24,"system_prompt":"","index":8264}
{"question":"Given a string, write a Python program to check if the characters in the string form a palindrome.","input":"string = \"racecar\"","expected_output":"def is_palindrome(string):\n return string == string[::-1]\n \nresult = is_palindrome(string)\nprint(result) # True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, write a Python program to check if the characters in the string form a palindrome.\n\n### Input:\nstring = \"racecar\"\n\n### Output:\ndef is_palindrome(string):\n return string == string[::-1]\n \nresult = is_palindrome(string)\nprint(result) # True","tok_input_length":80,"tok_output_length":27,"system_prompt":"","index":16012}
{"question":"Generate a Python function to create an n-by-n matrix where the element at row i and column j is i*j","input":"","expected_output":"def create_matrix(n): \n    matrix = [[i * j for j in range(n)] for i in range(n)]\n    return matrix","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to create an n-by-n matrix where the element at row i and column j is i*j\n\n### Input:\n\n\n### Output:\ndef create_matrix(n): \n    matrix = [[i * j for j in range(n)] for i in range(n)]\n    return matrix","tok_input_length":80,"tok_output_length":29,"system_prompt":"","index":5574}
{"question":"Write a Python program to print even numbers from 0 to the number provided","input":"N = 30","expected_output":"def print_even_numbers(N):\n    for x in range(0, N+1):\n        if x%2 == 0:\n            print(x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print even numbers from 0 to the number provided\n\n### Input:\nN = 30\n\n### Output:\ndef print_even_numbers(N):\n    for x in range(0, N+1):\n        if x%2 == 0:\n            print(x)","tok_input_length":80,"tok_output_length":32,"system_prompt":"","index":11891}
{"question":"Define a python class to represent an employee with the following attributes: name, age and salary.","input":"","expected_output":"class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a python class to represent an employee with the following attributes: name, age and salary.\n\n### Input:\n\n\n### Output:\nclass Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary","tok_input_length":80,"tok_output_length":34,"system_prompt":"","index":7903}
{"question":"Design a Python program which takes a list of strings and prints the elements in reversed order.","input":"","expected_output":"def list_reverse(sequence):\n    if len(sequence) == 0:\n        return []\n    else:\n        return list_reverse(sequence[1:]) + [sequence[0]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program which takes a list of strings and prints the elements in reversed order.\n\n### Input:\n\n\n### Output:\ndef list_reverse(sequence):\n    if len(sequence) == 0:\n        return []\n    else:\n        return list_reverse(sequence[1:]) + [sequence[0]]","tok_input_length":80,"tok_output_length":35,"system_prompt":"","index":9620}
{"question":"Generate a Python function that takes two integer arguments and returns the greatest of them.","input":"","expected_output":"def greatest_of_two_integers(x, y):\n    if x > y:\n        return x\n    elif y > x:\n        return y\n    else:\n        return x","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes two integer arguments and returns the greatest of them.\n\n### Input:\n\n\n### Output:\ndef greatest_of_two_integers(x, y):\n    if x > y:\n        return x\n    elif y > x:\n        return y\n    else:\n        return x","tok_input_length":80,"tok_output_length":37,"system_prompt":"","index":2036}
{"question":"Design a Python script for querying and visualizing geospatial data.","input":"","expected_output":"The script should accept a search query as an input and query a geospatial database. The output should be a visual representation of the data, such as a map, heatmap or chart.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script for querying and visualizing geospatial data.\n\n### Input:\n\n\n### Output:\nThe script should accept a search query as an input and query a geospatial database. The output should be a visual representation of the data, such as a map, heatmap or chart.","tok_input_length":80,"tok_output_length":39,"system_prompt":"","index":6328}
{"question":"Think of a data structure and implement it using Python.","input":"","expected_output":"class Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, element):\n        self.queue.append(element)\n\n    def dequeue(self):\n        return self.queue.pop(0)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThink of a data structure and implement it using Python.\n\n### Input:\n\n\n### Output:\nclass Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, element):\n        self.queue.append(element)\n\n    def dequeue(self):\n        return self.queue.pop(0)","tok_input_length":80,"tok_output_length":42,"system_prompt":"","index":8307}
{"question":"Edit the following Python code to find all records in the table where the age is greater than 18.","input":"data = cursor.execute(f\"SELECT * FROM users WHERE age > {age}\")","expected_output":"data = cursor.execute(f\"SELECT * FROM users WHERE age > 18\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to find all records in the table where the age is greater than 18.\n\n### Input:\ndata = cursor.execute(f\"SELECT * FROM users WHERE age > {age}\")\n\n### Output:\ndata = cursor.execute(f\"SELECT * FROM users WHERE age > 18\")","tok_input_length":81,"tok_output_length":17,"system_prompt":"","index":10055}
{"question":"Edit the following Python script to randomly select 10 numbers between 10 and 20, store them in the list lst, and print them out.","input":"lst = []","expected_output":"import random\nlst = random.sample(range(10, 21), 10)\nprint(lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python script to randomly select 10 numbers between 10 and 20, store them in the list lst, and print them out.\n\n### Input:\nlst = []\n\n### Output:\nimport random\nlst = random.sample(range(10, 21), 10)\nprint(lst)","tok_input_length":81,"tok_output_length":21,"system_prompt":"","index":16890}
{"question":"Create a Python script to print out each word that begins with a vowel in a sentence.","input":"Sentence: The quick brown fox jumped over the lazy dog","expected_output":"for word in sentence.split():\n    if word[0].lower() in 'aeiou':\n        print(word)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print out each word that begins with a vowel in a sentence.\n\n### Input:\nSentence: The quick brown fox jumped over the lazy dog\n\n### Output:\nfor word in sentence.split():\n    if word[0].lower() in 'aeiou':\n        print(word)","tok_input_length":81,"tok_output_length":24,"system_prompt":"","index":16731}
{"question":"Create an Elasticsearch algorithm to search for documents based on specific criteria.","input":"Search for documents containing the term 'Python' in the body field.","expected_output":"GET products\/_search\n{\n \"query\": {\n  \"term\": {\n   \"body\": \"Python\"\n  }\n }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an Elasticsearch algorithm to search for documents based on specific criteria.\n\n### Input:\nSearch for documents containing the term 'Python' in the body field.\n\n### Output:\nGET products\/_search\n{\n \"query\": {\n  \"term\": {\n   \"body\": \"Python\"\n  }\n }\n}","tok_input_length":81,"tok_output_length":27,"system_prompt":"","index":8814}
{"question":"Suppose you have to make an API call to a server to fetch information, write a short Python program to do it.","input":"","expected_output":"import requests\n\nurl = \"http:\/\/example.com\/api\/fetch\"\n\nresponse = requests.get(url)\ndata = response.json()\n\n#Process data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuppose you have to make an API call to a server to fetch information, write a short Python program to do it.\n\n### Input:\n\n\n### Output:\nimport requests\n\nurl = \"http:\/\/example.com\/api\/fetch\"\n\nresponse = requests.get(url)\ndata = response.json()\n\n#Process data","tok_input_length":81,"tok_output_length":29,"system_prompt":"","index":6244}
{"question":"Create a function in Python that takes two strings as input and returns their concatenated string.","input":"\"Hello\", \"World\"","expected_output":"def concat_strings(str1, str2):\n  return str1 + str2\n\nresult = concat_strings(\"Hello\", \"World\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two strings as input and returns their concatenated string.\n\n### Input:\n\"Hello\", \"World\"\n\n### Output:\ndef concat_strings(str1, str2):\n  return str1 + str2\n\nresult = concat_strings(\"Hello\", \"World\")\nprint(result)","tok_input_length":81,"tok_output_length":31,"system_prompt":"","index":12466}
{"question":"Edit the following Python code to include a while loop:","input":"a = 0\nb = 0","expected_output":"a = 0\nb = 0\n\nwhile a < 10:\n    a += 1\n    b = b + a\n\nprint(b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to include a while loop:\n\n### Input:\na = 0\nb = 0\n\n### Output:\na = 0\nb = 0\n\nwhile a < 10:\n    a += 1\n    b = b + a\n\nprint(b)","tok_input_length":81,"tok_output_length":33,"system_prompt":"","index":5945}
{"question":"Generate a python class which has two methods to convert a number to string and vice-versa.","input":"","expected_output":"class NumStringConverter:\n    def int_to_str(self, number):\n        return str(number)\n    \n    def str_to_int(self, string):\n        return int(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python class which has two methods to convert a number to string and vice-versa.\n\n### Input:\n\n\n### Output:\nclass NumStringConverter:\n    def int_to_str(self, number):\n        return str(number)\n    \n    def str_to_int(self, string):\n        return int(string)","tok_input_length":81,"tok_output_length":35,"system_prompt":"","index":6088}
{"question":"Create a Python program that uses a loop to produce the following output.","input":"Not applicable","expected_output":"for i in range(1,11):\n if i % 2 == 0:\n print('{} is even'.format(i))\n else:\n print('{} is odd'.format(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses a loop to produce the following output.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(1,11):\n if i % 2 == 0:\n print('{} is even'.format(i))\n else:\n print('{} is odd'.format(i))","tok_input_length":81,"tok_output_length":37,"system_prompt":"","index":12745}
{"question":"Produce an actionable item for the following task.","input":"Create a web application","expected_output":"Create a web application using HTML, CSS, and JavaScript. Design the interface and develop the functionality of the application. Implement backend features using a server-side language such as Python or Node.js.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce an actionable item for the following task.\n\n### Input:\nCreate a web application\n\n### Output:\nCreate a web application using HTML, CSS, and JavaScript. Design the interface and develop the functionality of the application. Implement backend features using a server-side language such as Python or Node.js.","tok_input_length":81,"tok_output_length":39,"system_prompt":"","index":5285}
{"question":"Compile a function to calculate the difference of two date objects in Python.","input":"","expected_output":"import datetime\n\ndef date_diff(date1, date2):\n    \"\"\"Returns the difference between two date objects in days\"\"\"\n    diff_date = date2 - date1\n    return diff_date.days","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompile a function to calculate the difference of two date objects in Python.\n\n### Input:\n\n\n### Output:\nimport datetime\n\ndef date_diff(date1, date2):\n    \"\"\"Returns the difference between two date objects in days\"\"\"\n    diff_date = date2 - date1\n    return diff_date.days","tok_input_length":81,"tok_output_length":40,"system_prompt":"","index":859}
{"question":"Generate an efficient Python program to reverse a string.","input":"Hello","expected_output":"def reverseString(inputString): \n    reversedString = \"\" \n    for i in inputString: \n        reversedString = i + reversedString \n    return reversedString \n  \nprint(reverseString(\"Hello\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an efficient Python program to reverse a string.\n\n### Input:\nHello\n\n### Output:\ndef reverseString(inputString): \n    reversedString = \"\" \n    for i in inputString: \n        reversedString = i + reversedString \n    return reversedString \n  \nprint(reverseString(\"Hello\"))","tok_input_length":81,"tok_output_length":42,"system_prompt":"","index":7255}
{"question":"Write a Python program to find the number of uniquely identifiable countries in the list given below.","input":"['GB', 'CH', 'GB', 'US', 'CH', 'CN', 'ES', 'CN']","expected_output":"def unique_countries(lst): \n    return len(set(lst))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the number of uniquely identifiable countries in the list given below.\n\n### Input:\n['GB', 'CH', 'GB', 'US', 'CH', 'CN', 'ES', 'CN']\n\n### Output:\ndef unique_countries(lst): \n    return len(set(lst))","tok_input_length":82,"tok_output_length":13,"system_prompt":"","index":18585}
{"question":"Create a function in Python which finds the minimum of the list of given numbers.","input":"[2, 4, 6, 3, 5, 8]","expected_output":"def min_list(list1): \n    min_value = min(list1) \n  \n    return min_value","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which finds the minimum of the list of given numbers.\n\n### Input:\n[2, 4, 6, 3, 5, 8]\n\n### Output:\ndef min_list(list1): \n    min_value = min(list1) \n  \n    return min_value","tok_input_length":82,"tok_output_length":21,"system_prompt":"","index":6899}
{"question":"Modify the given Python function to print out the reversed list first and then find the sum of the numbers.","input":"def reverse_list(numbers):\n return numbers[::-1]","expected_output":"def reverse_list(numbers):\n reversed_list = numbers[::-1]\n print(reversed_list)\n return sum(reversed_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given Python function to print out the reversed list first and then find the sum of the numbers.\n\n### Input:\ndef reverse_list(numbers):\n return numbers[::-1]\n\n### Output:\ndef reverse_list(numbers):\n reversed_list = numbers[::-1]\n print(reversed_list)\n return sum(reversed_list)","tok_input_length":82,"tok_output_length":24,"system_prompt":"","index":9335}
{"question":"Create a python program to filter a list of words by length.","input":"[\"Apple\", \"Banana\", \"Orange\", \"Grapes\"]","expected_output":"def filter_words_by_length(word_list, length):\n    return [word for word in word_list if len(word) == length]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to filter a list of words by length.\n\n### Input:\n[\"Apple\", \"Banana\", \"Orange\", \"Grapes\"]\n\n### Output:\ndef filter_words_by_length(word_list, length):\n    return [word for word in word_list if len(word) == length]","tok_input_length":82,"tok_output_length":27,"system_prompt":"","index":4786}
{"question":"Write a Python program that can generate all permutations of a given list.","input":"list_a = [1, 2, 3]","expected_output":"def generate_permutations(list_a):\n  import itertools \n  return list(itertools.permutations(list_a))\n  \ngenerate_permutations(list_a)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that can generate all permutations of a given list.\n\n### Input:\nlist_a = [1, 2, 3]\n\n### Output:\ndef generate_permutations(list_a):\n  import itertools \n  return list(itertools.permutations(list_a))\n  \ngenerate_permutations(list_a)","tok_input_length":82,"tok_output_length":29,"system_prompt":"","index":11290}
{"question":"Edit the given Python function to include an exception handling code block.","input":"def convert_to_integer(x):\n    return int(x)","expected_output":"def convert_to_integer(x):\n    try:\n        return int(x)\n    except Exception:\n        print('Unable to convert to integer.')\n        return x","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python function to include an exception handling code block.\n\n### Input:\ndef convert_to_integer(x):\n    return int(x)\n\n### Output:\ndef convert_to_integer(x):\n    try:\n        return int(x)\n    except Exception:\n        print('Unable to convert to integer.')\n        return x","tok_input_length":82,"tok_output_length":31,"system_prompt":"","index":5228}
{"question":"Write a function in Python 3 which takes an input integer n and returns an array of n random numbers.","input":"","expected_output":"import random\n\ndef generate_random_nums(n):\n  nums = []\n  for _ in range(n):\n    nums.append(random.randint(0,n))\n  return nums","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python 3 which takes an input integer n and returns an array of n random numbers.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_nums(n):\n  nums = []\n  for _ in range(n):\n    nums.append(random.randint(0,n))\n  return nums","tok_input_length":82,"tok_output_length":33,"system_prompt":"","index":12748}
{"question":"Generate all permutations of a given list of numbers with Python.","input":"[1, 2, 3]","expected_output":"import itertools\n\nlist_nums = [1, 2, 3]\n\nperms = itertools.permutations(list_nums)\nfor perm in perms:\n  print(perm)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate all permutations of a given list of numbers with Python.\n\n### Input:\n[1, 2, 3]\n\n### Output:\nimport itertools\n\nlist_nums = [1, 2, 3]\n\nperms = itertools.permutations(list_nums)\nfor perm in perms:\n  print(perm)","tok_input_length":82,"tok_output_length":34,"system_prompt":"","index":11177}
{"question":"Design a function in Python to classify an input into positive or negative.","input":"number = -3","expected_output":"def classify_number(number):\n    if number > 0:\n        return 'positive'\n    else:\n        return 'negative' \n\nresult = classify_number(number)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to classify an input into positive or negative.\n\n### Input:\nnumber = -3\n\n### Output:\ndef classify_number(number):\n    if number > 0:\n        return 'positive'\n    else:\n        return 'negative' \n\nresult = classify_number(number)\nprint(result)","tok_input_length":82,"tok_output_length":36,"system_prompt":"","index":7674}
{"question":"Write a Python Function to check if a given string contains all the letters of the alphabet","input":"","expected_output":"def check_alphabet(string):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\" \n    if set(string.lower()) >= set(alphabet): \n        return True \n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python Function to check if a given string contains all the letters of the alphabet\n\n### Input:\n\n\n### Output:\ndef check_alphabet(string):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\" \n    if set(string.lower()) >= set(alphabet): \n        return True \n    else: \n        return False","tok_input_length":82,"tok_output_length":37,"system_prompt":"","index":16205}
{"question":"Create an error-handling system for a Python web application.","input":"Not applicable","expected_output":"import logging\n\ndef handler(e):\n logging.exception(e)\n # Do any other error handling logic here.\n\ntry:\n # the code that could throw an error\nexcept Exception as e:\n handler(e)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an error-handling system for a Python web application.\n\n### Input:\nNot applicable\n\n### Output:\nimport logging\n\ndef handler(e):\n logging.exception(e)\n # Do any other error handling logic here.\n\ntry:\n # the code that could throw an error\nexcept Exception as e:\n handler(e)","tok_input_length":82,"tok_output_length":40,"system_prompt":"","index":3695}
{"question":"Construct a Python class for calculating the area and perimeter of a square.","input":"","expected_output":"class Square:\n def __init__(self, side):\n self.side = side\n\n def calculate_area(self):\n return self.side * self.side\n\n def calculate_perimeter(self):\n return self.side * 4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python class for calculating the area and perimeter of a square.\n\n### Input:\n\n\n### Output:\nclass Square:\n def __init__(self, side):\n self.side = side\n\n def calculate_area(self):\n return self.side * self.side\n\n def calculate_perimeter(self):\n return self.side * 4","tok_input_length":82,"tok_output_length":41,"system_prompt":"","index":16942}
{"question":"Construct an N-ary tree to represent a directory structure.","input":"","expected_output":"An N-ary tree can be constructed using programming languages such as Python, JavaScript, etc. It will contain code to create nodes and connect them in the form of a tree structure using references\/pointers.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an N-ary tree to represent a directory structure.\n\n### Input:\n\n\n### Output:\nAn N-ary tree can be constructed using programming languages such as Python, JavaScript, etc. It will contain code to create nodes and connect them in the form of a tree structure using references\/pointers.","tok_input_length":82,"tok_output_length":43,"system_prompt":"","index":12414}
{"question":"Generate a random string containing only lowercase letters using Python.","input":"","expected_output":"import string \nimport random\n\ndef gen_random_string(length): \n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length)) \n\nprint(gen_random_string(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random string containing only lowercase letters using Python.\n\n### Input:\n\n\n### Output:\nimport string \nimport random\n\ndef gen_random_string(length): \n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length)) \n\nprint(gen_random_string(10))","tok_input_length":82,"tok_output_length":44,"system_prompt":"","index":12187}
{"question":"Generate a python program that create a pandas dataframe from a dictionary column.","input":"data_dict = {'name': ['Bob', 'Alice', 'John'],\n             'age': [18, 20, 19]}","expected_output":"import pandas as pd\n\ndf = pd.DataFrame(data_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that create a pandas dataframe from a dictionary column.\n\n### Input:\ndata_dict = {'name': ['Bob', 'Alice', 'John'],\n             'age': [18, 20, 19]}\n\n### Output:\nimport pandas as pd\n\ndf = pd.DataFrame(data_dict)","tok_input_length":83,"tok_output_length":13,"system_prompt":"","index":1610}
{"question":"Generate a Python code to automatically add an item to the beginning of a given array.","input":"arr = [1,2,3,4,5]\nnew_item = 7","expected_output":"def add_item_to_beginning(arr, new_item):\n    return [new_item] + arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to automatically add an item to the beginning of a given array.\n\n### Input:\narr = [1,2,3,4,5]\nnew_item = 7\n\n### Output:\ndef add_item_to_beginning(arr, new_item):\n    return [new_item] + arr","tok_input_length":83,"tok_output_length":20,"system_prompt":"","index":17690}
{"question":"Create a script in Python to print the squares of all numbers in the given list.","input":"[1, 2, 3, 4, 5]","expected_output":"for n in [1, 2, 3, 4, 5]:\n print(n**2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python to print the squares of all numbers in the given list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nfor n in [1, 2, 3, 4, 5]:\n print(n**2)","tok_input_length":83,"tok_output_length":24,"system_prompt":"","index":11945}
{"question":"Create a function in Python that will take two strings and merge them together without spaces.","input":"string1 = \"Hello\"\nstring2 = \"World\"","expected_output":"def joinStrings(s1, s2):\n    return s1 + s2\n\nprint(joinStrings('Hello', 'World'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that will take two strings and merge them together without spaces.\n\n### Input:\nstring1 = \"Hello\"\nstring2 = \"World\"\n\n### Output:\ndef joinStrings(s1, s2):\n    return s1 + s2\n\nprint(joinStrings('Hello', 'World'))","tok_input_length":83,"tok_output_length":27,"system_prompt":"","index":14211}
{"question":"Write a Python function to get the GCD (Greatest Common Divisor) of two positive integers.","input":"46, 24","expected_output":"def gcd(a,b): \n      \n    if b == 0: \n        \n        return a \n      \n    return gcd(b, a % b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to get the GCD (Greatest Common Divisor) of two positive integers.\n\n### Input:\n46, 24\n\n### Output:\ndef gcd(a,b): \n      \n    if b == 0: \n        \n        return a \n      \n    return gcd(b, a % b)","tok_input_length":83,"tok_output_length":30,"system_prompt":"","index":1753}
{"question":"Write a python script to generate a dictionary containing numbers from 1 to n as keys and their square as values.","input":"","expected_output":"def generate_dict(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i*i\n    return d","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to generate a dictionary containing numbers from 1 to n as keys and their square as values.\n\n### Input:\n\n\n### Output:\ndef generate_dict(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i*i\n    return d","tok_input_length":83,"tok_output_length":33,"system_prompt":"","index":3143}
{"question":"Create a python program to compute the volume of a cube given its edge length as an input.","input":"3","expected_output":"length = int(input(\"Enter the edge length of the cube: \"))\n\nvolume = length * length * length\n\nprint(\"The volume of the cube is\", volume)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to compute the volume of a cube given its edge length as an input.\n\n### Input:\n3\n\n### Output:\nlength = int(input(\"Enter the edge length of the cube: \"))\n\nvolume = length * length * length\n\nprint(\"The volume of the cube is\", volume)","tok_input_length":83,"tok_output_length":35,"system_prompt":"","index":12659}
{"question":"Devise a Python program to output the multiples of 7 up to a given number.","input":"","expected_output":"def multiplesOf7(number): \n    for i in range(1,number+1): \n        if(i % 7 == 0): \n            print(i, end =\" \")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise a Python program to output the multiples of 7 up to a given number.\n\n### Input:\n\n\n### Output:\ndef multiplesOf7(number): \n    for i in range(1,number+1): \n        if(i % 7 == 0): \n            print(i, end =\" \")","tok_input_length":83,"tok_output_length":38,"system_prompt":"","index":8557}
{"question":"Write a Python program to print out the next day's date given today's date","input":"","expected_output":"import datetime\n \ndef get_next_day_date():\n  today_date = datetime.datetime.now().date()\n  next_day_date = today_date + datetime.timedelta(days=1)\n  return next_day_date","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the next day's date given today's date\n\n### Input:\n\n\n### Output:\nimport datetime\n \ndef get_next_day_date():\n  today_date = datetime.datetime.now().date()\n  next_day_date = today_date + datetime.timedelta(days=1)\n  return next_day_date","tok_input_length":83,"tok_output_length":39,"system_prompt":"","index":13666}
{"question":"Design a Python program that generates a 10 x 10 multiplication table.","input":"","expected_output":"for i in range(1, 11):\n  for j in range(1, 11):\n    print(f\"{i} x {j} = {i * j}\")\n  print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that generates a 10 x 10 multiplication table.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n  for j in range(1, 11):\n    print(f\"{i} x {j} = {i * j}\")\n  print()","tok_input_length":83,"tok_output_length":41,"system_prompt":"","index":4653}
{"question":"Develop a python program which can generate a random array of integers","input":"","expected_output":"import random\n\ndef get_random_array(max_size):\n    arr = []\n\n    for _ in range(random.randint(0, max_size)):\n        arr.append(random.randint(0, max_size))\n    \n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program which can generate a random array of integers\n\n### Input:\n\n\n### Output:\nimport random\n\ndef get_random_array(max_size):\n    arr = []\n\n    for _ in range(random.randint(0, max_size)):\n        arr.append(random.randint(0, max_size))\n    \n    return arr","tok_input_length":83,"tok_output_length":43,"system_prompt":"","index":4347}
{"question":"Create a Python script to automate the process of generating passwords.","input":"","expected_output":"import string\nimport random\n\ndef generate_password(num_chars):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for x in range(num_chars))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to automate the process of generating passwords.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password(num_chars):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for x in range(num_chars))","tok_input_length":83,"tok_output_length":44,"system_prompt":"","index":7063}
{"question":"Generate a random password using Python.","input":"","expected_output":"import random\n\npassword_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*().,?0123456789'\n\ndef generate_password(length):\n    return ''.join(random.choices(password_characters, k=length))\n  \nprint(generate_password(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password using Python.\n\n### Input:\n\n\n### Output:\nimport random\n\npassword_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*().,?0123456789'\n\ndef generate_password(length):\n    return ''.join(random.choices(password_characters, k=length))\n  \nprint(generate_password(10))","tok_input_length":83,"tok_output_length":49,"system_prompt":"","index":9251}
{"question":"Given an array of numbers, write a program to remove the duplicates from the array.","input":"[1, 2, 2, 3, 4, 4, 5]","expected_output":"def remove_duplicates(arr):\n    return list(set(arr)) # using built-in python set()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of numbers, write a program to remove the duplicates from the array.\n\n### Input:\n[1, 2, 2, 3, 4, 4, 5]\n\n### Output:\ndef remove_duplicates(arr):\n    return list(set(arr)) # using built-in python set()","tok_input_length":84,"tok_output_length":19,"system_prompt":"","index":7236}
{"question":"Create an algorithm in Python that takes a list of strings and returns a list of strings with the duplicates removed.","input":"[\"apple\", \"banana\", \"apple\", \"orange\"]","expected_output":"def remove_duplicates(list_of_strings):\n  unique_strings = set(list_of_strings)\n  return list(unique_strings)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes a list of strings and returns a list of strings with the duplicates removed.\n\n### Input:\n[\"apple\", \"banana\", \"apple\", \"orange\"]\n\n### Output:\ndef remove_duplicates(list_of_strings):\n  unique_strings = set(list_of_strings)\n  return list(unique_strings)","tok_input_length":84,"tok_output_length":23,"system_prompt":"","index":2100}
{"question":"Given two strings s and t, write a Python program to check if t is a substring of s.","input":"s = \"abcabc\"\nt = \"abc\"","expected_output":"def is_substring(s, t):\n    if t in s:\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings s and t, write a Python program to check if t is a substring of s.\n\n### Input:\ns = \"abcabc\"\nt = \"abc\"\n\n### Output:\ndef is_substring(s, t):\n    if t in s:\n        return True\n    else:\n        return False","tok_input_length":84,"tok_output_length":25,"system_prompt":"","index":1602}
{"question":"Create a list of codes to store product data in Python.","input":"<Product information:\nproduct code (string), product name (string), quantity (integer)>","expected_output":"product_data = [\n    ('code', 'str'),\n    ('name', 'str'),\n    ('quantity', 'int')\n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list of codes to store product data in Python.\n\n### Input:\n<Product information:\nproduct code (string), product name (string), quantity (integer)>\n\n### Output:\nproduct_data = [\n    ('code', 'str'),\n    ('name', 'str'),\n    ('quantity', 'int')\n]","tok_input_length":84,"tok_output_length":27,"system_prompt":"","index":6684}
{"question":"Write a Python program to convert a date string to the corresponding Unix timestamp.","input":"date_string = \"October 15, 2020\"","expected_output":"import time \n\ndef convert_to_timestamp(date_string): \n    return time.mktime(time.strptime(date_string, \"%B %d, %Y\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a date string to the corresponding Unix timestamp.\n\n### Input:\ndate_string = \"October 15, 2020\"\n\n### Output:\nimport time \n\ndef convert_to_timestamp(date_string): \n    return time.mktime(time.strptime(date_string, \"%B %d, %Y\"))","tok_input_length":84,"tok_output_length":30,"system_prompt":"","index":3043}
{"question":"Design an algorithm in Python for linear search.","input":"[3, 1, 5, 8], 8","expected_output":"def linear_search(arr, target):    \n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python for linear search.\n\n### Input:\n[3, 1, 5, 8], 8\n\n### Output:\ndef linear_search(arr, target):    \n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1","tok_input_length":84,"tok_output_length":33,"system_prompt":"","index":2177}
{"question":"Write a Python program to calculate the sum of the values for all numbers between 1 and n (inclusive).","input":"","expected_output":"def sum_of_values(n):\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive).\"\"\"\n    return sum(range(1, n+1))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of the values for all numbers between 1 and n (inclusive).\n\n### Input:\n\n\n### Output:\ndef sum_of_values(n):\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive).\"\"\"\n    return sum(range(1, n+1))","tok_input_length":84,"tok_output_length":35,"system_prompt":"","index":5654}
{"question":"Generate a classifier in Python using the Random Forest algorithm.","input":"Features: Weight, Size\nLabel: Type","expected_output":"from sklearn.ensemble import RandomForestClassifier\n\nX = [[Weight, Size]]\ny = [Type]\n\nmodel = RandomForestClassifier(random_state=0)\nmodel.fit(X, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a classifier in Python using the Random Forest algorithm.\n\n### Input:\nFeatures: Weight, Size\nLabel: Type\n\n### Output:\nfrom sklearn.ensemble import RandomForestClassifier\n\nX = [[Weight, Size]]\ny = [Type]\n\nmodel = RandomForestClassifier(random_state=0)\nmodel.fit(X, y)","tok_input_length":84,"tok_output_length":36,"system_prompt":"","index":9277}
{"question":"Create a python function that takes a string as an input, and returns its first letter in capital.","input":"","expected_output":"def capitalize_first_letter(s): \n    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that takes a string as an input, and returns its first letter in capital.\n\n### Input:\n\n\n### Output:\ndef capitalize_first_letter(s): \n    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:]","tok_input_length":84,"tok_output_length":37,"system_prompt":"","index":12316}
{"question":"Design an algorithm in Python to convert a temperature in Fahrenheit to Celsius.","input":"64 degrees Fahrenheit","expected_output":"def convert_f_to_c(temperature):\n    return (temperature - 32) * 5.0\/9.0\n\nresult = convert_f_to_c(64)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to convert a temperature in Fahrenheit to Celsius.\n\n### Input:\n64 degrees Fahrenheit\n\n### Output:\ndef convert_f_to_c(temperature):\n    return (temperature - 32) * 5.0\/9.0\n\nresult = convert_f_to_c(64)\nprint(result)","tok_input_length":84,"tok_output_length":39,"system_prompt":"","index":17381}
{"question":"Create a core library in Python which can be used to create a web application.","input":"","expected_output":"import flask\n\napp = flask.Flask(__name__)\n\n# Create routes and functions for the web application\n@app.route('\/')\ndef index():\n    return 'This is the main page of the web application!'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a core library in Python which can be used to create a web application.\n\n### Input:\n\n\n### Output:\nimport flask\n\napp = flask.Flask(__name__)\n\n# Create routes and functions for the web application\n@app.route('\/')\ndef index():\n    return 'This is the main page of the web application!'","tok_input_length":84,"tok_output_length":41,"system_prompt":"","index":11052}
{"question":"Can you generate a function in Python that shuffles a given list?","input":"","expected_output":"import random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you generate a function in Python that shuffles a given list?\n\n### Input:\n\n\n### Output:\nimport random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list","tok_input_length":84,"tok_output_length":43,"system_prompt":"","index":75}
{"question":"Construct a ML pipeline for text classification in Python","input":"Not applicable","expected_output":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = Pipeline([('tfidf', TfidfVectorizer()),\n                  ('clf', LogisticRegression())])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a ML pipeline for text classification in Python\n\n### Input:\nNot applicable\n\n### Output:\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = Pipeline([('tfidf', TfidfVectorizer()),\n                  ('clf', LogisticRegression())])","tok_input_length":84,"tok_output_length":44,"system_prompt":"","index":2997}
{"question":"Establish a connection to a MySQL database using Python.","input":"","expected_output":"import mysql.connector \n  \n# connect to  database \nmydb = mysql.connector.connect( \nhost=\"localhost\", \nuser=\"yourusername\", \npasswd=\"yourpassword\"\n) \n  \n# print the connection object \nprint(mydb)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEstablish a connection to a MySQL database using Python.\n\n### Input:\n\n\n### Output:\nimport mysql.connector \n  \n# connect to  database \nmydb = mysql.connector.connect( \nhost=\"localhost\", \nuser=\"yourusername\", \npasswd=\"yourpassword\"\n) \n  \n# print the connection object \nprint(mydb)","tok_input_length":84,"tok_output_length":47,"system_prompt":"","index":3895}
{"question":"Design a program that takes a complicated function and simplifies it in Python.","input":"def func (x):\n    return 3*(x**2) + 5*x - 4","expected_output":"def simplified_func (x):\n    return 3*x**2 + 5*x - 4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program that takes a complicated function and simplifies it in Python.\n\n### Input:\ndef func (x):\n    return 3*(x**2) + 5*x - 4\n\n### Output:\ndef simplified_func (x):\n    return 3*x**2 + 5*x - 4","tok_input_length":85,"tok_output_length":21,"system_prompt":"","index":5069}
{"question":"Write a Python program to check if an element exists within a list.","input":"my_list = [1, 3, 5 ,7, 9]","expected_output":"def find_elm(lst, elm):\n  return elm in lst\n\nprint(find_elm(my_list, 7)) # True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if an element exists within a list.\n\n### Input:\nmy_list = [1, 3, 5 ,7, 9]\n\n### Output:\ndef find_elm(lst, elm):\n  return elm in lst\n\nprint(find_elm(my_list, 7)) # True","tok_input_length":85,"tok_output_length":27,"system_prompt":"","index":5010}
{"question":"Construct a loop in Python to add all the elements of a given list.","input":"mylist = [5, 12, 17, 22]","expected_output":"total_sum = 0\nfor num in mylist:\n    total_sum += num\nprint(\"The sum is\",total_sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a loop in Python to add all the elements of a given list.\n\n### Input:\nmylist = [5, 12, 17, 22]\n\n### Output:\ntotal_sum = 0\nfor num in mylist:\n    total_sum += num\nprint(\"The sum is\",total_sum)","tok_input_length":85,"tok_output_length":28,"system_prompt":"","index":9733}
{"question":"Write a python code to complete the following.","input":"Sequentially fill a numpy array of size 4 with numbers from 0 to 3","expected_output":"import numpy as np\narr = np.zeros(4, dtype=int)\n \nfor i in range(len(arr)):\n    arr[i] = i","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to complete the following.\n\n### Input:\nSequentially fill a numpy array of size 4 with numbers from 0 to 3\n\n### Output:\nimport numpy as np\narr = np.zeros(4, dtype=int)\n \nfor i in range(len(arr)):\n    arr[i] = i","tok_input_length":85,"tok_output_length":30,"system_prompt":"","index":5865}
{"question":"Write a piece of python code to multipy each element in a list by 10.","input":"[1,2,3,4]","expected_output":"lst=[1,2,3,4]\nfor i in range(len(lst)):\n    lst[i] = lst[i]*10\nprint(lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a piece of python code to multipy each element in a list by 10.\n\n### Input:\n[1,2,3,4]\n\n### Output:\nlst=[1,2,3,4]\nfor i in range(len(lst)):\n    lst[i] = lst[i]*10\nprint(lst)","tok_input_length":85,"tok_output_length":31,"system_prompt":"","index":18190}
{"question":"Create a code snippet in Java to parse a comma-separated string into a list of strings.","input":"\"Ruby,Python,JavaScript\"","expected_output":"String str = \"Ruby,Python,JavaScript\";\nList<String> list = Arrays.asList(str.split(\",\"));\n\n\/\/ Output \n\/\/ [Ruby,Python,JavaScript]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code snippet in Java to parse a comma-separated string into a list of strings.\n\n### Input:\n\"Ruby,Python,JavaScript\"\n\n### Output:\nString str = \"Ruby,Python,JavaScript\";\nList<String> list = Arrays.asList(str.split(\",\"));\n\n\/\/ Output \n\/\/ [Ruby,Python,JavaScript]","tok_input_length":85,"tok_output_length":33,"system_prompt":"","index":8157}
{"question":"Write a Python script to filter out all words containing 10 or more characters.","input":"\"This is a sample sentence\"","expected_output":"sentence = \"This is a sample sentence\"\n\nwords = sentence.split()\nlong_words = [word for word in words if len(word) > 10]\n\nprint(long_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to filter out all words containing 10 or more characters.\n\n### Input:\n\"This is a sample sentence\"\n\n### Output:\nsentence = \"This is a sample sentence\"\n\nwords = sentence.split()\nlong_words = [word for word in words if len(word) > 10]\n\nprint(long_words)","tok_input_length":85,"tok_output_length":36,"system_prompt":"","index":2038}
{"question":"Write a Python program to generate a random string with the given length.","input":"Length: 8","expected_output":"import string\nimport random\n\ndef generate_random_string(length):\n  characters = string.ascii_letters + string.digits \n  return ''.join(random.choice(characters) for i in range(length))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random string with the given length.\n\n### Input:\nLength: 8\n\n### Output:\nimport string\nimport random\n\ndef generate_random_string(length):\n  characters = string.ascii_letters + string.digits \n  return ''.join(random.choice(characters) for i in range(length))","tok_input_length":85,"tok_output_length":39,"system_prompt":"","index":3471}
{"question":"Generate a program in Python that prints all prime numbers from 1 to 100.","input":"","expected_output":"for num in range(2, 101):\n   for i in range(2, num):\n      if (num % i == 0):\n         break\n   else:\n      print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python that prints all prime numbers from 1 to 100.\n\n### Input:\n\n\n### Output:\nfor num in range(2, 101):\n   for i in range(2, num):\n      if (num % i == 0):\n         break\n   else:\n      print(num)","tok_input_length":85,"tok_output_length":41,"system_prompt":"","index":4138}
{"question":"Construct a python code that can convert any given integer into its binary representation.","input":"","expected_output":"def to_binary(n):\n    binary_rep = \"\"\n    while n > 0:\n        binary_rep = str(n%2) + binary_rep\n        n = int(n\/2)\n    return binary_rep","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python code that can convert any given integer into its binary representation.\n\n### Input:\n\n\n### Output:\ndef to_binary(n):\n    binary_rep = \"\"\n    while n > 0:\n        binary_rep = str(n%2) + binary_rep\n        n = int(n\/2)\n    return binary_rep","tok_input_length":85,"tok_output_length":43,"system_prompt":"","index":15020}
{"question":"Design a class in Python that calculates the area of a square.","input":"","expected_output":"class Square:\n    def __init__(self, length):\n        self.length = length\n\n    def find_area(self):\n        return self.length**2\n\nsqr = Square(4)\nprint(sqr.find_area())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that calculates the area of a square.\n\n### Input:\n\n\n### Output:\nclass Square:\n    def __init__(self, length):\n        self.length = length\n\n    def find_area(self):\n        return self.length**2\n\nsqr = Square(4)\nprint(sqr.find_area())","tok_input_length":85,"tok_output_length":45,"system_prompt":"","index":12384}
{"question":"Design a program in Python to reverse a given string.","input":"","expected_output":"def reverse_string(string): \n  rev_str = ''\n  idx = len(string) \n  while idx > 0: \n    rev_str += string[idx-1] \n    idx -= 1\n  return rev_str","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to reverse a given string.\n\n### Input:\n\n\n### Output:\ndef reverse_string(string): \n  rev_str = ''\n  idx = len(string) \n  while idx > 0: \n    rev_str += string[idx-1] \n    idx -= 1\n  return rev_str","tok_input_length":85,"tok_output_length":47,"system_prompt":"","index":13158}
{"question":"Write a Python program to convert a list of lists into a dictionary.","input":"list = [[1, 'a', 'A'], [2, 'b', 'B'], [3, 'c', 'C'], [4, 'd', 'D']]","expected_output":"dictionary = dict(list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a list of lists into a dictionary.\n\n### Input:\nlist = [[1, 'a', 'A'], [2, 'b', 'B'], [3, 'c', 'C'], [4, 'd', 'D']]\n\n### Output:\ndictionary = dict(list)","tok_input_length":86,"tok_output_length":6,"system_prompt":"","index":16063}
{"question":"Write a function in Python that takes an array of integer values and reverses the order of the values.","input":"[1, 2, 3, 4, 5]","expected_output":"def reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes an array of integer values and reverses the order of the values.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order","tok_input_length":86,"tok_output_length":23,"system_prompt":"","index":351}
{"question":"Write a Python code to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.","input":"","expected_output":"my_dict ={}\nfor num in range(1, 16):\n    my_dict[num] = num*num\n\nprint(my_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.\n\n### Input:\n\n\n### Output:\nmy_dict ={}\nfor num in range(1, 16):\n    my_dict[num] = num*num\n\nprint(my_dict)","tok_input_length":86,"tok_output_length":28,"system_prompt":"","index":9538}
{"question":"Write a Python program to reduce the given array into a single element.","input":"arr = [1, 2, 3, 4]","expected_output":"def reduce_arr(arr):\n    result = 0\n    for i in arr:\n        result += i\n    return result\n\nreduce_arr(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to reduce the given array into a single element.\n\n### Input:\narr = [1, 2, 3, 4]\n\n### Output:\ndef reduce_arr(arr):\n    result = 0\n    for i in arr:\n        result += i\n    return result\n\nreduce_arr(arr)","tok_input_length":86,"tok_output_length":31,"system_prompt":"","index":9875}
{"question":"Create a python program to remove characters from a string that's not a letter or symbol.","input":"string = \"ABC%@#XYZ\"","expected_output":"string = \"ABC%@#XYZ\"\nnew_string = ''.join(c for c in string if c.isalnum())\nprint(new_string) # output: ABCXYZ","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to remove characters from a string that's not a letter or symbol.\n\n### Input:\nstring = \"ABC%@#XYZ\"\n\n### Output:\nstring = \"ABC%@#XYZ\"\nnew_string = ''.join(c for c in string if c.isalnum())\nprint(new_string) # output: ABCXYZ","tok_input_length":86,"tok_output_length":33,"system_prompt":"","index":5235}
{"question":"Write a Python program to print the day of week for a specific date.","input":"Date: \"21 October 2020\"","expected_output":"import datetime\n\ndate_str = \"21 October 2020\"\ndate = datetime.datetime.strptime(date_str, \"%d %B %Y\")\nprint(date.strftime(\"%A\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the day of week for a specific date.\n\n### Input:\nDate: \"21 October 2020\"\n\n### Output:\nimport datetime\n\ndate_str = \"21 October 2020\"\ndate = datetime.datetime.strptime(date_str, \"%d %B %Y\")\nprint(date.strftime(\"%A\"))","tok_input_length":86,"tok_output_length":35,"system_prompt":"","index":11027}
{"question":"Create a function in Python to check if a given string contains two of the same characters next to each other.","input":"","expected_output":"def check_for_two_same_chars(string):\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            return True\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to check if a given string contains two of the same characters next to each other.\n\n### Input:\n\n\n### Output:\ndef check_for_two_same_chars(string):\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            return True\n    return False","tok_input_length":86,"tok_output_length":37,"system_prompt":"","index":6995}
{"question":"Code a program in Python to convert a text into its corresponding binary representation.","input":"Text: Hello World!","expected_output":"def bin_from_text(text):\n    bin_text = \"\"\n    for char in text:\n        bin_text += bin(ord(char)).lstrip(\"0b\") + \" \"\n    return bin_text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a program in Python to convert a text into its corresponding binary representation.\n\n### Input:\nText: Hello World!\n\n### Output:\ndef bin_from_text(text):\n    bin_text = \"\"\n    for char in text:\n        bin_text += bin(ord(char)).lstrip(\"0b\") + \" \"\n    return bin_text","tok_input_length":86,"tok_output_length":39,"system_prompt":"","index":7319}
{"question":"Create a feature in Python to extract the category information from a given URL.","input":"No input","expected_output":"def extract_category_from_url(url):\n    # Extract the hostname from the URL\n    hostname = urlparse(url).hostname\n    # Split the hostname on '\/'\n    categories = hostname.split('\/')\n    return categories","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a feature in Python to extract the category information from a given URL.\n\n### Input:\nNo input\n\n### Output:\ndef extract_category_from_url(url):\n    # Extract the hostname from the URL\n    hostname = urlparse(url).hostname\n    # Split the hostname on '\/'\n    categories = hostname.split('\/')\n    return categories","tok_input_length":86,"tok_output_length":41,"system_prompt":"","index":6647}
{"question":"Create a python script to check if a given name is valid or not.","input":"","expected_output":"def is_name_valid(name):\n    # Check if the name contains only alphabets\n    if name.isalpha():\n        return True\n    return False\n\nname = 'John'\nprint(is_name_valid(name))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to check if a given name is valid or not.\n\n### Input:\n\n\n### Output:\ndef is_name_valid(name):\n    # Check if the name contains only alphabets\n    if name.isalpha():\n        return True\n    return False\n\nname = 'John'\nprint(is_name_valid(name))","tok_input_length":86,"tok_output_length":44,"system_prompt":"","index":1167}
{"question":"Create a python module that reads the sentiment of a given text.","input":"Nothing","expected_output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_score(text): \n    sentiment_scores = SentimentIntensityAnalyzer().polarity_scores(text) \n    return sentiment_scores[\"compound\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python module that reads the sentiment of a given text.\n\n### Input:\nNothing\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_score(text): \n    sentiment_scores = SentimentIntensityAnalyzer().polarity_scores(text) \n    return sentiment_scores[\"compound\"]","tok_input_length":86,"tok_output_length":44,"system_prompt":"","index":15885}
{"question":"Describe the steps to run a python program from the command line.","input":"","expected_output":"1. Open Command Prompt in Windows or Terminal in macOS.\n2. Navigate to the directory containing the Python file.\n3. Type the command: python <filename>\n4. Press enter. This will execute the Python file.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDescribe the steps to run a python program from the command line.\n\n### Input:\n\n\n### Output:\n1. Open Command Prompt in Windows or Terminal in macOS.\n2. Navigate to the directory containing the Python file.\n3. Type the command: python <filename>\n4. Press enter. This will execute the Python file.","tok_input_length":86,"tok_output_length":46,"system_prompt":"","index":7982}
{"question":"Write a python program that generates a random IP address.","input":"","expected_output":"import random\n\ndef generate_random_IP():\n    ip = \"\"\n    for i in range(4):\n        ip += str(random.randint(0, 255))\n        if i != 3:\n            ip += \".\"\n    return ip","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that generates a random IP address.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_IP():\n    ip = \"\"\n    for i in range(4):\n        ip += str(random.randint(0, 255))\n        if i != 3:\n            ip += \".\"\n    return ip","tok_input_length":86,"tok_output_length":48,"system_prompt":"","index":5731}
{"question":"Devise a python code which will generate a new list with each element of the list squared.","input":"data = [2, 3, 5, 6, 20, 9]","expected_output":"def square_list(arr):\n    result = [num**2 for num in arr]\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise a python code which will generate a new list with each element of the list squared.\n\n### Input:\ndata = [2, 3, 5, 6, 20, 9]\n\n### Output:\ndef square_list(arr):\n    result = [num**2 for num in arr]\n    return result","tok_input_length":87,"tok_output_length":21,"system_prompt":"","index":4316}
{"question":"Write a function in Python that takes a list of integers and returns a new list containing only odd numbers.","input":"[3, 8, 6, 10, 17]","expected_output":"def odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a list of integers and returns a new list containing only odd numbers.\n\n### Input:\n[3, 8, 6, 10, 17]\n\n### Output:\ndef odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]","tok_input_length":87,"tok_output_length":24,"system_prompt":"","index":222}
{"question":"Using Python, build a dictionary containing the numbers from 1 to n as the key and the square of each number as the value.","input":"n = 10","expected_output":"my_dict = {}\n\nfor i in range(1,n+1):\n my_dict[i] = i**2\n\nprint(my_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, build a dictionary containing the numbers from 1 to n as the key and the square of each number as the value.\n\n### Input:\nn = 10\n\n### Output:\nmy_dict = {}\n\nfor i in range(1,n+1):\n my_dict[i] = i**2\n\nprint(my_dict)","tok_input_length":87,"tok_output_length":28,"system_prompt":"","index":239}
{"question":"Write a function in Python that chooses a random element from a list.","input":"[1, 2, 3, 4, 5]","expected_output":"import random \n  \ndef randomElement(list): \n    return random.choice(list) \n\nprint(randomElement([1,2,3,4,5]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that chooses a random element from a list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nimport random \n  \ndef randomElement(list): \n    return random.choice(list) \n\nprint(randomElement([1,2,3,4,5]))","tok_input_length":87,"tok_output_length":31,"system_prompt":"","index":3089}
{"question":"Write a Python loop that prints out a list of random numbers between 0 and 100.","input":"Number of random numbers: 5","expected_output":"import random\n\nrandom_numbers = []\n\nfor i in range(5):\n number = random.randint(0,100)\n random_numbers.append(number)\n print(random_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python loop that prints out a list of random numbers between 0 and 100.\n\n### Input:\nNumber of random numbers: 5\n\n### Output:\nimport random\n\nrandom_numbers = []\n\nfor i in range(5):\n number = random.randint(0,100)\n random_numbers.append(number)\n print(random_numbers)","tok_input_length":87,"tok_output_length":33,"system_prompt":"","index":11514}
{"question":"Generate a Python program to detect the key phrases in a given text.","input":"text = \"I like to eat apples and oranges.\"","expected_output":"def detect_key_phrases(text):\n    # use some NLP model to detect the key phrases\n    key_phrases = model.predict(text)\n    return key_phrases","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to detect the key phrases in a given text.\n\n### Input:\ntext = \"I like to eat apples and oranges.\"\n\n### Output:\ndef detect_key_phrases(text):\n    # use some NLP model to detect the key phrases\n    key_phrases = model.predict(text)\n    return key_phrases","tok_input_length":87,"tok_output_length":35,"system_prompt":"","index":6325}
{"question":"Write a function in Python to Print a given string in Reverse order.","input":"string = \"Welcome to my site!\"","expected_output":"def reverseString(string):\n    revString = ''\n    for i in range(len(string)-1, -1, -1):\n        revString += string[i]\n    return revString","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to Print a given string in Reverse order.\n\n### Input:\nstring = \"Welcome to my site!\"\n\n### Output:\ndef reverseString(string):\n    revString = ''\n    for i in range(len(string)-1, -1, -1):\n        revString += string[i]\n    return revString","tok_input_length":87,"tok_output_length":38,"system_prompt":"","index":14399}
{"question":"Write a Python program to remove duplicate characters from a given string.","input":"string = \"Hello World !\"","expected_output":"string = \"Hello World !\"\n\nresult = \"\" \nfor char in string:\n    if char not in result: \n        result += char\n\nprint(\"String after removing duplicate characters:\", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove duplicate characters from a given string.\n\n### Input:\nstring = \"Hello World !\"\n\n### Output:\nstring = \"Hello World !\"\n\nresult = \"\" \nfor char in string:\n    if char not in result: \n        result += char\n\nprint(\"String after removing duplicate characters:\", result)","tok_input_length":87,"tok_output_length":40,"system_prompt":"","index":6797}
{"question":"Develop a program in Python for printing an asterisk triangle consisting of n rows.","input":"5","expected_output":"def asterisk_triangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print('*', end=\" \")\n        print()\n\nn = 5\nasterisk_triangle(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python for printing an asterisk triangle consisting of n rows.\n\n### Input:\n5\n\n### Output:\ndef asterisk_triangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print('*', end=\" \")\n        print()\n\nn = 5\nasterisk_triangle(n)","tok_input_length":87,"tok_output_length":42,"system_prompt":"","index":11068}
{"question":"Modify the Python code below to reverse the string input.","input":"string = \u201chello world\u201d","expected_output":"string = \u201chello world\u201d \n# Reverse the string \nrev_string = \"\" \nfor char in string: \n rev_string = char + rev_string \n\n# Print the reversed string \nprint(rev_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the Python code below to reverse the string input.\n\n### Input:\nstring = \u201chello world\u201d\n\n### Output:\nstring = \u201chello world\u201d \n# Reverse the string \nrev_string = \"\" \nfor char in string: \n rev_string = char + rev_string \n\n# Print the reversed string \nprint(rev_string)","tok_input_length":87,"tok_output_length":43,"system_prompt":"","index":10250}
{"question":"Implement a function in Python to generate a password of size n","input":"6","expected_output":"import string\nimport random\n\ndef generate_password(n):\n    password = ''\n    for i in range(n):\n        password += random.choice(string.ascii_letters + \n        string.digits + string.punctuation)\n    return password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to generate a password of size n\n\n### Input:\n6\n\n### Output:\nimport string\nimport random\n\ndef generate_password(n):\n    password = ''\n    for i in range(n):\n        password += random.choice(string.ascii_letters + \n        string.digits + string.punctuation)\n    return password","tok_input_length":87,"tok_output_length":45,"system_prompt":"","index":1540}
{"question":"Write a Python program to make a deep copy a given dictionary.","input":"","expected_output":"import copy \n\ndef deep_copy_dictionary(dictionary): \n deep_copy = copy.deepcopy(dictionary) \n return deep_copy\n\ndata = {\"name\": \"John\", \"age\": 28}\n\nresult = deep_copy_dictionary(data)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to make a deep copy a given dictionary.\n\n### Input:\n\n\n### Output:\nimport copy \n\ndef deep_copy_dictionary(dictionary): \n deep_copy = copy.deepcopy(dictionary) \n return deep_copy\n\ndata = {\"name\": \"John\", \"age\": 28}\n\nresult = deep_copy_dictionary(data)\nprint(result)","tok_input_length":87,"tok_output_length":47,"system_prompt":"","index":14465}
{"question":"Implement an algorithm in Python to calculate the Fibonacci sequence.","input":"","expected_output":"def Fibonacci(x): \n    if x <= 0: \n        return 0\n    elif x == 1: \n        return 1\n    else: \n        return Fibonacci(x-1) + Fibonacci(x-2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to calculate the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(x): \n    if x <= 0: \n        return 0\n    elif x == 1: \n        return 1\n    else: \n        return Fibonacci(x-1) + Fibonacci(x-2)","tok_input_length":87,"tok_output_length":49,"system_prompt":"","index":15480}
{"question":"Optimize this code to calculate the sum of squares of all numbers from 1 to 10 in Python.","input":"total = 0\nfor i in range(1, 11):\n    total += i * i","expected_output":"total = sum(i**2 for i in range(1, 11))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this code to calculate the sum of squares of all numbers from 1 to 10 in Python.\n\n### Input:\ntotal = 0\nfor i in range(1, 11):\n    total += i * i\n\n### Output:\ntotal = sum(i**2 for i in range(1, 11))","tok_input_length":88,"tok_output_length":17,"system_prompt":"","index":11086}
{"question":"Edit the following python code such that the functions provide the stated output","input":"def func1(a):\n    return a**2\n\ndef func2(a):\n    return a+1","expected_output":"def func1(a):\n    return a**2\n\ndef func2(a):\n    return a**2 + 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following python code such that the functions provide the stated output\n\n### Input:\ndef func1(a):\n    return a**2\n\ndef func2(a):\n    return a+1\n\n### Output:\ndef func1(a):\n    return a**2\n\ndef func2(a):\n    return a**2 + 1","tok_input_length":88,"tok_output_length":25,"system_prompt":"","index":2501}
{"question":"Write a Python program that takes a string and a number as input, and returns the string repeated the given number of times.","input":"String: xyz\nNumber: 3","expected_output":"def repeatString(string, num):\n    return string * num\n\nresult = repeatString(\"xyz\", 3)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a string and a number as input, and returns the string repeated the given number of times.\n\n### Input:\nString: xyz\nNumber: 3\n\n### Output:\ndef repeatString(string, num):\n    return string * num\n\nresult = repeatString(\"xyz\", 3)\nprint(result)","tok_input_length":88,"tok_output_length":27,"system_prompt":"","index":9924}
{"question":"Create a python program to accept two inputs from the user, a number and a string, and print the string the given number of times.","input":"3, Hello","expected_output":"num = int(input(\"Enter a number: \"))\nstring = input(\"Enter a string: \")\n\nfor i in range(num):\n print(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to accept two inputs from the user, a number and a string, and print the string the given number of times.\n\n### Input:\n3, Hello\n\n### Output:\nnum = int(input(\"Enter a number: \"))\nstring = input(\"Enter a string: \")\n\nfor i in range(num):\n print(string)","tok_input_length":88,"tok_output_length":29,"system_prompt":"","index":12444}
{"question":"Create a function in Python that takes two strings as an input and returns their concatenation.","input":"str1 = \"Hello\"\nstr2 = \"World\"","expected_output":"def concat_string(str1, str2):\n    return str1 + str2\n\nresult = concat_string(str1, str2)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two strings as an input and returns their concatenation.\n\n### Input:\nstr1 = \"Hello\"\nstr2 = \"World\"\n\n### Output:\ndef concat_string(str1, str2):\n    return str1 + str2\n\nresult = concat_string(str1, str2)\nprint(result)","tok_input_length":88,"tok_output_length":31,"system_prompt":"","index":8678}
{"question":"Create a Python program that takes in a positive integer, then uses a while loop to output the numbers counting down to 1.","input":"6","expected_output":"num = int(input(\"Enter a positive integer: \"))\n\nwhile num > 0:\n    print(num)\n    num -= 1\n\nprint(\"Done!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a positive integer, then uses a while loop to output the numbers counting down to 1.\n\n### Input:\n6\n\n### Output:\nnum = int(input(\"Enter a positive integer: \"))\n\nwhile num > 0:\n    print(num)\n    num -= 1\n\nprint(\"Done!\")","tok_input_length":88,"tok_output_length":33,"system_prompt":"","index":502}
{"question":"Design an algorithm in Python to calculate the greatest common divisor of two numbers.","input":"x = 32\ny = 8","expected_output":"def gcd(x,y): \n if x == 0: \n \treturn y \n return gcd(y%x, x) \n\n# Driver code\nprint(gcd(x,y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to calculate the greatest common divisor of two numbers.\n\n### Input:\nx = 32\ny = 8\n\n### Output:\ndef gcd(x,y): \n if x == 0: \n \treturn y \n return gcd(y%x, x) \n\n# Driver code\nprint(gcd(x,y))","tok_input_length":88,"tok_output_length":36,"system_prompt":"","index":5737}
{"question":"Given a sentence, write a Python program to capitalise the first letter of each word.","input":"Sentence: hello world","expected_output":"words = \"hello world\"\nwords = words.split()\n\nnew_words = [word.capitalize() for word in words]\nmodified_string = \" \".join(new_words)\n\nprint(modified_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a sentence, write a Python program to capitalise the first letter of each word.\n\n### Input:\nSentence: hello world\n\n### Output:\nwords = \"hello world\"\nwords = words.split()\n\nnew_words = [word.capitalize() for word in words]\nmodified_string = \" \".join(new_words)\n\nprint(modified_string)","tok_input_length":88,"tok_output_length":38,"system_prompt":"","index":1359}
{"question":"Use Python to create a dictionary that stores the names of five fruits and a corresponding numerical value for each fruit.","input":"","expected_output":"fruits = {\n 'apple': 1,\n 'banana': 2,\n 'grape': 3,\n 'orange': 4,\n 'strawberry': 5\n }","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to create a dictionary that stores the names of five fruits and a corresponding numerical value for each fruit.\n\n### Input:\n\n\n### Output:\nfruits = {\n 'apple': 1,\n 'banana': 2,\n 'grape': 3,\n 'orange': 4,\n 'strawberry': 5\n }","tok_input_length":88,"tok_output_length":39,"system_prompt":"","index":16002}
{"question":"Create a web application in Python to display current weather information for a given city.","input":"Paris, France","expected_output":"# import libraries\nimport requests, json \n  \n# api-endpoint \nurl = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={city}&units=metric&APPID=","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Python to display current weather information for a given city.\n\n### Input:\nParis, France\n\n### Output:\n# import libraries\nimport requests, json \n  \n# api-endpoint \nurl = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={city}&units=metric&APPID=","tok_input_length":88,"tok_output_length":41,"system_prompt":"","index":10735}
{"question":"Can you suggest a code snippet that fetches the last element from a list in Python?","input":"","expected_output":"my_list = [3, 5, 7, 9, 2]\n\nlast_element = my_list[-1]\nprint('Last element in the list is %d' % (last_element))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you suggest a code snippet that fetches the last element from a list in Python?\n\n### Input:\n\n\n### Output:\nmy_list = [3, 5, 7, 9, 2]\n\nlast_element = my_list[-1]\nprint('Last element in the list is %d' % (last_element))","tok_input_length":88,"tok_output_length":43,"system_prompt":"","index":10467}
{"question":"Construct a function in Python to check if the provided year is a leap year.","input":"","expected_output":"def is_leap_year(year):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python to check if the provided year is a leap year.\n\n### Input:\n\n\n### Output:\ndef is_leap_year(year):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        return True\n    else:\n        return False","tok_input_length":88,"tok_output_length":45,"system_prompt":"","index":12921}
{"question":"Write a Python code to sort a dictionary based on the values.","input":"","expected_output":"def sort_dict_by_value(in_dict):\n    \"\"\" Function to sort a dictionary by it's values\n    \"\"\"\n    return {k: v for k, v in sorted(in_dict.items(), key=lambda item: item[1])}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to sort a dictionary based on the values.\n\n### Input:\n\n\n### Output:\ndef sort_dict_by_value(in_dict):\n    \"\"\" Function to sort a dictionary by it's values\n    \"\"\"\n    return {k: v for k, v in sorted(in_dict.items(), key=lambda item: item[1])}","tok_input_length":88,"tok_output_length":48,"system_prompt":"","index":2708}
{"question":"Write a Python function to check for a prime number.","input":"","expected_output":"def is_prime(num):\n    if num > 1: \n        for i in range(2,num):\n            if (num % i) == 0: \n                return False\n        return True \n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check for a prime number.\n\n### Input:\n\n\n### Output:\ndef is_prime(num):\n    if num > 1: \n        for i in range(2,num):\n            if (num % i) == 0: \n                return False\n        return True \n    else: \n        return False","tok_input_length":88,"tok_output_length":50,"system_prompt":"","index":18212}
{"question":"Using a dictionary, write a Python statement to remove all duplicate keys in a given dictionary","input":"my_dict = {\n    \"apple\": 5,\n    \"pear\": 10,\n    \"apple\": 8\n}","expected_output":"# use set to remove duplicate keys\nmy_dict = dict(set(my_dict.items()))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a dictionary, write a Python statement to remove all duplicate keys in a given dictionary\n\n### Input:\nmy_dict = {\n    \"apple\": 5,\n    \"pear\": 10,\n    \"apple\": 8\n}\n\n### Output:\n# use set to remove duplicate keys\nmy_dict = dict(set(my_dict.items()))","tok_input_length":89,"tok_output_length":18,"system_prompt":"","index":11093}
{"question":"Write a Python algorithm to calculate a person's body mass index (BMI).","input":"Body mass index (BMI) is calculated using a person\u2019s weight in kilograms divided by their height in meters squared.","expected_output":"def bmi_calculation(height, weight):  \n    bmi = weight \/ (height * height)  \n    return bmi","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm to calculate a person's body mass index (BMI).\n\n### Input:\nBody mass index (BMI) is calculated using a person\u2019s weight in kilograms divided by their height in meters squared.\n\n### Output:\ndef bmi_calculation(height, weight):  \n    bmi = weight \/ (height * height)  \n    return bmi","tok_input_length":89,"tok_output_length":24,"system_prompt":"","index":6993}
{"question":"Edit the following Python program to print all the numbers in a given list, one number per line.","input":"[1, 2, 3, 4, 5]","expected_output":"list = [1, 2, 3, 4, 5]\n\nfor num in list:\n    print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to print all the numbers in a given list, one number per line.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nlist = [1, 2, 3, 4, 5]\n\nfor num in list:\n    print(num)","tok_input_length":89,"tok_output_length":27,"system_prompt":"","index":5791}
{"question":"Generate Python code to print the smallest number in a given list of numbers.","input":"[24, 14, 67, 89, 34, 52]","expected_output":"list_of_numbers = [24, 14, 67, 89, 34, 52]\nprint(min(list_of_numbers))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to print the smallest number in a given list of numbers.\n\n### Input:\n[24, 14, 67, 89, 34, 52]\n\n### Output:\nlist_of_numbers = [24, 14, 67, 89, 34, 52]\nprint(min(list_of_numbers))","tok_input_length":89,"tok_output_length":29,"system_prompt":"","index":652}
{"question":"Write Python code to create a JSON object from a given list.","input":"data = [1, 2, 3, 4, 5]","expected_output":"import json\n\ndata = [1, 2, 3, 4, 5]\n\ndata_json = json.dumps(data)\n\nprint(data_json)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to create a JSON object from a given list.\n\n### Input:\ndata = [1, 2, 3, 4, 5]\n\n### Output:\nimport json\n\ndata = [1, 2, 3, 4, 5]\n\ndata_json = json.dumps(data)\n\nprint(data_json)","tok_input_length":89,"tok_output_length":32,"system_prompt":"","index":7551}
{"question":"Generate a correct Python program to filter out elements of a list using lambda","input":"list = [1,2,3,4,5]","expected_output":"list = [1,2,3,4,5]\n\nresult = list(filter(lambda x : x % 2 == 0 , list))\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct Python program to filter out elements of a list using lambda\n\n### Input:\nlist = [1,2,3,4,5]\n\n### Output:\nlist = [1,2,3,4,5]\n\nresult = list(filter(lambda x : x % 2 == 0 , list))\nprint(result)","tok_input_length":89,"tok_output_length":34,"system_prompt":"","index":8002}
{"question":"Create a Python dictionary to store student and their grades.","input":"Bob \u2013 A\nCarol\u2013 B\nTed \u2013 C\nAlice \u2013 A","expected_output":"student_grades = {\n    \"Bob\": \"A\",\n    \"Carol\": \"B\",\n    \"Ted\": \"C\",\n    \"Alice\": \"A\"\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary to store student and their grades.\n\n### Input:\nBob \u2013 A\nCarol\u2013 B\nTed \u2013 C\nAlice \u2013 A\n\n### Output:\nstudent_grades = {\n    \"Bob\": \"A\",\n    \"Carol\": \"B\",\n    \"Ted\": \"C\",\n    \"Alice\": \"A\"\n}","tok_input_length":89,"tok_output_length":35,"system_prompt":"","index":17075}
{"question":"Design a class in Python that can be used to show the status of an order and print out the details in the console.","input":"","expected_output":"class OrderStatus:\n  def __init__(self, status):\n    self.status = status\n\n  def show_status(self):\n    print(f\"Order Status: {self.status}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that can be used to show the status of an order and print out the details in the console.\n\n### Input:\n\n\n### Output:\nclass OrderStatus:\n  def __init__(self, status):\n    self.status = status\n\n  def show_status(self):\n    print(f\"Order Status: {self.status}\")","tok_input_length":89,"tok_output_length":37,"system_prompt":"","index":7572}
{"question":"Create a Python script that takes in a string of text and returns the number of characters that contain a vowel.","input":"","expected_output":"def count_vowels(text):\n    counter = 0\n    for char in text:\n        if char in \"aeiouAEIOU\":\n            counter += 1\n    return counter","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes in a string of text and returns the number of characters that contain a vowel.\n\n### Input:\n\n\n### Output:\ndef count_vowels(text):\n    counter = 0\n    for char in text:\n        if char in \"aeiouAEIOU\":\n            counter += 1\n    return counter","tok_input_length":89,"tok_output_length":40,"system_prompt":"","index":13198}
{"question":"Write a Python program to generate a list of squares of values from 1 to a given input number.","input":"","expected_output":"def generate_squares(n):\n    res = []\n    for i in range(1, n+1):\n        res.append(i**2)\n    return res\n\nres = generate_squares(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a list of squares of values from 1 to a given input number.\n\n### Input:\n\n\n### Output:\ndef generate_squares(n):\n    res = []\n    for i in range(1, n+1):\n        res.append(i**2)\n    return res\n\nres = generate_squares(n)","tok_input_length":89,"tok_output_length":41,"system_prompt":"","index":11816}
{"question":"Handle the following errors in a python program - Type Error, Key Error and Value Error.","input":"","expected_output":"try:\n    # Code that might raise an error\nexcept TypeError:\n    # Code to handle type errors\nexcept KeyError:\n    # Code to handle key errors\nexcept ValueError:\n    # Code to handle value errors","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHandle the following errors in a python program - Type Error, Key Error and Value Error.\n\n### Input:\n\n\n### Output:\ntry:\n    # Code that might raise an error\nexcept TypeError:\n    # Code to handle type errors\nexcept KeyError:\n    # Code to handle key errors\nexcept ValueError:\n    # Code to handle value errors","tok_input_length":89,"tok_output_length":44,"system_prompt":"","index":8415}
{"question":"Generate a python program that can predict the approximate square root of a given number.","input":"","expected_output":"def sqrt(x): \n    root = x \n    epsilon = 0.0001\n    while abs(x - root * root) > epsilon:\n        root = (x\/root + root)\/2\n    return root","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that can predict the approximate square root of a given number.\n\n### Input:\n\n\n### Output:\ndef sqrt(x): \n    root = x \n    epsilon = 0.0001\n    while abs(x - root * root) > epsilon:\n        root = (x\/root + root)\/2\n    return root","tok_input_length":89,"tok_output_length":46,"system_prompt":"","index":9413}
{"question":"Write Python code to generate a random letter from A to Z.","input":"","expected_output":"import random\n \ndef generate_random_letter():\n    alphabet = list(map(chr, range(65, 91)))\n    random_letter = random.choice(alphabet)\n \n    return random_letter\n \nrandom_letter = generate_random_letter()\nprint(random_letter)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to generate a random letter from A to Z.\n\n### Input:\n\n\n### Output:\nimport random\n \ndef generate_random_letter():\n    alphabet = list(map(chr, range(65, 91)))\n    random_letter = random.choice(alphabet)\n \n    return random_letter\n \nrandom_letter = generate_random_letter()\nprint(random_letter)","tok_input_length":89,"tok_output_length":49,"system_prompt":"","index":1481}
{"question":"Write a Python script to get the nth Fibonacci number","input":"","expected_output":"def get_fibonacci_number(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return get_fibonacci_number(n-1) + get_fibonacci_number(n-2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to get the nth Fibonacci number\n\n### Input:\n\n\n### Output:\ndef get_fibonacci_number(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return get_fibonacci_number(n-1) + get_fibonacci_number(n-2)","tok_input_length":89,"tok_output_length":51,"system_prompt":"","index":2894}
{"question":"Write a Python program that parses and prints the value of the \"name\" field in a json string.","input":"json_string = '{\"name\":\"John\", \"age\":20, \"city\":\"San Fransisco\"}'","expected_output":"import json\n\ndata = json.loads(json_string)\n\nprint(data['name'])\n\n# Output: John","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that parses and prints the value of the \"name\" field in a json string.\n\n### Input:\njson_string = '{\"name\":\"John\", \"age\":20, \"city\":\"San Fransisco\"}'\n\n### Output:\nimport json\n\ndata = json.loads(json_string)\n\nprint(data['name'])\n\n# Output: John","tok_input_length":90,"tok_output_length":20,"system_prompt":"","index":18188}
{"question":"Write a Python program to print out the numbers from 0 to 20, but only print out 3, 5, and 8.","input":"Not applicable","expected_output":"for i in range(0,21):\n if i == 3 or i == 5 or i == 8:\n  print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the numbers from 0 to 20, but only print out 3, 5, and 8.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(0,21):\n if i == 3 or i == 5 or i == 8:\n  print(i)","tok_input_length":90,"tok_output_length":30,"system_prompt":"","index":12062}
{"question":"Debug this Python code.","input":"def calculate_sum(numbers):\n      sum = 0\n      for num in numbers\n         sum += num\n      return sum","expected_output":"def calculate_sum(numbers):\n      sum = 0\n      for num in numbers: # the colon is missing\n         sum += num\n      return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug this Python code.\n\n### Input:\ndef calculate_sum(numbers):\n      sum = 0\n      for num in numbers\n         sum += num\n      return sum\n\n### Output:\ndef calculate_sum(numbers):\n      sum = 0\n      for num in numbers: # the colon is missing\n         sum += num\n      return sum","tok_input_length":90,"tok_output_length":32,"system_prompt":"","index":18335}
{"question":"Answer a question using Python.","input":"Question: What is the sum of all numbers divisible by 25 between 500 and 1000?","expected_output":"int sum = 0\n \nfor i in range(500, 1000):\n  if(i % 25 == 0):\n    sum += i\n \nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnswer a question using Python.\n\n### Input:\nQuestion: What is the sum of all numbers divisible by 25 between 500 and 1000?\n\n### Output:\nint sum = 0\n \nfor i in range(500, 1000):\n  if(i % 25 == 0):\n    sum += i\n \nprint(sum)","tok_input_length":90,"tok_output_length":36,"system_prompt":"","index":1174}
{"question":"Write a Python program to print out the numbers from one to ten and identify any numbers that are divisible by three.","input":"Not applicable","expected_output":"for i in range(1, 11):\n if i % 3 == 0:\n print (f'{i} is divisible by three.')\n else:\n print (i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the numbers from one to ten and identify any numbers that are divisible by three.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(1, 11):\n if i % 3 == 0:\n print (f'{i} is divisible by three.')\n else:\n print (i)","tok_input_length":90,"tok_output_length":37,"system_prompt":"","index":5151}
{"question":"Create a Python program to find the sum of all the multiples of 3 and 5 below 1000.","input":"","expected_output":"total = 0\nfor i in range(1000):\n    if i % 3 == 0 or i % 5 == 0:\n        total += i\nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the sum of all the multiples of 3 and 5 below 1000.\n\n### Input:\n\n\n### Output:\ntotal = 0\nfor i in range(1000):\n    if i % 3 == 0 or i % 5 == 0:\n        total += i\nprint(total)","tok_input_length":90,"tok_output_length":40,"system_prompt":"","index":14051}
{"question":"Develop a program in Python to subtract two given integers.","input":"int1=-5\nint2=3","expected_output":"# Program to subtract two integers\n\nint1 = -5\nint2 = 3\n\n# Subtract\nsubtract = int1 - int2\n \nprint(\" Difference of two given integers is :\", subtract)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to subtract two given integers.\n\n### Input:\nint1=-5\nint2=3\n\n### Output:\n# Program to subtract two integers\n\nint1 = -5\nint2 = 3\n\n# Subtract\nsubtract = int1 - int2\n \nprint(\" Difference of two given integers is :\", subtract)","tok_input_length":90,"tok_output_length":42,"system_prompt":"","index":9996}
{"question":"Write a Python program to take a string as input and return a new string with all vowels removed.","input":"","expected_output":"def remove_vowels(string):\n    # compile regex\n    regex = re.compile('[aeiou]', re.IGNORECASE)\n    # replace matching characters with an empty string\n    return regex.sub('', string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to take a string as input and return a new string with all vowels removed.\n\n### Input:\n\n\n### Output:\ndef remove_vowels(string):\n    # compile regex\n    regex = re.compile('[aeiou]', re.IGNORECASE)\n    # replace matching characters with an empty string\n    return regex.sub('', string)","tok_input_length":90,"tok_output_length":43,"system_prompt":"","index":16835}
{"question":"Create a Python program to generate the powers of two up to a given number.","input":"8","expected_output":"def powersOfTwo(n):\n    powers = []\n    for i in range(n + 1):\n        powers.append(2**i)\n    return powers\n\nn = 8\nprint(powersOfTwo(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate the powers of two up to a given number.\n\n### Input:\n8\n\n### Output:\ndef powersOfTwo(n):\n    powers = []\n    for i in range(n + 1):\n        powers.append(2**i)\n    return powers\n\nn = 8\nprint(powersOfTwo(n))","tok_input_length":90,"tok_output_length":45,"system_prompt":"","index":9411}
{"question":"Read the string \u2018Hello World\u2019 and identify the lengths of the words using Python","input":"","expected_output":"def word_lengths(string):\n    words = string.split(' ')\n    lengths = []\n    for word in words:\n        lengths.append(len(word))\n    return lengths \n\nword_lengths('Hello World') \/\/ [5, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRead the string \u2018Hello World\u2019 and identify the lengths of the words using Python\n\n### Input:\n\n\n### Output:\ndef word_lengths(string):\n    words = string.split(' ')\n    lengths = []\n    for word in words:\n        lengths.append(len(word))\n    return lengths \n\nword_lengths('Hello World') \/\/ [5, 5]","tok_input_length":90,"tok_output_length":46,"system_prompt":"","index":15410}
{"question":"Develop a program in Python to calculate the average of five given numbers.","input":"","expected_output":"def average(nums):\n total = 0\n for num in nums:\n  total+=num\n return total \/ len(nums)\n\nprint(average([1, 2, 3, 4, 5]))\n\/\/ Output: 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to calculate the average of five given numbers.\n\n### Input:\n\n\n### Output:\ndef average(nums):\n total = 0\n for num in nums:\n  total+=num\n return total \/ len(nums)\n\nprint(average([1, 2, 3, 4, 5]))\n\/\/ Output: 3","tok_input_length":90,"tok_output_length":49,"system_prompt":"","index":6588}
{"question":"Develop a program in Python that generates the Fibonacci Series.","input":"","expected_output":"def fib(n):\n a, b = 0, 1\n while a < n:\n print(a, end=\" \")\n a, b = b, a+b\n print()\n\nn = int(input(\"Enter the number of terms: \"))\nfib(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python that generates the Fibonacci Series.\n\n### Input:\n\n\n### Output:\ndef fib(n):\n a, b = 0, 1\n while a < n:\n print(a, end=\" \")\n a, b = b, a+b\n print()\n\nn = int(input(\"Enter the number of terms: \"))\nfib(n)","tok_input_length":90,"tok_output_length":52,"system_prompt":"","index":6469}
{"question":"Edit the following Python code such that the function produces output in the format \"<Name> said: '<Message>'.","input":"def generate_message(name, message):\n    print(name + ' said: ' + message)","expected_output":"def generate_message(name, message):\n    print(name + ' said: ' + \"'\" + message + \"'\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code such that the function produces output in the format \"<Name> said: '<Message>'.\n\n### Input:\ndef generate_message(name, message):\n    print(name + ' said: ' + message)\n\n### Output:\ndef generate_message(name, message):\n    print(name + ' said: ' + \"'\" + message + \"'\")","tok_input_length":91,"tok_output_length":23,"system_prompt":"","index":10567}
{"question":"Write a function in Python which will take an array of numbers and return the numbers in descending order.","input":"Example Array: [1, 12, 3, 8]","expected_output":"def sortDescending(arr):\n    return sorted(arr, reverse=True)\n\nprint(sortDescending([1, 12, 3, 8]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python which will take an array of numbers and return the numbers in descending order.\n\n### Input:\nExample Array: [1, 12, 3, 8]\n\n### Output:\ndef sortDescending(arr):\n    return sorted(arr, reverse=True)\n\nprint(sortDescending([1, 12, 3, 8]))","tok_input_length":91,"tok_output_length":29,"system_prompt":"","index":17332}
{"question":"Write a Python program that takes a list and prints out the items after sorting them in descending order.","input":"['apple', 'banana', 'cherry']","expected_output":"fruit = ['apple', 'banana', 'cherry'] \nfruit.sort(reverse=True)\nprint(fruit) # ['cherry', 'banana', 'apple']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list and prints out the items after sorting them in descending order.\n\n### Input:\n['apple', 'banana', 'cherry']\n\n### Output:\nfruit = ['apple', 'banana', 'cherry'] \nfruit.sort(reverse=True)\nprint(fruit) # ['cherry', 'banana', 'apple']","tok_input_length":91,"tok_output_length":34,"system_prompt":"","index":2656}
{"question":"Create a python program that calculates the total cost of an item given the quantity and price.","input":"Quantity: 5, Price: 10","expected_output":"def calcTotalCost(quantity, price):\n    totalCost = quantity * price\n    return totalCost\n\nresult = calcTotalCost(5, 10)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that calculates the total cost of an item given the quantity and price.\n\n### Input:\nQuantity: 5, Price: 10\n\n### Output:\ndef calcTotalCost(quantity, price):\n    totalCost = quantity * price\n    return totalCost\n\nresult = calcTotalCost(5, 10)\nprint(result)","tok_input_length":91,"tok_output_length":36,"system_prompt":"","index":3813}
{"question":"Write a Python function that computes the area of a square using the side length as a parameter.","input":"Side length: 5","expected_output":"def calArea(side):\n\treturn side * side\n\nif __name__ == '__main__':\n\tside = 5\n\tarea = calArea(side)\n\tprint('Area of Square = ', area)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that computes the area of a square using the side length as a parameter.\n\n### Input:\nSide length: 5\n\n### Output:\ndef calArea(side):\n\treturn side * side\n\nif __name__ == '__main__':\n\tside = 5\n\tarea = calArea(side)\n\tprint('Area of Square = ', area)","tok_input_length":91,"tok_output_length":39,"system_prompt":"","index":12809}
{"question":"Create a class in Python that makes a connection to an active database, and closes the connection when the class is deleted.","input":"","expected_output":"class DatabaseConnection:\n    def __init__(self):\n        self.conn = psycopg2.connect(host=\"localhost\", database=\"mydb\")\n\n    def __del__(self):\n        self.conn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that makes a connection to an active database, and closes the connection when the class is deleted.\n\n### Input:\n\n\n### Output:\nclass DatabaseConnection:\n    def __init__(self):\n        self.conn = psycopg2.connect(host=\"localhost\", database=\"mydb\")\n\n    def __del__(self):\n        self.conn.close()","tok_input_length":91,"tok_output_length":40,"system_prompt":"","index":11857}
{"question":"Generate a Python script that takes two numbers as arguments and returns the greatest common divisor.","input":"21 and 15","expected_output":"def gcd(a, b):\n if b == 0:\n return a\n   \n return gcd(b, a % b)\n \na = 21\nb = 15\n\nprint(gcd(a, b))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that takes two numbers as arguments and returns the greatest common divisor.\n\n### Input:\n21 and 15\n\n### Output:\ndef gcd(a, b):\n if b == 0:\n return a\n   \n return gcd(b, a % b)\n \na = 21\nb = 15\n\nprint(gcd(a, b))","tok_input_length":91,"tok_output_length":42,"system_prompt":"","index":8745}
{"question":"Develop a Python program to generate a set of random numbers from 1 to 100 with no duplicates.","input":"","expected_output":"import random\n\ndef generate_random_numbers():\n    random_numbers = set()\n    while len(random_numbers) < 100: \n        random_numbers.add(random.randint(1, 100)) \n\n    return random_numbers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate a set of random numbers from 1 to 100 with no duplicates.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_numbers():\n    random_numbers = set()\n    while len(random_numbers) < 100: \n        random_numbers.add(random.randint(1, 100)) \n\n    return random_numbers","tok_input_length":91,"tok_output_length":43,"system_prompt":"","index":18168}
{"question":"Write a Python program to get the squares of the numbers up to a given number n.","input":"","expected_output":"def get_squares(n):\n    squares = []\n    for i in range(1, n + 1):\n        squares.append(i**2)\n    return squares\n\nresult = get_squares(10)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to get the squares of the numbers up to a given number n.\n\n### Input:\n\n\n### Output:\ndef get_squares(n):\n    squares = []\n    for i in range(1, n + 1):\n        squares.append(i**2)\n    return squares\n\nresult = get_squares(10)\nprint(result)","tok_input_length":91,"tok_output_length":46,"system_prompt":"","index":5488}
{"question":"Design a program in Python that prints out the binary equivalent of a given decimal number.","input":"","expected_output":"def dec_to_bin(num):\n    binary = \"\"\n    while num > 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num \/\/ 2\n    return binary","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that prints out the binary equivalent of a given decimal number.\n\n### Input:\n\n\n### Output:\ndef dec_to_bin(num):\n    binary = \"\"\n    while num > 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num \/\/ 2\n    return binary","tok_input_length":91,"tok_output_length":47,"system_prompt":"","index":16206}
{"question":"Implement a program in Python to separate odd and even numbers in separate arrays.","input":"","expected_output":"def separate_odd_even(arr):\n    odd = []\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a program in Python to separate odd and even numbers in separate arrays.\n\n### Input:\n\n\n### Output:\ndef separate_odd_even(arr):\n    odd = []\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even","tok_input_length":91,"tok_output_length":49,"system_prompt":"","index":1989}
{"question":"Create a python program that creates a random password with 8 characters.","input":"","expected_output":"import random\nimport string\n\ndef create_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(8))\n    return password\n\nprint(create_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that creates a random password with 8 characters.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef create_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(8))\n    return password\n\nprint(create_password())","tok_input_length":91,"tok_output_length":50,"system_prompt":"","index":2084}
{"question":"Create a Python function to encode a given sentence into base64.","input":"","expected_output":"import base64\n\ndef encodeInBase64(msg):\n    msg_bytes = msg.encode('ascii')\n    base64_bytes = base64.b64encode(msg_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to encode a given sentence into base64.\n\n### Input:\n\n\n### Output:\nimport base64\n\ndef encodeInBase64(msg):\n    msg_bytes = msg.encode('ascii')\n    base64_bytes = base64.b64encode(msg_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message","tok_input_length":91,"tok_output_length":51,"system_prompt":"","index":13459}
{"question":"Implement a Fourier Transform algorithm in Python.","input":"Not applicable","expected_output":"import numpy as np\n\ndef fourierTransform(signal):\n    N = signal.shape[0]\n    W = np.exp(2j * np.pi * np.arange(N) \/ N)\n    fourier = np.dot(signal, W)\n    return fourier","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Fourier Transform algorithm in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\ndef fourierTransform(signal):\n    N = signal.shape[0]\n    W = np.exp(2j * np.pi * np.arange(N) \/ N)\n    fourier = np.dot(signal, W)\n    return fourier","tok_input_length":91,"tok_output_length":53,"system_prompt":"","index":11863}
{"question":"Edit the following Python code to implement case-insensitivity and replace \"word\" with a user-defined variable.","input":"word = 'SUPER'\n\nif word == 'super' or word == 'SUPER':\n print('Object found')","expected_output":"word = input('Enter word: ')\n\nif word.lower() == 'super':\n print('Object found')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to implement case-insensitivity and replace \"word\" with a user-defined variable.\n\n### Input:\nword = 'SUPER'\n\nif word == 'super' or word == 'SUPER':\n print('Object found')\n\n### Output:\nword = input('Enter word: ')\n\nif word.lower() == 'super':\n print('Object found')","tok_input_length":92,"tok_output_length":22,"system_prompt":"","index":1450}
{"question":"Edit the following code in Python and make it shorter.","input":"def add(x, y):\n    z = x + y\n    return z\n\nsum = add(10, 20)\nprint(sum)","expected_output":"def add(x, y):\n    return x + y\n\nsum = add(10, 20)\nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code in Python and make it shorter.\n\n### Input:\ndef add(x, y):\n    z = x + y\n    return z\n\nsum = add(10, 20)\nprint(sum)\n\n### Output:\ndef add(x, y):\n    return x + y\n\nsum = add(10, 20)\nprint(sum)","tok_input_length":92,"tok_output_length":25,"system_prompt":"","index":16974}
{"question":"Generate a class in Python that represents a data record. The class should have three fields: name (string), age (integer) and gender (string).","input":"Not applicable","expected_output":"class DataRecord:\n def __init__(self, name, age, gender):\n self.name = name\n self.age = age\n self.gender = gender","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python that represents a data record. The class should have three fields: name (string), age (integer) and gender (string).\n\n### Input:\nNot applicable\n\n### Output:\nclass DataRecord:\n def __init__(self, name, age, gender):\n self.name = name\n self.age = age\n self.gender = gender","tok_input_length":92,"tok_output_length":31,"system_prompt":"","index":14747}
{"question":"Create an algorithm in Python that takes an array of strings and sorts them in alphabetical order.","input":"['Jan', 'June', 'Raju', 'April']","expected_output":"def alphabeticalSort(arr):\n    arr.sort()\n    return arr\n\nresult = alphabeticalSort(['Jan', 'June', 'Raju', 'April'])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes an array of strings and sorts them in alphabetical order.\n\n### Input:\n['Jan', 'June', 'Raju', 'April']\n\n### Output:\ndef alphabeticalSort(arr):\n    arr.sort()\n    return arr\n\nresult = alphabeticalSort(['Jan', 'June', 'Raju', 'April'])\nprint(result)","tok_input_length":92,"tok_output_length":34,"system_prompt":"","index":10025}
{"question":"Write a python script to remove all punctuations and whitespace in a string","input":"string = \"Hello, how are you! I'm doing great.\"","expected_output":"def remove_punc_and_whitespace(string): \n    return ''.join([x for x in string if x not in [\" \", \",\", \":\", \"-\", \"!\", \"?\", \".\"]])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to remove all punctuations and whitespace in a string\n\n### Input:\nstring = \"Hello, how are you! I'm doing great.\"\n\n### Output:\ndef remove_punc_and_whitespace(string): \n    return ''.join([x for x in string if x not in [\" \", \",\", \":\", \"-\", \"!\", \"?\", \".\"]])","tok_input_length":92,"tok_output_length":36,"system_prompt":"","index":4775}
{"question":"Create a Python script to return the average of the given list of numbers.","input":"[10, 15, 20, 25]","expected_output":"def average(numbers):\n total = 0\n for num in numbers:\n total += num\n return total \/ len(numbers)\n\naverage([10, 15, 20, 25])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to return the average of the given list of numbers.\n\n### Input:\n[10, 15, 20, 25]\n\n### Output:\ndef average(numbers):\n total = 0\n for num in numbers:\n total += num\n return total \/ len(numbers)\n\naverage([10, 15, 20, 25])","tok_input_length":92,"tok_output_length":38,"system_prompt":"","index":10002}
{"question":"Design a computer program to sort the list according to alphabetical order.","input":"[\"python\", \"javascript\", \"java\", \"ruby\"]","expected_output":"def alphabetical_sort(words):\n    return sorted(words)\n\nlist_of_words = [\"python\", \"javascript\", \"java\", \"ruby\"]\nsorted_list = alphabetical_sort(list_of_words)\nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a computer program to sort the list according to alphabetical order.\n\n### Input:\n[\"python\", \"javascript\", \"java\", \"ruby\"]\n\n### Output:\ndef alphabetical_sort(words):\n    return sorted(words)\n\nlist_of_words = [\"python\", \"javascript\", \"java\", \"ruby\"]\nsorted_list = alphabetical_sort(list_of_words)\nprint(sorted_list)","tok_input_length":92,"tok_output_length":40,"system_prompt":"","index":2011}
{"question":"Create a program in Python to calculate the sum of the first n positive integers, using recursion.","input":"n = 5","expected_output":"def calculateSum(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + calculateSum(n-1)\n\nresult = calculateSum(5)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to calculate the sum of the first n positive integers, using recursion.\n\n### Input:\nn = 5\n\n### Output:\ndef calculateSum(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + calculateSum(n-1)\n\nresult = calculateSum(5)\nprint(result)","tok_input_length":92,"tok_output_length":41,"system_prompt":"","index":14292}
{"question":"Develop a Python program to detect if an entered number is even or odd.","input":"The entered number is 344","expected_output":"even_or_odd = int(input(\"Please enter a number: \"))\nif even_or_odd % 2 == 0:\n  print(\"The number is Even.\")\nelse:\n  print(\"The number is Odd.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to detect if an entered number is even or odd.\n\n### Input:\nThe entered number is 344\n\n### Output:\neven_or_odd = int(input(\"Please enter a number: \"))\nif even_or_odd % 2 == 0:\n  print(\"The number is Even.\")\nelse:\n  print(\"The number is Odd.\")","tok_input_length":92,"tok_output_length":43,"system_prompt":"","index":10013}
{"question":"Write a Python program to extract the text from an HTML document.","input":"<h2>Hello World!<\/h2>","expected_output":"from bs4 import BeautifulSoup\n\nhtml = '<h2>Hello World!<\/h2>'\nsoup = BeautifulSoup(html, 'html.parser')\ntext = soup.find('h2').text\n\nprint(text) # Hello World!","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract the text from an HTML document.\n\n### Input:\n<h2>Hello World!<\/h2>\n\n### Output:\nfrom bs4 import BeautifulSoup\n\nhtml = '<h2>Hello World!<\/h2>'\nsoup = BeautifulSoup(html, 'html.parser')\ntext = soup.find('h2').text\n\nprint(text) # Hello World!","tok_input_length":92,"tok_output_length":44,"system_prompt":"","index":16337}
{"question":"Create a simple Python class that captures the number of clicks a user makes on a given button.","input":"","expected_output":"class ClickCounter:\n    def __init__(self):\n        self.click_count = 0\n\n    def record_click(self):\n        self.click_count += 1\n\n    def get_click_count(self):\n        return self.click_count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python class that captures the number of clicks a user makes on a given button.\n\n### Input:\n\n\n### Output:\nclass ClickCounter:\n    def __init__(self):\n        self.click_count = 0\n\n    def record_click(self):\n        self.click_count += 1\n\n    def get_click_count(self):\n        return self.click_count","tok_input_length":92,"tok_output_length":46,"system_prompt":"","index":11046}
{"question":"Construct a program in Python 3 for getting the first two busiest airports in the USA","input":"","expected_output":"import pandas as pd\n\nairports = pd.read_csv('\/path\/to\/airports\/csv\/file.csv')\ntop_airports = airports.sort_values('Total_Arrivals', ascending=False).head(2)\nprint(top_airports)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python 3 for getting the first two busiest airports in the USA\n\n### Input:\n\n\n### Output:\nimport pandas as pd\n\nairports = pd.read_csv('\/path\/to\/airports\/csv\/file.csv')\ntop_airports = airports.sort_values('Total_Arrivals', ascending=False).head(2)\nprint(top_airports)","tok_input_length":92,"tok_output_length":47,"system_prompt":"","index":10958}
{"question":"Create an API endpoint in a Python Flask application to retrieve employee data.","input":"Not applicable","expected_output":"@app.route('\/employees', methods=['GET'])\ndef get_employees():\n employees = Employee.query.all()\n return {'employees': [{'id': emp.id, 'name': emp.name, 'age': emp.age} for emp in employees]}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint in a Python Flask application to retrieve employee data.\n\n### Input:\nNot applicable\n\n### Output:\n@app.route('\/employees', methods=['GET'])\ndef get_employees():\n employees = Employee.query.all()\n return {'employees': [{'id': emp.id, 'name': emp.name, 'age': emp.age} for emp in employees]}","tok_input_length":92,"tok_output_length":48,"system_prompt":"","index":7633}
{"question":"Write an Python program to convert Celsius to Fahrenheit.","input":"Celsius = 100","expected_output":"def celsius_to_fahrenheit(celsius):\n    fahrenheit = celsius * 9\/5 + 32\n    return fahrenheit\n\ncelsius = 100\nresult = celsius_to_fahrenheit(celsius)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an Python program to convert Celsius to Fahrenheit.\n\n### Input:\nCelsius = 100\n\n### Output:\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = celsius * 9\/5 + 32\n    return fahrenheit\n\ncelsius = 100\nresult = celsius_to_fahrenheit(celsius)\nprint(result)","tok_input_length":92,"tok_output_length":49,"system_prompt":"","index":16246}
{"question":"How can a programmer check the length of a string in python?","input":"","expected_output":"In Python, the length of a string can be checked by using the len() function. For example, the length of the string \"Hello World\" can be checked by using the following code:\n\nmy_string = \"Hello World\"\nprint(len(my_string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can a programmer check the length of a string in python?\n\n### Input:\n\n\n### Output:\nIn Python, the length of a string can be checked by using the len() function. For example, the length of the string \"Hello World\" can be checked by using the following code:\n\nmy_string = \"Hello World\"\nprint(len(my_string))","tok_input_length":92,"tok_output_length":52,"system_prompt":"","index":3158}
{"question":"Design a program to reverse a given string.","input":"Python","expected_output":"def reverse_string(input_string):\n    reversed_string = \"\"\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string\n\ninput_string = \"Python\"\n\nprint(reverse_string(input_string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to reverse a given string.\n\n### Input:\nPython\n\n### Output:\ndef reverse_string(input_string):\n    reversed_string = \"\"\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string\n\ninput_string = \"Python\"\n\nprint(reverse_string(input_string))","tok_input_length":92,"tok_output_length":54,"system_prompt":"","index":567}
{"question":"Rewrite the following Java program in Python to calculate the area of the triangle.","input":"class Area { \n    double area(double b, double h) \n    { \n        return 0.5 * b * h; \n    } \n}","expected_output":"def area(b, h):\n    return 0.5 * b * h","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Java program in Python to calculate the area of the triangle.\n\n### Input:\nclass Area { \n    double area(double b, double h) \n    { \n        return 0.5 * b * h; \n    } \n}\n\n### Output:\ndef area(b, h):\n    return 0.5 * b * h","tok_input_length":93,"tok_output_length":17,"system_prompt":"","index":3787}
{"question":"Optimize the following Python program to increase its performance by three times.","input":"def slow_operation(n):\n    result = 0\n    for i in range(n):\n        result += i\n    return result","expected_output":"def fast_operation(n):\n    result = (n * (n + 1)) \/\/ 2\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python program to increase its performance by three times.\n\n### Input:\ndef slow_operation(n):\n    result = 0\n    for i in range(n):\n        result += i\n    return result\n\n### Output:\ndef fast_operation(n):\n    result = (n * (n + 1)) \/\/ 2\n    return result","tok_input_length":93,"tok_output_length":25,"system_prompt":"","index":16662}
{"question":"Construct a program in Python to search for a given number in an array.","input":"array = [1, 2, 3, 4, 5]\nnumber = 3","expected_output":"def search(array, x):\n\tfor i in range(len(array)):\n\t\tif array[i] == x:\n\t\t\treturn i\n\treturn -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python to search for a given number in an array.\n\n### Input:\narray = [1, 2, 3, 4, 5]\nnumber = 3\n\n### Output:\ndef search(array, x):\n\tfor i in range(len(array)):\n\t\tif array[i] == x:\n\t\t\treturn i\n\treturn -1","tok_input_length":93,"tok_output_length":29,"system_prompt":"","index":2626}
{"question":"Write a Python program to print out the even numbers in the given list.","input":"list = [1, 4, 5, 6, 7, 8]","expected_output":"#Print out even numbers from the given list\nfor num in list:\n    if (num % 2 == 0):\n        print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the even numbers in the given list.\n\n### Input:\nlist = [1, 4, 5, 6, 7, 8]\n\n### Output:\n#Print out even numbers from the given list\nfor num in list:\n    if (num % 2 == 0):\n        print(num)","tok_input_length":93,"tok_output_length":31,"system_prompt":"","index":5133}
{"question":"Suggest a completion for the following Python code so that it prints the characters in a string in reverse order.","input":"my_str = \"Hello World\"\n\nfor i in","expected_output":"my_str = \"Hello World\"\n\nfor i in range(len(my_str)-1, -1, -1):\n    print(my_str[i], end=\"\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following Python code so that it prints the characters in a string in reverse order.\n\n### Input:\nmy_str = \"Hello World\"\n\nfor i in\n\n### Output:\nmy_str = \"Hello World\"\n\nfor i in range(len(my_str)-1, -1, -1):\n    print(my_str[i], end=\"\")","tok_input_length":93,"tok_output_length":33,"system_prompt":"","index":16382}
{"question":"Create a Python dictionary which contains a list of key-value pairs of word counts.","input":"words = [\"cat\", \"apple\", \"dog\", \"banana\"]","expected_output":"word_count = {\n  'cat': 1, \n  'apple': 1,\n  'dog': 1,  \n  'banana': 1\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary which contains a list of key-value pairs of word counts.\n\n### Input:\nwords = [\"cat\", \"apple\", \"dog\", \"banana\"]\n\n### Output:\nword_count = {\n  'cat': 1, \n  'apple': 1,\n  'dog': 1,  \n  'banana': 1\n}","tok_input_length":93,"tok_output_length":36,"system_prompt":"","index":15643}
{"question":"Create a python function to classify a given dataset based on the numeric value of a given feature.","input":"Income<=50, Risk Level=Low","expected_output":"def classify_data(feature, value, outcome):\n    if feature == \"Income\" and float(value) <= 50:\n        return outcome\n    else:\n        return \"No Classification\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function to classify a given dataset based on the numeric value of a given feature.\n\n### Input:\nIncome<=50, Risk Level=Low\n\n### Output:\ndef classify_data(feature, value, outcome):\n    if feature == \"Income\" and float(value) <= 50:\n        return outcome\n    else:\n        return \"No Classification\"","tok_input_length":93,"tok_output_length":38,"system_prompt":"","index":14377}
{"question":"Use Python to calculate and print the sum of values in an array.","input":"[1,2,3,4,5]","expected_output":"arr = [1,2,3,4,5] \nsum = 0\nfor i in arr: \n    sum+=i \n    print(sum)\n\n# Output \n# 15","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to calculate and print the sum of values in an array.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\narr = [1,2,3,4,5] \nsum = 0\nfor i in arr: \n    sum+=i \n    print(sum)\n\n# Output \n# 15","tok_input_length":93,"tok_output_length":41,"system_prompt":"","index":7661}
{"question":"Write a Python program to separate the given string into a list of words.","input":"string=\"This is a test string\"","expected_output":"# Split the string into words \nwords = string.split(' ') \n\n# Print the list of words \nprint(words) # Output: ['This', 'is', 'a', 'test', 'string']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to separate the given string into a list of words.\n\n### Input:\nstring=\"This is a test string\"\n\n### Output:\n# Split the string into words \nwords = string.split(' ') \n\n# Print the list of words \nprint(words) # Output: ['This', 'is', 'a', 'test', 'string']","tok_input_length":93,"tok_output_length":43,"system_prompt":"","index":13795}
{"question":"Code a Python script to find the sum of the digits in a given number.","input":"Number: 452","expected_output":"def find_sum_of_digits(n):\n    sum = 0\n    while(n > 0):\n        rem = n % 10\n        sum += rem\n        n = n \/\/ 10\n    return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a Python script to find the sum of the digits in a given number.\n\n### Input:\nNumber: 452\n\n### Output:\ndef find_sum_of_digits(n):\n    sum = 0\n    while(n > 0):\n        rem = n % 10\n        sum += rem\n        n = n \/\/ 10\n    return sum","tok_input_length":93,"tok_output_length":45,"system_prompt":"","index":1977}
{"question":"Create an endpoint for a Python Flask application which returns JSON data for HTTP GET requests.","input":"Not applicable","expected_output":"@app.route('\/data', methods=['GET'])\ndef get_data():\n data = {\n 'key1': 'value1',\n 'key2': 'value2',\n 'key3': 'value3'\n }\n return jsonify(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an endpoint for a Python Flask application which returns JSON data for HTTP GET requests.\n\n### Input:\nNot applicable\n\n### Output:\n@app.route('\/data', methods=['GET'])\ndef get_data():\n data = {\n 'key1': 'value1',\n 'key2': 'value2',\n 'key3': 'value3'\n }\n return jsonify(data)","tok_input_length":93,"tok_output_length":46,"system_prompt":"","index":8530}
{"question":"Write a function in Python to replace multiple consecutive `1`s with just one `1`.","input":"","expected_output":"def remove_consecutive(list_of_numbers):\n    result = []\n    last_number = None\n    for number in list_of_numbers:\n        if number != last_number:\n            result.append(number)\n            last_number = number\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to replace multiple consecutive `1`s with just one `1`.\n\n### Input:\n\n\n### Output:\ndef remove_consecutive(list_of_numbers):\n    result = []\n    last_number = None\n    for number in list_of_numbers:\n        if number != last_number:\n            result.append(number)\n            last_number = number\n    return result","tok_input_length":93,"tok_output_length":48,"system_prompt":"","index":3128}
{"question":"Write a function in Python to calculate the nth value of the Fibonacci sequence.","input":"7","expected_output":"def fibonacci(n):\n  if n == 0 or n == 1:\n    return n\n  else:\n    return fibonacci(n - 1) + fibonacci(n - 2)\n  \nresult = fibonacci(7)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to calculate the nth value of the Fibonacci sequence.\n\n### Input:\n7\n\n### Output:\ndef fibonacci(n):\n  if n == 0 or n == 1:\n    return n\n  else:\n    return fibonacci(n - 1) + fibonacci(n - 2)\n  \nresult = fibonacci(7)\nprint(result)","tok_input_length":93,"tok_output_length":49,"system_prompt":"","index":5072}
{"question":"Create a class in Python that simulates a student's grades in a course.","input":"","expected_output":"class Student:\n    def __init__(self, course_name, grades):\n        self.course_name = course_name\n        self.grades = grades\n        \n    def get_grade(self):\n        return sum(self.grades) \/ len(self.grades)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that simulates a student's grades in a course.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, course_name, grades):\n        self.course_name = course_name\n        self.grades = grades\n        \n    def get_grade(self):\n        return sum(self.grades) \/ len(self.grades)","tok_input_length":93,"tok_output_length":50,"system_prompt":"","index":17680}
{"question":"Create a Python script to generate random passwords of length 8 characters.","input":"","expected_output":"import string\nimport random\n\ndef generatePassword():\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for i in range(8))\n  return password\n \nprint(generatePassword())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate random passwords of length 8 characters.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generatePassword():\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for i in range(8))\n  return password\n \nprint(generatePassword())","tok_input_length":93,"tok_output_length":52,"system_prompt":"","index":4335}
{"question":"Design an object-oriented class in Python to represent a circle.","input":"","expected_output":"class Circle:\n \n    def __init__(self, radius):\n        self.radius = radius\n \n    def area(self):\n        return self.radius**2 * 3.14\n \n    def circumference(self):\n        return 2 * 3.14 * self.radius","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an object-oriented class in Python to represent a circle.\n\n### Input:\n\n\n### Output:\nclass Circle:\n \n    def __init__(self, radius):\n        self.radius = radius\n \n    def area(self):\n        return self.radius**2 * 3.14\n \n    def circumference(self):\n        return 2 * 3.14 * self.radius","tok_input_length":93,"tok_output_length":54,"system_prompt":"","index":2506}
{"question":"Implement a bubble sort in Python.","input":"","expected_output":"def bubble_sort(lst):\n    for i in range(len(lst)-1,0,-1):\n        for j in range(i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a bubble sort in Python.\n\n### Input:\n\n\n### Output:\ndef bubble_sort(lst):\n    for i in range(len(lst)-1,0,-1):\n        for j in range(i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst","tok_input_length":93,"tok_output_length":59,"system_prompt":"","index":1349}
{"question":"Optimize a given Python code segment to run it faster.","input":"a = 10\n   b = 0\n   while a > 0:\n     b += 1\n     a -= 1","expected_output":"a = 10\nb = 0\nwhile a > 0:\n b += a\n a \/\/= 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python code segment to run it faster.\n\n### Input:\na = 10\n   b = 0\n   while a > 0:\n     b += 1\n     a -= 1\n\n### Output:\na = 10\nb = 0\nwhile a > 0:\n b += a\n a \/\/= 2","tok_input_length":94,"tok_output_length":25,"system_prompt":"","index":7302}
{"question":"Develop a Python program that uses a series of if-elif-else statements to act on the input data","input":"Input a string and the program should convert it to uppercase letters.","expected_output":"def convert_to_uppercase(data):\n    if type(data)==str:\n        return data.upper()\n    else:\n        print(\"Input must be a string\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that uses a series of if-elif-else statements to act on the input data\n\n### Input:\nInput a string and the program should convert it to uppercase letters.\n\n### Output:\ndef convert_to_uppercase(data):\n    if type(data)==str:\n        return data.upper()\n    else:\n        print(\"Input must be a string\")","tok_input_length":94,"tok_output_length":32,"system_prompt":"","index":15503}
{"question":"Create a function in Python that takes an array of numbers and prints out its maximum value.","input":"[1, 4, 8, 9, 10]","expected_output":"def print_max(arr):\n max_val = max(arr)\n print(max_val)\n \nprint_max([1, 4, 8, 9, 10])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes an array of numbers and prints out its maximum value.\n\n### Input:\n[1, 4, 8, 9, 10]\n\n### Output:\ndef print_max(arr):\n max_val = max(arr)\n print(max_val)\n \nprint_max([1, 4, 8, 9, 10])","tok_input_length":94,"tok_output_length":34,"system_prompt":"","index":3021}
{"question":"Develop a Python function to calculate the maximum, minimum and average of a given list.","input":"numbers = [3, 4, 5, 6]","expected_output":"def calculate_stats(numbers):\n    maximum = max(numbers)\n    minimum = min(numbers)\n    average = sum(numbers)\/len(numbers)\n    return (maximum, minimum, average)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to calculate the maximum, minimum and average of a given list.\n\n### Input:\nnumbers = [3, 4, 5, 6]\n\n### Output:\ndef calculate_stats(numbers):\n    maximum = max(numbers)\n    minimum = min(numbers)\n    average = sum(numbers)\/len(numbers)\n    return (maximum, minimum, average)","tok_input_length":94,"tok_output_length":36,"system_prompt":"","index":7677}
{"question":"Generate a Python script for sorting a list of items alphabetically.","input":"items = [\"Apple\", \"Banana\", \"Cherry\", \"Avocado\"]","expected_output":"def sort_items(items):\n  items.sort()\n  return items\n\nprint(sort_items(items))\n\n# Output\n['Apple', 'Avocado', 'Banana', 'Cherry']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for sorting a list of items alphabetically.\n\n### Input:\nitems = [\"Apple\", \"Banana\", \"Cherry\", \"Avocado\"]\n\n### Output:\ndef sort_items(items):\n  items.sort()\n  return items\n\nprint(sort_items(items))\n\n# Output\n['Apple', 'Avocado', 'Banana', 'Cherry']","tok_input_length":94,"tok_output_length":37,"system_prompt":"","index":11979}
{"question":"Generate a bar chart using the given data in Python.","input":"data = [10, 5, 20, 25, 15]","expected_output":"import matplotlib.pyplot as plt\n\ndata = [10, 5, 20, 25, 15]\n\nplt.bar(range(len(data)), data, color='blue')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a bar chart using the given data in Python.\n\n### Input:\ndata = [10, 5, 20, 25, 15]\n\n### Output:\nimport matplotlib.pyplot as plt\n\ndata = [10, 5, 20, 25, 15]\n\nplt.bar(range(len(data)), data, color='blue')\nplt.show()","tok_input_length":94,"tok_output_length":39,"system_prompt":"","index":6952}
{"question":"Develop a biopython program which counts the number of occurrences of a given DNA sequence.","input":"ATGGGCTAG","expected_output":"from Bio.Seq import Seq\nfrom Bio import SeqIO\n\nseq = Seq(\"ATGGGCTAG\")\n\n# Count the occurrence of the DNA sequence\ncount = seq.count_overlap(seq)\n\nprint(count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a biopython program which counts the number of occurrences of a given DNA sequence.\n\n### Input:\nATGGGCTAG\n\n### Output:\nfrom Bio.Seq import Seq\nfrom Bio import SeqIO\n\nseq = Seq(\"ATGGGCTAG\")\n\n# Count the occurrence of the DNA sequence\ncount = seq.count_overlap(seq)\n\nprint(count)","tok_input_length":94,"tok_output_length":43,"system_prompt":"","index":1689}
{"question":"Create a python code to extract the first name from a given full name.","input":"full_name = 'John Smith'","expected_output":"def extractFirstName(full_name):\n    first_name = full_name.split()[0]\n    return first_name\n\n# Input\nfull_name = 'John Smith'\n\n# Output\nresult = extractFirstName(full_name)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to extract the first name from a given full name.\n\n### Input:\nfull_name = 'John Smith'\n\n### Output:\ndef extractFirstName(full_name):\n    first_name = full_name.split()[0]\n    return first_name\n\n# Input\nfull_name = 'John Smith'\n\n# Output\nresult = extractFirstName(full_name)\nprint(result)","tok_input_length":94,"tok_output_length":45,"system_prompt":"","index":9613}
{"question":"Construct a function in Python to reverse the order of the words in a given string.","input":"hello world","expected_output":"def reverse_words(str):\n    words = str.split()\n    reversed_words = words[::-1]\n    reversed_str = ' '.join(reversed_words)\n    return reversed_str\n\nresult = reverse_words('hello world')\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python to reverse the order of the words in a given string.\n\n### Input:\nhello world\n\n### Output:\ndef reverse_words(str):\n    words = str.split()\n    reversed_words = words[::-1]\n    reversed_str = ' '.join(reversed_words)\n    return reversed_str\n\nresult = reverse_words('hello world')\nprint(result)","tok_input_length":94,"tok_output_length":47,"system_prompt":"","index":12296}
{"question":"Create a Python script to download a web page from a URL.","input":"https:\/\/example.com","expected_output":"import requests\n\n# Get the webpage\nurl = 'https:\/\/example.com'\nr = requests.get(url)\n\n# Save the webpage to a file \nwith open('webpage.html', 'wb') as f:\n f.write(r.content)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to download a web page from a URL.\n\n### Input:\nhttps:\/\/example.com\n\n### Output:\nimport requests\n\n# Get the webpage\nurl = 'https:\/\/example.com'\nr = requests.get(url)\n\n# Save the webpage to a file \nwith open('webpage.html', 'wb') as f:\n f.write(r.content)","tok_input_length":94,"tok_output_length":49,"system_prompt":"","index":16809}
{"question":"Create a Python function to replace all the vowels in a string with 'x'.","input":"","expected_output":"def replace_vowels(s):\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  for char in s:\n    if char in vowels:\n      s = s.replace(char, 'x')\n  return s","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to replace all the vowels in a string with 'x'.\n\n### Input:\n\n\n### Output:\ndef replace_vowels(s):\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  for char in s:\n    if char in vowels:\n      s = s.replace(char, 'x')\n  return s","tok_input_length":94,"tok_output_length":51,"system_prompt":"","index":9991}
{"question":"Write a Python script to generate the Fourier transform of a given signal.","input":"","expected_output":"from scipy.fftpack import fft \n \ndef fourier_transform(signal):\n \n    # length of the signal\n    N = len(signal)\n \n    # calculate fourier transform (complex numbers list)\n    fourier = fft(signal)\n \n    return fourier","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate the Fourier transform of a given signal.\n\n### Input:\n\n\n### Output:\nfrom scipy.fftpack import fft \n \ndef fourier_transform(signal):\n \n    # length of the signal\n    N = len(signal)\n \n    # calculate fourier transform (complex numbers list)\n    fourier = fft(signal)\n \n    return fourier","tok_input_length":94,"tok_output_length":53,"system_prompt":"","index":3868}
{"question":"Using Python, generate a random 8 character alphanumeric string.","input":"","expected_output":"import random\nimport string\n\ndef generate_random_string():\n    letters_and_digits = string.ascii_letters + string.digits\n    return ''.join((random.choice(letters_and_digits) for i in range(8)))\n\nrandom_string = generate_random_string()\nprint(random_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, generate a random 8 character alphanumeric string.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef generate_random_string():\n    letters_and_digits = string.ascii_letters + string.digits\n    return ''.join((random.choice(letters_and_digits) for i in range(8)))\n\nrandom_string = generate_random_string()\nprint(random_string)","tok_input_length":94,"tok_output_length":55,"system_prompt":"","index":8247}
{"question":"Categorize each code snippet into the appropriate programming language.","input":"Code snippet 1:\n\ndef add(a, b):\n    return a + b\n\nCode Snippet 2:\n\nint add (int a, int b) \n{\n return a + b;\n}","expected_output":"Code snippet 1: Python\nCode snippet 2: C\/C++","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCategorize each code snippet into the appropriate programming language.\n\n### Input:\nCode snippet 1:\n\ndef add(a, b):\n    return a + b\n\nCode Snippet 2:\n\nint add (int a, int b) \n{\n return a + b;\n}\n\n### Output:\nCode snippet 1: Python\nCode snippet 2: C\/C++","tok_input_length":95,"tok_output_length":16,"system_prompt":"","index":11573}
{"question":"Write a python script that sorts a list of strings by length.","input":"['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']","expected_output":"def sort_strings_by_length(strings):\n    # Sort strings by length in ascending order\n    strings.sort(key=len)\n    return strings","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that sorts a list of strings by length.\n\n### Input:\n['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\n\n### Output:\ndef sort_strings_by_length(strings):\n    # Sort strings by length in ascending order\n    strings.sort(key=len)\n    return strings","tok_input_length":95,"tok_output_length":27,"system_prompt":"","index":15968}
{"question":"Generate a subroutine in Python to convert a string date of the format DD\/MM\/YYYY to the Unix timestamp type.","input":"String date: \"25\/12\/2021\"","expected_output":"import datetime\n\ndef convert_to_unix_time_stamp(date):\n    date_object = datetime.datetime.strptime(date, \"%d\/%m\/%Y\")\n    \n    return date_object.timestamp()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a subroutine in Python to convert a string date of the format DD\/MM\/YYYY to the Unix timestamp type.\n\n### Input:\nString date: \"25\/12\/2021\"\n\n### Output:\nimport datetime\n\ndef convert_to_unix_time_stamp(date):\n    date_object = datetime.datetime.strptime(date, \"%d\/%m\/%Y\")\n    \n    return date_object.timestamp()","tok_input_length":95,"tok_output_length":35,"system_prompt":"","index":11546}
{"question":"Write a Python script to input a numeric value and generate the output in a formatted table structure.","input":"The table should have 5 rows and 3 columns.","expected_output":"for x in range(5):\n    for y in range(3):\n        col = input(\"Enter Value: \")\n        print(col, end=\"\\t\\t\")\n    print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to input a numeric value and generate the output in a formatted table structure.\n\n### Input:\nThe table should have 5 rows and 3 columns.\n\n### Output:\nfor x in range(5):\n    for y in range(3):\n        col = input(\"Enter Value: \")\n        print(col, end=\"\\t\\t\")\n    print()","tok_input_length":95,"tok_output_length":37,"system_prompt":"","index":13650}
{"question":"Design a function in Python that takes in a string and returns a list of words from the string in reverse order.","input":"The quick brown fox.","expected_output":"def reverseString(userString):\n wordList = userString.split(\" \")\n reversedStringList = list(reversed(wordList))\n\n return reversedStringList\n\nprint(reverseString(\"The quick brown fox.\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes in a string and returns a list of words from the string in reverse order.\n\n### Input:\nThe quick brown fox.\n\n### Output:\ndef reverseString(userString):\n wordList = userString.split(\" \")\n reversedStringList = list(reversed(wordList))\n\n return reversedStringList\n\nprint(reverseString(\"The quick brown fox.\"))","tok_input_length":95,"tok_output_length":40,"system_prompt":"","index":1489}
{"question":"Generate a code in Python that takes a string as input and removes duplicate characters from it","input":"St = \"DaSSmmoonnd\"","expected_output":"st = \"DaSSmmoonnd\"\nst_list = list(st)\nst_set = set(st_list)\nst_nodupes = ''.join(st_set)\nprint(st_nodupes)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code in Python that takes a string as input and removes duplicate characters from it\n\n### Input:\nSt = \"DaSSmmoonnd\"\n\n### Output:\nst = \"DaSSmmoonnd\"\nst_list = list(st)\nst_set = set(st_list)\nst_nodupes = ''.join(st_set)\nprint(st_nodupes)","tok_input_length":95,"tok_output_length":41,"system_prompt":"","index":5380}
{"question":"Generate a Python program that takes a positive integer as input and returns a boolean indicating whether it is a prime number or not.","input":"","expected_output":"def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a positive integer as input and returns a boolean indicating whether it is a prime number or not.\n\n### Input:\n\n\n### Output:\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True","tok_input_length":95,"tok_output_length":43,"system_prompt":"","index":6418}
{"question":"Generate a Python script to detect the number of capitalized words in a sentence.","input":"sentence = \"This is a Sample Sentence\"","expected_output":"def count_capitals(s):\n    count = 0\n    arr = s.split(' ')\n    for word in arr:\n        if word[0].isupper():\n            count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to detect the number of capitalized words in a sentence.\n\n### Input:\nsentence = \"This is a Sample Sentence\"\n\n### Output:\ndef count_capitals(s):\n    count = 0\n    arr = s.split(' ')\n    for word in arr:\n        if word[0].isupper():\n            count += 1\n    return count","tok_input_length":95,"tok_output_length":44,"system_prompt":"","index":13376}
{"question":"Create a python program to find the power of a number without using the built-in functions.","input":"2, 5","expected_output":"def power_of(x, n):\n    result = 1\n    for i in range(n):\n        result = result * x\n    return result\n\npower = power_of(2, 5)\nprint(power)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to find the power of a number without using the built-in functions.\n\n### Input:\n2, 5\n\n### Output:\ndef power_of(x, n):\n    result = 1\n    for i in range(n):\n        result = result * x\n    return result\n\npower = power_of(2, 5)\nprint(power)","tok_input_length":95,"tok_output_length":45,"system_prompt":"","index":10913}
{"question":"Develop a Python program to generate a random password of length 8 that consists of letters and numbers.","input":"","expected_output":"import random\nimport string\n\ndef  generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for x in range(size))\n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate a random password of length 8 that consists of letters and numbers.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef  generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for x in range(size))\n\nprint(generate_password())","tok_input_length":95,"tok_output_length":48,"system_prompt":"","index":2452}
{"question":"Create a web scrapper in Python that fetches the title of headlines from a web page.","input":"","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nresult = requests.get(\"http:\/\/example.com\")\nsoup = BeautifulSoup(result.text, 'lxml')\n\nfor link in soup.find_all('a'):\n    title = link.text\n    print(title)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scrapper in Python that fetches the title of headlines from a web page.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nresult = requests.get(\"http:\/\/example.com\")\nsoup = BeautifulSoup(result.text, 'lxml')\n\nfor link in soup.find_all('a'):\n    title = link.text\n    print(title)","tok_input_length":95,"tok_output_length":49,"system_prompt":"","index":3989}
{"question":"Generate Python code to print the first \u2018n\u2019 elements of the Fibonacci series.","input":"7","expected_output":"def print_fibonacci_series(n):\n    a, b = 0, 1\n    for i in range(n):\n        print(a)\n        a, b = b, a + b\n\nprint_fibonacci_series(7)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to print the first \u2018n\u2019 elements of the Fibonacci series.\n\n### Input:\n7\n\n### Output:\ndef print_fibonacci_series(n):\n    a, b = 0, 1\n    for i in range(n):\n        print(a)\n        a, b = b, a + b\n\nprint_fibonacci_series(7)","tok_input_length":95,"tok_output_length":50,"system_prompt":"","index":15190}
{"question":"In Python, build a program that can remove all vowels from a given string.","input":"","expected_output":"def remove_vowels(string):\n    vowels = ['a','e','i','o','u']\n    new_string = ''\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, build a program that can remove all vowels from a given string.\n\n### Input:\n\n\n### Output:\ndef remove_vowels(string):\n    vowels = ['a','e','i','o','u']\n    new_string = ''\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string","tok_input_length":95,"tok_output_length":52,"system_prompt":"","index":317}
{"question":"Implement a program in Python to generate a multiplication table for the given integer.","input":"","expected_output":"def multiplication_table(n): \n  \n    for i in range(1, 11): \n        print(\"{0:>2} X {1:2} = {2:2}\".format(n, i, n*i)) \n  \nmultiplication_table(6)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a program in Python to generate a multiplication table for the given integer.\n\n### Input:\n\n\n### Output:\ndef multiplication_table(n): \n  \n    for i in range(1, 11): \n        print(\"{0:>2} X {1:2} = {2:2}\".format(n, i, n*i)) \n  \nmultiplication_table(6)","tok_input_length":95,"tok_output_length":53,"system_prompt":"","index":18104}
{"question":"Develop a Python program to reverse an integer.","input":"12345","expected_output":"def reverse_int(num): \n    rev = 0\n    while num > 0: \n        rev = (rev*10) + (num%10)\n        num = num\/\/10\n    return rev \n\n#test\nprint(reverse_int(12345))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to reverse an integer.\n\n### Input:\n12345\n\n### Output:\ndef reverse_int(num): \n    rev = 0\n    while num > 0: \n        rev = (rev*10) + (num%10)\n        num = num\/\/10\n    return rev \n\n#test\nprint(reverse_int(12345))","tok_input_length":95,"tok_output_length":56,"system_prompt":"","index":6500}
{"question":"Generate a list of alphabets in Python","input":"","expected_output":"alphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of alphabets in Python\n\n### Input:\n\n\n### Output:\nalphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']","tok_input_length":95,"tok_output_length":58,"system_prompt":"","index":16741}
{"question":"Write a Python function that normalizes a given string. The function should remove all the special characters from the string and convert it to all lowercase.","input":"\"Hello,! W0rld.\"","expected_output":"def normalize_string(text):\n\ttext = text.lower()\n\ttext = ''.join(ch for ch in text if ch.isalnum() or ch == ' ')\n\treturn text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that normalizes a given string. The function should remove all the special characters from the string and convert it to all lowercase.\n\n### Input:\n\"Hello,! W0rld.\"\n\n### Output:\ndef normalize_string(text):\n\ttext = text.lower()\n\ttext = ''.join(ch for ch in text if ch.isalnum() or ch == ' ')\n\treturn text","tok_input_length":96,"tok_output_length":32,"system_prompt":"","index":11065}
{"question":"Automate the task of checking if an array of numbers is in sorted order using a Python program.","input":"[2, 3, 6, 4, 8]","expected_output":"def is_sorted(nums):\n    for i, num in enumerate(nums[:-1]):\n        if num > nums[i + 1]:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate the task of checking if an array of numbers is in sorted order using a Python program.\n\n### Input:\n[2, 3, 6, 4, 8]\n\n### Output:\ndef is_sorted(nums):\n    for i, num in enumerate(nums[:-1]):\n        if num > nums[i + 1]:\n            return False\n    return True","tok_input_length":96,"tok_output_length":34,"system_prompt":"","index":18519}
{"question":"Create a python function which sorts an array of integers into ascending order.","input":"[3, 7, 8, 1, 5, 4]","expected_output":"def sort_int_asc(arr):\n    arr.sort()\n    return arr\n\nprint(sort_int_asc([3, 7, 8, 1, 5, 4]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function which sorts an array of integers into ascending order.\n\n### Input:\n[3, 7, 8, 1, 5, 4]\n\n### Output:\ndef sort_int_asc(arr):\n    arr.sort()\n    return arr\n\nprint(sort_int_asc([3, 7, 8, 1, 5, 4]))","tok_input_length":96,"tok_output_length":37,"system_prompt":"","index":9353}
{"question":"Serialize a list of dictionaries in Python","input":"[{'name':'John', 'age':30},\n{'name':'Paul', 'age':22}]","expected_output":"import json\n\ndata = [{'name':'John', 'age':30},\n{'name':'Paul', 'age':22}]\n\nserialized_data = json.dumps(data)\nprint(serialized_data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSerialize a list of dictionaries in Python\n\n### Input:\n[{'name':'John', 'age':30},\n{'name':'Paul', 'age':22}]\n\n### Output:\nimport json\n\ndata = [{'name':'John', 'age':30},\n{'name':'Paul', 'age':22}]\n\nserialized_data = json.dumps(data)\nprint(serialized_data)","tok_input_length":96,"tok_output_length":39,"system_prompt":"","index":14215}
{"question":"Add a try-catch block to the given Python code","input":"x = 10\ny = 0\nz = x\/y","expected_output":"try:\n  x = 10\n  y = 0\n  z = x\/y\nexcept ZeroDivisionError:\n  print(\"ZeroDivisionError occurred: Cannot divide a number by 0\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd a try-catch block to the given Python code\n\n### Input:\nx = 10\ny = 0\nz = x\/y\n\n### Output:\ntry:\n  x = 10\n  y = 0\n  z = x\/y\nexcept ZeroDivisionError:\n  print(\"ZeroDivisionError occurred: Cannot divide a number by 0\")","tok_input_length":96,"tok_output_length":42,"system_prompt":"","index":17555}
{"question":"Write a Python program to convert a given temperature from Celsius to Fahrenheit using a given formula.","input":"Temperature in Celsius: 30","expected_output":"def celsius_to_fahrenheit(celsius):\n fahrenheit = (celsius * 9\/5) + 32\n return fahrenheit\n\ncelsius_to_fahrenheit(30) # returns 86.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given temperature from Celsius to Fahrenheit using a given formula.\n\n### Input:\nTemperature in Celsius: 30\n\n### Output:\ndef celsius_to_fahrenheit(celsius):\n fahrenheit = (celsius * 9\/5) + 32\n return fahrenheit\n\ncelsius_to_fahrenheit(30) # returns 86.0","tok_input_length":96,"tok_output_length":44,"system_prompt":"","index":13520}
{"question":"Create an logging utility in Python that prints the timestamp along with the logged content for each log entry.","input":"Not applicable.","expected_output":"import datetime\n\ndef log(content):\n timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n message = f\"{timestamp}: {content}\"\n print(message)\n \nlog('Logging Message')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an logging utility in Python that prints the timestamp along with the logged content for each log entry.\n\n### Input:\nNot applicable.\n\n### Output:\nimport datetime\n\ndef log(content):\n timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n message = f\"{timestamp}: {content}\"\n print(message)\n \nlog('Logging Message')","tok_input_length":96,"tok_output_length":46,"system_prompt":"","index":1211}
{"question":"Create a password generator using Python that places random characters, numbers, and symbols into an output phrase.","input":"","expected_output":"import string\nimport random\n\ndef password_generator(length):\n   password_characters = string.ascii_letters + string.digits + string.punctuation\n   new_password = \"\".join(random.choice(password_characters) for i in range(length))\n   return new_password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a password generator using Python that places random characters, numbers, and symbols into an output phrase.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef password_generator(length):\n   password_characters = string.ascii_letters + string.digits + string.punctuation\n   new_password = \"\".join(random.choice(password_characters) for i in range(length))\n   return new_password","tok_input_length":96,"tok_output_length":49,"system_prompt":"","index":3720}
{"question":"Create a Python program to capture the data from a web page.","input":"https:\/\/www.example.com\/","expected_output":"import requests\nimport lxml.html as lh\n\nurl = 'https:\/\/www.example.com\/'\npage = requests.get(url)\ndoc = lh.fromstring(page.content)\n\n# parse and extract data from webpage\ndata = doc.xpath('\/\/p\/text()')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to capture the data from a web page.\n\n### Input:\nhttps:\/\/www.example.com\/\n\n### Output:\nimport requests\nimport lxml.html as lh\n\nurl = 'https:\/\/www.example.com\/'\npage = requests.get(url)\ndoc = lh.fromstring(page.content)\n\n# parse and extract data from webpage\ndata = doc.xpath('\/\/p\/text()')","tok_input_length":96,"tok_output_length":50,"system_prompt":"","index":10764}
{"question":"Design a web service in Python that takes two parameters: a list and an operation.","input":"","expected_output":"def web_service(list, operation):\n  if operation == \u2018sum':\n    sum = 0\n    for i in list:\n      sum += i\n    return sum\n  elif operation == 'mean':\n    return sum(list) \/ len(list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web service in Python that takes two parameters: a list and an operation.\n\n### Input:\n\n\n### Output:\ndef web_service(list, operation):\n  if operation == \u2018sum':\n    sum = 0\n    for i in list:\n      sum += i\n    return sum\n  elif operation == 'mean':\n    return sum(list) \/ len(list)","tok_input_length":96,"tok_output_length":52,"system_prompt":"","index":1973}
{"question":"Write a python program to convert degree Celsius to Fahrenheit.","input":"c = 22","expected_output":"def convert_celsius_to_fahrenheit(c):\n    f = (c * (9\/5)) + 32\n    return f\n\nf = convert_celsius_to_fahrenheit(c)\nprint('{} degree Celsius = {} degree Fahrenheit'.format(c, f))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to convert degree Celsius to Fahrenheit.\n\n### Input:\nc = 22\n\n### Output:\ndef convert_celsius_to_fahrenheit(c):\n    f = (c * (9\/5)) + 32\n    return f\n\nf = convert_celsius_to_fahrenheit(c)\nprint('{} degree Celsius = {} degree Fahrenheit'.format(c, f))","tok_input_length":96,"tok_output_length":53,"system_prompt":"","index":8364}
{"question":"Write a function in Python to generate random numbers within a desired range.","input":"","expected_output":"import random\n\n# define a function to generate random numbers\ndef generate_random(start, end):\n\treturn random.randint(start, end)\n\n# generate a random number in the given range\nstart = 10\nend = 15\nprint(generate_random(start, end))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to generate random numbers within a desired range.\n\n### Input:\n\n\n### Output:\nimport random\n\n# define a function to generate random numbers\ndef generate_random(start, end):\n\treturn random.randint(start, end)\n\n# generate a random number in the given range\nstart = 10\nend = 15\nprint(generate_random(start, end))","tok_input_length":96,"tok_output_length":55,"system_prompt":"","index":909}
{"question":"Generate a 5-digit pin code using a Python program.","input":"","expected_output":"import random\n \ndef generate_pin():\n    # generates a 5 digit pin\n    pin = \"\"\n    for i in range(5):\n        pin += str(random.randint(0,9))\n    return pin\n \npin = generate_pin()\nprint(\"Generated pin is:\", pin)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a 5-digit pin code using a Python program.\n\n### Input:\n\n\n### Output:\nimport random\n \ndef generate_pin():\n    # generates a 5 digit pin\n    pin = \"\"\n    for i in range(5):\n        pin += str(random.randint(0,9))\n    return pin\n \npin = generate_pin()\nprint(\"Generated pin is:\", pin)","tok_input_length":96,"tok_output_length":57,"system_prompt":"","index":2867}
{"question":"Optimize the following code in Python by improving its complexity.","input":"def my_function(input_array):\n  output_array = []\n  for elem in input_array:\n    if elem not in output_array:\n      output_array.append(elem)\n  return output_array","expected_output":"def my_function(input_array):\n  output_array = set()\n  return output_array.union(input_array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following code in Python by improving its complexity.\n\n### Input:\ndef my_function(input_array):\n  output_array = []\n  for elem in input_array:\n    if elem not in output_array:\n      output_array.append(elem)\n  return output_array\n\n### Output:\ndef my_function(input_array):\n  output_array = set()\n  return output_array.union(input_array)","tok_input_length":97,"tok_output_length":21,"system_prompt":"","index":4308}
{"question":"Optimize this code in Python to increase its performance.","input":"def double_word(word):\n    doubled_word = \"\"\n    for char in word:\n        doubled_word += char * 2\n    return doubled_word","expected_output":"def double_word(word):\n    doubled_word = \"\"\n    for char in word:\n        doubled_word += char + char\n    return doubled_word","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this code in Python to increase its performance.\n\n### Input:\ndef double_word(word):\n    doubled_word = \"\"\n    for char in word:\n        doubled_word += char * 2\n    return doubled_word\n\n### Output:\ndef double_word(word):\n    doubled_word = \"\"\n    for char in word:\n        doubled_word += char + char\n    return doubled_word","tok_input_length":97,"tok_output_length":29,"system_prompt":"","index":3416}
{"question":"Write a Python program to return the difference between the largest and smallest elements in a given list of integers.","input":"[10, 4, 2, 5, 7]","expected_output":"def diff(nums):\n    return max(nums) - min(nums)\n\nprint(diff([10, 4, 2, 5, 7])) # 8","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to return the difference between the largest and smallest elements in a given list of integers.\n\n### Input:\n[10, 4, 2, 5, 7]\n\n### Output:\ndef diff(nums):\n    return max(nums) - min(nums)\n\nprint(diff([10, 4, 2, 5, 7])) # 8","tok_input_length":97,"tok_output_length":34,"system_prompt":"","index":10251}
{"question":"Construct a code snippet in Python to eliminate all the negative numbers in a given list.","input":"list = [-3, -2, 0, 4, 5]","expected_output":"list = [-3, -2, 0, 4, 5]\n\nlist = [x for x in list if x >= 0] \n\nprint(list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code snippet in Python to eliminate all the negative numbers in a given list.\n\n### Input:\nlist = [-3, -2, 0, 4, 5]\n\n### Output:\nlist = [-3, -2, 0, 4, 5]\n\nlist = [x for x in list if x >= 0] \n\nprint(list)","tok_input_length":97,"tok_output_length":36,"system_prompt":"","index":1430}
{"question":"Write a Python program to find the maximum element in the given array [1, 10, 50, 3, 8].","input":"Not applicable","expected_output":"array = [1, 10, 50, 3, 8]\n\n# Get the maximum element\nmax_element = max(array)\n\nprint(max_element) # Output: 50","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the maximum element in the given array [1, 10, 50, 3, 8].\n\n### Input:\nNot applicable\n\n### Output:\narray = [1, 10, 50, 3, 8]\n\n# Get the maximum element\nmax_element = max(array)\n\nprint(max_element) # Output: 50","tok_input_length":97,"tok_output_length":39,"system_prompt":"","index":225}
{"question":"Generate a valid JSON from a given Python dictionary.","input":"data = {\n    'name': 'John',\n    'age': 25\n}","expected_output":"import json\ndata = {\n    'name': 'John',\n    'age': 25\n}\n\njson_data = json.dumps(data)\n# json_data = '{\"name\":\"John\",\"age\":25}'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid JSON from a given Python dictionary.\n\n### Input:\ndata = {\n    'name': 'John',\n    'age': 25\n}\n\n### Output:\nimport json\ndata = {\n    'name': 'John',\n    'age': 25\n}\n\njson_data = json.dumps(data)\n# json_data = '{\"name\":\"John\",\"age\":25}'","tok_input_length":97,"tok_output_length":42,"system_prompt":"","index":14824}
{"question":"Create a Python program that produces the output shown in this example.","input":"3\n3\n3\n3\n3\n3","expected_output":"def print_grid(grid_size):\n    for x in range(grid_size):\n        for y in range(grid_size):\n            print(grid_size, end=\" \")\n        print()\n\ngrid_size = 3\nprint_grid(grid_size)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that produces the output shown in this example.\n\n### Input:\n3\n3\n3\n3\n3\n3\n\n### Output:\ndef print_grid(grid_size):\n    for x in range(grid_size):\n        for y in range(grid_size):\n            print(grid_size, end=\" \")\n        print()\n\ngrid_size = 3\nprint_grid(grid_size)","tok_input_length":97,"tok_output_length":45,"system_prompt":"","index":912}
{"question":"Generate a random number between two given numbers, using Python.","input":"min_range = 30\nmax_range = 100","expected_output":"\"\"\"\nGenerate a random number between two given numbers, using Python\n\"\"\"\n\nimport random\n\ndef random_number(min_range, max_range):\n    return random.randrange(min_range, max_range)\n\nprint(random_number(30, 100))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number between two given numbers, using Python.\n\n### Input:\nmin_range = 30\nmax_range = 100\n\n### Output:\n\"\"\"\nGenerate a random number between two given numbers, using Python\n\"\"\"\n\nimport random\n\ndef random_number(min_range, max_range):\n    return random.randrange(min_range, max_range)\n\nprint(random_number(30, 100))","tok_input_length":97,"tok_output_length":46,"system_prompt":"","index":12941}
{"question":"Compose a function in Python to take two numbers as input and return the greatest number.","input":"5 and 8","expected_output":"def getGreatestNumber(a, b):\n    if a > b:\n        return a\n    return b\n\ngreatest_num = getGreatestNumber(5, 8)\nprint(\"Greatest number is\", greatest_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a function in Python to take two numbers as input and return the greatest number.\n\n### Input:\n5 and 8\n\n### Output:\ndef getGreatestNumber(a, b):\n    if a > b:\n        return a\n    return b\n\ngreatest_num = getGreatestNumber(5, 8)\nprint(\"Greatest number is\", greatest_num)","tok_input_length":97,"tok_output_length":48,"system_prompt":"","index":14007}
{"question":"Rewrite the following code using classes in Python.","input":"def square_number(number):\n return number * number","expected_output":"class Square: \n    def __init__(self, number): \n        self.number = number \n\n    def square_number(self): \n        return self.number * self.number \n\nnumber_obj = Square(10) \nprint(number_obj.square_number())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code using classes in Python.\n\n### Input:\ndef square_number(number):\n return number * number\n\n### Output:\nclass Square: \n    def __init__(self, number): \n        self.number = number \n\n    def square_number(self): \n        return self.number * self.number \n\nnumber_obj = Square(10) \nprint(number_obj.square_number())","tok_input_length":97,"tok_output_length":50,"system_prompt":"","index":4433}
{"question":"Generate a program to generate a random string of length 5 using the Python library 'random'","input":"","expected_output":"import random\n\ndef random_string(length):\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    random_string = ''\n    for i in range(length):\n        random_string += random.choice(chars)\n    return random_string\n    \nprint(random_string(5))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to generate a random string of length 5 using the Python library 'random'\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_string(length):\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    random_string = ''\n    for i in range(length):\n        random_string += random.choice(chars)\n    return random_string\n    \nprint(random_string(5))","tok_input_length":97,"tok_output_length":51,"system_prompt":"","index":7172}
{"question":"Create a Python script to print all prime numbers between 1 to 1000.","input":"","expected_output":"def print_prime_numbers():\n    for num in range(2, 1001):\n\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            print(num)\nprint_prime_numbers()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print all prime numbers between 1 to 1000.\n\n### Input:\n\n\n### Output:\ndef print_prime_numbers():\n    for num in range(2, 1001):\n\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            print(num)\nprint_prime_numbers()","tok_input_length":97,"tok_output_length":53,"system_prompt":"","index":1080}
{"question":"Implement a code in Python to print out the sum of the first six numbers.","input":"","expected_output":"# Initialize sum\nsum = 0\n\n# Use a for loop to iterate over numbers\nfor num in range(1, 7):\n    sum = sum + num\n\n# Print result\nprint(\"The sum of the first six numbers is:\", sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a code in Python to print out the sum of the first six numbers.\n\n### Input:\n\n\n### Output:\n# Initialize sum\nsum = 0\n\n# Use a for loop to iterate over numbers\nfor num in range(1, 7):\n    sum = sum + num\n\n# Print result\nprint(\"The sum of the first six numbers is:\", sum)","tok_input_length":97,"tok_output_length":54,"system_prompt":"","index":16734}
{"question":"Write a function in Python to compute the nth Fibonacci number.","input":"8","expected_output":"def fibonacciNum(n): \n    if n <= 1: \n        return n \n    else: \n        return (fibonacciNum(n-1) + fibonacciNum(n-2)) \n\nn = 8\nresult = fibonacciNum(n) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to compute the nth Fibonacci number.\n\n### Input:\n8\n\n### Output:\ndef fibonacciNum(n): \n    if n <= 1: \n        return n \n    else: \n        return (fibonacciNum(n-1) + fibonacciNum(n-2)) \n\nn = 8\nresult = fibonacciNum(n) \nprint(result)","tok_input_length":97,"tok_output_length":56,"system_prompt":"","index":10981}
{"question":"Create a class in Python that implements the stack data structure.","input":"","expected_output":"class Stack:\n def __init__(self):\n self.stack = []\n \n def push(self, item):\n self.stack.append(item)\n \n def pop(self):\n if self.is_empty():\n return None\n return self.stack.pop()\n \n def is_empty(self):\n return len(self.stack) == 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that implements the stack data structure.\n\n### Input:\n\n\n### Output:\nclass Stack:\n def __init__(self):\n self.stack = []\n \n def push(self, item):\n self.stack.append(item)\n \n def pop(self):\n if self.is_empty():\n return None\n return self.stack.pop()\n \n def is_empty(self):\n return len(self.stack) == 0","tok_input_length":97,"tok_output_length":58,"system_prompt":"","index":14805}
{"question":"Create and solve a traveling salesman problem using Python.","input":"","expected_output":"import networkx as nx\n\ndef solve_tsp(G):\n    dist_matrix = {frozenset({v,w}):G[v][w]['weight'] for v in G for w in G}    \n    return nx.algorithms.tournament.tsp.solve_tsp(G, dist_matrix)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate and solve a traveling salesman problem using Python.\n\n### Input:\n\n\n### Output:\nimport networkx as nx\n\ndef solve_tsp(G):\n    dist_matrix = {frozenset({v,w}):G[v][w]['weight'] for v in G for w in G}    \n    return nx.algorithms.tournament.tsp.solve_tsp(G, dist_matrix)","tok_input_length":97,"tok_output_length":60,"system_prompt":"","index":14790}
{"question":"Create a Python function that searches a given list of strings for a match. The function should return true if any of the strings match, and false if none of the strings match.","input":"list = ['Hello', 'World', '!']","expected_output":"def search_list(lst, s):\n for item in lst:\n  if item == s:\n   return True\n return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that searches a given list of strings for a match. The function should return true if any of the strings match, and false if none of the strings match.\n\n### Input:\nlist = ['Hello', 'World', '!']\n\n### Output:\ndef search_list(lst, s):\n for item in lst:\n  if item == s:\n   return True\n return False","tok_input_length":98,"tok_output_length":25,"system_prompt":"","index":2387}
{"question":"Propose a solution that optimizes the following python program.","input":"for i in range(1000):\n    for j in range(1000):\n        arr[i][j] += 5","expected_output":"import numpy as np\n\narr = np.array(arr)  # Convert to a numpy array\n\narr += 5  # add 5 to the array","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPropose a solution that optimizes the following python program.\n\n### Input:\nfor i in range(1000):\n    for j in range(1000):\n        arr[i][j] += 5\n\n### Output:\nimport numpy as np\n\narr = np.array(arr)  # Convert to a numpy array\n\narr += 5  # add 5 to the array","tok_input_length":98,"tok_output_length":32,"system_prompt":"","index":7195}
{"question":"For a given list of numbers, generate a python code that finds the largest number in the list.","input":"[7, 5, 2, 9, 1]","expected_output":"def find_max(arr):\n    max_number = 0\n\n    for i in arr:\n        if i > max_number:\n            max_number = i\n    return max_number","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFor a given list of numbers, generate a python code that finds the largest number in the list.\n\n### Input:\n[7, 5, 2, 9, 1]\n\n### Output:\ndef find_max(arr):\n    max_number = 0\n\n    for i in arr:\n        if i > max_number:\n            max_number = i\n    return max_number","tok_input_length":98,"tok_output_length":36,"system_prompt":"","index":7876}
{"question":"Create a function in Python that sorts the elements of a given list.","input":"[5, 7, 2, 3, 4, 1]","expected_output":"def sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([5, 7, 2, 3, 4, 1])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that sorts the elements of a given list.\n\n### Input:\n[5, 7, 2, 3, 4, 1]\n\n### Output:\ndef sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([5, 7, 2, 3, 4, 1])\nprint(result)","tok_input_length":98,"tok_output_length":39,"system_prompt":"","index":13357}
{"question":"Create a command line Python script to generate random numbers within a given range.","input":"Minimum Number: 10 and Maximum Number: 25","expected_output":"import random\n\nmin_num = 10\nmax_num = 25\n \n# Generate a random number\nrand_num = random.randint(min_num, max_num)\n \n# Print the random number\nprint(rand_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command line Python script to generate random numbers within a given range.\n\n### Input:\nMinimum Number: 10 and Maximum Number: 25\n\n### Output:\nimport random\n\nmin_num = 10\nmax_num = 25\n \n# Generate a random number\nrand_num = random.randint(min_num, max_num)\n \n# Print the random number\nprint(rand_num)","tok_input_length":98,"tok_output_length":44,"system_prompt":"","index":3246}
{"question":"Given a sentence, write a Python program to count the number of words and average length of words.","input":"This is an example sentence.","expected_output":"def word_count_average_len(sentence):\n    words = sentence.split()\n    sum_length = 0\n    for word in words:\n        sum_length += len(word)\n    return len(words), sum_length\/len(words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a sentence, write a Python program to count the number of words and average length of words.\n\n### Input:\nThis is an example sentence.\n\n### Output:\ndef word_count_average_len(sentence):\n    words = sentence.split()\n    sum_length = 0\n    for word in words:\n        sum_length += len(word)\n    return len(words), sum_length\/len(words)","tok_input_length":98,"tok_output_length":45,"system_prompt":"","index":11231}
{"question":"Construct an algorithm in Python to calculate the number of possible outcomes of flipping a coin 8 times.","input":"Not applicable","expected_output":"def count_outcomes(n):\n  if n == 0:\n    return 1 \n  else: \n    return count_outcomes(n-1) + 2**n\n\nprint(count_outcomes(8)) # 256","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to calculate the number of possible outcomes of flipping a coin 8 times.\n\n### Input:\nNot applicable\n\n### Output:\ndef count_outcomes(n):\n  if n == 0:\n    return 1 \n  else: \n    return count_outcomes(n-1) + 2**n\n\nprint(count_outcomes(8)) # 256","tok_input_length":98,"tok_output_length":48,"system_prompt":"","index":6964}
{"question":"Using Python, design an algorithm that takes a string as an input and reverses it.","input":"\"Hello World!\"","expected_output":"def reverseString(str): \n  s = \"\" \n  for i in str: \n    s = i + s\n  return s \n\nprint(reverseString('Hello World!'))\t# Output: !dlroW olleH","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, design an algorithm that takes a string as an input and reverses it.\n\n### Input:\n\"Hello World!\"\n\n### Output:\ndef reverseString(str): \n  s = \"\" \n  for i in str: \n    s = i + s\n  return s \n\nprint(reverseString('Hello World!'))\t# Output: !dlroW olleH","tok_input_length":98,"tok_output_length":49,"system_prompt":"","index":10996}
{"question":"Can you produce a Python script that outputs all possible permutations of a given string?","input":"\"ABC\"","expected_output":"from itertools import permutations\n\ndef print_permutations(input):\n    perms = [''.join(p) for p in permutations(input)]\n    for perm in perms:\n        print(perm)\n\nif __name__ == \"__main__\":\n    print_permutations(\"ABC\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you produce a Python script that outputs all possible permutations of a given string?\n\n### Input:\n\"ABC\"\n\n### Output:\nfrom itertools import permutations\n\ndef print_permutations(input):\n    perms = [''.join(p) for p in permutations(input)]\n    for perm in perms:\n        print(perm)\n\nif __name__ == \"__main__\":\n    print_permutations(\"ABC\")","tok_input_length":98,"tok_output_length":52,"system_prompt":"","index":1093}
{"question":"Write a Python program to calculate the total number of bits required to store an integer.","input":"","expected_output":"def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total number of bits required to store an integer.\n\n### Input:\n\n\n### Output:\ndef bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits","tok_input_length":98,"tok_output_length":54,"system_prompt":"","index":1811}
{"question":"Create a python code to remove duplicates from a given list while preserving the order.","input":"","expected_output":"def remove_duplicates(data):\n    \"\"\"Removes duplicates from a given list while preserving the order.\"\"\"\n    seen = set()\n    result = []\n    for x in data:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to remove duplicates from a given list while preserving the order.\n\n### Input:\n\n\n### Output:\ndef remove_duplicates(data):\n    \"\"\"Removes duplicates from a given list while preserving the order.\"\"\"\n    seen = set()\n    result = []\n    for x in data:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result","tok_input_length":98,"tok_output_length":55,"system_prompt":"","index":6013}
{"question":"Construct a Python generator to yield all the permutations of a given list.","input":"","expected_output":"def permutations(items): \n    if len(items) <=1: \n        yield items \n    else: \n        for i in range(len(items)): \n            for p in permutations(items[:i] + items[i+1:]): \n                yield (items[i],)+p","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python generator to yield all the permutations of a given list.\n\n### Input:\n\n\n### Output:\ndef permutations(items): \n    if len(items) <=1: \n        yield items \n    else: \n        for i in range(len(items)): \n            for p in permutations(items[:i] + items[i+1:]): \n                yield (items[i],)+p","tok_input_length":98,"tok_output_length":57,"system_prompt":"","index":1658}
{"question":"Create a decision tree in Python to classify a given dataset.","input":"","expected_output":"from sklearn.tree import DecisionTreeClassifier\n\n# define the model with the desired parameters\nmodel = DecisionTreeClassifier(criterion='entropy', max_depth=5)\n\n# fit the model with the data\nmodel.fit(X, y)\n\n# make predictions\ny_pred = model.predict(X_new)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a decision tree in Python to classify a given dataset.\n\n### Input:\n\n\n### Output:\nfrom sklearn.tree import DecisionTreeClassifier\n\n# define the model with the desired parameters\nmodel = DecisionTreeClassifier(criterion='entropy', max_depth=5)\n\n# fit the model with the data\nmodel.fit(X, y)\n\n# make predictions\ny_pred = model.predict(X_new)","tok_input_length":98,"tok_output_length":59,"system_prompt":"","index":4604}
{"question":"Design an algorithm in Python that accepts a list of integers as an input and returns true if the list contains duplicates.","input":"arr = [1, 4, 9, 6, 2, 5, 9, 7]","expected_output":"def is_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nis_duplicate(arr) # returns True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that accepts a list of integers as an input and returns true if the list contains duplicates.\n\n### Input:\narr = [1, 4, 9, 6, 2, 5, 9, 7]\n\n### Output:\ndef is_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nis_duplicate(arr) # returns True","tok_input_length":99,"tok_output_length":23,"system_prompt":"","index":1350}
{"question":"Given the instruction and the sample data below, generate the corresponding Python program.","input":"The program should count the number of characters in each word in a given sentence and print the count.\n\nSample sentence:\n\"Hello World!\"","expected_output":"sentence = \"Hello World!\"\nwords = sentence.split()\n\nfor word in words:\n  print(f\"{word} has {len(word)} characters.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the instruction and the sample data below, generate the corresponding Python program.\n\n### Input:\nThe program should count the number of characters in each word in a given sentence and print the count.\n\nSample sentence:\n\"Hello World!\"\n\n### Output:\nsentence = \"Hello World!\"\nwords = sentence.split()\n\nfor word in words:\n  print(f\"{word} has {len(word)} characters.\")","tok_input_length":99,"tok_output_length":30,"system_prompt":"","index":3195}
{"question":"Write a Python program to remove all duplicate elements in a given list.","input":"given_list = [1, 2, 3, 4, 3, 2, 1]","expected_output":"def remove_duplicates(given_list):\n    output = []\n    for num in given_list:\n        if num not in output:\n            output.append(num)\n    return output","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove all duplicate elements in a given list.\n\n### Input:\ngiven_list = [1, 2, 3, 4, 3, 2, 1]\n\n### Output:\ndef remove_duplicates(given_list):\n    output = []\n    for num in given_list:\n        if num not in output:\n            output.append(num)\n    return output","tok_input_length":99,"tok_output_length":34,"system_prompt":"","index":2315}
{"question":"Convert this Python function to JavaScript.","input":"def string_to_num_list(string):\n    numbers = []\n    for letter in string:\n        numbers.append(ord(letter))\n    return numbers","expected_output":"function stringToNumList(string) {\n    let numbers = [];\n    for (let letter of string) {\n        numbers.push(letter.charCodeAt(0));\n    }\n    return numbers;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this Python function to JavaScript.\n\n### Input:\ndef string_to_num_list(string):\n    numbers = []\n    for letter in string:\n        numbers.append(ord(letter))\n    return numbers\n\n### Output:\nfunction stringToNumList(string) {\n    let numbers = [];\n    for (let letter of string) {\n        numbers.push(letter.charCodeAt(0));\n    }\n    return numbers;\n}","tok_input_length":99,"tok_output_length":38,"system_prompt":"","index":1667}
{"question":"Write a python program that takes a list of numbers and prints out only the even numbers","input":"[2, 4, 7, 14, 21]","expected_output":"for num in [2, 4, 7, 14, 21]: \n    if num % 2 == 0: \n        print(num, end = \" \")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes a list of numbers and prints out only the even numbers\n\n### Input:\n[2, 4, 7, 14, 21]\n\n### Output:\nfor num in [2, 4, 7, 14, 21]: \n    if num % 2 == 0: \n        print(num, end = \" \")","tok_input_length":99,"tok_output_length":39,"system_prompt":"","index":18174}
{"question":"Write a python program to find the largest of three given numbers.","input":"num1 = 14\nnum2 = 25\nnum3 = 6","expected_output":"num1 = 14\nnum2 = 25\nnum3 = 6\n\nlargest = max(num1, num2, num3)\n\nprint(\"The largest number is\", largest)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the largest of three given numbers.\n\n### Input:\nnum1 = 14\nnum2 = 25\nnum3 = 6\n\n### Output:\nnum1 = 14\nnum2 = 25\nnum3 = 6\n\nlargest = max(num1, num2, num3)\n\nprint(\"The largest number is\", largest)","tok_input_length":99,"tok_output_length":41,"system_prompt":"","index":17204}
{"question":"Create a basic web scraper in Python that takes a URL as input and returns the text content of that URL.","input":"https:\/\/www.example.com","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ntext = soup.get_text()\n\nprint(text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web scraper in Python that takes a URL as input and returns the text content of that URL.\n\n### Input:\nhttps:\/\/www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ntext = soup.get_text()\n\nprint(text)","tok_input_length":99,"tok_output_length":44,"system_prompt":"","index":9364}
{"question":"Create a function in Python which takes a user input and sorts it in ascending order.","input":"9,5,4,7","expected_output":"def my_function(values):\n    sorted_values = sorted(values)\n    return sorted_values\n\nif __name__ == \"__main__\":\n    values = [int(value) for value in input().split(',')]\n    print(my_function(values))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a user input and sorts it in ascending order.\n\n### Input:\n9,5,4,7\n\n### Output:\ndef my_function(values):\n    sorted_values = sorted(values)\n    return sorted_values\n\nif __name__ == \"__main__\":\n    values = [int(value) for value in input().split(',')]\n    print(my_function(values))","tok_input_length":99,"tok_output_length":47,"system_prompt":"","index":8821}
{"question":"Design a Python program for converting a given string of characters into its corresponding ASCII code.","input":"String: \"Hello\"","expected_output":"def getAscii(string):\n    result = []\n    for char in string:\n        result.append(ord(char))\n    return result\n\nprint(getAscii('Hello'))\n# Output: [72, 101, 108, 108, 111]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program for converting a given string of characters into its corresponding ASCII code.\n\n### Input:\nString: \"Hello\"\n\n### Output:\ndef getAscii(string):\n    result = []\n    for char in string:\n        result.append(ord(char))\n    return result\n\nprint(getAscii('Hello'))\n# Output: [72, 101, 108, 108, 111]","tok_input_length":99,"tok_output_length":50,"system_prompt":"","index":3869}
{"question":"Re-write the following SQL query in Python.","input":"SELECT * FROM Movies WHERE category = 'horror';","expected_output":"import sqlite3\n\nconn = sqlite3.connect('movies.db') \ncursor = conn.cursor()\n\ncursor.execute(\"SELECT * FROM Movies WHERE category = 'horror'\")\n\nresult = cursor.fetchall()\nfor row in result:\n    print(row)\n\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRe-write the following SQL query in Python.\n\n### Input:\nSELECT * FROM Movies WHERE category = 'horror';\n\n### Output:\nimport sqlite3\n\nconn = sqlite3.connect('movies.db') \ncursor = conn.cursor()\n\ncursor.execute(\"SELECT * FROM Movies WHERE category = 'horror'\")\n\nresult = cursor.fetchall()\nfor row in result:\n    print(row)\n\nconn.close()","tok_input_length":99,"tok_output_length":52,"system_prompt":"","index":258}
{"question":"Compose python code that efficiently resolves the specified task:","input":"Determine the greatest common divisor of two numbers.","expected_output":"def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n\n        return x\n\n# Driver Code \nnum1, num2 = map(int, input().split())\n\nprint(gcd(num1, num2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose python code that efficiently resolves the specified task:\n\n### Input:\nDetermine the greatest common divisor of two numbers.\n\n### Output:\ndef gcd(x, y):\n        while(y):\n            x, y = y, x % y\n\n        return x\n\n# Driver Code \nnum1, num2 = map(int, input().split())\n\nprint(gcd(num1, num2))","tok_input_length":99,"tok_output_length":52,"system_prompt":"","index":18541}
{"question":"Develop an algorithm using Python to calculate the Euclidean distance between 2 points.","input":"","expected_output":"def euclidean_distance(point1, point2): \n    sum_squared_distance = 0\n\n    for i in range(len(point1)): \n        sum_squared_distance += (point1[i] - point2[i])**2 \n    return sum_squared_distance**0.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm using Python to calculate the Euclidean distance between 2 points.\n\n### Input:\n\n\n### Output:\ndef euclidean_distance(point1, point2): \n    sum_squared_distance = 0\n\n    for i in range(len(point1)): \n        sum_squared_distance += (point1[i] - point2[i])**2 \n    return sum_squared_distance**0.5","tok_input_length":99,"tok_output_length":56,"system_prompt":"","index":575}
{"question":"Create a python class that generates random numbers between a given range (inclusive).","input":"","expected_output":"import random\n\nclass RandomNumberGenerator:\n    def __init__(self, min_value, max_value):\n        self.min_value = min_value\n        self.max_value = max_value\n\n    def generate_random_number(self):\n        return random.randint(self.min_value, self.max_value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class that generates random numbers between a given range (inclusive).\n\n### Input:\n\n\n### Output:\nimport random\n\nclass RandomNumberGenerator:\n    def __init__(self, min_value, max_value):\n        self.min_value = min_value\n        self.max_value = max_value\n\n    def generate_random_number(self):\n        return random.randint(self.min_value, self.max_value)","tok_input_length":99,"tok_output_length":57,"system_prompt":"","index":3599}
{"question":"Compose a Python Code to swap two numbers without using a temporary variable.","input":"","expected_output":"# Input two numbers\na = 10\nb = 5\n\n# Swapping using bitwise operator\na = a ^ b \nb = a ^ b \na = a ^ b \n\n# Printing output\nprint(\"a =\", a) \nprint(\"b =\", b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python Code to swap two numbers without using a temporary variable.\n\n### Input:\n\n\n### Output:\n# Input two numbers\na = 10\nb = 5\n\n# Swapping using bitwise operator\na = a ^ b \nb = a ^ b \na = a ^ b \n\n# Printing output\nprint(\"a =\", a) \nprint(\"b =\", b)","tok_input_length":99,"tok_output_length":58,"system_prompt":"","index":814}
{"question":"Can you implement a k-nearest neighbor model using Python?","input":"","expected_output":"Yes, it is possible to implement a k-nearest neighbor model using Python. The SciKit-Learn library and other effective libraries such as PyKNN, KNeighbors-Classifier, and NearestNeighbors provide various functions and modules for users to implement a k-nearest neighbor model in Python.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you implement a k-nearest neighbor model using Python?\n\n### Input:\n\n\n### Output:\nYes, it is possible to implement a k-nearest neighbor model using Python. The SciKit-Learn library and other effective libraries such as PyKNN, KNeighbors-Classifier, and NearestNeighbors provide various functions and modules for users to implement a k-nearest neighbor model in Python.","tok_input_length":99,"tok_output_length":60,"system_prompt":"","index":11019}
{"question":"Convert the following code from Java to Python:\n\npublic class HelloWorld {\n public static void main(String[] args) {\n System.out.println(\"Hello World\");\n }\n}","input":"public class HelloWorld { \n public static void main(String[] args) {\n System.out.println(\"Hello World\");\n }\n}","expected_output":"def main():\n print(\"Hello World\")\n\nif __name__ == \"__main__\":\n main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following code from Java to Python:\n\npublic class HelloWorld {\n public static void main(String[] args) {\n System.out.println(\"Hello World\");\n }\n}\n\n### Input:\npublic class HelloWorld { \n public static void main(String[] args) {\n System.out.println(\"Hello World\");\n }\n}\n\n### Output:\ndef main():\n print(\"Hello World\")\n\nif __name__ == \"__main__\":\n main()","tok_input_length":100,"tok_output_length":19,"system_prompt":"","index":6429}
{"question":"Convert the following Python dictionary to a JSON string.","input":"data = {\n  \"Name\": \"John\",\n  \"Age\": 30,\n  \"Cities\": [\"New York\", \"London\", \"Paris\"]\n}","expected_output":"{\n    \"Name\": \"John\",\n    \"Age\": 30,\n    \"Cities\": [\"New York\", \"London\", \"Paris\"]\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Python dictionary to a JSON string.\n\n### Input:\ndata = {\n  \"Name\": \"John\",\n  \"Age\": 30,\n  \"Cities\": [\"New York\", \"London\", \"Paris\"]\n}\n\n### Output:\n{\n    \"Name\": \"John\",\n    \"Age\": 30,\n    \"Cities\": [\"New York\", \"London\", \"Paris\"]\n}","tok_input_length":100,"tok_output_length":31,"system_prompt":"","index":5501}
{"question":"Create a function in Python that takes a list as an argument and removes any duplicate values in the list.","input":"[1, 2, 3, 4, 2]","expected_output":"def remove_duplicates(my_list):\n  new_list = []\n  for num in my_list:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list as an argument and removes any duplicate values in the list.\n\n### Input:\n[1, 2, 3, 4, 2]\n\n### Output:\ndef remove_duplicates(my_list):\n  new_list = []\n  for num in my_list:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list","tok_input_length":100,"tok_output_length":37,"system_prompt":"","index":5478}
{"question":"Write a python program to successfully insert a row into a table named 'students' with the given values.","input":"student_name = \"John Doe\"\nstudent_age = 20","expected_output":"import sqlite3\n\nconn = sqlite3.connect(\"example.db\")\nc = conn.cursor()\nc.execute(\"INSERT INTO students VALUES ('John Doe', 20)\")\nconn.commit()\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to successfully insert a row into a table named 'students' with the given values.\n\n### Input:\nstudent_name = \"John Doe\"\nstudent_age = 20\n\n### Output:\nimport sqlite3\n\nconn = sqlite3.connect(\"example.db\")\nc = conn.cursor()\nc.execute(\"INSERT INTO students VALUES ('John Doe', 20)\")\nconn.commit()\nconn.close()","tok_input_length":100,"tok_output_length":39,"system_prompt":"","index":6731}
{"question":"Create a function in Python that takes a list of integers and returns the largest integer.","input":"[1, 5, 4, 9, 2]","expected_output":"def biggest_number(num_list):\n  return max(num_list)\n\nbiggest = biggest_number([1, 5, 4, 9, 2])\nprint(biggest) # prints 9","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list of integers and returns the largest integer.\n\n### Input:\n[1, 5, 4, 9, 2]\n\n### Output:\ndef biggest_number(num_list):\n  return max(num_list)\n\nbiggest = biggest_number([1, 5, 4, 9, 2])\nprint(biggest) # prints 9","tok_input_length":100,"tok_output_length":41,"system_prompt":"","index":4009}
{"question":"Generate a python program that creates a new list by appending an element to the last of an existing list.","input":"[1, 2, 3]","expected_output":"def appendElementToList(list, element):\n     list.append(element)\n     return list\n\nlist = [1, 2, 3]\nelement = 4\nprint(appendElementToList(list, element))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that creates a new list by appending an element to the last of an existing list.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef appendElementToList(list, element):\n     list.append(element)\n     return list\n\nlist = [1, 2, 3]\nelement = 4\nprint(appendElementToList(list, element))","tok_input_length":100,"tok_output_length":43,"system_prompt":"","index":14412}
{"question":"Write a Python code fragment to print all the leap years between two years.","input":"start_year = 2010\nend_year = 2020","expected_output":"for year in range(start_year, end_year+1):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        print(year)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code fragment to print all the leap years between two years.\n\n### Input:\nstart_year = 2010\nend_year = 2020\n\n### Output:\nfor year in range(start_year, end_year+1):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        print(year)","tok_input_length":100,"tok_output_length":44,"system_prompt":"","index":13326}
{"question":"Create a Python program that takes the average of all numbers in a list.","input":"[10, 15, 20, 25]","expected_output":"def averageList(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total \/ len(numbers)\n\nprint(averageList([10, 15, 20, 25]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes the average of all numbers in a list.\n\n### Input:\n[10, 15, 20, 25]\n\n### Output:\ndef averageList(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total \/ len(numbers)\n\nprint(averageList([10, 15, 20, 25]))","tok_input_length":100,"tok_output_length":46,"system_prompt":"","index":14692}
{"question":"Suggest a completion for the following python code to get the maximum unique elements in an array.","input":"def maximum_unique_elements(arr):","expected_output":"def maximum_unique_elements(arr):\n    curr_max = 0\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            curr_max += 1\n            seen.add(num)\n\n    return curr_max","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following python code to get the maximum unique elements in an array.\n\n### Input:\ndef maximum_unique_elements(arr):\n\n### Output:\ndef maximum_unique_elements(arr):\n    curr_max = 0\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            curr_max += 1\n            seen.add(num)\n\n    return curr_max","tok_input_length":100,"tok_output_length":48,"system_prompt":"","index":14751}
{"question":"Write a Python program to generate a password with a given length and characters.","input":"length = 10\ncharacters = alphanumeric","expected_output":"import random\n\ndef generate_password(length, characters):\n    password = ''\n    for i in range(length):\n        password += random.choice(characters)\n    return password\n\nprint(generate_password(10, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a password with a given length and characters.\n\n### Input:\nlength = 10\ncharacters = alphanumeric\n\n### Output:\nimport random\n\ndef generate_password(length, characters):\n    password = ''\n    for i in range(length):\n        password += random.choice(characters)\n    return password\n\nprint(generate_password(10, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))","tok_input_length":100,"tok_output_length":49,"system_prompt":"","index":12494}
{"question":"Generate a reverse string of each word present in the list.","input":"[\"Python\", \"Java\", \"C++\"]","expected_output":"def reverseStringOfList(list):\n    revList = []\n    for string in list:\n        revList.append(string[::-1])\n    return revList\n\nresult = reverseStringOfList([\"Python\", \"Java\", \"C++\"])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a reverse string of each word present in the list.\n\n### Input:\n[\"Python\", \"Java\", \"C++\"]\n\n### Output:\ndef reverseStringOfList(list):\n    revList = []\n    for string in list:\n        revList.append(string[::-1])\n    return revList\n\nresult = reverseStringOfList([\"Python\", \"Java\", \"C++\"])\nprint(result)","tok_input_length":100,"tok_output_length":51,"system_prompt":"","index":15676}
{"question":"Construct a python program to print out the number of distinct elements in a string.","input":"\"hello world!\"","expected_output":"def count_unique(s):\n    seen = set()\n    count = 0\n    \n    for character in s:\n        if character not in seen:\n            seen.add(character)\n            count += 1\n            \n    return count\n\nprint(count_unique(\"hello world!\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program to print out the number of distinct elements in a string.\n\n### Input:\n\"hello world!\"\n\n### Output:\ndef count_unique(s):\n    seen = set()\n    count = 0\n    \n    for character in s:\n        if character not in seen:\n            seen.add(character)\n            count += 1\n            \n    return count\n\nprint(count_unique(\"hello world!\"))","tok_input_length":100,"tok_output_length":53,"system_prompt":"","index":8381}
{"question":"Create a class in Python to generate a calendar.","input":"calendarName = \"My Calendar\"","expected_output":"class CalendarGenerator(object):\n\n    def __init__(self, name):\n        self.name = name\n\n    def generate_calendar(self):\n        calendar = []\n\n        # Code to generate a calendar goes here\n\n        return calendar\n\ncalendar = CalendarGenerator(calendarName)\ncalendar.generate_calendar()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to generate a calendar.\n\n### Input:\ncalendarName = \"My Calendar\"\n\n### Output:\nclass CalendarGenerator(object):\n\n    def __init__(self, name):\n        self.name = name\n\n    def generate_calendar(self):\n        calendar = []\n\n        # Code to generate a calendar goes here\n\n        return calendar\n\ncalendar = CalendarGenerator(calendarName)\ncalendar.generate_calendar()","tok_input_length":100,"tok_output_length":56,"system_prompt":"","index":4584}
{"question":"Generate a Python program that calculates the factorial of a given number.","input":"5","expected_output":"def factorial(n): \n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1) \n\n# Test\nnum = 5\nfac = factorial(num)\nprint(\"Factorial of\", num, \"is\", fac)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that calculates the factorial of a given number.\n\n### Input:\n5\n\n### Output:\ndef factorial(n): \n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1) \n\n# Test\nnum = 5\nfac = factorial(num)\nprint(\"Factorial of\", num, \"is\", fac)","tok_input_length":100,"tok_output_length":58,"system_prompt":"","index":4476}
{"question":"Develop a Python program to print the first 20 Armstrong numbers","input":"","expected_output":"for num in range(1,21):\n   sum = 0\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** 3\n       temp \/\/= 10\n   if num == sum:\n       print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to print the first 20 Armstrong numbers\n\n### Input:\n\n\n### Output:\nfor num in range(1,21):\n   sum = 0\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** 3\n       temp \/\/= 10\n   if num == sum:\n       print(num)","tok_input_length":100,"tok_output_length":60,"system_prompt":"","index":4069}
{"question":"Create a function in python to calculate the square root","input":"","expected_output":"def sqrt(x): \n    if x == 0 or x == 1: \n        return x \n      \n    i = 1 \n    res = 1 \n    while res <= x: \n        i += 1 \n        res = i * i \n      \n    return i-1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in python to calculate the square root\n\n### Input:\n\n\n### Output:\ndef sqrt(x): \n    if x == 0 or x == 1: \n        return x \n      \n    i = 1 \n    res = 1 \n    while res <= x: \n        i += 1 \n        res = i * i \n      \n    return i-1","tok_input_length":100,"tok_output_length":62,"system_prompt":"","index":6024}
{"question":"Using the input dictionary as a guide, implement a Python function to print out the list of values for each key.","input":"my_dict = {\"Alice\": 25, \"Bob\": 21, \"Eve\": 45}","expected_output":"def print_values(dict_in):\n    for key,value in dict_in.items():\n        print(key, \":\", value)\n\nprint_values(my_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input dictionary as a guide, implement a Python function to print out the list of values for each key.\n\n### Input:\nmy_dict = {\"Alice\": 25, \"Bob\": 21, \"Eve\": 45}\n\n### Output:\ndef print_values(dict_in):\n    for key,value in dict_in.items():\n        print(key, \":\", value)\n\nprint_values(my_dict)","tok_input_length":101,"tok_output_length":29,"system_prompt":"","index":10945}
{"question":"Write a Python program to filter out values from a given list based on a certain condition.","input":"[7, 6, 5, 4, 3], condition: x > 5","expected_output":"def filter_values(lst, condition):\n    filtered_list = []\n    for x in lst:\n        if eval(condition):\n            filtered_list.append(x)\n    return filtered_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter out values from a given list based on a certain condition.\n\n### Input:\n[7, 6, 5, 4, 3], condition: x > 5\n\n### Output:\ndef filter_values(lst, condition):\n    filtered_list = []\n    for x in lst:\n        if eval(condition):\n            filtered_list.append(x)\n    return filtered_list","tok_input_length":101,"tok_output_length":34,"system_prompt":"","index":7640}
{"question":"Optimize a simple Python program for finding the sum of two numbers. The program should take two numbers as an input and return the sum as an output.","input":"15 and 7","expected_output":"def add_numbers(num1, num2):\n '''\n Function to add two numbers \n '''\n return num1 + num2 \n\n# Driver code \nprint(add_numbers(15, 7))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a simple Python program for finding the sum of two numbers. The program should take two numbers as an input and return the sum as an output.\n\n### Input:\n15 and 7\n\n### Output:\ndef add_numbers(num1, num2):\n '''\n Function to add two numbers \n '''\n return num1 + num2 \n\n# Driver code \nprint(add_numbers(15, 7))","tok_input_length":101,"tok_output_length":38,"system_prompt":"","index":10692}
{"question":"Generate a Python program that iterates through a given list of numbers and prints the doubled values.","input":"list_nums = [4, 6, 2, 8]","expected_output":"def double_list(list_nums):\n for num in list_nums:\n print(num * 2)\n \nlist_nums = [4, 6, 2, 8]\ndouble_list(list_nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that iterates through a given list of numbers and prints the doubled values.\n\n### Input:\nlist_nums = [4, 6, 2, 8]\n\n### Output:\ndef double_list(list_nums):\n for num in list_nums:\n print(num * 2)\n \nlist_nums = [4, 6, 2, 8]\ndouble_list(list_nums)","tok_input_length":101,"tok_output_length":40,"system_prompt":"","index":9197}
{"question":"Generate a hashmap implementation in Python. The implementation should store keys and values, and be able to retrieve the value stored under the given key.","input":"Not applicable","expected_output":"class HashMap:\n \n def __init__(self):\n self.map = {}\n \n def put(self, key, value):\n self.map[key] = value\n \n def get(self, key):\n return self.map.get(key)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a hashmap implementation in Python. The implementation should store keys and values, and be able to retrieve the value stored under the given key.\n\n### Input:\nNot applicable\n\n### Output:\nclass HashMap:\n \n def __init__(self):\n self.map = {}\n \n def put(self, key, value):\n self.map[key] = value\n \n def get(self, key):\n return self.map.get(key)","tok_input_length":101,"tok_output_length":43,"system_prompt":"","index":13881}
{"question":"Write a Python function that takes a string as input and counts the number of occurrences of each character in that string.","input":"String: 'python'","expected_output":"def count_characters(string):\n    counts = {}\n    for s in string:\n        counts[s] = counts.get(s, 0) + 1\n    return counts\n\nresult = count_characters('python')\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a string as input and counts the number of occurrences of each character in that string.\n\n### Input:\nString: 'python'\n\n### Output:\ndef count_characters(string):\n    counts = {}\n    for s in string:\n        counts[s] = counts.get(s, 0) + 1\n    return counts\n\nresult = count_characters('python')\nprint(result)","tok_input_length":101,"tok_output_length":46,"system_prompt":"","index":11223}
{"question":"Create a Python program that takes in a string and counts how many vowels are in it, regardless of case.","input":"amazing","expected_output":"def count_vowels(word):\n  answer = 0\n  for letter in word:\n    if letter.lower() in 'aeiou':\n      answer += 1\n  return answer\n\nprint(count_vowels('amazing'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a string and counts how many vowels are in it, regardless of case.\n\n### Input:\namazing\n\n### Output:\ndef count_vowels(word):\n  answer = 0\n  for letter in word:\n    if letter.lower() in 'aeiou':\n      answer += 1\n  return answer\n\nprint(count_vowels('amazing'))","tok_input_length":101,"tok_output_length":49,"system_prompt":"","index":1928}
{"question":"Create a function in Python to count the number of each letter in the sentence \"Hello world, this is GPT!\"","input":"","expected_output":"def countLetters(sentence): \n    counts = dict() \n    for c in sentence: \n        if c in counts: \n            counts[c] += 1\n        else: \n            counts[c] = 1\n  \n    return counts","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to count the number of each letter in the sentence \"Hello world, this is GPT!\"\n\n### Input:\n\n\n### Output:\ndef countLetters(sentence): \n    counts = dict() \n    for c in sentence: \n        if c in counts: \n            counts[c] += 1\n        else: \n            counts[c] = 1\n  \n    return counts","tok_input_length":101,"tok_output_length":50,"system_prompt":"","index":11564}
{"question":"Calculate the number of possible permutations of a string using the following Python function.","input":"word = \"helloworld\"","expected_output":"def factorial(string): \n   len_string = len(string) \n   permutations = 1\n   for i in range(1, len_string + 1): \n      permutations *= i \n   return permutations \n\nresult = factorial(word) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the number of possible permutations of a string using the following Python function.\n\n### Input:\nword = \"helloworld\"\n\n### Output:\ndef factorial(string): \n   len_string = len(string) \n   permutations = 1\n   for i in range(1, len_string + 1): \n      permutations *= i \n   return permutations \n\nresult = factorial(word) \nprint(result)","tok_input_length":101,"tok_output_length":53,"system_prompt":"","index":3980}
{"question":"Develop a Python program to create a function to convert temperatures from Celsius to Fahrenheit.","input":"Not applicable","expected_output":"def convert_celsius(celsius):\n # Convert celsius to Fahrenheit\n fahrenheit = celsius * 9\/5 + 32\n\n # Return fahrenheit value\n return fahrenheit\n\n# Test\ncelsius = 32\nprint(convert_celsius(celsius))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to create a function to convert temperatures from Celsius to Fahrenheit.\n\n### Input:\nNot applicable\n\n### Output:\ndef convert_celsius(celsius):\n # Convert celsius to Fahrenheit\n fahrenheit = celsius * 9\/5 + 32\n\n # Return fahrenheit value\n return fahrenheit\n\n# Test\ncelsius = 32\nprint(convert_celsius(celsius))","tok_input_length":101,"tok_output_length":55,"system_prompt":"","index":9436}
{"question":"Create a Python API endpoint to search a database for a given item.","input":"Not applicable","expected_output":"@app.route('\/search', methods=['POST'])\ndef search():\n    req = request.get_json()\n    search_term = req['search_term']\n\n    # Query your database here\n    query_result = db.find_by_search_term(search_term)\n\n    return jsonify({'result': query_result})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python API endpoint to search a database for a given item.\n\n### Input:\nNot applicable\n\n### Output:\n@app.route('\/search', methods=['POST'])\ndef search():\n    req = request.get_json()\n    search_term = req['search_term']\n\n    # Query your database here\n    query_result = db.find_by_search_term(search_term)\n\n    return jsonify({'result': query_result})","tok_input_length":101,"tok_output_length":57,"system_prompt":"","index":6077}
{"question":"Make a Python function that takes in three parameters and returns a boolean value.","input":"","expected_output":"# This function checks if the sum of three numbers is even or odd\ndef is_sum_even(x, y, z): \n    sum = x + y + z \n    if (sum % 2 == 0): \n        return True\n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a Python function that takes in three parameters and returns a boolean value.\n\n### Input:\n\n\n### Output:\n# This function checks if the sum of three numbers is even or odd\ndef is_sum_even(x, y, z): \n    sum = x + y + z \n    if (sum % 2 == 0): \n        return True\n    else: \n        return False","tok_input_length":101,"tok_output_length":59,"system_prompt":"","index":6828}
{"question":"Generate a Python program to implement the following sorting algorithm","input":"Bubble Sort","expected_output":"def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to implement the following sorting algorithm\n\n### Input:\nBubble Sort\n\n### Output:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr","tok_input_length":101,"tok_output_length":60,"system_prompt":"","index":8255}
{"question":"Generate a random password of 10 characters using Python.","input":"","expected_output":"import string \nimport random \n  \ndef random_password(): \n    letters_and_digits = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters_and_digits) for i in range(10))\n  \n    return password \n  \npassword = random_password() \nprint(\"Random Password: \",password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password of 10 characters using Python.\n\n### Input:\n\n\n### Output:\nimport string \nimport random \n  \ndef random_password(): \n    letters_and_digits = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters_and_digits) for i in range(10))\n  \n    return password \n  \npassword = random_password() \nprint(\"Random Password: \",password)","tok_input_length":101,"tok_output_length":63,"system_prompt":"","index":18451}
{"question":"Perform classification on the given dataset using Support Vector Machines in Python.","input":"X = [[0,0],[1,1],[1,2],[2,2],[2,3]]\ny = [0,0,0,1,1]","expected_output":"from sklearn.svm import SVC\n\nmodel = SVC(kernel = 'linear', probability=True) \nmodel.fit(X, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform classification on the given dataset using Support Vector Machines in Python.\n\n### Input:\nX = [[0,0],[1,1],[1,2],[2,2],[2,3]]\ny = [0,0,0,1,1]\n\n### Output:\nfrom sklearn.svm import SVC\n\nmodel = SVC(kernel = 'linear', probability=True) \nmodel.fit(X, y)","tok_input_length":102,"tok_output_length":26,"system_prompt":"","index":3291}
{"question":"Rewrite the following python program using list comprehension","input":"list = ['apple', 'banana', 'cat', 'dog', 'elephant']\nnew_list = []\nfor x in list:\n    new_list.append(x.upper())","expected_output":"list = ['apple', 'banana', 'cat', 'dog', 'elephant']\nnew_list = [x.upper() for x in list]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following python program using list comprehension\n\n### Input:\nlist = ['apple', 'banana', 'cat', 'dog', 'elephant']\nnew_list = []\nfor x in list:\n    new_list.append(x.upper())\n\n### Output:\nlist = ['apple', 'banana', 'cat', 'dog', 'elephant']\nnew_list = [x.upper() for x in list]","tok_input_length":102,"tok_output_length":31,"system_prompt":"","index":2494}
{"question":"Modify the following Python code to use a loop instead of recursion.","input":"def GCD(x, y):\nif y == 0:\n return x\n else:\n return GCD(y, x%y)","expected_output":"def GCD(x, y):\n    while(y != 0):\n        temp = y\n        y = x % y\n        x = temp\n    return x","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to use a loop instead of recursion.\n\n### Input:\ndef GCD(x, y):\nif y == 0:\n return x\n else:\n return GCD(y, x%y)\n\n### Output:\ndef GCD(x, y):\n    while(y != 0):\n        temp = y\n        y = x % y\n        x = temp\n    return x","tok_input_length":102,"tok_output_length":35,"system_prompt":"","index":679}
{"question":"Write a Python program to format a given date from one format to another.","input":"start_date = \"3-5-2020\"\nend_date = \"5-5-2020\"","expected_output":"from datetime import date\n\ndef format_date(date_str, start_format, end_format):\n    date_obj = date.strptime(date_str, start_format)\n    return date_obj.strftime(end_format)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to format a given date from one format to another.\n\n### Input:\nstart_date = \"3-5-2020\"\nend_date = \"5-5-2020\"\n\n### Output:\nfrom datetime import date\n\ndef format_date(date_str, start_format, end_format):\n    date_obj = date.strptime(date_str, start_format)\n    return date_obj.strftime(end_format)","tok_input_length":102,"tok_output_length":38,"system_prompt":"","index":11621}
{"question":"Create an application in Python that takes user input for an year and prints the day of the week for January 1st of that year.","input":"Year: 2018","expected_output":"import datetime\n\ndef day_of_week(year): \n date = datetime.datetime(year, 1, 1)\n return date.strftime(\"%A\")\n\nprint(day_of_week(2018)) # Output: Monday","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an application in Python that takes user input for an year and prints the day of the week for January 1st of that year.\n\n### Input:\nYear: 2018\n\n### Output:\nimport datetime\n\ndef day_of_week(year): \n date = datetime.datetime(year, 1, 1)\n return date.strftime(\"%A\")\n\nprint(day_of_week(2018)) # Output: Monday","tok_input_length":102,"tok_output_length":41,"system_prompt":"","index":16869}
{"question":"Design a Python program to find all the palindromes in a given list of words.","input":"[\"apple\", \"eye\", \"ball\", \"abba\"]","expected_output":"mylist = [\"apple\", \"eye\", \"ball\", \"abba\"]\n\npalindromes = [word for word in mylist if word == word[::-1]]\nprint(palindromes)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to find all the palindromes in a given list of words.\n\n### Input:\n[\"apple\", \"eye\", \"ball\", \"abba\"]\n\n### Output:\nmylist = [\"apple\", \"eye\", \"ball\", \"abba\"]\n\npalindromes = [word for word in mylist if word == word[::-1]]\nprint(palindromes)","tok_input_length":102,"tok_output_length":43,"system_prompt":"","index":10216}
{"question":"Create a python program for searching for a word in a text document.","input":"The quick brown fox jumped over the lazy dog\nsearch: fox","expected_output":"import re\n\ntext = 'The quick brown fox jumped over the lazy dog'\nsearch = 'fox'\n\nresult = re.findall(search, text)\n\nif result:\n    print('Found!');\nelse:\n    print('Not Found!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program for searching for a word in a text document.\n\n### Input:\nThe quick brown fox jumped over the lazy dog\nsearch: fox\n\n### Output:\nimport re\n\ntext = 'The quick brown fox jumped over the lazy dog'\nsearch = 'fox'\n\nresult = re.findall(search, text)\n\nif result:\n    print('Found!');\nelse:\n    print('Not Found!')","tok_input_length":102,"tok_output_length":47,"system_prompt":"","index":5847}
{"question":"Write a function in Python to count how many words are in the given string.","input":"\"Do not stand at my grave and weep\"","expected_output":"def count_words(string):\n    words = string.split(' ')\n    return len(words)\n\nsentence = \"Do not stand at my grave and weep\"\ncount = count_words(sentence)\nprint(\"The given string has {} words.\".format(count))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to count how many words are in the given string.\n\n### Input:\n\"Do not stand at my grave and weep\"\n\n### Output:\ndef count_words(string):\n    words = string.split(' ')\n    return len(words)\n\nsentence = \"Do not stand at my grave and weep\"\ncount = count_words(sentence)\nprint(\"The given string has {} words.\".format(count))","tok_input_length":102,"tok_output_length":49,"system_prompt":"","index":16288}
{"question":"Design a Python program to print out all prime numbers in a range","input":"Number Range between 1 and 10","expected_output":"def is_prime(n):\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n\nfor num in range(1, 10):\n    if is_prime(num):\n        print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to print out all prime numbers in a range\n\n### Input:\nNumber Range between 1 and 10\n\n### Output:\ndef is_prime(n):\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n\nfor num in range(1, 10):\n    if is_prime(num):\n        print(num)","tok_input_length":102,"tok_output_length":52,"system_prompt":"","index":14624}
{"question":"Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.","input":"","expected_output":"def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.\n\n### Input:\n\n\n### Output:\ndef upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res","tok_input_length":102,"tok_output_length":55,"system_prompt":"","index":930}
{"question":"Create a basic web server in Python that serves static pages from a given directory.","input":"Not applicable","expected_output":"import http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n print(\"Serving at port\", PORT)\n httpd.serve_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web server in Python that serves static pages from a given directory.\n\n### Input:\nNot applicable\n\n### Output:\nimport http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n print(\"Serving at port\", PORT)\n httpd.serve_forever()","tok_input_length":102,"tok_output_length":56,"system_prompt":"","index":4999}
{"question":"Create an algorithm in Python to print the binary representation of a given number.","input":"23","expected_output":"def binary_rep(num):\n    binary_string = \"\"\n    while num>0:\n        remainder = num%2\n        binary_string = str(remainder) + binary_string\n        num = num\/\/2\n\n    print(binary_string)\n\nbinary_rep(23) # prints 10111","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to print the binary representation of a given number.\n\n### Input:\n23\n\n### Output:\ndef binary_rep(num):\n    binary_string = \"\"\n    while num>0:\n        remainder = num%2\n        binary_string = str(remainder) + binary_string\n        num = num\/\/2\n\n    print(binary_string)\n\nbinary_rep(23) # prints 10111","tok_input_length":102,"tok_output_length":58,"system_prompt":"","index":8715}
{"question":"Develop a class in Python that prints a box to the screen using asterisks.","input":"","expected_output":"class Box:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n    \n    def print_box(self):\n        for _ in range(self.height):\n            for _ in range(self.width): \n                print(\"*\", end=\"\")\n            print(\"\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class in Python that prints a box to the screen using asterisks.\n\n### Input:\n\n\n### Output:\nclass Box:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n    \n    def print_box(self):\n        for _ in range(self.height):\n            for _ in range(self.width): \n                print(\"*\", end=\"\")\n            print(\"\")","tok_input_length":102,"tok_output_length":59,"system_prompt":"","index":16220}
{"question":"Write a Python function to find the most frequent element in a list.","input":"","expected_output":"def most_frequent(list): \n    counter = 0\n    num = list[0] \n      \n    for i in list: \n        curr_frequency = list.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the most frequent element in a list.\n\n### Input:\n\n\n### Output:\ndef most_frequent(list): \n    counter = 0\n    num = list[0] \n      \n    for i in list: \n        curr_frequency = list.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num","tok_input_length":102,"tok_output_length":61,"system_prompt":"","index":14222}
{"question":"Setup a Django server that can host a website.","input":"","expected_output":"# Install Django if it does not already exist\npip install django\n\n# Start a new project\ndjango-admin startproject myproject\n\n# Create and apply migrations\ncd myproject\npython manage.py makemigrations\npython manage.py migrate\n\n# Start the server\npython manage.py runserver 0:8000","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSetup a Django server that can host a website.\n\n### Input:\n\n\n### Output:\n# Install Django if it does not already exist\npip install django\n\n# Start a new project\ndjango-admin startproject myproject\n\n# Create and apply migrations\ncd myproject\npython manage.py makemigrations\npython manage.py migrate\n\n# Start the server\npython manage.py runserver 0:8000","tok_input_length":102,"tok_output_length":65,"system_prompt":"","index":12486}
{"question":"Write a function in Python that accepts a list of numbers and returns the  highest and lowest values in the list.","input":"numbers = [2, 18, 9, 22, 10, 17, 24]","expected_output":"def max_min(numbers):\n  '''returns a tuple containing highest and lowest values in a given list'''\n  return (max(numbers), min(numbers))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that accepts a list of numbers and returns the  highest and lowest values in the list.\n\n### Input:\nnumbers = [2, 18, 9, 22, 10, 17, 24]\n\n### Output:\ndef max_min(numbers):\n  '''returns a tuple containing highest and lowest values in a given list'''\n  return (max(numbers), min(numbers))","tok_input_length":103,"tok_output_length":30,"system_prompt":"","index":7675}
{"question":"Create a Python program to generate a dot product between two given lists.","input":"list1 = [1, 2, 3]\nlist2 = [4, 5, 6]","expected_output":"def dot_product(list1, list2):\n  product = 0\n  for x, y in zip(list1, list2):\n    product += x*y\n  return product","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a dot product between two given lists.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n### Output:\ndef dot_product(list1, list2):\n  product = 0\n  for x, y in zip(list1, list2):\n    product += x*y\n  return product","tok_input_length":103,"tok_output_length":38,"system_prompt":"","index":15392}
{"question":"Create a Python program to find the minimum number of steps required to make all array elements equal.","input":"arr = [2, 3, 6, 8]","expected_output":"def min_steps(arr):\n    min_step = 0\n    min_val = min(arr)\n    for i in range(len(arr)):\n        min_step += arr[i] - min_val \n    \n    return min_step","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the minimum number of steps required to make all array elements equal.\n\n### Input:\narr = [2, 3, 6, 8]\n\n### Output:\ndef min_steps(arr):\n    min_step = 0\n    min_val = min(arr)\n    for i in range(len(arr)):\n        min_step += arr[i] - min_val \n    \n    return min_step","tok_input_length":103,"tok_output_length":43,"system_prompt":"","index":5254}
{"question":"Construct a Python function to calculate the sum of all elements of a given array.","input":"[3,2,1,6,5,7,4]","expected_output":"def array_sum(arr):\n    s = 0\n    for i in arr:\n        s += i\n    return s\n\nprint(array_sum([3,2,1,6,5,7,4]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python function to calculate the sum of all elements of a given array.\n\n### Input:\n[3,2,1,6,5,7,4]\n\n### Output:\ndef array_sum(arr):\n    s = 0\n    for i in arr:\n        s += i\n    return s\n\nprint(array_sum([3,2,1,6,5,7,4]))","tok_input_length":103,"tok_output_length":45,"system_prompt":"","index":12084}
{"question":"Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.","input":"2, 3, 4","expected_output":"def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that finds the total surface area of a cuboid, given its three dimensions.\n\n### Input:\n2, 3, 4\n\n### Output:\ndef find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52","tok_input_length":103,"tok_output_length":48,"system_prompt":"","index":136}
{"question":"Write a Python program to return the greatest common divisor between two numbers.","input":"num1 = 15\nnum2 = 25","expected_output":"def gcd(num1, num2):\nwhile num2 != 0:\n   temp = num1\n   num1 = num2\n   num2 = temp % num2\nreturn num1\n\nprint(gcd(num1,num2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to return the greatest common divisor between two numbers.\n\n### Input:\nnum1 = 15\nnum2 = 25\n\n### Output:\ndef gcd(num1, num2):\nwhile num2 != 0:\n   temp = num1\n   num1 = num2\n   num2 = temp % num2\nreturn num1\n\nprint(gcd(num1,num2))","tok_input_length":103,"tok_output_length":50,"system_prompt":"","index":16585}
{"question":"Write a script in Python to generate random strings containing uppercase, lowercase, and numeric characters up to a length of 8.","input":"","expected_output":"import random\nimport string\n\ndef random_string(stringLength=8):\n    letters_and_numbers = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(letters_and_numbers) for i in range(stringLength))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python to generate random strings containing uppercase, lowercase, and numeric characters up to a length of 8.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef random_string(stringLength=8):\n    letters_and_numbers = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(letters_and_numbers) for i in range(stringLength))","tok_input_length":103,"tok_output_length":51,"system_prompt":"","index":13356}
{"question":"Given a string, write a Python program to count the number of words in it.","input":"\"This is an example string.\"","expected_output":"def count_words(sentence):\n    words = sentence.split(' ')\n    count = 0\n    for word in words:\n        if word != '':\n            count+=1\n    return count\n\nsentence = \"This is an example string.\"\nprint(count_words(sentence))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, write a Python program to count the number of words in it.\n\n### Input:\n\"This is an example string.\"\n\n### Output:\ndef count_words(sentence):\n    words = sentence.split(' ')\n    count = 0\n    for word in words:\n        if word != '':\n            count+=1\n    return count\n\nsentence = \"This is an example string.\"\nprint(count_words(sentence))","tok_input_length":103,"tok_output_length":53,"system_prompt":"","index":3537}
{"question":"Create a Python program to read and parse XML data from a URL.","input":"https:\/\/example.com\/data.xml","expected_output":"import requests\nimport xml.etree.ElementTree as ET\n\nurl = 'https:\/\/example.com\/data.xml'\nr = requests.get(url)\nxml_data = r.text\n\nroot = ET.fromstring(xml_data)\n\nfor child in root:\n print(child.tag, child.attrib)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to read and parse XML data from a URL.\n\n### Input:\nhttps:\/\/example.com\/data.xml\n\n### Output:\nimport requests\nimport xml.etree.ElementTree as ET\n\nurl = 'https:\/\/example.com\/data.xml'\nr = requests.get(url)\nxml_data = r.text\n\nroot = ET.fromstring(xml_data)\n\nfor child in root:\n print(child.tag, child.attrib)","tok_input_length":103,"tok_output_length":55,"system_prompt":"","index":2255}
{"question":"Create a python program to convert a given number into its binary form.","input":"Number: 7","expected_output":"def convert_num_to_bin(num):\n    '''This function will convert a given number into its binary form.'''\n    bin_arr = []\n    while num > 0:\n        bin_arr.append(num%2)\n        num \/\/= 2\n    bin_arr.reverse()\n    return bin_arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to convert a given number into its binary form.\n\n### Input:\nNumber: 7\n\n### Output:\ndef convert_num_to_bin(num):\n    '''This function will convert a given number into its binary form.'''\n    bin_arr = []\n    while num > 0:\n        bin_arr.append(num%2)\n        num \/\/= 2\n    bin_arr.reverse()\n    return bin_arr","tok_input_length":103,"tok_output_length":57,"system_prompt":"","index":13908}
{"question":"Create a Python class for representing complex numbers and a method for performing complex number addition.","input":"","expected_output":"class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n        \n    def add(self, other):\n        real = self.real + other.real\n        imag = self.imag + other.imag\n        return Complex(real, imag)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for representing complex numbers and a method for performing complex number addition.\n\n### Input:\n\n\n### Output:\nclass Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n        \n    def add(self, other):\n        real = self.real + other.real\n        imag = self.imag + other.imag\n        return Complex(real, imag)","tok_input_length":103,"tok_output_length":59,"system_prompt":"","index":6218}
{"question":"Create a python program to find if a number is a prime number","input":"15","expected_output":"def is_prime(num):\n    for i in range(2, num):\n        if not num % i:\n            return False\n    return True\n\nnum = 15 \nif is_prime(num):\n    print(\"The number is prime\")\nelse:\n    print(\"The number is not prime\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to find if a number is a prime number\n\n### Input:\n15\n\n### Output:\ndef is_prime(num):\n    for i in range(2, num):\n        if not num % i:\n            return False\n    return True\n\nnum = 15 \nif is_prime(num):\n    print(\"The number is prime\")\nelse:\n    print(\"The number is not prime\")","tok_input_length":103,"tok_output_length":60,"system_prompt":"","index":2881}
{"question":"Develop a web scraper in Python to extract data from a web page.","input":"","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'example.com'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = []\nfor item in soup.find_all('div', attrs={'class': 'data_item'}):\n  data.append(item.text)\n\nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraper in Python to extract data from a web page.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'example.com'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = []\nfor item in soup.find_all('div', attrs={'class': 'data_item'}):\n  data.append(item.text)\n\nprint(data)","tok_input_length":103,"tok_output_length":62,"system_prompt":"","index":11171}
{"question":"Create a decision tree classifier in Python to distinguish cats and dogs.","input":"","expected_output":"import numpy as np\nfrom sklearn import tree\n\n# Create the data\nx = np.array([[0, 0], [1, 1]])\ny = np.array([0, 1])\n\n# Train the tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(x, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a decision tree classifier in Python to distinguish cats and dogs.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn import tree\n\n# Create the data\nx = np.array([[0, 0], [1, 1]])\ny = np.array([0, 1])\n\n# Train the tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(x, y)","tok_input_length":103,"tok_output_length":63,"system_prompt":"","index":16902}
{"question":"Create a python script to generate random passwords.","input":"","expected_output":"\"\"\"\nCreate a python script to generate random passwords \n\n\"\"\"\nimport string\nimport random\n\ndef generate_password(length=16, chars=string.ascii_letters + string.digits + string.punctuation):\n    return ''.join(random.choice(chars) for _ in range(length))\n\nif __name__ == '__main__':\n    print(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to generate random passwords.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a python script to generate random passwords \n\n\"\"\"\nimport string\nimport random\n\ndef generate_password(length=16, chars=string.ascii_letters + string.digits + string.punctuation):\n    return ''.join(random.choice(chars) for _ in range(length))\n\nif __name__ == '__main__':\n    print(generate_password())","tok_input_length":103,"tok_output_length":67,"system_prompt":"","index":18517}
{"question":"Optimize the given Python code so that it runs more efficiently.","input":"def calculateSum(a, b): \n    total = 0 \n    \n    for i in range(a,b+1): \n        total += i \n \n    return total","expected_output":"def calculateSum(a, b): \n    return int((b - a + 1) * (a + b) \/ 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the given Python code so that it runs more efficiently.\n\n### Input:\ndef calculateSum(a, b): \n    total = 0 \n    \n    for i in range(a,b+1): \n        total += i \n \n    return total\n\n### Output:\ndef calculateSum(a, b): \n    return int((b - a + 1) * (a + b) \/ 2)","tok_input_length":104,"tok_output_length":30,"system_prompt":"","index":1219}
{"question":"Identify and fix the bug in the following Python code.","input":"def remove_duplicates(ls):\n    result = []\n    for e in ls:\n        if e not in result:\n            result.append(e)\n    return result","expected_output":"def remove_duplicates(ls):\n    result = []\n    for e in ls:\n        if e not in result:\n            result.append(e)\n    return list(set(result))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify and fix the bug in the following Python code.\n\n### Input:\ndef remove_duplicates(ls):\n    result = []\n    for e in ls:\n        if e not in result:\n            result.append(e)\n    return result\n\n### Output:\ndef remove_duplicates(ls):\n    result = []\n    for e in ls:\n        if e not in result:\n            result.append(e)\n    return list(set(result))","tok_input_length":104,"tok_output_length":34,"system_prompt":"","index":6335}
{"question":"Create a Python class called Employee that represents an employee in an organization. The Employee class should have instance attributes for the employee\u2019s name, job title, and job number.","input":"Not applicable","expected_output":"class Employee:\n    def __init__(self, name, job_title, job_number):\n        self.name = name\n        self.job_title = job_title\n        self.job_number = job_number","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Employee that represents an employee in an organization. The Employee class should have instance attributes for the employee\u2019s name, job title, and job number.\n\n### Input:\nNot applicable\n\n### Output:\nclass Employee:\n    def __init__(self, name, job_title, job_number):\n        self.name = name\n        self.job_title = job_title\n        self.job_number = job_number","tok_input_length":104,"tok_output_length":40,"system_prompt":"","index":627}
{"question":"Write a Python function to remove all consecutive duplicates of a given number.","input":"[1,1,2,3,3,3,4,4,4,4]","expected_output":"def remove_duplicates(lst):\n  result = []\n  curr = lst[0]\n\n  for num in lst:\n    if num != curr:\n      result.append(num)\n      curr = num\n  return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to remove all consecutive duplicates of a given number.\n\n### Input:\n[1,1,2,3,3,3,4,4,4,4]\n\n### Output:\ndef remove_duplicates(lst):\n  result = []\n  curr = lst[0]\n\n  for num in lst:\n    if num != curr:\n      result.append(num)\n      curr = num\n  return result","tok_input_length":104,"tok_output_length":42,"system_prompt":"","index":685}
{"question":"Write a Python script that takes a list of numbers as an input and outputs their average.","input":"[3, 5, 7, 9, 12]","expected_output":"def average(arr):\n    return sum(arr) \/ len(arr)\n\nmylist = [3, 5, 7, 9, 12]\n\nprint(\"Average of mylist is:\", average(mylist))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes a list of numbers as an input and outputs their average.\n\n### Input:\n[3, 5, 7, 9, 12]\n\n### Output:\ndef average(arr):\n    return sum(arr) \/ len(arr)\n\nmylist = [3, 5, 7, 9, 12]\n\nprint(\"Average of mylist is:\", average(mylist))","tok_input_length":104,"tok_output_length":44,"system_prompt":"","index":10219}
{"question":"Create a python program to replace specific words in a given input string with a custom word.","input":"Input string: I love robots\nReplace: love -> hate","expected_output":"def replace_word(inp, src, target):\n    inp = inp.split()\n    for i in range(len(inp)):\n        if inp[i] == src:\n            inp[i] = target\n    return ' '.join(inp)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to replace specific words in a given input string with a custom word.\n\n### Input:\nInput string: I love robots\nReplace: love -> hate\n\n### Output:\ndef replace_word(inp, src, target):\n    inp = inp.split()\n    for i in range(len(inp)):\n        if inp[i] == src:\n            inp[i] = target\n    return ' '.join(inp)","tok_input_length":104,"tok_output_length":46,"system_prompt":"","index":6035}
{"question":"Generate a Python script that takes a list of integers and prints out the sum of their squares.","input":"data: [1, 2, 3]","expected_output":"data = [1, 2, 3] \nsum = 0 \n\nfor number in data: \n sum += number ** 2 \n\nprint(f\"The sum of the squares of the given numbers is {sum}.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that takes a list of integers and prints out the sum of their squares.\n\n### Input:\ndata: [1, 2, 3]\n\n### Output:\ndata = [1, 2, 3] \nsum = 0 \n\nfor number in data: \n sum += number ** 2 \n\nprint(f\"The sum of the squares of the given numbers is {sum}.\")","tok_input_length":104,"tok_output_length":47,"system_prompt":"","index":6289}
{"question":"Write a Python function to check whether a number is in the given range.","input":"number: 4, range: [2, 4]","expected_output":"def is_in_range(num, a, b):\n    if num >= a and num <= b:\n        return True\n    else:\n        return False\n\nresult = is_in_range(4, 2, 4)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check whether a number is in the given range.\n\n### Input:\nnumber: 4, range: [2, 4]\n\n### Output:\ndef is_in_range(num, a, b):\n    if num >= a and num <= b:\n        return True\n    else:\n        return False\n\nresult = is_in_range(4, 2, 4)\nprint(result)","tok_input_length":104,"tok_output_length":49,"system_prompt":"","index":8378}
{"question":"Create an algorithm in Python using numpy to normalize a given array of numbers.","input":"[1, 2, 3, 4]","expected_output":"import numpy as np\n\ndef normalize(arr):\n  return (arr - np.mean(arr)) \/ np.std(arr)\n\nnormalize([1,2,3,4]) # [-1.,  0.,  1.,  2.]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python using numpy to normalize a given array of numbers.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\nimport numpy as np\n\ndef normalize(arr):\n  return (arr - np.mean(arr)) \/ np.std(arr)\n\nnormalize([1,2,3,4]) # [-1.,  0.,  1.,  2.]","tok_input_length":104,"tok_output_length":50,"system_prompt":"","index":17619}
{"question":"Create a Python class with two instance methods: one for calculating the area of a circle, and one for calculating the circumference.","input":"","expected_output":"class Circle:\n\ndef __init__(self, radius):\n  self.radius = radius\n\ndef area(self):\n  return 3.14 * self.radius * self.radius\n\ndef circumference(self):\n  return 3.14 * (2 * self.radius)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class with two instance methods: one for calculating the area of a circle, and one for calculating the circumference.\n\n### Input:\n\n\n### Output:\nclass Circle:\n\ndef __init__(self, radius):\n  self.radius = radius\n\ndef area(self):\n  return 3.14 * self.radius * self.radius\n\ndef circumference(self):\n  return 3.14 * (2 * self.radius)","tok_input_length":104,"tok_output_length":52,"system_prompt":"","index":8280}
{"question":"Write a Python program to convert a given date in the format mm\/dd\/yyyy to its equivalent day of the week.","input":"","expected_output":"import datetime\ndate_string = input(\"Enter date in mm\/dd\/yyyy format:\")\ndate = datetime.datetime.strptime(date_string, \"%m\/%d\/%Y\")\nweekday = date.strftime(\"%A\")\nprint(\"The day for the date\",date_string,\"is\",weekday)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given date in the format mm\/dd\/yyyy to its equivalent day of the week.\n\n### Input:\n\n\n### Output:\nimport datetime\ndate_string = input(\"Enter date in mm\/dd\/yyyy format:\")\ndate = datetime.datetime.strptime(date_string, \"%m\/%d\/%Y\")\nweekday = date.strftime(\"%A\")\nprint(\"The day for the date\",date_string,\"is\",weekday)","tok_input_length":104,"tok_output_length":54,"system_prompt":"","index":15490}
{"question":"Create a Python function to extract the largest prime factor from a given number.","input":"number = 35","expected_output":"def largest_prime_factor(number):\n largest_factor = 1\n for i in range(2, number+1):\n while number % i == 0:\n largest_factor = i\n number \/\/= i\n return largest_factor\n\nlargest_prime_factor(35) # Output: 5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to extract the largest prime factor from a given number.\n\n### Input:\nnumber = 35\n\n### Output:\ndef largest_prime_factor(number):\n largest_factor = 1\n for i in range(2, number+1):\n while number % i == 0:\n largest_factor = i\n number \/\/= i\n return largest_factor\n\nlargest_prime_factor(35) # Output: 5","tok_input_length":104,"tok_output_length":57,"system_prompt":"","index":15994}
{"question":"Output a code in Python to find the second largest number in a list provided as input.","input":"","expected_output":"def second_largest(list): \n    first = second = float('-inf')\n    for num in list:\n        if num > first: \n            second = first \n            first = num \n        elif num > second and num != first: \n            second = num     \n    return second","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput a code in Python to find the second largest number in a list provided as input.\n\n### Input:\n\n\n### Output:\ndef second_largest(list): \n    first = second = float('-inf')\n    for num in list:\n        if num > first: \n            second = first \n            first = num \n        elif num > second and num != first: \n            second = num     \n    return second","tok_input_length":104,"tok_output_length":59,"system_prompt":"","index":6208}
{"question":"Create a code solution in Python to generate a random grid of characters.","input":"Not applicable","expected_output":"import random\n\n# Generate grid of characters\ngrid_rows = 3\ngrid_cols = 5\n\ngrid = []\nfor row in range(grid_rows):\n row_data = []\n\nfor col in range(grid_cols):\n row_data.append(random.choice(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\ngrid.append(row_data)\n\nprint(grid)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code solution in Python to generate a random grid of characters.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# Generate grid of characters\ngrid_rows = 3\ngrid_cols = 5\n\ngrid = []\nfor row in range(grid_rows):\n row_data = []\n\nfor col in range(grid_cols):\n row_data.append(random.choice(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\ngrid.append(row_data)\n\nprint(grid)","tok_input_length":104,"tok_output_length":60,"system_prompt":"","index":15933}
{"question":"Write a Python program to encode an integer into a base 62 string.","input":"","expected_output":"import string \n\ndef encode_base_62(n): \n    base62 = string.digits + string.ascii_uppercase + string.ascii_lowercase\n    output = \"\" \n    while n > 0:\n        output = base62[n%62] + output\n        n \/\/= 62\n    return output","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to encode an integer into a base 62 string.\n\n### Input:\n\n\n### Output:\nimport string \n\ndef encode_base_62(n): \n    base62 = string.digits + string.ascii_uppercase + string.ascii_lowercase\n    output = \"\" \n    while n > 0:\n        output = base62[n%62] + output\n        n \/\/= 62\n    return output","tok_input_length":104,"tok_output_length":62,"system_prompt":"","index":12038}
{"question":"Create a web application that will store and display a user's contacts.","input":"","expected_output":"We can create a web application for storing and displaying a user's contacts. We can use HTML, CSS, and JavaScript for creating the front-end of the application. Then, we can use Python to create the backend of the application. We can also use a database like MongoDB to store the user's contacts.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application that will store and display a user's contacts.\n\n### Input:\n\n\n### Output:\nWe can create a web application for storing and displaying a user's contacts. We can use HTML, CSS, and JavaScript for creating the front-end of the application. Then, we can use Python to create the backend of the application. We can also use a database like MongoDB to store the user's contacts.","tok_input_length":104,"tok_output_length":63,"system_prompt":"","index":10273}
{"question":"Develop a code in Python to simulate a lottery game.","input":"","expected_output":"import random\n\ndef generate_lottery_numbers():\n    # Generate 6 unique random numbers between 1 and 49\n    lottery_nums = random.sample(range(1, 50), 6)\n    return lottery_nums\n\nif __name__ == '__main__':\n    print(\"Lottery numbers:\", generate_lottery_numbers())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code in Python to simulate a lottery game.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_lottery_numbers():\n    # Generate 6 unique random numbers between 1 and 49\n    lottery_nums = random.sample(range(1, 50), 6)\n    return lottery_nums\n\nif __name__ == '__main__':\n    print(\"Lottery numbers:\", generate_lottery_numbers())","tok_input_length":104,"tok_output_length":66,"system_prompt":"","index":14242}
{"question":"Optimize performance of an existing code snippet by making use of Python's list comprehensions.","input":"numbers = [1, 2, 3, 4, 5]\nsquares = []\nfor n in numbers:\n squares.append(n*n)","expected_output":"numbers = [1, 2, 3, 4, 5]\nsquares = [n*n for n in numbers]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize performance of an existing code snippet by making use of Python's list comprehensions.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5]\nsquares = []\nfor n in numbers:\n squares.append(n*n)\n\n### Output:\nnumbers = [1, 2, 3, 4, 5]\nsquares = [n*n for n in numbers]","tok_input_length":105,"tok_output_length":29,"system_prompt":"","index":2585}
{"question":"Create a Python program that takes a given list and returns a new list without any duplicates.","input":"[1, 2, 2, 3, 4, 5, 5, 6]","expected_output":"def remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    \n    return new_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a given list and returns a new list without any duplicates.\n\n### Input:\n[1, 2, 2, 3, 4, 5, 5, 6]\n\n### Output:\ndef remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    \n    return new_list","tok_input_length":105,"tok_output_length":36,"system_prompt":"","index":14378}
{"question":"Create a script in Python that checks a provided URL for a specific keyword within its content and outputs either a pass or fail result.","input":"URL: http:\/\/www.example.com\nKeyword: success","expected_output":"import requests\n\nurl = 'http:\/\/www.example.com'\nkeyword = 'success'\n\nr = requests.get(url)\nif keyword in r.text:\n print('Pass')\nelse:\n print('Fail')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python that checks a provided URL for a specific keyword within its content and outputs either a pass or fail result.\n\n### Input:\nURL: http:\/\/www.example.com\nKeyword: success\n\n### Output:\nimport requests\n\nurl = 'http:\/\/www.example.com'\nkeyword = 'success'\n\nr = requests.get(url)\nif keyword in r.text:\n print('Pass')\nelse:\n print('Fail')","tok_input_length":105,"tok_output_length":40,"system_prompt":"","index":12931}
{"question":"Implement a function in Python for finding the maximum element in an array.","input":"list = [18, 25, 1, 12, 37]","expected_output":"def find_max(list):\n    max_element = list[0]\n    for element in list:\n        if element > max_element:\n            max_element = element\n    return max_element\n\nmax = find_max(list)\nprint(max)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python for finding the maximum element in an array.\n\n### Input:\nlist = [18, 25, 1, 12, 37]\n\n### Output:\ndef find_max(list):\n    max_element = list[0]\n    for element in list:\n        if element > max_element:\n            max_element = element\n    return max_element\n\nmax = find_max(list)\nprint(max)","tok_input_length":105,"tok_output_length":47,"system_prompt":"","index":3514}
{"question":"Implement a function in Python that takes a list of string and sorts them alphabetically.","input":"[\"apple\", \"banana\", \"mango\", \"pear\"]","expected_output":"def sortStrings(wordsList):\n    sorted_list = sorted(wordsList)\n    return sorted_list\n \nwordsList = [\"apple\", \"banana\", \"mango\", \"pear\"]\nsorted_words = sortStrings(wordsList)\nprint(sorted_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes a list of string and sorts them alphabetically.\n\n### Input:\n[\"apple\", \"banana\", \"mango\", \"pear\"]\n\n### Output:\ndef sortStrings(wordsList):\n    sorted_list = sorted(wordsList)\n    return sorted_list\n \nwordsList = [\"apple\", \"banana\", \"mango\", \"pear\"]\nsorted_words = sortStrings(wordsList)\nprint(sorted_words)","tok_input_length":105,"tok_output_length":48,"system_prompt":"","index":11376}
{"question":"Write a Python function to generate a random number between 1 and 5, given two numbers X and Y.","input":"4, 8","expected_output":"import random\n\ndef generate_random_number(x, y):\n    start = min(x, y)\n    end = max(x, y)\n    return random.randint(start, end)\n\nresult = generate_random_number(4, 8)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate a random number between 1 and 5, given two numbers X and Y.\n\n### Input:\n4, 8\n\n### Output:\nimport random\n\ndef generate_random_number(x, y):\n    start = min(x, y)\n    end = max(x, y)\n    return random.randint(start, end)\n\nresult = generate_random_number(4, 8)\nprint(result)","tok_input_length":105,"tok_output_length":50,"system_prompt":"","index":15048}
{"question":"Using only base Python (no 3rd party libraries), create a function that checks whether a number is prime or not.","input":"","expected_output":"def is_prime(num):\n    for i in range(2, int(num \/ 2)):\n        if num % i == 0:\n            return False\n    else:\n        if num < 2:\n            return False\n        else:\n            return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing only base Python (no 3rd party libraries), create a function that checks whether a number is prime or not.\n\n### Input:\n\n\n### Output:\ndef is_prime(num):\n    for i in range(2, int(num \/ 2)):\n        if num % i == 0:\n            return False\n    else:\n        if num < 2:\n            return False\n        else:\n            return True","tok_input_length":105,"tok_output_length":53,"system_prompt":"","index":4532}
{"question":"Compute the sum of squares of all the numbers in a given range using a loop in Python.","input":"2, 8","expected_output":"def sum_squares_in_range(start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += i*i\n    return sum\n\nresult = sum_squares_in_range(2, 8)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the sum of squares of all the numbers in a given range using a loop in Python.\n\n### Input:\n2, 8\n\n### Output:\ndef sum_squares_in_range(start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += i*i\n    return sum\n\nresult = sum_squares_in_range(2, 8)\nprint(result)","tok_input_length":105,"tok_output_length":54,"system_prompt":"","index":5358}
{"question":"Compose a python program to classify each items in our list.","input":"List items: shirt, pants, dress, coat","expected_output":"def classify(items):\n    categories = ['shirts', 'pants', 'dresses', 'coats']\n    results = {}\n    for item in items:\n        for category in categories:\n            if item == category:\n                results[item] = category\n    return results","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a python program to classify each items in our list.\n\n### Input:\nList items: shirt, pants, dress, coat\n\n### Output:\ndef classify(items):\n    categories = ['shirts', 'pants', 'dresses', 'coats']\n    results = {}\n    for item in items:\n        for category in categories:\n            if item == category:\n                results[item] = category\n    return results","tok_input_length":105,"tok_output_length":55,"system_prompt":"","index":14283}
{"question":"Can you create a Python program that converts binary numbers to decimal numbers?","input":"binary_number = \"1010\"","expected_output":"def binary_to_decimal(binary_number):\n    decimal_number = 0\n    for digit in binary_number:\n        decimal_number = decimal_number*2 + int(digit)\n    return decimal_number\n\nbinary_number = \"1010\"\n\nprint(binary_to_decimal(binary_number)) # 10","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a Python program that converts binary numbers to decimal numbers?\n\n### Input:\nbinary_number = \"1010\"\n\n### Output:\ndef binary_to_decimal(binary_number):\n    decimal_number = 0\n    for digit in binary_number:\n        decimal_number = decimal_number*2 + int(digit)\n    return decimal_number\n\nbinary_number = \"1010\"\n\nprint(binary_to_decimal(binary_number)) # 10","tok_input_length":105,"tok_output_length":57,"system_prompt":"","index":10751}
{"question":"Create a function in Python to create a list of the first 10 numbers divisible by five.","input":"","expected_output":"def five_divisible():\n  i = 0\n  my_list = []\n  while i < 10:\n    if i % 5 == 0:\n      my_list.append(i)\n    i = i + 1\n  return my_list\n\nprint(five_divisible())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to create a list of the first 10 numbers divisible by five.\n\n### Input:\n\n\n### Output:\ndef five_divisible():\n  i = 0\n  my_list = []\n  while i < 10:\n    if i % 5 == 0:\n      my_list.append(i)\n    i = i + 1\n  return my_list\n\nprint(five_divisible())","tok_input_length":105,"tok_output_length":59,"system_prompt":"","index":3972}
{"question":"Write a Python program to convert a given binary number to a decimal number.","input":"101101","expected_output":"binary = input(\"Enter a binary number: \")\ndecimal = 0\nfor i in range(len(binary)):\n    if binary[i] == '1': \n        decimal += 2**(len(binary) - i - 1)\nprint(\"Decimal equivalent of the given binary number:\", decimal)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given binary number to a decimal number.\n\n### Input:\n101101\n\n### Output:\nbinary = input(\"Enter a binary number: \")\ndecimal = 0\nfor i in range(len(binary)):\n    if binary[i] == '1': \n        decimal += 2**(len(binary) - i - 1)\nprint(\"Decimal equivalent of the given binary number:\", decimal)","tok_input_length":105,"tok_output_length":60,"system_prompt":"","index":14161}
{"question":"Create a Python program to generate a random password of length n.","input":"10","expected_output":"import random\n\ndef generate_password(length):\n  characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*(){}[]?\/'\n  password = ''\n  for c in range(length):\n    password += random.choice(characters)\n  return password\n\nlength = 10\npassword = generate_password(length)\nprint(password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random password of length n.\n\n### Input:\n10\n\n### Output:\nimport random\n\ndef generate_password(length):\n  characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*(){}[]?\/'\n  password = ''\n  for c in range(length):\n    password += random.choice(characters)\n  return password\n\nlength = 10\npassword = generate_password(length)\nprint(password)","tok_input_length":105,"tok_output_length":63,"system_prompt":"","index":8595}
{"question":"Generate a python program to print out the following pattern of stars","input":"","expected_output":"for i in range(1, 6): \n   for j in range(i): \n      print (\"* \", end=\"\")\n   print(\"\\n\")\n  \nfor i in reversed(range(1, 5)): \n   for j in range(i): \n      print (\"* \", end=\"\")\n   print(\"\\n\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to print out the following pattern of stars\n\n### Input:\n\n\n### Output:\nfor i in range(1, 6): \n   for j in range(i): \n      print (\"* \", end=\"\")\n   print(\"\\n\")\n  \nfor i in reversed(range(1, 5)): \n   for j in range(i): \n      print (\"* \", end=\"\")\n   print(\"\\n\")","tok_input_length":105,"tok_output_length":65,"system_prompt":"","index":7737}
{"question":"Develop a Python program to calculate Fibonacci sequence.","input":"","expected_output":"def Fibonacci(n): \n    F = [0]*(n+1) \n    F[0] = 0; F[1] = 1\n    for i in range(2, n + 1): \n        F[i] = F[i-1] + F[i-2]\n    return F[n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n    F = [0]*(n+1) \n    F[0] = 0; F[1] = 1\n    for i in range(2, n + 1): \n        F[i] = F[i-1] + F[i-2]\n    return F[n]","tok_input_length":105,"tok_output_length":69,"system_prompt":"","index":3045}
{"question":"Given a 2D array in Python, write a code to calculate the sum of all elements.","input":"arr = [[1, 2, 3], [4, 5, 6], [7 , 8, 9]]","expected_output":"total = 0\nfor row in arr: \n    for num in row: \n        total += num \nprint(total) # 45","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D array in Python, write a code to calculate the sum of all elements.\n\n### Input:\narr = [[1, 2, 3], [4, 5, 6], [7 , 8, 9]]\n\n### Output:\ntotal = 0\nfor row in arr: \n    for num in row: \n        total += num \nprint(total) # 45","tok_input_length":106,"tok_output_length":30,"system_prompt":"","index":16120}
{"question":"Write a python code that takes in a list of integers and removes all the duplicate elements from it.","input":"[1, 2, 3, 2, 4, 5, 6, 3]","expected_output":"final_list = [] \nfor num in list_of_integers: \n    if num not in final_list: \n    \tfinal_list.append(num) \nprint(final_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code that takes in a list of integers and removes all the duplicate elements from it.\n\n### Input:\n[1, 2, 3, 2, 4, 5, 6, 3]\n\n### Output:\nfinal_list = [] \nfor num in list_of_integers: \n    if num not in final_list: \n    \tfinal_list.append(num) \nprint(final_list)","tok_input_length":106,"tok_output_length":35,"system_prompt":"","index":330}
{"question":"In Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.","input":"[3, 5, 8, 9, 10]","expected_output":"def even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.\n\n### Input:\n[3, 5, 8, 9, 10]\n\n### Output:\ndef even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum","tok_input_length":106,"tok_output_length":41,"system_prompt":"","index":5981}
{"question":"Write an algorithm in Python to detect duplicate values in a given array.","input":"[5, 2, 1, 5, 9, 1, 3]","expected_output":"def find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n        else:\n            duplicates.append(i)\n    return duplicates","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to detect duplicate values in a given array.\n\n### Input:\n[5, 2, 1, 5, 9, 1, 3]\n\n### Output:\ndef find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n        else:\n            duplicates.append(i)\n    return duplicates","tok_input_length":106,"tok_output_length":44,"system_prompt":"","index":1367}
{"question":"Write a function in Python that computes the average of all numbers in a given list.","input":"numbers = [4, 8, 6, 2, 10]","expected_output":"def compute_average(numbers):\n  total = 0\n  for num in numbers:\n    total += num\n  return total \/ len(numbers)\n\naverage = compute_average(numbers)\nprint(average)  # Outputs 6","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that computes the average of all numbers in a given list.\n\n### Input:\nnumbers = [4, 8, 6, 2, 10]\n\n### Output:\ndef compute_average(numbers):\n  total = 0\n  for num in numbers:\n    total += num\n  return total \/ len(numbers)\n\naverage = compute_average(numbers)\nprint(average)  # Outputs 6","tok_input_length":106,"tok_output_length":45,"system_prompt":"","index":13197}
{"question":"Add code in python to the given argument to iterate over a list of numbers and print the even numbers.","input":"[1,2,3,4,5]","expected_output":"# Iterate over numbers\nfor num in [1,2,3,4,5]:\n  # Check for even\n  if(num % 2 == 0):\n    # Print the even numbers\n    print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd code in python to the given argument to iterate over a list of numbers and print the even numbers.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\n# Iterate over numbers\nfor num in [1,2,3,4,5]:\n  # Check for even\n  if(num % 2 == 0):\n    # Print the even numbers\n    print(num)","tok_input_length":106,"tok_output_length":47,"system_prompt":"","index":12716}
{"question":"Create a Python program that takes two integers as inputs and prints the largest number of them.","input":"First Integer: 12\nSecond Integer: 44","expected_output":"num1 = 12\nnum2 = 44\n\nif (num1 > num2):\n    print(num1)\nelif (num2 > num1):\n    print(num2)\nelse:\n    print(\"Both numbers are equal\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two integers as inputs and prints the largest number of them.\n\n### Input:\nFirst Integer: 12\nSecond Integer: 44\n\n### Output:\nnum1 = 12\nnum2 = 44\n\nif (num1 > num2):\n    print(num1)\nelif (num2 > num1):\n    print(num2)\nelse:\n    print(\"Both numbers are equal\")","tok_input_length":106,"tok_output_length":49,"system_prompt":"","index":17119}
{"question":"Generate a Python script for sorting a list in ascending order.","input":"[3, 4, 8, 5, 10]","expected_output":"def sortList(list): \n    list.sort() \n    return list\n    \nunsorted_list = [3, 4, 8, 5, 10]\nsorted_list = sortList(unsorted_list)\n\nprint(\"Sorted list:\", sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for sorting a list in ascending order.\n\n### Input:\n[3, 4, 8, 5, 10]\n\n### Output:\ndef sortList(list): \n    list.sort() \n    return list\n    \nunsorted_list = [3, 4, 8, 5, 10]\nsorted_list = sortList(unsorted_list)\n\nprint(\"Sorted list:\", sorted_list)","tok_input_length":106,"tok_output_length":52,"system_prompt":"","index":7117}
{"question":"Create a Python script to read a dictionary, and then print only the keys whose values are greater than 5.","input":"Not applicable","expected_output":"my_dict = {\n 'a': 1,\n 'b': 2,\n 'c': 8,\n 'd': 4\n}\n\nfor key, value in my_dict.items():\n if value > 5:\n  print(key)\n\n# Output: c","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to read a dictionary, and then print only the keys whose values are greater than 5.\n\n### Input:\nNot applicable\n\n### Output:\nmy_dict = {\n 'a': 1,\n 'b': 2,\n 'c': 8,\n 'd': 4\n}\n\nfor key, value in my_dict.items():\n if value > 5:\n  print(key)\n\n# Output: c","tok_input_length":106,"tok_output_length":53,"system_prompt":"","index":12869}
{"question":"Develop a Python script which sorts a list of names in alphabetical order","input":"John, Anna, David, Bob, Alex","expected_output":"names = [\"John\", \"Anna\", \"David\", \"Bob\", \"Alex\"]\n  \n# sorting the names \nnames.sort() \n  \n# printing the first name in the sorted list \nprint(\"The first name in the sorted list is:\") \nprint(names[0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script which sorts a list of names in alphabetical order\n\n### Input:\nJohn, Anna, David, Bob, Alex\n\n### Output:\nnames = [\"John\", \"Anna\", \"David\", \"Bob\", \"Alex\"]\n  \n# sorting the names \nnames.sort() \n  \n# printing the first name in the sorted list \nprint(\"The first name in the sorted list is:\") \nprint(names[0])","tok_input_length":106,"tok_output_length":55,"system_prompt":"","index":15756}
{"question":"Generate a Python class to define a complex number and an operator overloading function to add two complex numbers.","input":"","expected_output":"class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __add__(self, other):\n        return ComplexNumber(self.real + other.real, \n                    self.imaginary + other.imaginary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to define a complex number and an operator overloading function to add two complex numbers.\n\n### Input:\n\n\n### Output:\nclass ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __add__(self, other):\n        return ComplexNumber(self.real + other.real, \n                    self.imaginary + other.imaginary)","tok_input_length":106,"tok_output_length":58,"system_prompt":"","index":14117}
{"question":"Write a Python script to decrypt the given ciphertext.","input":"Ciphertext: NPKUO","expected_output":"alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\ndef decrypt(ciphertext):\n    plaintext = \"\"\n    for letter in ciphertext:\n        index = alphabet.find(letter)\n        newIndex = (index - 3) % 26\n        plaintext += alphabet[newIndex]\n    return plaintext\n\nprint(decrypt(\"NPKUO\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to decrypt the given ciphertext.\n\n### Input:\nCiphertext: NPKUO\n\n### Output:\nalphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\ndef decrypt(ciphertext):\n    plaintext = \"\"\n    for letter in ciphertext:\n        index = alphabet.find(letter)\n        newIndex = (index - 3) % 26\n        plaintext += alphabet[newIndex]\n    return plaintext\n\nprint(decrypt(\"NPKUO\"))","tok_input_length":106,"tok_output_length":61,"system_prompt":"","index":6763}
{"question":"Create a class in Python which can convert any given Fahrenheit temperature to degree Celsius.","input":"","expected_output":"class FahrenheitToCelsius:\n  def __init__(self, temp_fahrenheit):\n    self.temp_fahrenheit = temp_fahrenheit\n\n  def fahrenheit_to_celsius(self):\n    temp_celsius = (self.temp_fahrenheit - 32) * 5 \/ 9\n    return temp_celsius","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python which can convert any given Fahrenheit temperature to degree Celsius.\n\n### Input:\n\n\n### Output:\nclass FahrenheitToCelsius:\n  def __init__(self, temp_fahrenheit):\n    self.temp_fahrenheit = temp_fahrenheit\n\n  def fahrenheit_to_celsius(self):\n    temp_celsius = (self.temp_fahrenheit - 32) * 5 \/ 9\n    return temp_celsius","tok_input_length":106,"tok_output_length":63,"system_prompt":"","index":13774}
{"question":"Write a Python program to detect cycles in a type of linked list.","input":"","expected_output":"def detect_cycles(head): \n    slow_p = head \n    fast_p = head \n\n    while slow_p and fast_p and fast_p.next: \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n\n        if slow_p == fast_p: \n            return True \n\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect cycles in a type of linked list.\n\n### Input:\n\n\n### Output:\ndef detect_cycles(head): \n    slow_p = head \n    fast_p = head \n\n    while slow_p and fast_p and fast_p.next: \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n\n        if slow_p == fast_p: \n            return True \n\n    return False","tok_input_length":106,"tok_output_length":65,"system_prompt":"","index":11930}
{"question":"Create a Python class that encapsulates a Queue data structure.","input":"","expected_output":"class Queue:\n  def __init__(self):\n    self.items = []\n\n  def is_empty(self):\n    return self.items == []\n\n  def enqueue(self, item):\n    self.items.insert(0, item)\n  \n  def dequeue(self):\n    return self.items.pop()\n\n  def size(self):\n    return len(self.items)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that encapsulates a Queue data structure.\n\n### Input:\n\n\n### Output:\nclass Queue:\n  def __init__(self):\n    self.items = []\n\n  def is_empty(self):\n    return self.items == []\n\n  def enqueue(self, item):\n    self.items.insert(0, item)\n  \n  def dequeue(self):\n    return self.items.pop()\n\n  def size(self):\n    return len(self.items)","tok_input_length":106,"tok_output_length":67,"system_prompt":"","index":1519}
{"question":"Write a Python function to sort a list of dictionaries according to a certain key.","input":"[{'a': 5, 'b': 3}, {'a': 4, 'b': 1}, {'a': 2, 'b': 8}]","expected_output":"def sort_dict_list(dict_list, sort_key):\n  return sorted(dict_list, key=lambda k: k[sort_key])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to sort a list of dictionaries according to a certain key.\n\n### Input:\n[{'a': 5, 'b': 3}, {'a': 4, 'b': 1}, {'a': 2, 'b': 8}]\n\n### Output:\ndef sort_dict_list(dict_list, sort_key):\n  return sorted(dict_list, key=lambda k: k[sort_key])","tok_input_length":107,"tok_output_length":26,"system_prompt":"","index":2187}
{"question":"Modify the given program to print the output in reverse order","input":"def print_list(lst):\n    for i in lst:\n        print(i)\n\nword_list = [\"Python\", \"is\", \"fun\"]\n\nprint_list(word_list)","expected_output":"def print_list_reverse(lst):\n    for i in reversed(lst):\n        print(i)\n\nword_list = [\"Python\", \"is\", \"fun\"]\n\nprint_list_reverse(word_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given program to print the output in reverse order\n\n### Input:\ndef print_list(lst):\n    for i in lst:\n        print(i)\n\nword_list = [\"Python\", \"is\", \"fun\"]\n\nprint_list(word_list)\n\n### Output:\ndef print_list_reverse(lst):\n    for i in reversed(lst):\n        print(i)\n\nword_list = [\"Python\", \"is\", \"fun\"]\n\nprint_list_reverse(word_list)","tok_input_length":107,"tok_output_length":36,"system_prompt":"","index":6547}
{"question":"Analyse the given Python code and identify the errors, if any.","input":"def set_variable(name, value):\n    variable = name\n    variable_value = value\n    return variable_name","expected_output":"Error 1: The function definition is missing the closing parenthesis.\nError 2: The variable \"variable_name\" is not defined.\nError 3: The function does not return the value of \"variable\".","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyse the given Python code and identify the errors, if any.\n\n### Input:\ndef set_variable(name, value):\n    variable = name\n    variable_value = value\n    return variable_name\n\n### Output:\nError 1: The function definition is missing the closing parenthesis.\nError 2: The variable \"variable_name\" is not defined.\nError 3: The function does not return the value of \"variable\".","tok_input_length":107,"tok_output_length":43,"system_prompt":"","index":14745}
{"question":"Modify this Python code to insert the number 5 into a list at the 5th position.","input":"data = [1, 2, 3, 4]","expected_output":"data = [1, 2, 3, 4] \n\n# insert element '5' at 5th position \ndata.insert(4, 5) \nprint(\"Modified list:\") \nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify this Python code to insert the number 5 into a list at the 5th position.\n\n### Input:\ndata = [1, 2, 3, 4]\n\n### Output:\ndata = [1, 2, 3, 4] \n\n# insert element '5' at 5th position \ndata.insert(4, 5) \nprint(\"Modified list:\") \nprint(data)","tok_input_length":107,"tok_output_length":46,"system_prompt":"","index":11356}
{"question":"Create a function in Python that takes in a list and sorts it in ascending order.","input":"[3, 5, 1, 2, 9]","expected_output":"def sortList(list):\n list.sort()\n return list\n\nprint(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes in a list and sorts it in ascending order.\n\n### Input:\n[3, 5, 1, 2, 9]\n\n### Output:\ndef sortList(list):\n list.sort()\n return list\n\nprint(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9]","tok_input_length":107,"tok_output_length":48,"system_prompt":"","index":14015}
{"question":"Create a function in Python which takes a list of numbers and returns the sum of squares of those numbers.","input":"[3, 4, 5]","expected_output":"def sum_squares(nums):\n    result = 0\n    for num in nums:\n        result += num*num\n    \n    return result\n\nnums = [3, 4, 5]\n\nresult = sum_squares(nums)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a list of numbers and returns the sum of squares of those numbers.\n\n### Input:\n[3, 4, 5]\n\n### Output:\ndef sum_squares(nums):\n    result = 0\n    for num in nums:\n        result += num*num\n    \n    return result\n\nnums = [3, 4, 5]\n\nresult = sum_squares(nums)\nprint(result)","tok_input_length":107,"tok_output_length":50,"system_prompt":"","index":16008}
{"question":"Modify the existing python program to fulfill the following purpose","input":"Given a list of strings, find and print the most frequent string in the list.","expected_output":"def most_frequent(lst):\n    max = 0\n    frequent = lst[0]\n    for item in lst:\n        freq = lst.count(item)\n        if freq > max:\n            max = freq\n            frequent = item\n    return frequent","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the existing python program to fulfill the following purpose\n\n### Input:\nGiven a list of strings, find and print the most frequent string in the list.\n\n### Output:\ndef most_frequent(lst):\n    max = 0\n    frequent = lst[0]\n    for item in lst:\n        freq = lst.count(item)\n        if freq > max:\n            max = freq\n            frequent = item\n    return frequent","tok_input_length":107,"tok_output_length":52,"system_prompt":"","index":6385}
{"question":"Create a python function that finds the median value of a list of integers, where the length of the list is greater than two.","input":"","expected_output":"def find_median(lst):\n\tlst.sort() \n\tif len(lst) % 2 != 0: \n\t\treturn lst[len(lst)\/\/2]\n\treturn (lst[len(lst)\/\/2] + lst[len(lst)\/\/2 - 1]) \/ 2.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that finds the median value of a list of integers, where the length of the list is greater than two.\n\n### Input:\n\n\n### Output:\ndef find_median(lst):\n\tlst.sort() \n\tif len(lst) % 2 != 0: \n\t\treturn lst[len(lst)\/\/2]\n\treturn (lst[len(lst)\/\/2] + lst[len(lst)\/\/2 - 1]) \/ 2.0","tok_input_length":107,"tok_output_length":54,"system_prompt":"","index":9523}
{"question":"Create a Python program to reverse a given stack without recursion.","input":"stack = [1, 2, 3]","expected_output":"def reverse_stack(stack):\n    rev_stack = []\n\n    while(stack):\n        rev_stack.append(stack.pop())\n\n    return rev_stack\n\n# Usage\nstack = [1, 2, 3]\nprint(reverse_stack(stack)) # => [3, 2, 1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to reverse a given stack without recursion.\n\n### Input:\nstack = [1, 2, 3]\n\n### Output:\ndef reverse_stack(stack):\n    rev_stack = []\n\n    while(stack):\n        rev_stack.append(stack.pop())\n\n    return rev_stack\n\n# Usage\nstack = [1, 2, 3]\nprint(reverse_stack(stack)) # => [3, 2, 1]","tok_input_length":107,"tok_output_length":57,"system_prompt":"","index":2981}
{"question":"Create a web application using Flask and Python to read in a dataset and print the number of unique items.","input":"","expected_output":"@app.route('\/', methods=['GET','POST'])\ndef read_dataset():\n    if request.method == 'POST':\n        data = request.form['data']\n        unique_items = len(set(data.split()))\n        print('Number of Unique items is:',unique_items)\n    return render_template('index.html')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using Flask and Python to read in a dataset and print the number of unique items.\n\n### Input:\n\n\n### Output:\n@app.route('\/', methods=['GET','POST'])\ndef read_dataset():\n    if request.method == 'POST':\n        data = request.form['data']\n        unique_items = len(set(data.split()))\n        print('Number of Unique items is:',unique_items)\n    return render_template('index.html')","tok_input_length":107,"tok_output_length":59,"system_prompt":"","index":1155}
{"question":"Generate a Python program that counts the number of words and the average word length in a given sentence.","input":"","expected_output":"def count_words(sentence):\n  words = sentence.split()\n  num_words = len(words)\n  total_len = 0\n  for word in words:\n    total_len += len(word)\n  avg_word_len = total_len \/ num_words\n  return (num_words, avg_word_len)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that counts the number of words and the average word length in a given sentence.\n\n### Input:\n\n\n### Output:\ndef count_words(sentence):\n  words = sentence.split()\n  num_words = len(words)\n  total_len = 0\n  for word in words:\n    total_len += len(word)\n  avg_word_len = total_len \/ num_words\n  return (num_words, avg_word_len)","tok_input_length":107,"tok_output_length":60,"system_prompt":"","index":12056}
{"question":"Create a scalable program in Python using functions to add two numbers.","input":"7, 9","expected_output":"def add(x, y): \n    return x + y\n \n# Driver code \nnum1 = 7\nnum2 = 9\nprint(\"Sum of {0} and {1} is {2}\" \n        .format(num1, num2, add(num1, num2)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a scalable program in Python using functions to add two numbers.\n\n### Input:\n7, 9\n\n### Output:\ndef add(x, y): \n    return x + y\n \n# Driver code \nnum1 = 7\nnum2 = 9\nprint(\"Sum of {0} and {1} is {2}\" \n        .format(num1, num2, add(num1, num2)))","tok_input_length":107,"tok_output_length":62,"system_prompt":"","index":9400}
{"question":"Generate an algorithm in Python to measure the time taken by a function to execute.","input":"","expected_output":"import time\n\ndef measure_time(): \n    start_time = time.time() \n    # run your code \n    end_time = time.time() \n    time_taken = end_time - start_time\n  \n    return time_taken\n\ntime_taken = measure_time() \nprint (\"Time taken in seconds: \",time_taken)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python to measure the time taken by a function to execute.\n\n### Input:\n\n\n### Output:\nimport time\n\ndef measure_time(): \n    start_time = time.time() \n    # run your code \n    end_time = time.time() \n    time_taken = end_time - start_time\n  \n    return time_taken\n\ntime_taken = measure_time() \nprint (\"Time taken in seconds: \",time_taken)","tok_input_length":107,"tok_output_length":64,"system_prompt":"","index":14238}
{"question":"Can you create a function in python code to flatten a nested dictionary?","input":"","expected_output":"def flatten_dict(d):\n    def items():\n        for key, value in d.items():\n            if isinstance(value, dict):\n                for subkey, subvalue in flatten_dict(value).items():\n                    yield key + '.' + subkey, subvalue\n            else:\n                yield key, value\n\n    return dict(items())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a function in python code to flatten a nested dictionary?\n\n### Input:\n\n\n### Output:\ndef flatten_dict(d):\n    def items():\n        for key, value in d.items():\n            if isinstance(value, dict):\n                for subkey, subvalue in flatten_dict(value).items():\n                    yield key + '.' + subkey, subvalue\n            else:\n                yield key, value\n\n    return dict(items())","tok_input_length":107,"tok_output_length":66,"system_prompt":"","index":15098}
{"question":"Create a Python dictionary to store data about a student.","input":"","expected_output":"student_data = {\n    'name': 'John Smith',\n    'year': 'Freshman',\n    'gpa': 3.25,\n    'courses': ['math', 'english', 'Computer Science', 'Statistics'],\n    'extracurricular': ['Chess Club', 'Student Government', 'Debate Team']\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary to store data about a student.\n\n### Input:\n\n\n### Output:\nstudent_data = {\n    'name': 'John Smith',\n    'year': 'Freshman',\n    'gpa': 3.25,\n    'courses': ['math', 'english', 'Computer Science', 'Statistics'],\n    'extracurricular': ['Chess Club', 'Student Government', 'Debate Team']\n}","tok_input_length":107,"tok_output_length":69,"system_prompt":"","index":385}
{"question":"Implement a queue data structure in python","input":"","expected_output":"class Queue(object):\n\n    def __init__(self):\n        self.queue = []\n \n    def enqueue(self, item):\n        self.queue.insert(0, item)\n \n    def dequeue(self):\n        if len(self.queue)>0:\n            return self.queue.pop()\n        else:\n            return None\n \n    def size(self):\n        return len(self.queue)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a queue data structure in python\n\n### Input:\n\n\n### Output:\nclass Queue(object):\n\n    def __init__(self):\n        self.queue = []\n \n    def enqueue(self, item):\n        self.queue.insert(0, item)\n \n    def dequeue(self):\n        if len(self.queue)>0:\n            return self.queue.pop()\n        else:\n            return None\n \n    def size(self):\n        return len(self.queue)","tok_input_length":107,"tok_output_length":72,"system_prompt":"","index":717}
{"question":"Edit this Python code to make the while loop break when the user inputs an empty string.","input":"user_input = input(\"Please enter a word:\")\nwhile user_input:\n    print(user_input)\n    user_input = input(\"Please enter a word:\")","expected_output":"user_input = input(\"Please enter a word:\")\nwhile user_input != \"\":\n    print(user_input)\n    user_input = input(\"Please enter a word:\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python code to make the while loop break when the user inputs an empty string.\n\n### Input:\nuser_input = input(\"Please enter a word:\")\nwhile user_input:\n    print(user_input)\n    user_input = input(\"Please enter a word:\")\n\n### Output:\nuser_input = input(\"Please enter a word:\")\nwhile user_input != \"\":\n    print(user_input)\n    user_input = input(\"Please enter a word:\")","tok_input_length":108,"tok_output_length":32,"system_prompt":"","index":2126}
{"question":"Create a Python program to check if two given lists are disjoint.","input":"list1 = [2, 3, 4, 5]\nlist2 = [6, 7, 8, 9]","expected_output":"def check_disjoint(list1, list2):\n    return not bool(set(list1) & set(list2))\n\nresult = check_disjoint(list1, list2)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check if two given lists are disjoint.\n\n### Input:\nlist1 = [2, 3, 4, 5]\nlist2 = [6, 7, 8, 9]\n\n### Output:\ndef check_disjoint(list1, list2):\n    return not bool(set(list1) & set(list2))\n\nresult = check_disjoint(list1, list2)\nprint(result)","tok_input_length":108,"tok_output_length":38,"system_prompt":"","index":4883}
{"question":"Estimate the power demand of a computer system using the given time and CPU utilization information using Python.","input":"Utilization = 10%\nOperating Time = 10 hours\nPower Consumption = 100 Watts","expected_output":"def calculatePowerDemand(util, time, power):\n    return util * time * power\n\nPowerDemand = calculatePowerDemand(0.1, 10, 100)\nprint(PowerDemand)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEstimate the power demand of a computer system using the given time and CPU utilization information using Python.\n\n### Input:\nUtilization = 10%\nOperating Time = 10 hours\nPower Consumption = 100 Watts\n\n### Output:\ndef calculatePowerDemand(util, time, power):\n    return util * time * power\n\nPowerDemand = calculatePowerDemand(0.1, 10, 100)\nprint(PowerDemand)","tok_input_length":108,"tok_output_length":41,"system_prompt":"","index":4752}
{"question":"Using Python, create a command line program to print out the frequency of a given string in a given text.","input":"text = 'This is an example string.'\nstring = 'example'","expected_output":"def countSubstring(text, string):\n count = 0\n for i in range(len(text)):\n if text[i:i+len(string)] == string:\n count += 1\n return count\n\nprint(countSubstring(text, string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a command line program to print out the frequency of a given string in a given text.\n\n### Input:\ntext = 'This is an example string.'\nstring = 'example'\n\n### Output:\ndef countSubstring(text, string):\n count = 0\n for i in range(len(text)):\n if text[i:i+len(string)] == string:\n count += 1\n return count\n\nprint(countSubstring(text, string))","tok_input_length":108,"tok_output_length":45,"system_prompt":"","index":10068}
{"question":"Design a program in Python that takes 4 numbers as input and prints out the product of the first three numbers.","input":"1, 2, 3, 4","expected_output":"def product(nums):\n    product = 1\n    for i in range(3):\n        product *= nums[i]\n    return product\n\nnums = [int(x) for x in input().split(\",\")]\nprint(product(nums))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that takes 4 numbers as input and prints out the product of the first three numbers.\n\n### Input:\n1, 2, 3, 4\n\n### Output:\ndef product(nums):\n    product = 1\n    for i in range(3):\n        product *= nums[i]\n    return product\n\nnums = [int(x) for x in input().split(\",\")]\nprint(product(nums))","tok_input_length":108,"tok_output_length":47,"system_prompt":"","index":14749}
{"question":"Create a program in any language that reads numbers from the keyboard until it reads a negative number and then prints the sum of the numbers that have been read.","input":"","expected_output":"Python solution:\n\nnum = int(input('Enter a number: '))\nsum = 0\n\nwhile num >= 0:\n    sum += num\n    num = int(input('Enter a number: '))\n\nprint('The sum is', sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in any language that reads numbers from the keyboard until it reads a negative number and then prints the sum of the numbers that have been read.\n\n### Input:\n\n\n### Output:\nPython solution:\n\nnum = int(input('Enter a number: '))\nsum = 0\n\nwhile num >= 0:\n    sum += num\n    num = int(input('Enter a number: '))\n\nprint('The sum is', sum)","tok_input_length":108,"tok_output_length":50,"system_prompt":"","index":10999}
{"question":"Edit the given Python code to reverse the order of the letters in a string without using any in-built string functions.","input":"string = \"Hello World!\"","expected_output":"def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string\n\nstring = \"Hello World!\" \nreverse_string(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python code to reverse the order of the letters in a string without using any in-built string functions.\n\n### Input:\nstring = \"Hello World!\"\n\n### Output:\ndef reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string\n\nstring = \"Hello World!\" \nreverse_string(string)","tok_input_length":108,"tok_output_length":52,"system_prompt":"","index":3337}
{"question":"Construct a program in Python to stack and scale input data","input":"A list of 10 data points consisting of a mix of integers and floats","expected_output":"import numpy as np\n\ndef preprocess(data):\n    # Stack the data\n    data = np.stack(data)\n\n    # Scale the data\n    data = (data - np.min(data)) \/ (np.max(data) - np.min(data))\n    return data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python to stack and scale input data\n\n### Input:\nA list of 10 data points consisting of a mix of integers and floats\n\n### Output:\nimport numpy as np\n\ndef preprocess(data):\n    # Stack the data\n    data = np.stack(data)\n\n    # Scale the data\n    data = (data - np.min(data)) \/ (np.max(data) - np.min(data))\n    return data","tok_input_length":108,"tok_output_length":53,"system_prompt":"","index":4256}
{"question":"Construct a program to filter out empty strings from a given list.","input":"[\"Hello\", \"\", \"Python\", \"World\", \"\"]","expected_output":"def remove_empty_strings(lst):\n    filtered_list = []\n    for item in lst:\n        if item != \"\":\n            filtered_list.append(item)\n    return filtered_list\n\nfiltered_list = remove_empty_strings([\"Hello\", \"\", \"Python\", \"World\", \"\"])\nprint(filtered_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program to filter out empty strings from a given list.\n\n### Input:\n[\"Hello\", \"\", \"Python\", \"World\", \"\"]\n\n### Output:\ndef remove_empty_strings(lst):\n    filtered_list = []\n    for item in lst:\n        if item != \"\":\n            filtered_list.append(item)\n    return filtered_list\n\nfiltered_list = remove_empty_strings([\"Hello\", \"\", \"Python\", \"World\", \"\"])\nprint(filtered_list)","tok_input_length":108,"tok_output_length":56,"system_prompt":"","index":1391}
{"question":"Write a function to count the number of syllables in a word using regular expression in Python?","input":"Not applicable","expected_output":"import re\n\ndef count_syllables(word):\n  pattern = r'[aeiouy]+'\n  return len(re.findall(pattern, word))\n\nprint(count_syllables('syllable'))  # 3\nprint(count_syllables('balloons'))  # 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to count the number of syllables in a word using regular expression in Python?\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\ndef count_syllables(word):\n  pattern = r'[aeiouy]+'\n  return len(re.findall(pattern, word))\n\nprint(count_syllables('syllable'))  # 3\nprint(count_syllables('balloons'))  # 2","tok_input_length":108,"tok_output_length":59,"system_prompt":"","index":16825}
{"question":"Try to come up with a classifier, in Python, that differentiates between questions and statements.","input":"","expected_output":"import string\n\ndef is_question(text):\n    if text.endswith(\"?\"):\n        return True\n    elif text.startswith(tuple(string.punctuation)):\n        return False\n    else:\n        words = text.strip().split()\n        if any(word.endswith(\"?\") for word in words):\n            return True\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTry to come up with a classifier, in Python, that differentiates between questions and statements.\n\n### Input:\n\n\n### Output:\nimport string\n\ndef is_question(text):\n    if text.endswith(\"?\"):\n        return True\n    elif text.startswith(tuple(string.punctuation)):\n        return False\n    else:\n        words = text.strip().split()\n        if any(word.endswith(\"?\") for word in words):\n            return True\n        return False","tok_input_length":108,"tok_output_length":62,"system_prompt":"","index":13912}
{"question":"Write a Python program to optimize the given linear objective function using the Simplex algorithm.","input":"","expected_output":"import numpy as np\nfrom scipy.optimize import minimize\n\ndef optimize_function(objective):\n  bounds = ((0, None), (0, None), (0, None))\n  res = minimize(objective, [1,1,1], method=\"Nelder-Mead\", bounds=bounds)\n  return res","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize the given linear objective function using the Simplex algorithm.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef optimize_function(objective):\n  bounds = ((0, None), (0, None), (0, None))\n  res = minimize(objective, [1,1,1], method=\"Nelder-Mead\", bounds=bounds)\n  return res","tok_input_length":108,"tok_output_length":64,"system_prompt":"","index":16635}
{"question":"Construct a Python program that creates a web server running on port 80.","input":"","expected_output":"import http.server\nimport socketserver\n\n# web server running on port 80\nPORT = 80\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that creates a web server running on port 80.\n\n### Input:\n\n\n### Output:\nimport http.server\nimport socketserver\n\n# web server running on port 80\nPORT = 80\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever()","tok_input_length":108,"tok_output_length":66,"system_prompt":"","index":8511}
{"question":"Develop a program in Python to compute the median of three numbers.","input":"","expected_output":"def median(a, b, c): \n    if (a <= b <= c) or (c <= b <= a): \n        median = b \n    elif (b <= a <= c) or (c <= a <= b): \n        median = a \n    else: \n        median = c \n  \n    return median","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to compute the median of three numbers.\n\n### Input:\n\n\n### Output:\ndef median(a, b, c): \n    if (a <= b <= c) or (c <= b <= a): \n        median = b \n    elif (b <= a <= c) or (c <= a <= b): \n        median = a \n    else: \n        median = c \n  \n    return median","tok_input_length":108,"tok_output_length":68,"system_prompt":"","index":15552}
{"question":"Make an iterative Binary Search algorithm using Python","input":"","expected_output":"def binary_search_iterative(arr, start, end, target):\n    while start <= end:\n        mid = (start + end) \/\/2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake an iterative Binary Search algorithm using Python\n\n### Input:\n\n\n### Output:\ndef binary_search_iterative(arr, start, end, target):\n    while start <= end:\n        mid = (start + end) \/\/2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1","tok_input_length":108,"tok_output_length":72,"system_prompt":"","index":1810}
{"question":"Create a function in Python that takes two parameters, an array and an integer, and returns a new array with all of the elements of the array multiplied by the integer.","input":"array = [1, 2, 3]\nint = 4","expected_output":"def multiply_by_int(array, int):\n    new_array = []\n    for elem in array:\n        new_array.append(elem * int)\n    return new_array","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two parameters, an array and an integer, and returns a new array with all of the elements of the array multiplied by the integer.\n\n### Input:\narray = [1, 2, 3]\nint = 4\n\n### Output:\ndef multiply_by_int(array, int):\n    new_array = []\n    for elem in array:\n        new_array.append(elem * int)\n    return new_array","tok_input_length":109,"tok_output_length":32,"system_prompt":"","index":8973}
{"question":"Use a given class to deserialize a JSON response into a Python dictionary.","input":"import json\nfrom some_library import Deserializer\n\nclass MyDeserializer(Deserializer):\n    pass\n\nresponse = '{\"data\": \"abc\"}'","expected_output":"class MyDeserializer(Deserializer):\n    def deserialize(self, response):\n        return json.loads(response)\n\ndeserializer = MyDeserializer()\ndeserialized_data = deserializer.deserialize(response)\n\nprint(deserialized_data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a given class to deserialize a JSON response into a Python dictionary.\n\n### Input:\nimport json\nfrom some_library import Deserializer\n\nclass MyDeserializer(Deserializer):\n    pass\n\nresponse = '{\"data\": \"abc\"}'\n\n### Output:\nclass MyDeserializer(Deserializer):\n    def deserialize(self, response):\n        return json.loads(response)\n\ndeserializer = MyDeserializer()\ndeserialized_data = deserializer.deserialize(response)\n\nprint(deserialized_data)","tok_input_length":109,"tok_output_length":40,"system_prompt":"","index":7211}
{"question":"Write a Python script that takes two strings as input and prints the string which is obtained by combining the two strings in lexical order.","input":"String1 = \"Hello\" \nString2 = \"World\"","expected_output":"def combine_strings(s1, s2):\n if s1 < s2:\n print(s1+s2)\n else:\n print(s2+s1)\n\ncombine_strings(\"Hello\", \"World\")\n# Output: HelloWorld","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes two strings as input and prints the string which is obtained by combining the two strings in lexical order.\n\n### Input:\nString1 = \"Hello\" \nString2 = \"World\"\n\n### Output:\ndef combine_strings(s1, s2):\n if s1 < s2:\n print(s1+s2)\n else:\n print(s2+s1)\n\ncombine_strings(\"Hello\", \"World\")\n# Output: HelloWorld","tok_input_length":109,"tok_output_length":43,"system_prompt":"","index":1815}
{"question":"Create a Python program to determine whether a given spectrum is valid.","input":"spectrum = [15, 16, 18, 21, 25, 28]","expected_output":"def is_valid_spectrum(spectrum):\n    m = spectrum[0]\n    for n in spectrum[1:]:\n        if n - m not in [1, 2]:\n            return False\n        m = n\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to determine whether a given spectrum is valid.\n\n### Input:\nspectrum = [15, 16, 18, 21, 25, 28]\n\n### Output:\ndef is_valid_spectrum(spectrum):\n    m = spectrum[0]\n    for n in spectrum[1:]:\n        if n - m not in [1, 2]:\n            return False\n        m = n\n    return True","tok_input_length":109,"tok_output_length":48,"system_prompt":"","index":3961}
{"question":"Write a Python program to read a list of integers from the user and find the smallest number.","input":"[12, 11, 7, 15]","expected_output":"list_of_numbers = input(\"Please enter a list of numbers: \").split()\nlist_of_numbers = [int(x) for x in list_of_numbers] \n\nmin_number = min(list_of_numbers)\nprint(\"The smallest number is:\", min_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to read a list of integers from the user and find the smallest number.\n\n### Input:\n[12, 11, 7, 15]\n\n### Output:\nlist_of_numbers = input(\"Please enter a list of numbers: \").split()\nlist_of_numbers = [int(x) for x in list_of_numbers] \n\nmin_number = min(list_of_numbers)\nprint(\"The smallest number is:\", min_number)","tok_input_length":109,"tok_output_length":51,"system_prompt":"","index":3911}
{"question":"Generate a Python program that determines whether a given array is a palindrome or not.","input":"[3,2,1,1,2,3]","expected_output":"def is_palindrome(arr):\n    if arr == arr[::-1]:\n        return True\n    return False\n\nresult = is_palindrome([3, 2, 1, 1, 2, 3])\nprint(result) # Output: True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that determines whether a given array is a palindrome or not.\n\n### Input:\n[3,2,1,1,2,3]\n\n### Output:\ndef is_palindrome(arr):\n    if arr == arr[::-1]:\n        return True\n    return False\n\nresult = is_palindrome([3, 2, 1, 1, 2, 3])\nprint(result) # Output: True","tok_input_length":109,"tok_output_length":53,"system_prompt":"","index":15474}
{"question":"Create a Python function that takes an integer as an input and returns all positive integers less than the input number.","input":"Integer: 10","expected_output":"def get_pos_int(num):\n    pos_ints = []\n    for i in range(num):\n        if i > 0:\n            pos_ints.append(i)\n    return pos_ints\n\npos_ints = get_pos_int(10)\nprint(pos_ints)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes an integer as an input and returns all positive integers less than the input number.\n\n### Input:\nInteger: 10\n\n### Output:\ndef get_pos_int(num):\n    pos_ints = []\n    for i in range(num):\n        if i > 0:\n            pos_ints.append(i)\n    return pos_ints\n\npos_ints = get_pos_int(10)\nprint(pos_ints)","tok_input_length":109,"tok_output_length":55,"system_prompt":"","index":4812}
{"question":"Create a Python program that prints out the Fibonacci sequence up to the nth number given as input.","input":"n = 10","expected_output":"def fibonacci(n):\n    fib_list = [0 , 1]\n\n    for i in range(2 , n):\n        fib_list.append(fib_list[i - 2] + fib_list[i - 1])\n\n    return fib_list[:n]\n\nprint(fibonacci(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints out the Fibonacci sequence up to the nth number given as input.\n\n### Input:\nn = 10\n\n### Output:\ndef fibonacci(n):\n    fib_list = [0 , 1]\n\n    for i in range(2 , n):\n        fib_list.append(fib_list[i - 2] + fib_list[i - 1])\n\n    return fib_list[:n]\n\nprint(fibonacci(n))","tok_input_length":109,"tok_output_length":58,"system_prompt":"","index":6430}
{"question":"Design an efficient data-structure using Python for","input":"storing a list of strings that can be efficiently searched.","expected_output":"class StringList:\n    def __init__(self): \n        self.storage = []\n \n    def add(self, item): \n        self.storage.append(item)\n \n    def search(self, query): \n        if query in self.storage:\n            return True \n        else: \n            return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an efficient data-structure using Python for\n\n### Input:\nstoring a list of strings that can be efficiently searched.\n\n### Output:\nclass StringList:\n    def __init__(self): \n        self.storage = []\n \n    def add(self, item): \n        self.storage.append(item)\n \n    def search(self, query): \n        if query in self.storage:\n            return True \n        else: \n            return False","tok_input_length":109,"tok_output_length":60,"system_prompt":"","index":1175}
{"question":"Write a Python class myDict that implements a dictionary with two methods - get() and set().","input":"","expected_output":"class myDict:\n    def __init__(self):\n        self.data = {}\n \n    def get(self, key):\n        return self.data[key]\n \n    def set(self, key, value):\n        self.data[key] = value\n \n    def __repr__(self):\n        return str(self.data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class myDict that implements a dictionary with two methods - get() and set().\n\n### Input:\n\n\n### Output:\nclass myDict:\n    def __init__(self):\n        self.data = {}\n \n    def get(self, key):\n        return self.data[key]\n \n    def set(self, key, value):\n        self.data[key] = value\n \n    def __repr__(self):\n        return str(self.data)","tok_input_length":109,"tok_output_length":62,"system_prompt":"","index":4398}
{"question":"Design a function in a Python program to calculate the area of a circle with a given radius.","input":"","expected_output":"def get_circle_area(radius):\n    \"\"\"Calculate and return the area of a circle with a given radius.\n \n    Args:\n        radius (float): The radius of the circle\n \n    Returns:\n        float: The area of the circle\n    \"\"\"\n    return 3.14 * (radius * radius)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in a Python program to calculate the area of a circle with a given radius.\n\n### Input:\n\n\n### Output:\ndef get_circle_area(radius):\n    \"\"\"Calculate and return the area of a circle with a given radius.\n \n    Args:\n        radius (float): The radius of the circle\n \n    Returns:\n        float: The area of the circle\n    \"\"\"\n    return 3.14 * (radius * radius)","tok_input_length":109,"tok_output_length":63,"system_prompt":"","index":5917}
{"question":"Design a function in Python to convert a Celsius temperature to a Fahrenheit temperature.","input":"32","expected_output":"def convert_celsius_to_fahrenheit(celsius):\n    fahrenheit = celsius * 9\/5 + 32\n    return fahrenheit\n\ncelsius = 32\nfahrenheit = convert_celsius_to_fahrenheit(celsius)\nprint('{} degree Celsius is {} degree Fahrenheit.'.format(celsius, fahrenheit))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to convert a Celsius temperature to a Fahrenheit temperature.\n\n### Input:\n32\n\n### Output:\ndef convert_celsius_to_fahrenheit(celsius):\n    fahrenheit = celsius * 9\/5 + 32\n    return fahrenheit\n\ncelsius = 32\nfahrenheit = convert_celsius_to_fahrenheit(celsius)\nprint('{} degree Celsius is {} degree Fahrenheit.'.format(celsius, fahrenheit))","tok_input_length":109,"tok_output_length":65,"system_prompt":"","index":11552}
{"question":"Create a Python class which represents a 3D Vector","input":"","expected_output":"class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \", \" + str(self.z) + \")\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class which represents a 3D Vector\n\n### Input:\n\n\n### Output:\nclass Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \", \" + str(self.z) + \")\"","tok_input_length":109,"tok_output_length":70,"system_prompt":"","index":110}
{"question":"Generate a Python program to search for a given number in an array of integers and print out its index if it exsits.","input":"my_array = [2, 3, 5, 7, 11]\nnumber = 3","expected_output":"def search_in_array(my_array, number):\n  for i, val in enumerate(my_array):\n    if val == number:\n      return i\n  return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to search for a given number in an array of integers and print out its index if it exsits.\n\n### Input:\nmy_array = [2, 3, 5, 7, 11]\nnumber = 3\n\n### Output:\ndef search_in_array(my_array, number):\n  for i, val in enumerate(my_array):\n    if val == number:\n      return i\n  return -1","tok_input_length":110,"tok_output_length":34,"system_prompt":"","index":4946}
{"question":"Create a Python script that takes the list [1, 2, 3, 4, 5] and returns the sum.","input":"[1, 2, 3, 4, 5]","expected_output":"def sum_list(lst):\n  total = 0\n  for num in lst:\n    total += num\n  return total\n\nsum_list([1,2,3,4,5])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes the list [1, 2, 3, 4, 5] and returns the sum.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef sum_list(lst):\n  total = 0\n  for num in lst:\n    total += num\n  return total\n\nsum_list([1,2,3,4,5])","tok_input_length":110,"tok_output_length":40,"system_prompt":"","index":344}
{"question":"Create a Python script to print out all the numbers in a given range that are divisible by a given number.","input":"lower = 1\nupper = 50\ndivisible = 5","expected_output":"def printDivisible(lower, upper, divisible):\n    for i in range(lower, upper + 1):\n        if i % divisible == 0:\n            print(i)\n\nprintDivisible(lower, upper, divisible)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print out all the numbers in a given range that are divisible by a given number.\n\n### Input:\nlower = 1\nupper = 50\ndivisible = 5\n\n### Output:\ndef printDivisible(lower, upper, divisible):\n    for i in range(lower, upper + 1):\n        if i % divisible == 0:\n            print(i)\n\nprintDivisible(lower, upper, divisible)","tok_input_length":110,"tok_output_length":45,"system_prompt":"","index":7822}
{"question":"Edit the given python program to display the sum of all even numbers in the given list.","input":"list = [1, 2, 3, 4, 5]","expected_output":"list = [1, 2, 3, 4, 5]\n\ntotal = 0\nfor num in list:\n  if (num % 2 == 0):\n    total += num\nprint (total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given python program to display the sum of all even numbers in the given list.\n\n### Input:\nlist = [1, 2, 3, 4, 5]\n\n### Output:\nlist = [1, 2, 3, 4, 5]\n\ntotal = 0\nfor num in list:\n  if (num % 2 == 0):\n    total += num\nprint (total)","tok_input_length":110,"tok_output_length":48,"system_prompt":"","index":7005}
{"question":"Create a program to filter a list of numbers using the built-in Python filter() function.","input":"[25, 35, 8, 2, 10]","expected_output":"def even_number_filter(number):\n  return number % 2 == 0\n\nnumbers = [25, 35, 8, 2, 10]\nfiltered_list = list(filter(even_number_filter, numbers))\nprint(filtered_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to filter a list of numbers using the built-in Python filter() function.\n\n### Input:\n[25, 35, 8, 2, 10]\n\n### Output:\ndef even_number_filter(number):\n  return number % 2 == 0\n\nnumbers = [25, 35, 8, 2, 10]\nfiltered_list = list(filter(even_number_filter, numbers))\nprint(filtered_list)","tok_input_length":110,"tok_output_length":50,"system_prompt":"","index":12848}
{"question":"Write a Python script to find all the divisible numbers in a given range (1 to n), where n is a positive integer provided by the user.","input":"","expected_output":"def find_divisible_numbers(n):\n  divisibles = []\n  for i in range(1, n+1):\n    if i % 3 == 0:\n      divisibles.append(i)\n  return divisibles\n\nfind_divisible_numbers(20)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find all the divisible numbers in a given range (1 to n), where n is a positive integer provided by the user.\n\n### Input:\n\n\n### Output:\ndef find_divisible_numbers(n):\n  divisibles = []\n  for i in range(1, n+1):\n    if i % 3 == 0:\n      divisibles.append(i)\n  return divisibles\n\nfind_divisible_numbers(20)","tok_input_length":110,"tok_output_length":53,"system_prompt":"","index":9355}
{"question":"Generate a program in Python to compute the maximum of two given numbers.","input":"Number 1: 8\nNumber 2: 4","expected_output":"num1 = 8\nnum2 = 4\n \nif (num1 > num2):\n    print(\"The maximum of the given numbers is: \"+str(num1))\nelse:\n    print(\"The maximum of the given numbers is: \"+str(num2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to compute the maximum of two given numbers.\n\n### Input:\nNumber 1: 8\nNumber 2: 4\n\n### Output:\nnum1 = 8\nnum2 = 4\n \nif (num1 > num2):\n    print(\"The maximum of the given numbers is: \"+str(num1))\nelse:\n    print(\"The maximum of the given numbers is: \"+str(num2))","tok_input_length":110,"tok_output_length":55,"system_prompt":"","index":18045}
{"question":"Modify this Python program to print the greatest common divisor of two numbers.","input":"num1 = 5, num2 = 6","expected_output":"def gcd(x, y):\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\nnum1 = 5\nnum2 = 6\n\nprint(\"GCD is:\", gcd(num1, num2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify this Python program to print the greatest common divisor of two numbers.\n\n### Input:\nnum1 = 5, num2 = 6\n\n### Output:\ndef gcd(x, y):\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\nnum1 = 5\nnum2 = 6\n\nprint(\"GCD is:\", gcd(num1, num2))","tok_input_length":110,"tok_output_length":57,"system_prompt":"","index":17677}
{"question":"Write a Python program to divide a given string into pairs such that each pairs has 2 characters.","input":"\"abcd\"","expected_output":"def split_into_pairs(inputString):\n    resultList = []\n    counter = 0\n    \n    while counter < len(inputString):\n        resultList.append(inputString[counter:counter + 2])\n        counter += 2\n    \n    return resultList\n\npairs = split_into_pairs(\"abcd\")\n\nprint(pairs)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to divide a given string into pairs such that each pairs has 2 characters.\n\n### Input:\n\"abcd\"\n\n### Output:\ndef split_into_pairs(inputString):\n    resultList = []\n    counter = 0\n    \n    while counter < len(inputString):\n        resultList.append(inputString[counter:counter + 2])\n        counter += 2\n    \n    return resultList\n\npairs = split_into_pairs(\"abcd\")\n\nprint(pairs)","tok_input_length":110,"tok_output_length":60,"system_prompt":"","index":8199}
{"question":"Design an API endpoint in Python that takes in a PDF document and returns the number of words in it.","input":"","expected_output":"@app.route('\/api\/getWordCount', methods=['POST'])\ndef getWordCount():\n    \"\"\"Endpoint for getting words count in PDF document\"\"\"\n    data = request.get_json()\n    pdf = data['pdf'] \n    word_count = count_words(pdf)\n    return jsonify({'wordCount': word_count})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an API endpoint in Python that takes in a PDF document and returns the number of words in it.\n\n### Input:\n\n\n### Output:\n@app.route('\/api\/getWordCount', methods=['POST'])\ndef getWordCount():\n    \"\"\"Endpoint for getting words count in PDF document\"\"\"\n    data = request.get_json()\n    pdf = data['pdf'] \n    word_count = count_words(pdf)\n    return jsonify({'wordCount': word_count})","tok_input_length":110,"tok_output_length":62,"system_prompt":"","index":17742}
{"question":"Write a Python groupby function that returns the top 3 most frequent elements in each group.","input":"","expected_output":"def top_frequent(data, key):\n  grouped = data.groupby(key)\n  result = []\n\n  for name, group in grouped:\n    counts = group.value_counts()\n    top_3 = counts.nlargest(3).index.tolist()\n    result.append((name, top_3))\n  \n  return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python groupby function that returns the top 3 most frequent elements in each group.\n\n### Input:\n\n\n### Output:\ndef top_frequent(data, key):\n  grouped = data.groupby(key)\n  result = []\n\n  for name, group in grouped:\n    counts = group.value_counts()\n    top_3 = counts.nlargest(3).index.tolist()\n    result.append((name, top_3))\n  \n  return result","tok_input_length":110,"tok_output_length":64,"system_prompt":"","index":1216}
{"question":"Design a small container application in Python which asks to enter numbers and find the sum.","input":"","expected_output":"def container_application():\n    print(\"Welcome to the container application!\")\n    print(\"Enter the numbers separated by a space:\")\n    nums = input().split()\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    print(\"The sum of the numbers is:\", sum)\n \ncontainer_application()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a small container application in Python which asks to enter numbers and find the sum.\n\n### Input:\n\n\n### Output:\ndef container_application():\n    print(\"Welcome to the container application!\")\n    print(\"Enter the numbers separated by a space:\")\n    nums = input().split()\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    print(\"The sum of the numbers is:\", sum)\n \ncontainer_application()","tok_input_length":110,"tok_output_length":66,"system_prompt":"","index":10618}
{"question":"Create an open-source Python program to generate random passwords.","input":"Not applicable","expected_output":"import random\nimport string\n\n\ndef generate_password(length=12):\n password_characters = string.ascii_letters + string.digits + string.punctuation\n return ''.join(random.choice(password_characters) for i in range(length))\n\n\nif __name__ == '__main__':\n password = generate_password()\n print(f'Your randomly generated password is:\\n{password}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an open-source Python program to generate random passwords.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\n\ndef generate_password(length=12):\n password_characters = string.ascii_letters + string.digits + string.punctuation\n return ''.join(random.choice(password_characters) for i in range(length))\n\n\nif __name__ == '__main__':\n password = generate_password()\n print(f'Your randomly generated password is:\\n{password}')","tok_input_length":110,"tok_output_length":69,"system_prompt":"","index":3184}
{"question":"Compute the prime factors of a given number using Python.","input":"24","expected_output":"def primeFactors(num):\n\tfor div in range(2, num \/\/ 2 + 1):\n\t\twhile num % div == 0:\n\t\t\tprint(div)\n\t\t\tnum \/\/= div\n\tif num > 1:\n\t\tprint(num)\n\nnum = 24\nprimeFactors(num) \/\/ 2, 2, 2, 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the prime factors of a given number using Python.\n\n### Input:\n24\n\n### Output:\ndef primeFactors(num):\n\tfor div in range(2, num \/\/ 2 + 1):\n\t\twhile num % div == 0:\n\t\t\tprint(div)\n\t\t\tnum \/\/= div\n\tif num > 1:\n\t\tprint(num)\n\nnum = 24\nprimeFactors(num) \/\/ 2, 2, 2, 3","tok_input_length":110,"tok_output_length":70,"system_prompt":"","index":12937}
{"question":"Optimize a given Python function to run faster.","input":"def long_function(lst):\n    counter = 0\n    for i in lst:\n        inner_counter = 0\n        while inner_counter < i:\n            counter += 1\n            inner_counter += 1\n    return counter","expected_output":"def long_function(lst):\n    counter = 0\n    for i in lst:\n        counter += i\n    return counter","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python function to run faster.\n\n### Input:\ndef long_function(lst):\n    counter = 0\n    for i in lst:\n        inner_counter = 0\n        while inner_counter < i:\n            counter += 1\n            inner_counter += 1\n    return counter\n\n### Output:\ndef long_function(lst):\n    counter = 0\n    for i in lst:\n        counter += i\n    return counter","tok_input_length":111,"tok_output_length":26,"system_prompt":"","index":16985}
{"question":"Modify this given Python code to handle inputs of any size","input":"def sum_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num \/\/= 10\n    return total","expected_output":"def sum_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num \/\/= 10\n    return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify this given Python code to handle inputs of any size\n\n### Input:\ndef sum_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num \/\/= 10\n    return total\n\n### Output:\ndef sum_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num \/\/= 10\n    return total","tok_input_length":111,"tok_output_length":36,"system_prompt":"","index":9939}
{"question":"Edit this Python program to make the output more accurate","input":"def calculate_average(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return float(total) \/ len(numbers)","expected_output":"def calculate_average(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return float(total) \/ len(numbers) if len(numbers) > 0 else 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python program to make the output more accurate\n\n### Input:\ndef calculate_average(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return float(total) \/ len(numbers)\n\n### Output:\ndef calculate_average(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return float(total) \/ len(numbers) if len(numbers) > 0 else 0","tok_input_length":111,"tok_output_length":42,"system_prompt":"","index":14659}
{"question":"Construct a Python script to filter the elements of a given list which are divisible by 3.","input":"[1,2,3,4,5,6,7,8,9]","expected_output":"my_list = [1,2,3,4,5,6,7,8,9]\n\nfiltered_list = list(filter(lambda x: x % 3 == 0, my_list))\nprint(filtered_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python script to filter the elements of a given list which are divisible by 3.\n\n### Input:\n[1,2,3,4,5,6,7,8,9]\n\n### Output:\nmy_list = [1,2,3,4,5,6,7,8,9]\n\nfiltered_list = list(filter(lambda x: x % 3 == 0, my_list))\nprint(filtered_list)","tok_input_length":111,"tok_output_length":46,"system_prompt":"","index":15865}
{"question":"Create a function in Python which takes a parameter and finds the maximum value in the parameter.","input":"parameter = [100, 10, 75, 23, 96]","expected_output":"def max_value(parameter):\n    max_val = parameter[0]\n    for num in parameter:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nmax_num = max_value(parameter)\nprint(max_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a parameter and finds the maximum value in the parameter.\n\n### Input:\nparameter = [100, 10, 75, 23, 96]\n\n### Output:\ndef max_value(parameter):\n    max_val = parameter[0]\n    for num in parameter:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nmax_num = max_value(parameter)\nprint(max_num)","tok_input_length":111,"tok_output_length":49,"system_prompt":"","index":6268}
{"question":"You are asked to write a Python program that computes the mean of a list of numbers.","input":"[1, 3, 5, 8, 10]","expected_output":"def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total \/ len(nums)\n\nmean([1, 3, 5, 8, 10])  # 6.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are asked to write a Python program that computes the mean of a list of numbers.\n\n### Input:\n[1, 3, 5, 8, 10]\n\n### Output:\ndef mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total \/ len(nums)\n\nmean([1, 3, 5, 8, 10])  # 6.0","tok_input_length":111,"tok_output_length":51,"system_prompt":"","index":14532}
{"question":"Given an input sentence with 4 different words, create a python program that phrases each word with the same first letter.","input":"Hello World Goodbye Mars","expected_output":"\"\"\"\nGiven an input sentence with 4 different words, create a python program that phrases each word with the same first letter\n\"\"\"\n\nwords = 'Hello World Goodbye Mars'.split()\n\nfor word in words:\n  print(word[0] + word[1:])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an input sentence with 4 different words, create a python program that phrases each word with the same first letter.\n\n### Input:\nHello World Goodbye Mars\n\n### Output:\n\"\"\"\nGiven an input sentence with 4 different words, create a python program that phrases each word with the same first letter\n\"\"\"\n\nwords = 'Hello World Goodbye Mars'.split()\n\nfor word in words:\n  print(word[0] + word[1:])","tok_input_length":111,"tok_output_length":54,"system_prompt":"","index":18523}
{"question":"Write Python code to print the number present in an inputted string.","input":"string_1 = \"The temperature is 24 degrees Celsius\"","expected_output":"def print_numbers_in_string(string):\n    numbers = [int(s) for s in string.split() if s.isdigit()]\n    print(numbers)\n\nstring_1 = \"The temperature is 24 degrees Celsius\"\nprint_numbers_in_string(string_1)\n\n# Output\n# [24]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to print the number present in an inputted string.\n\n### Input:\nstring_1 = \"The temperature is 24 degrees Celsius\"\n\n### Output:\ndef print_numbers_in_string(string):\n    numbers = [int(s) for s in string.split() if s.isdigit()]\n    print(numbers)\n\nstring_1 = \"The temperature is 24 degrees Celsius\"\nprint_numbers_in_string(string_1)\n\n# Output\n# [24]","tok_input_length":111,"tok_output_length":57,"system_prompt":"","index":1328}
{"question":"Create a function in Python to convert a list of strings to a single long string","input":"['Hello', 'World', '!']","expected_output":"def list_to_string(list_str):\n    long_str = ''\n    for i in list_str:\n        long_str += i\n    \n    return long_str\n\nlist_str = ['Hello', 'World', '!']\nstring = list_to_string(list_str)\nprint(string) # prints 'HelloWorld!'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to convert a list of strings to a single long string\n\n### Input:\n['Hello', 'World', '!']\n\n### Output:\ndef list_to_string(list_str):\n    long_str = ''\n    for i in list_str:\n        long_str += i\n    \n    return long_str\n\nlist_str = ['Hello', 'World', '!']\nstring = list_to_string(list_str)\nprint(string) # prints 'HelloWorld!'","tok_input_length":111,"tok_output_length":59,"system_prompt":"","index":9512}
{"question":"Construct a Python script that deletes all the characters in a given string except for the vowels.","input":"\"Hello World!\"","expected_output":"# Get the input string\nstring = \"Hello World!\"\n\n# Modify the string\nvowels = \"aeiou\"\nnew_string = \"\"\nfor char in string:\n    if char in vowels:\n        new_string += char\n\n# Print the string\nprint(new_string)\n# prints \"eoo\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python script that deletes all the characters in a given string except for the vowels.\n\n### Input:\n\"Hello World!\"\n\n### Output:\n# Get the input string\nstring = \"Hello World!\"\n\n# Modify the string\nvowels = \"aeiou\"\nnew_string = \"\"\nfor char in string:\n    if char in vowels:\n        new_string += char\n\n# Print the string\nprint(new_string)\n# prints \"eoo\"","tok_input_length":111,"tok_output_length":62,"system_prompt":"","index":9307}
{"question":"Design a Python program that asks a user to enter three numbers and prints out the largest one.","input":"","expected_output":"def largest_of_three():\n num1 = int(input(\"Enter the first number: \"))\n num2 = int(input(\"Enter the second number: \"))\n num3 = int(input(\"Enter the third number: \"))\n\n largest = max(num1, num2, num3)\n\n print(\"The largest number is: \", largest)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that asks a user to enter three numbers and prints out the largest one.\n\n### Input:\n\n\n### Output:\ndef largest_of_three():\n num1 = int(input(\"Enter the first number: \"))\n num2 = int(input(\"Enter the second number: \"))\n num3 = int(input(\"Enter the third number: \"))\n\n largest = max(num1, num2, num3)\n\n print(\"The largest number is: \", largest)","tok_input_length":111,"tok_output_length":65,"system_prompt":"","index":5580}
{"question":"Develop a program that alters and returns a given string.","input":"string: \"Python is fun!\"","expected_output":"\"\"\"\nDevelop a program that alters and returns a given string\n\"\"\"\n\ndef alter_string(string):\n\n    # alter the original string \n    string_altered = string.replace(\"!\", \"?\")\n\n    return string_altered\n\nif __name__ == '__main__':\n    string = \"Python is fun!\"\n    print(alter_string(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program that alters and returns a given string.\n\n### Input:\nstring: \"Python is fun!\"\n\n### Output:\n\"\"\"\nDevelop a program that alters and returns a given string\n\"\"\"\n\ndef alter_string(string):\n\n    # alter the original string \n    string_altered = string.replace(\"!\", \"?\")\n\n    return string_altered\n\nif __name__ == '__main__':\n    string = \"Python is fun!\"\n    print(alter_string(string))","tok_input_length":111,"tok_output_length":66,"system_prompt":"","index":11408}
{"question":"Generate a class in Python that contains a dictionary to store student name and their grades.","input":"","expected_output":"class StudentGrades: \n    def __init__(self): \n        self.student_grades = {} \n  \n    def store_grade(self, student_name, grade): \n        self.student_grades[student_name] = grade \n  \n    def get_grade(self, student_name): \n        return self.student_grades.get(student_name)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python that contains a dictionary to store student name and their grades.\n\n### Input:\n\n\n### Output:\nclass StudentGrades: \n    def __init__(self): \n        self.student_grades = {} \n  \n    def store_grade(self, student_name, grade): \n        self.student_grades[student_name] = grade \n  \n    def get_grade(self, student_name): \n        return self.student_grades.get(student_name)","tok_input_length":111,"tok_output_length":67,"system_prompt":"","index":6991}
{"question":"Write a Python function to print the times tables from 1 to 10.","input":"","expected_output":"def print_times_tables():\n    for i in range(1, 11):\n        print(f'{i:>2} times table:')\n        for j in range(1, 11):\n            res = i*j\n            print(f'{i} * {j} = {res}')\n        print('\\n')\n\nprint_times_tables()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to print the times tables from 1 to 10.\n\n### Input:\n\n\n### Output:\ndef print_times_tables():\n    for i in range(1, 11):\n        print(f'{i:>2} times table:')\n        for j in range(1, 11):\n            res = i*j\n            print(f'{i} * {j} = {res}')\n        print('\\n')\n\nprint_times_tables()","tok_input_length":111,"tok_output_length":68,"system_prompt":"","index":13619}
{"question":"Write a python code to perform a three-way comparison of three numbers.","input":"","expected_output":"def three_way_comparison(num1, num2, num3):\n    if num1 > num2 and num1 > num3:\n        return 1\n    elif num2 > num1 and num2 > num3:\n        return 2\n    elif num3 > num1 and num3 > num2:\n        return 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to perform a three-way comparison of three numbers.\n\n### Input:\n\n\n### Output:\ndef three_way_comparison(num1, num2, num3):\n    if num1 > num2 and num1 > num3:\n        return 1\n    elif num2 > num1 and num2 > num3:\n        return 2\n    elif num3 > num1 and num3 > num2:\n        return 3","tok_input_length":111,"tok_output_length":70,"system_prompt":"","index":1041}
{"question":"Write a quick sorting algorithm using Python.","input":"","expected_output":"def quick_sort(array):\n    if len(array) <= 1:\n        return array\n\n    pivot = array[0]\n    left = []\n    right = []\n\n    for element in array[1:]:\n        if element <= pivot:\n            left.append(element)\n        else:\n            right.append(element)\n\n    return quick_sort(left) + [pivot] + quick_sort(right)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a quick sorting algorithm using Python.\n\n### Input:\n\n\n### Output:\ndef quick_sort(array):\n    if len(array) <= 1:\n        return array\n\n    pivot = array[0]\n    left = []\n    right = []\n\n    for element in array[1:]:\n        if element <= pivot:\n            left.append(element)\n        else:\n            right.append(element)\n\n    return quick_sort(left) + [pivot] + quick_sort(right)","tok_input_length":111,"tok_output_length":76,"system_prompt":"","index":1133}
{"question":"Create a Python program to search a given list of strings to find any matches to a given substring.","input":"list_of_strings = ['Tesla', 'Apple', 'Microsoft', 'Google', 'Amazon']\nsubstring = 'go'","expected_output":"matches = []\n\nfor string in list_of_strings:\n if substring.lower() in string.lower():\n matches.append(string)\n\nprint(\"Matches: \", matches)\n# Output: Matches: ['Google', 'Amazon']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search a given list of strings to find any matches to a given substring.\n\n### Input:\nlist_of_strings = ['Tesla', 'Apple', 'Microsoft', 'Google', 'Amazon']\nsubstring = 'go'\n\n### Output:\nmatches = []\n\nfor string in list_of_strings:\n if substring.lower() in string.lower():\n matches.append(string)\n\nprint(\"Matches: \", matches)\n# Output: Matches: ['Google', 'Amazon']","tok_input_length":112,"tok_output_length":41,"system_prompt":"","index":12118}
{"question":"Generate a code for creating a new python dictionary with the keys and values specified","input":"Keys: [\"name\", \"age\", \"occupation\"]\nValues: [\"John\", 25, \"Engineer\"]","expected_output":"\"\"\"\nThis code creates a new dictionary with the specified keys and values \n\"\"\"\n\nmy_dict = {\n    \"name\" : \"John\",\n    \"age\" : 25,\n    \"occupation\" : \"Engineer\"\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code for creating a new python dictionary with the keys and values specified\n\n### Input:\nKeys: [\"name\", \"age\", \"occupation\"]\nValues: [\"John\", 25, \"Engineer\"]\n\n### Output:\n\"\"\"\nThis code creates a new dictionary with the specified keys and values \n\"\"\"\n\nmy_dict = {\n    \"name\" : \"John\",\n    \"age\" : 25,\n    \"occupation\" : \"Engineer\"\n}","tok_input_length":112,"tok_output_length":46,"system_prompt":"","index":3364}
{"question":"Create a method in Python that takes two arguments and returns a specified error message if one of the two conditions is not met.","input":"error_message = \"The input must be a number!\"","expected_output":"def check_input(arg1, arg2):\n   if type(arg1) is not int or type(arg2) is not int:\n      return \"The input must be a number!\"\n   else:\n      return \"The input is valid!\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python that takes two arguments and returns a specified error message if one of the two conditions is not met.\n\n### Input:\nerror_message = \"The input must be a number!\"\n\n### Output:\ndef check_input(arg1, arg2):\n   if type(arg1) is not int or type(arg2) is not int:\n      return \"The input must be a number!\"\n   else:\n      return \"The input is valid!\"","tok_input_length":112,"tok_output_length":49,"system_prompt":"","index":13117}
{"question":"Use a recursive algorithm in Python to calculate the sum of a given array.","input":"array1 = [1, 2, 3, 4, 5]","expected_output":"def array_sum(arr):\n  if len(arr) == 1:\n    return arr[0]\n  else:\n    return arr[0] + array_sum(arr[1:])\n\n#Driver code\nprint(array_sum(array1)) #prints 15","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a recursive algorithm in Python to calculate the sum of a given array.\n\n### Input:\narray1 = [1, 2, 3, 4, 5]\n\n### Output:\ndef array_sum(arr):\n  if len(arr) == 1:\n    return arr[0]\n  else:\n    return arr[0] + array_sum(arr[1:])\n\n#Driver code\nprint(array_sum(array1)) #prints 15","tok_input_length":112,"tok_output_length":52,"system_prompt":"","index":12958}
{"question":"Create a Python program to find out if a string contains any characters from another given string.","input":"String 1: Hello\nString 2: eo","expected_output":"def contains_chars(str1, str2):\n if any([c in str1 for c in str2]):\n return True\n return False\n\nstring1 = \"Hello\"\nstring2 = \"eo\"\n\nprint(contains_chars(string1, string2)) \/\/ Outputs: True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find out if a string contains any characters from another given string.\n\n### Input:\nString 1: Hello\nString 2: eo\n\n### Output:\ndef contains_chars(str1, str2):\n if any([c in str1 for c in str2]):\n return True\n return False\n\nstring1 = \"Hello\"\nstring2 = \"eo\"\n\nprint(contains_chars(string1, string2)) \/\/ Outputs: True","tok_input_length":112,"tok_output_length":55,"system_prompt":"","index":8606}
{"question":"Create a program in Python which takes a given string and removes all the vowels from it.","input":"string = \"This is a test string\"","expected_output":"def removeVowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = ''.join([x for x in string if x.lower() not in vowels])\n    return new_string\n\nprint(removeVowels(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which takes a given string and removes all the vowels from it.\n\n### Input:\nstring = \"This is a test string\"\n\n### Output:\ndef removeVowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = ''.join([x for x in string if x.lower() not in vowels])\n    return new_string\n\nprint(removeVowels(string))","tok_input_length":112,"tok_output_length":58,"system_prompt":"","index":1880}
{"question":"Create a python function that prints out the largest element in an array.","input":"[1,4,7,12,-1]","expected_output":"def findLargestElement(arr):\n    largest_element = arr[0]\n    for element in arr:\n        if element > largest_element:\n            largest_element = element\n    return largest_element\n\narr = [1,4,7,12,-1]\nprint(findLargestElement(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that prints out the largest element in an array.\n\n### Input:\n[1,4,7,12,-1]\n\n### Output:\ndef findLargestElement(arr):\n    largest_element = arr[0]\n    for element in arr:\n        if element > largest_element:\n            largest_element = element\n    return largest_element\n\narr = [1,4,7,12,-1]\nprint(findLargestElement(arr))","tok_input_length":112,"tok_output_length":60,"system_prompt":"","index":18086}
{"question":"Write a Python function to find the maximum from 3 numbers.","input":"10, 7, 4","expected_output":"def find_max(a, b, c):\n    max = a\n    if b > max:\n        max = b\n    if c > max:\n        max = c\n    return max\n\nmax_number = find_max(10, 7, 4)\nprint('Maximum number is', max_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the maximum from 3 numbers.\n\n### Input:\n10, 7, 4\n\n### Output:\ndef find_max(a, b, c):\n    max = a\n    if b > max:\n        max = b\n    if c > max:\n        max = c\n    return max\n\nmax_number = find_max(10, 7, 4)\nprint('Maximum number is', max_number)","tok_input_length":112,"tok_output_length":64,"system_prompt":"","index":4073}
{"question":"Write a function in Python to remove all punctuation and special characters.","input":"'Hello, World!!!'","expected_output":"import string\n\ndef removePunctuation(input_string):\n    punctuations = string.punctuation\n    output_string = \"\"\n    for char in input_string:\n        if char not in punctuations:\n            output_string += char\n    return output_string\n\nprint(removePunctuation(\"Hello, World!!!\"))  # Output: Hello World","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to remove all punctuation and special characters.\n\n### Input:\n'Hello, World!!!'\n\n### Output:\nimport string\n\ndef removePunctuation(input_string):\n    punctuations = string.punctuation\n    output_string = \"\"\n    for char in input_string:\n        if char not in punctuations:\n            output_string += char\n    return output_string\n\nprint(removePunctuation(\"Hello, World!!!\"))  # Output: Hello World","tok_input_length":112,"tok_output_length":66,"system_prompt":"","index":3227}
{"question":"Design a python program to sort a list of tuples according to their 2nd item.","input":"","expected_output":"# Input list\nlist_of_tuples = [('Alice', 20), ('Bob', 30), ('Andrew', 20), ('Catherine', 40)]\n\n# Sort the list by second item\nsorted_list = sorted(list_of_tuples, key=lambda x: x[1])\n\n# Print the result\nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to sort a list of tuples according to their 2nd item.\n\n### Input:\n\n\n### Output:\n# Input list\nlist_of_tuples = [('Alice', 20), ('Bob', 30), ('Andrew', 20), ('Catherine', 40)]\n\n# Sort the list by second item\nsorted_list = sorted(list_of_tuples, key=lambda x: x[1])\n\n# Print the result\nprint(sorted_list)","tok_input_length":112,"tok_output_length":67,"system_prompt":"","index":18205}
{"question":"Create a function in Python to print a number pyramid given a height.","input":"3","expected_output":"def pyramid(h): \n    \n    for i in range(0, h): \n        for j in range(0, h-i-1): \n            print(end=\" \") \n        for j in range(0, i+1): \n            print(\"* \", end=\"\") \n        print(\"\\r\") \n\npyramid(3)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to print a number pyramid given a height.\n\n### Input:\n3\n\n### Output:\ndef pyramid(h): \n    \n    for i in range(0, h): \n        for j in range(0, h-i-1): \n            print(end=\" \") \n        for j in range(0, i+1): \n            print(\"* \", end=\"\") \n        print(\"\\r\") \n\npyramid(3)","tok_input_length":112,"tok_output_length":69,"system_prompt":"","index":10294}
{"question":"Write a python program to generate a random 8-character alphanumeric password.","input":"","expected_output":"import string \nimport random \n\ndef generate_password():\n  chars = string.ascii_uppercase + string.ascii_lowercase + string.digits \n  size = 8\n  return ''.join(random.choice(chars) for x in range(size,15)) \n    \npassword = generate_password()\n\nprint(\"The generated random 8-character alphanumeric password is: \" + password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate a random 8-character alphanumeric password.\n\n### Input:\n\n\n### Output:\nimport string \nimport random \n\ndef generate_password():\n  chars = string.ascii_uppercase + string.ascii_lowercase + string.digits \n  size = 8\n  return ''.join(random.choice(chars) for x in range(size,15)) \n    \npassword = generate_password()\n\nprint(\"The generated random 8-character alphanumeric password is: \" + password)","tok_input_length":112,"tok_output_length":71,"system_prompt":"","index":2449}
{"question":"Write a Java program to remove all whitespace from a string.","input":"","expected_output":"public class RemoveWhitespace { \n\n    public static String removeWhitespace(String str) \n    { \n        str = str.replaceAll(\"\\\\s\", \"\"); \n        return str; \n    } \n  \n    public static void main(String[] args) \n    { \n        String str = \"Python Programming\"; \n        System.out.println(removeWhitespace(str)); \n    } \n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Java program to remove all whitespace from a string.\n\n### Input:\n\n\n### Output:\npublic class RemoveWhitespace { \n\n    public static String removeWhitespace(String str) \n    { \n        str = str.replaceAll(\"\\\\s\", \"\"); \n        return str; \n    } \n  \n    public static void main(String[] args) \n    { \n        String str = \"Python Programming\"; \n        System.out.println(removeWhitespace(str)); \n    } \n}","tok_input_length":112,"tok_output_length":73,"system_prompt":"","index":15821}
{"question":"Generate a python program to reverse an integer.","input":"","expected_output":"def reverse_integer(n):\n    # initialize the output to 0\n    rev = 0\n\n    # use a while loop to iterate through the number,\n    # adding each digit to the output\n    while n > 0:\n        rev = (rev * 10) + (n % 10)\n        n = n \/\/ 10\n\n    return rev","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to reverse an integer.\n\n### Input:\n\n\n### Output:\ndef reverse_integer(n):\n    # initialize the output to 0\n    rev = 0\n\n    # use a while loop to iterate through the number,\n    # adding each digit to the output\n    while n > 0:\n        rev = (rev * 10) + (n % 10)\n        n = n \/\/ 10\n\n    return rev","tok_input_length":112,"tok_output_length":76,"system_prompt":"","index":12240}
{"question":"Given two lists x and y, write a python program to return a list that contains the elements which are common to both lists.","input":"x = [1, 2, 3, 4], y = [2, 3, 4, 5]","expected_output":"def common_elements(x, y):\n    common = []\n    for i in x:\n        if i in y:\n            common.append(i)\n    return common","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two lists x and y, write a python program to return a list that contains the elements which are common to both lists.\n\n### Input:\nx = [1, 2, 3, 4], y = [2, 3, 4, 5]\n\n### Output:\ndef common_elements(x, y):\n    common = []\n    for i in x:\n        if i in y:\n            common.append(i)\n    return common","tok_input_length":113,"tok_output_length":32,"system_prompt":"","index":15769}
{"question":"Write code in Python to define a class to represent a linked list node. The class should have a data property, a pointer to the next node, and a 'add' method to append a node to the list.","input":"Not applicable","expected_output":"class Node:\n  def __init__(self, data):\n   self.data = data\n   self.next = None\n\n  def add(self, new_node):\n   self.next = new_node","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to define a class to represent a linked list node. The class should have a data property, a pointer to the next node, and a 'add' method to append a node to the list.\n\n### Input:\nNot applicable\n\n### Output:\nclass Node:\n  def __init__(self, data):\n   self.data = data\n   self.next = None\n\n  def add(self, new_node):\n   self.next = new_node","tok_input_length":113,"tok_output_length":39,"system_prompt":"","index":773}
{"question":"Write a python program to filter a list of numbers and remove those that are divisible by 3.","input":"nums = [12, 14, 16, 18, 20, 21, 24]","expected_output":"def filter_list(nums):\n    return [num for num in nums if num % 3 != 0]\n\nprint(filter_list(nums)) # Output: [12, 14, 20, 21]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to filter a list of numbers and remove those that are divisible by 3.\n\n### Input:\nnums = [12, 14, 16, 18, 20, 21, 24]\n\n### Output:\ndef filter_list(nums):\n    return [num for num in nums if num % 3 != 0]\n\nprint(filter_list(nums)) # Output: [12, 14, 20, 21]","tok_input_length":113,"tok_output_length":43,"system_prompt":"","index":16036}
{"question":"Optimize a given code in Python for higher efficiency.","input":"def power(base, exponent):\n    answer = 1\n    for _ in range(exponent):\n        answer *= base\n    return answer","expected_output":"def power(base, exponent):\n    answer = 1\n    while exponent > 0:\n        if exponent & 1:\n            answer *= base\n        base *= base\n        exponent >>= 1\n    return answer","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given code in Python for higher efficiency.\n\n### Input:\ndef power(base, exponent):\n    answer = 1\n    for _ in range(exponent):\n        answer *= base\n    return answer\n\n### Output:\ndef power(base, exponent):\n    answer = 1\n    while exponent > 0:\n        if exponent & 1:\n            answer *= base\n        base *= base\n        exponent >>= 1\n    return answer","tok_input_length":113,"tok_output_length":46,"system_prompt":"","index":11470}
{"question":"Compile a Python program that takes a given list and returns a dictionary with the list elements as keys and their frequencies as values.","input":"[apple, orange, banana, apple, apple]","expected_output":"def get_frequencies(arr):\n  frequency_dict = {}\n  for item in arr:\n    if item in frequency_dict:\n      frequency_dict[item] += 1\n    else:\n      frequency_dict[item] = 1\n  \n  return frequency_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompile a Python program that takes a given list and returns a dictionary with the list elements as keys and their frequencies as values.\n\n### Input:\n[apple, orange, banana, apple, apple]\n\n### Output:\ndef get_frequencies(arr):\n  frequency_dict = {}\n  for item in arr:\n    if item in frequency_dict:\n      frequency_dict[item] += 1\n    else:\n      frequency_dict[item] = 1\n  \n  return frequency_dict","tok_input_length":113,"tok_output_length":50,"system_prompt":"","index":5292}
{"question":"Write a Python function to calculate the distance between two points given their coordinates.","input":"coord1 = (3, 2) \n coord2 = (8, 10)","expected_output":"def Euclidean_distance(coord1, coord2):\n    x1, y1 = coord1\n    x2, y2 = coord2\n\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the distance between two points given their coordinates.\n\n### Input:\ncoord1 = (3, 2) \n coord2 = (8, 10)\n\n### Output:\ndef Euclidean_distance(coord1, coord2):\n    x1, y1 = coord1\n    x2, y2 = coord2\n\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5","tok_input_length":113,"tok_output_length":52,"system_prompt":"","index":3604}
{"question":"Create a function in Python to generate a multiplication table with numbers in a range given start and end parameters.","input":"start = 5\nend = 10","expected_output":"def multiplication_table(start, end):\n\tfor x in range(start, end + 1):\n\t\tfor y in range(start, end + 1):\n\t\t\tprint(x * y, end = \"  \")\n\t\tprint(\"\\n\")\n\t\t\nmultiplication_table(start, end)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to generate a multiplication table with numbers in a range given start and end parameters.\n\n### Input:\nstart = 5\nend = 10\n\n### Output:\ndef multiplication_table(start, end):\n\tfor x in range(start, end + 1):\n\t\tfor y in range(start, end + 1):\n\t\t\tprint(x * y, end = \"  \")\n\t\tprint(\"\\n\")\n\t\t\nmultiplication_table(start, end)","tok_input_length":113,"tok_output_length":55,"system_prompt":"","index":289}
{"question":"Create a function in Python that takes in a string and returns the frequency of each character in the string in form of a dictionary.","input":"'hello world'","expected_output":"def frequency(string): \n    freq = {} \n    for i in string: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    return freq\n\nprint(frequency('hello world'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes in a string and returns the frequency of each character in the string in form of a dictionary.\n\n### Input:\n'hello world'\n\n### Output:\ndef frequency(string): \n    freq = {} \n    for i in string: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    return freq\n\nprint(frequency('hello world'))","tok_input_length":113,"tok_output_length":56,"system_prompt":"","index":5051}
{"question":"Implement a Python function to find the smallest element in an array","input":"[3, 5, 2, 1, 4]","expected_output":"def findSmallest(arr):\n    smallest = arr[0]\n    for i in arr:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nfindSmallest([3, 5, 2, 1, 4])\n# Output: 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to find the smallest element in an array\n\n### Input:\n[3, 5, 2, 1, 4]\n\n### Output:\ndef findSmallest(arr):\n    smallest = arr[0]\n    for i in arr:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nfindSmallest([3, 5, 2, 1, 4])\n# Output: 1","tok_input_length":113,"tok_output_length":58,"system_prompt":"","index":13096}
{"question":"Create a function in Python for converting a list of strings to a dictionary.","input":"Strings: [\"John\", \"Jake\", \"Adam\"]","expected_output":"def stringsToDict(strings):\n    return {string:0 for string in strings}\n\nstrings = [\"John\", \"Jake\", \"Adam\"]\ndict = stringsToDict(strings)\nprint(dict) # Output: {'John': 0, 'Jake': 0, 'Adam': 0}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python for converting a list of strings to a dictionary.\n\n### Input:\nStrings: [\"John\", \"Jake\", \"Adam\"]\n\n### Output:\ndef stringsToDict(strings):\n    return {string:0 for string in strings}\n\nstrings = [\"John\", \"Jake\", \"Adam\"]\ndict = stringsToDict(strings)\nprint(dict) # Output: {'John': 0, 'Jake': 0, 'Adam': 0}","tok_input_length":113,"tok_output_length":60,"system_prompt":"","index":3150}
{"question":"Create a CLI program in Python that takes two arguments, multiplies them together and prints out the result.","input":"Not applicable","expected_output":"import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('number1', type=int, help='First number to multiply')\nparser.add_argument('number2', type=int, help='Second number to multiply')\nargs = parser.parse_args()\n\nresult = args.number1 * args.number2\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a CLI program in Python that takes two arguments, multiplies them together and prints out the result.\n\n### Input:\nNot applicable\n\n### Output:\nimport argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('number1', type=int, help='First number to multiply')\nparser.add_argument('number2', type=int, help='Second number to multiply')\nargs = parser.parse_args()\n\nresult = args.number1 * args.number2\nprint(result)","tok_input_length":113,"tok_output_length":62,"system_prompt":"","index":16371}
{"question":"Design a class in Python that implements a stack with the basic operations (push, pop, and peek)","input":"","expected_output":"class Stack:\n    def __init__(self):\n        self.items = []\n        \n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[-1]\n    def isEmpty(self):\n        return self.items == []","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that implements a stack with the basic operations (push, pop, and peek)\n\n### Input:\n\n\n### Output:\nclass Stack:\n    def __init__(self):\n        self.items = []\n        \n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[-1]\n    def isEmpty(self):\n        return self.items == []","tok_input_length":113,"tok_output_length":65,"system_prompt":"","index":3314}
{"question":"Generate a Python class to represent Course objects with fields such as course title, description and rating.","input":"","expected_output":"class Course:\n    def __init__(self, title, description, rating):\n        self.title = title\n        self.description = description\n        self.rating = rating\n    \n    def get_title(self):\n        return self.title\n    \n    def get_description(self):\n        return self.description\n    \n    def get_rating(self):\n        return self.rating","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to represent Course objects with fields such as course title, description and rating.\n\n### Input:\n\n\n### Output:\nclass Course:\n    def __init__(self, title, description, rating):\n        self.title = title\n        self.description = description\n        self.rating = rating\n    \n    def get_title(self):\n        return self.title\n    \n    def get_description(self):\n        return self.description\n    \n    def get_rating(self):\n        return self.rating","tok_input_length":113,"tok_output_length":67,"system_prompt":"","index":11064}
{"question":"Generate a script in Python that can parse a given web page and extract its content.","input":"","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef parse_web_page(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    body_text = soup.findAll('p') \n    data = []\n    for item in body_text:\n        text = item.text\n        data.append(text)\n    return data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script in Python that can parse a given web page and extract its content.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef parse_web_page(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    body_text = soup.findAll('p') \n    data = []\n    for item in body_text:\n        text = item.text\n        data.append(text)\n    return data","tok_input_length":113,"tok_output_length":69,"system_prompt":"","index":10360}
{"question":"Create a web scraping algorithm using Python to extract all the links from a webpage.","input":"","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    req = requests.get(url)\n    if req.status_code == 200:\n        soup = BeautifulSoup(req.content, 'lxml')\n        links = []\n        for link in soup.find_all('a', href=True):\n            links.append(link.get('href'))\n        return links","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraping algorithm using Python to extract all the links from a webpage.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    req = requests.get(url)\n    if req.status_code == 200:\n        soup = BeautifulSoup(req.content, 'lxml')\n        links = []\n        for link in soup.find_all('a', href=True):\n            links.append(link.get('href'))\n        return links","tok_input_length":113,"tok_output_length":70,"system_prompt":"","index":11322}
{"question":"Write a Python program to generate all the prime numbers between two given numbers.","input":"","expected_output":"def prime_num_generator(start, end):\n    prime_list = [] \n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_list.append(num)\n    return prime_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate all the prime numbers between two given numbers.\n\n### Input:\n\n\n### Output:\ndef prime_num_generator(start, end):\n    prime_list = [] \n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_list.append(num)\n    return prime_list","tok_input_length":113,"tok_output_length":71,"system_prompt":"","index":16397}
{"question":"Write a python program to parse a given XML document.","input":"","expected_output":"import xml.etree.ElementTree as ET\n\ndef parse_xml(xml_doc):\n  # Parse the XML document\n  tree = ET.parse(xml_doc)\n  # Get the root element\n  root = tree.getroot()\n  # Iterate through children\n  for child in root:\n    print(child.tag, child.attrib)\n\n# Function call \nparse_xml(\"sample.xml\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to parse a given XML document.\n\n### Input:\n\n\n### Output:\nimport xml.etree.ElementTree as ET\n\ndef parse_xml(xml_doc):\n  # Parse the XML document\n  tree = ET.parse(xml_doc)\n  # Get the root element\n  root = tree.getroot()\n  # Iterate through children\n  for child in root:\n    print(child.tag, child.attrib)\n\n# Function call \nparse_xml(\"sample.xml\")","tok_input_length":113,"tok_output_length":75,"system_prompt":"","index":14986}
{"question":"Write a python class to represent a circle","input":"","expected_output":"class Circle:\n  def __init__(self, radius):\n    self.radius = radius\n  \n  def area(self):\n    return 3.14 * (self.radius ** 2)\n  \n  def circumference(self):\n    return 2 * 3.14 * self.radius\n  \ncircle1 = Circle(10)\nprint(circle1.area())\nprint(circle1.circumference())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python class to represent a circle\n\n### Input:\n\n\n### Output:\nclass Circle:\n  def __init__(self, radius):\n    self.radius = radius\n  \n  def area(self):\n    return 3.14 * (self.radius ** 2)\n  \n  def circumference(self):\n    return 2 * 3.14 * self.radius\n  \ncircle1 = Circle(10)\nprint(circle1.area())\nprint(circle1.circumference())","tok_input_length":113,"tok_output_length":77,"system_prompt":"","index":14057}
{"question":"using the following Json as an example, write a Python program that reads this Json into an object.","input":"{\n   \"id\":1,\n   \"name\":\"Testing\",\n   \"description\":\"This is a test\"\n}","expected_output":"import json\n\n# example data\ndata = '{\"id\":1,\"name\":\"Testing\",\"description\":\"This is a test\"}'\n\n# parse data into a Python object\nobj = json.loads(data)\n\nprint(obj)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nusing the following Json as an example, write a Python program that reads this Json into an object.\n\n### Input:\n{\n   \"id\":1,\n   \"name\":\"Testing\",\n   \"description\":\"This is a test\"\n}\n\n### Output:\nimport json\n\n# example data\ndata = '{\"id\":1,\"name\":\"Testing\",\"description\":\"This is a test\"}'\n\n# parse data into a Python object\nobj = json.loads(data)\n\nprint(obj)","tok_input_length":114,"tok_output_length":44,"system_prompt":"","index":14509}
{"question":"Create a function in Python to find all elements in a list that are negative, and print them.","input":"list = [-3, 0, 5, -9, 8]","expected_output":"def find_negatives(l):\n  negative_numbers = []\n  for num in l:\n    if num < 0:\n      negative_numbers.append(num)\n  print(negative_numbers)\n\nfind_negatives(list) # prints [-3, -9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to find all elements in a list that are negative, and print them.\n\n### Input:\nlist = [-3, 0, 5, -9, 8]\n\n### Output:\ndef find_negatives(l):\n  negative_numbers = []\n  for num in l:\n    if num < 0:\n      negative_numbers.append(num)\n  print(negative_numbers)\n\nfind_negatives(list) # prints [-3, -9]","tok_input_length":114,"tok_output_length":50,"system_prompt":"","index":8977}
{"question":"Create a Python program to find the maximum profit of a stock given its maximum and minimum price.","input":"The maximum and minimum price of the stock are 12 and 9 respectively","expected_output":"def getMaxProfit(maxPrice, minPrice): \n    # Calculate the maximum profit \n    return maxPrice - minPrice \n  \n# Driver code \nmaxPrice = 12\nminPrice = 9\n  \nprint(getMaxProfit(maxPrice, minPrice))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the maximum profit of a stock given its maximum and minimum price.\n\n### Input:\nThe maximum and minimum price of the stock are 12 and 9 respectively\n\n### Output:\ndef getMaxProfit(maxPrice, minPrice): \n    # Calculate the maximum profit \n    return maxPrice - minPrice \n  \n# Driver code \nmaxPrice = 12\nminPrice = 9\n  \nprint(getMaxProfit(maxPrice, minPrice))","tok_input_length":114,"tok_output_length":52,"system_prompt":"","index":12183}
{"question":"Create a Python program to generate unique coupon codes with a given length and character set.","input":"length = 8\ncharacters = '0123456789ABCDEF'","expected_output":"import random\n\ndef generate_coupon(length, characters):\n coupon_code = ''\n for i in range(length):\n  coupon_code += random.choice(characters)\n return coupon_code\n\ncoupon_code = generate_coupon(8, '0123456789ABCDEF')\nprint(coupon_code)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate unique coupon codes with a given length and character set.\n\n### Input:\nlength = 8\ncharacters = '0123456789ABCDEF'\n\n### Output:\nimport random\n\ndef generate_coupon(length, characters):\n coupon_code = ''\n for i in range(length):\n  coupon_code += random.choice(characters)\n return coupon_code\n\ncoupon_code = generate_coupon(8, '0123456789ABCDEF')\nprint(coupon_code)","tok_input_length":114,"tok_output_length":55,"system_prompt":"","index":5564}
{"question":"Develop a Python program to calculate the mean of a given array.","input":"60, 54, 77, 78, 37, 35","expected_output":"def mean(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\/len(arr)\n\narr = [60, 54, 77, 78, 37, 35]\nprint(\"Mean: \", mean(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate the mean of a given array.\n\n### Input:\n60, 54, 77, 78, 37, 35\n\n### Output:\ndef mean(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\/len(arr)\n\narr = [60, 54, 77, 78, 37, 35]\nprint(\"Mean: \", mean(arr))","tok_input_length":114,"tok_output_length":57,"system_prompt":"","index":16694}
{"question":"Create a Python program for calculating the Fibonacci sequence. The program should print the n-th number of the sequence.","input":"n: 7","expected_output":"def fibonacci(n): \n if n <= 0: \n return 0 \n elif n == 1: \n return 1 \n else: \n return fibonacci(n-1) + fibonacci(n-2) \n\nn = 7 \nprint(fibonacci(n)) # Output: 13","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for calculating the Fibonacci sequence. The program should print the n-th number of the sequence.\n\n### Input:\nn: 7\n\n### Output:\ndef fibonacci(n): \n if n <= 0: \n return 0 \n elif n == 1: \n return 1 \n else: \n return fibonacci(n-1) + fibonacci(n-2) \n\nn = 7 \nprint(fibonacci(n)) # Output: 13","tok_input_length":114,"tok_output_length":60,"system_prompt":"","index":6941}
{"question":"Write a Python program to find the sum of natural numbers less than 500 that are multiples of 3 or 5.","input":"","expected_output":"def sum_multiples(max_num):\n    values = []\n    for i in range(1, max_num):\n        if i % 3 == 0 or i % 5 == 0:\n            values.append(i)\n    return sum(values)\n\nresult = sum_multiples(500)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the sum of natural numbers less than 500 that are multiples of 3 or 5.\n\n### Input:\n\n\n### Output:\ndef sum_multiples(max_num):\n    values = []\n    for i in range(1, max_num):\n        if i % 3 == 0 or i % 5 == 0:\n            values.append(i)\n    return sum(values)\n\nresult = sum_multiples(500)\nprint(result)","tok_input_length":114,"tok_output_length":62,"system_prompt":"","index":13309}
{"question":"Generate a python script to calculate the total public holiday hours for a given state.","input":"state = \"Illinois\"","expected_output":"state = \"Illinois\"\n\ndef calculate_public_holiday_hours(state):\n    # code to calculate public holiday hours for a given state\n    if state == \"Illinois\":\n        return 8\n    # code for other states\n\nhours = calculate_public_holiday_hours(state)\nprint(\"Public holiday hours:\", hours)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script to calculate the total public holiday hours for a given state.\n\n### Input:\nstate = \"Illinois\"\n\n### Output:\nstate = \"Illinois\"\n\ndef calculate_public_holiday_hours(state):\n    # code to calculate public holiday hours for a given state\n    if state == \"Illinois\":\n        return 8\n    # code for other states\n\nhours = calculate_public_holiday_hours(state)\nprint(\"Public holiday hours:\", hours)","tok_input_length":114,"tok_output_length":65,"system_prompt":"","index":5213}
{"question":"Design a Python function that generates a password string from random alphabets, numbers and special characters.","input":"","expected_output":"import random\nimport string\n\ndef generate_password(length):\n    ''' \n    Generate a password string of specified length \n    containing random alphabets, numbers and special characters. \n    '''\n    password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for i in range(length))\n    return password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function that generates a password string from random alphabets, numbers and special characters.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef generate_password(length):\n    ''' \n    Generate a password string of specified length \n    containing random alphabets, numbers and special characters. \n    '''\n    password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for i in range(length))\n    return password","tok_input_length":114,"tok_output_length":67,"system_prompt":"","index":12812}
{"question":"Write a Python program to create a random password of length 10.","input":"<noimport>","expected_output":"import string \nimport random\n\ndef generate_password(length): \n    password = \"\" \n    for i in range(length): \n        character = random.choice(\n            string.ascii_letters + \n            string.digits + \n            string.punctuation)\n        password += character\n    return password\n\npassword = generate_password(10) \nprint(password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a random password of length 10.\n\n### Input:\n<noimport>\n\n### Output:\nimport string \nimport random\n\ndef generate_password(length): \n    password = \"\" \n    for i in range(length): \n        character = random.choice(\n            string.ascii_letters + \n            string.digits + \n            string.punctuation)\n        password += character\n    return password\n\npassword = generate_password(10) \nprint(password)","tok_input_length":114,"tok_output_length":69,"system_prompt":"","index":3169}
{"question":"Generate a Python code to take in a list and split it into two halves.","input":"","expected_output":"def split_list(list):\n    size = len(list)\n    split_index = size\/\/2 # Floor value\n    return list[:split_index], list[split_index:]\n\nlist = [1,2,3,4,5,6,7] \nfirst_half, second_half = split_list(list)\nprint(first_half)\nprint(second_half)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to take in a list and split it into two halves.\n\n### Input:\n\n\n### Output:\ndef split_list(list):\n    size = len(list)\n    split_index = size\/\/2 # Floor value\n    return list[:split_index], list[split_index:]\n\nlist = [1,2,3,4,5,6,7] \nfirst_half, second_half = split_list(list)\nprint(first_half)\nprint(second_half)","tok_input_length":114,"tok_output_length":71,"system_prompt":"","index":11855}
{"question":"Generate a list of prime numbers from 1 to N in Python.","input":"","expected_output":"def generate_primes(n): \n    primes = [] \n    for num in range(2, n+1): \n        prime = True \n        for i in range(2, num): \n            if (num % i) == 0: \n                prime = False\n        if prime: \n            primes.append(num) \n    return primes","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of prime numbers from 1 to N in Python.\n\n### Input:\n\n\n### Output:\ndef generate_primes(n): \n    primes = [] \n    for num in range(2, n+1): \n        prime = True \n        for i in range(2, num): \n            if (num % i) == 0: \n                prime = False\n        if prime: \n            primes.append(num) \n    return primes","tok_input_length":114,"tok_output_length":73,"system_prompt":"","index":11379}
{"question":"Create a python class that stores a name and address.","input":"","expected_output":"class Person:\n    def __init__(self, name, address):\n        self.name = name\n        self.address = address\n\n    def get_name(self):\n        return self.name\n    \n    def get_address(self):\n        return self.address\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_address(self, address):\n        self.address = address","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class that stores a name and address.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, address):\n        self.name = name\n        self.address = address\n\n    def get_name(self):\n        return self.name\n    \n    def get_address(self):\n        return self.address\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_address(self, address):\n        self.address = address","tok_input_length":114,"tok_output_length":76,"system_prompt":"","index":9254}
{"question":"Take a Python program written in procedural style and convert it to functional style.","input":"def sort_list(arr):\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        tmp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = tmp","expected_output":"def sort_list(arr):\n  sorted_arr = sorted(arr)\n  return sorted_arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake a Python program written in procedural style and convert it to functional style.\n\n### Input:\ndef sort_list(arr):\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        tmp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = tmp\n\n### Output:\ndef sort_list(arr):\n  sorted_arr = sorted(arr)\n  return sorted_arr","tok_input_length":115,"tok_output_length":17,"system_prompt":"","index":11359}
{"question":"Create a Lambda function in Python to process an integer array and return the square of the even numbers in the array.","input":"The integer array: [2, 4, 7, 9, 12, 14]","expected_output":"def lambda_handler(event, context):\n    numbers = event['numbers']\n    result = [num ** 2 for num in numbers if num % 2 == 0]\n    return {'result': result}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Lambda function in Python to process an integer array and return the square of the even numbers in the array.\n\n### Input:\nThe integer array: [2, 4, 7, 9, 12, 14]\n\n### Output:\ndef lambda_handler(event, context):\n    numbers = event['numbers']\n    result = [num ** 2 for num in numbers if num % 2 == 0]\n    return {'result': result}","tok_input_length":115,"tok_output_length":43,"system_prompt":"","index":17952}
{"question":"Edit the given Python code to convert a list of temperatures in Fahrenheit to a list of temperatures in Celsius.","input":"temperatures_fahrenheit = [32, 64, 78, -10]","expected_output":"temperatures_fahrenheit = [32, 64, 78, -10]\n\ntemperatures_celsius = [((temp-32)*5)\/9 for temp in temperatures_fahrenheit]\nprint(temperatures_celsius)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python code to convert a list of temperatures in Fahrenheit to a list of temperatures in Celsius.\n\n### Input:\ntemperatures_fahrenheit = [32, 64, 78, -10]\n\n### Output:\ntemperatures_fahrenheit = [32, 64, 78, -10]\n\ntemperatures_celsius = [((temp-32)*5)\/9 for temp in temperatures_fahrenheit]\nprint(temperatures_celsius)","tok_input_length":115,"tok_output_length":49,"system_prompt":"","index":1250}
{"question":"Develop a Python program to remove all characters from an input string that are not a-z, A-Z, 0-9, or white space.","input":"\"Hello,@ $World.\"","expected_output":"import re\n\ndef remove_non_alphanum(s):\n  return re.sub('[^a-zA-Z0-9 \\n\\.]', '', s)\n\nstring = \"Hello,@ $World.\"\nres = remove_non_alphanum(string) \n\nprint(res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to remove all characters from an input string that are not a-z, A-Z, 0-9, or white space.\n\n### Input:\n\"Hello,@ $World.\"\n\n### Output:\nimport re\n\ndef remove_non_alphanum(s):\n  return re.sub('[^a-zA-Z0-9 \\n\\.]', '', s)\n\nstring = \"Hello,@ $World.\"\nres = remove_non_alphanum(string) \n\nprint(res)","tok_input_length":115,"tok_output_length":52,"system_prompt":"","index":882}
{"question":"Develop a Python function that sorts a given list of strings on the basis of the length of the string.","input":"['Coders', 'NS', 'Coding', 'Program']","expected_output":"def sort_list(lst):\n    return sorted(lst, key = len)\n\nlst = ['Coders', 'NS', 'Coding', 'Program']\n\nresult = sort_list(lst)\n\nprint(result)  # ['NS', 'Coding', 'Coders', 'Program']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function that sorts a given list of strings on the basis of the length of the string.\n\n### Input:\n['Coders', 'NS', 'Coding', 'Program']\n\n### Output:\ndef sort_list(lst):\n    return sorted(lst, key = len)\n\nlst = ['Coders', 'NS', 'Coding', 'Program']\n\nresult = sort_list(lst)\n\nprint(result)  # ['NS', 'Coding', 'Coders', 'Program']","tok_input_length":115,"tok_output_length":54,"system_prompt":"","index":12089}
{"question":"Create a Python script to search for a given element in a list?","input":"my_list = [1, 3, 5, 7, 8]","expected_output":"def find_element(my_list, x):\n  found = False\n  for item in my_list:\n    if item == x:\n      found = True\n      break\n  \n  return found\n\nelement = 3\n\nprint(find_element(my_list, element))\n\n# Output\nTrue","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to search for a given element in a list?\n\n### Input:\nmy_list = [1, 3, 5, 7, 8]\n\n### Output:\ndef find_element(my_list, x):\n  found = False\n  for item in my_list:\n    if item == x:\n      found = True\n      break\n  \n  return found\n\nelement = 3\n\nprint(find_element(my_list, element))\n\n# Output\nTrue","tok_input_length":115,"tok_output_length":56,"system_prompt":"","index":3109}
{"question":"Write a Python program to convert a given time in seconds to the equivalent time in hours, minutes, and seconds.","input":"time_in_seconds = 82836","expected_output":"def convert_to_hms(time_in_seconds):\n    hours = int(time_in_seconds \/ 3600)\n    minutes = int((time_in_seconds % 3600) \/ 60)\n    seconds = int(time_in_seconds % 60)\n    return hours, minutes, seconds","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given time in seconds to the equivalent time in hours, minutes, and seconds.\n\n### Input:\ntime_in_seconds = 82836\n\n### Output:\ndef convert_to_hms(time_in_seconds):\n    hours = int(time_in_seconds \/ 3600)\n    minutes = int((time_in_seconds % 3600) \/ 60)\n    seconds = int(time_in_seconds % 60)\n    return hours, minutes, seconds","tok_input_length":115,"tok_output_length":57,"system_prompt":"","index":14878}
{"question":"Compose Python code to remove all elements from a list by value.","input":"mylist = [1,2,3,4,2]","expected_output":"def remove_by_val(mylist, val):\n     return [i for i in mylist if i != val]\n\nmylist = [1,2,3,4,2]\nresult = remove_by_val(mylist, 2)\nprint(\"Updated list after removing elements are: \", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose Python code to remove all elements from a list by value.\n\n### Input:\nmylist = [1,2,3,4,2]\n\n### Output:\ndef remove_by_val(mylist, val):\n     return [i for i in mylist if i != val]\n\nmylist = [1,2,3,4,2]\nresult = remove_by_val(mylist, 2)\nprint(\"Updated list after removing elements are: \", result)","tok_input_length":115,"tok_output_length":61,"system_prompt":"","index":4995}
{"question":"Create a Python program to list all the integers between a given range input.","input":"Start: 3\nEnd:10","expected_output":"def list_integers(start, end):\n    integers_list=[]\n    while (start <= end):\n        integers_list.append(start)\n        start = start + 1\n    return integers_list\n  \nprint(\"The list of integers in the given range is:\")\nresult = list_integers(3,10)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to list all the integers between a given range input.\n\n### Input:\nStart: 3\nEnd:10\n\n### Output:\ndef list_integers(start, end):\n    integers_list=[]\n    while (start <= end):\n        integers_list.append(start)\n        start = start + 1\n    return integers_list\n  \nprint(\"The list of integers in the given range is:\")\nresult = list_integers(3,10)\nprint(result)","tok_input_length":115,"tok_output_length":64,"system_prompt":"","index":8370}
{"question":"Create a basic Python script that uses the requests library to get a web page and prints it out.","input":"Not applicable","expected_output":"# importing the requests library \nimport requests \n\n# api-endpoint \nURL = \"http:\/\/www.example.com\"\n\n# sending get request and saving the response as response object \nr = requests.get(url = URL) \n\n# extracting data in json format \ndata = r.text \n\n# printing the output \nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script that uses the requests library to get a web page and prints it out.\n\n### Input:\nNot applicable\n\n### Output:\n# importing the requests library \nimport requests \n\n# api-endpoint \nURL = \"http:\/\/www.example.com\"\n\n# sending get request and saving the response as response object \nr = requests.get(url = URL) \n\n# extracting data in json format \ndata = r.text \n\n# printing the output \nprint(data)","tok_input_length":115,"tok_output_length":65,"system_prompt":"","index":8700}
{"question":"Write a python script to randomly generate an 8-character string which contains uppercase letters, lowercase letters and digits.","input":"","expected_output":"import string \nimport random\n\ndef generate_code():\n    '''This function will generate an 8-character string with uppercase letters, lowercase letters and digits.'''\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    code = ''.join(random.choice(chars) for _ in range(8))\n    return code","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to randomly generate an 8-character string which contains uppercase letters, lowercase letters and digits.\n\n### Input:\n\n\n### Output:\nimport string \nimport random\n\ndef generate_code():\n    '''This function will generate an 8-character string with uppercase letters, lowercase letters and digits.'''\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    code = ''.join(random.choice(chars) for _ in range(8))\n    return code","tok_input_length":115,"tok_output_length":66,"system_prompt":"","index":17123}
{"question":"Construct a program in Python that determines the largest prime factor of a number.","input":"number = 300","expected_output":"def find_largest_prime_factor(number):\n  i = 2\n  while i < number \/\/ 2:\n    if number % i == 0:\n      number = number \/\/ i\n      i = 2\n    else:\n      i += 1\n  return number\n\nprint(find_largest_prime_factor(300))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python that determines the largest prime factor of a number.\n\n### Input:\nnumber = 300\n\n### Output:\ndef find_largest_prime_factor(number):\n  i = 2\n  while i < number \/\/ 2:\n    if number % i == 0:\n      number = number \/\/ i\n      i = 2\n    else:\n      i += 1\n  return number\n\nprint(find_largest_prime_factor(300))","tok_input_length":115,"tok_output_length":68,"system_prompt":"","index":2877}
{"question":"Write a Python script to print the armstrong numbers between 0 and 1000.","input":"","expected_output":"for num in range (0, 1000):\n    order = len(str(num))\n    s = 0\n    x = num\n    while x > 0:\n        d = x % 10\n        x = x \/\/ 10\n        s += d ** order\n    if num == s:\n        print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to print the armstrong numbers between 0 and 1000.\n\n### Input:\n\n\n### Output:\nfor num in range (0, 1000):\n    order = len(str(num))\n    s = 0\n    x = num\n    while x > 0:\n        d = x % 10\n        x = x \/\/ 10\n        s += d ** order\n    if num == s:\n        print(num)","tok_input_length":115,"tok_output_length":70,"system_prompt":"","index":1413}
{"question":"Write a Python function to find the maximum depth of a given binary search tree.","input":"","expected_output":"def find_maximum_depth(tree):\n    if tree is None: \n        return 0 \n    else : \n        left_depth = find_maximum_depth(tree.left) \n        right_depth = find_maximum_depth(tree.right) \n        \n        if (left_depth > right_depth): \n            return left_depth+1\n        else: \n            return right_depth+1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the maximum depth of a given binary search tree.\n\n### Input:\n\n\n### Output:\ndef find_maximum_depth(tree):\n    if tree is None: \n        return 0 \n    else : \n        left_depth = find_maximum_depth(tree.left) \n        right_depth = find_maximum_depth(tree.right) \n        \n        if (left_depth > right_depth): \n            return left_depth+1\n        else: \n            return right_depth+1","tok_input_length":115,"tok_output_length":72,"system_prompt":"","index":15588}
{"question":"Write a Python function to generate a random string of length 10.","input":"","expected_output":"import random\nimport string\n\ndef generate_string():\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    random_string = ''.join(random.choice(chars) for i in range(10))\n    return random_string\n\n# Example test\nrandom_string = generate_string()\nprint(random_string) # 5BZFz5S2Sd","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate a random string of length 10.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef generate_string():\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    random_string = ''.join(random.choice(chars) for i in range(10))\n    return random_string\n\n# Example test\nrandom_string = generate_string()\nprint(random_string) # 5BZFz5S2Sd","tok_input_length":115,"tok_output_length":74,"system_prompt":"","index":8183}
{"question":"Create a Python class to store data about books.","input":"","expected_output":"class Book:\n \n    def __init__(self, title, author, publisher, year):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.year = year\n \n    def __str__(self):\n        return f\"{self.title} was written by {self.author} and published by {self.publisher} in {self.year}.\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to store data about books.\n\n### Input:\n\n\n### Output:\nclass Book:\n \n    def __init__(self, title, author, publisher, year):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.year = year\n \n    def __str__(self):\n        return f\"{self.title} was written by {self.author} and published by {self.publisher} in {self.year}.\"","tok_input_length":115,"tok_output_length":78,"system_prompt":"","index":11755}
{"question":"Rewrite the below program to use Python's dictionary comprehension.","input":"states = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'}\n\ninverse_states = {}\n\nfor key,value in states.items():\n  inverse_states[value] = key","expected_output":"states = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'}\n\ninverse_states = {value:key for key,value in states.items()}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the below program to use Python's dictionary comprehension.\n\n### Input:\nstates = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'}\n\ninverse_states = {}\n\nfor key,value in states.items():\n  inverse_states[value] = key\n\n### Output:\nstates = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'}\n\ninverse_states = {value:key for key,value in states.items()}","tok_input_length":116,"tok_output_length":36,"system_prompt":"","index":15662}
{"question":"Write a Python code to sort a dictionary by a specific key.","input":"numbers = {\n '1': 50,\n '2': 60,\n '3': 20,\n '4': 70\n}","expected_output":"numbers = {\n '1': 50,\n '2': 60,\n '3': 20,\n '4': 70\n}\n\nsorted_dictionary = sorted(numbers.items(), key=lambda x: x[1])\nprint(sorted_dictionary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to sort a dictionary by a specific key.\n\n### Input:\nnumbers = {\n '1': 50,\n '2': 60,\n '3': 20,\n '4': 70\n}\n\n### Output:\nnumbers = {\n '1': 50,\n '2': 60,\n '3': 20,\n '4': 70\n}\n\nsorted_dictionary = sorted(numbers.items(), key=lambda x: x[1])\nprint(sorted_dictionary)","tok_input_length":116,"tok_output_length":48,"system_prompt":"","index":6412}
{"question":"Write a Python program to generate a bar chart with labels using matplotlib from a given list of numbers.","input":"list = [1, 2, 3, 4, 5]","expected_output":"import matplotlib.pyplot as plt\n\nlist = [1, 2, 3, 4, 5]\n\nplt.bar(range(len(list)), list)\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.title('My Bar Chart')\n\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a bar chart with labels using matplotlib from a given list of numbers.\n\n### Input:\nlist = [1, 2, 3, 4, 5]\n\n### Output:\nimport matplotlib.pyplot as plt\n\nlist = [1, 2, 3, 4, 5]\n\nplt.bar(range(len(list)), list)\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.title('My Bar Chart')\n\nplt.show()","tok_input_length":116,"tok_output_length":52,"system_prompt":"","index":11525}
{"question":"Compose an editor program, in Python code, to remove all the duplicate words from a given sentence.","input":"sentence = \"This is a a random sentence with with repeated words\"","expected_output":"def remove_duplicates(sentence): \n    words = sentence.split() \n    words_without_duplicates = [] \n    for i in words: \n        if i not in words_without_duplicates: \n            words_without_duplicates.append(i) \n  \n    return \" \".join(words_without_duplicates)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose an editor program, in Python code, to remove all the duplicate words from a given sentence.\n\n### Input:\nsentence = \"This is a a random sentence with with repeated words\"\n\n### Output:\ndef remove_duplicates(sentence): \n    words = sentence.split() \n    words_without_duplicates = [] \n    for i in words: \n        if i not in words_without_duplicates: \n            words_without_duplicates.append(i) \n  \n    return \" \".join(words_without_duplicates)","tok_input_length":116,"tok_output_length":55,"system_prompt":"","index":16383}
{"question":"Develop a Python program that takes an array of integers and returns the largest element.","input":"[2, 4, 8, 9, 10]","expected_output":"def find_max(arr):\n    \n    max_val = arr[0]\n    \n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\nprint(find_max([2, 4, 8, 9, 10]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that takes an array of integers and returns the largest element.\n\n### Input:\n[2, 4, 8, 9, 10]\n\n### Output:\ndef find_max(arr):\n    \n    max_val = arr[0]\n    \n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\nprint(find_max([2, 4, 8, 9, 10]))","tok_input_length":116,"tok_output_length":58,"system_prompt":"","index":7828}
{"question":"Create an algorithm in Python that reads and stores the following data into a dictionary.","input":"\"John,31;Alice,27;Bob,40\"","expected_output":"input_data = \"John,31;Alice,27;Bob,40\"\ndata_dict = {}\n\ntemp = input_data.split(\";\") \nfor i in temp: \n    data = i.split(\",\") \n    data_dict[data[0]] = data[1] \n\nprint(data_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that reads and stores the following data into a dictionary.\n\n### Input:\n\"John,31;Alice,27;Bob,40\"\n\n### Output:\ninput_data = \"John,31;Alice,27;Bob,40\"\ndata_dict = {}\n\ntemp = input_data.split(\";\") \nfor i in temp: \n    data = i.split(\",\") \n    data_dict[data[0]] = data[1] \n\nprint(data_dict)","tok_input_length":116,"tok_output_length":60,"system_prompt":"","index":7913}
{"question":"Create a Python program to generate a random username. The username should consist of two random words joined with an underscore.","input":"Not applicable","expected_output":"import random\n\nwords = ['cat', 'dog', 'mouse', 'elephant', 'tiger', 'lion',\n 'giraffe', 'hippo', 'monkey', 'zebra']\n\nusername = random.choice(words) + '_' + random.choice(words)\n\nprint('Username: ' + username)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random username. The username should consist of two random words joined with an underscore.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nwords = ['cat', 'dog', 'mouse', 'elephant', 'tiger', 'lion',\n 'giraffe', 'hippo', 'monkey', 'zebra']\n\nusername = random.choice(words) + '_' + random.choice(words)\n\nprint('Username: ' + username)","tok_input_length":116,"tok_output_length":63,"system_prompt":"","index":10129}
{"question":"Develop a Python function to determine the greatest common divisor of two integers.","input":"a = 28 \nb = 15","expected_output":"def gcd(a, b): \n if(b == 0): \n  return a \n return gcd(b, a%b) \n\ndef main():\n a = 28 \n b = 15 \n print(gcd(a,b)) \n\nif __name__ == \"__main__\": \n main() \n\n# Output\n3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to determine the greatest common divisor of two integers.\n\n### Input:\na = 28 \nb = 15\n\n### Output:\ndef gcd(a, b): \n if(b == 0): \n  return a \n return gcd(b, a%b) \n\ndef main():\n a = 28 \n b = 15 \n print(gcd(a,b)) \n\nif __name__ == \"__main__\": \n main() \n\n# Output\n3","tok_input_length":116,"tok_output_length":65,"system_prompt":"","index":12711}
{"question":"Create a Python script for scraping a website and extracting a list of URLs from it.","input":"https:\/\/example.com","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\nurls = []\n\nfor link in soup.find_all('a', href=True):\n if link['href'].startswith('http'):\n urls.append(link['href'])\n\nprint(urls)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for scraping a website and extracting a list of URLs from it.\n\n### Input:\nhttps:\/\/example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\nurls = []\n\nfor link in soup.find_all('a', href=True):\n if link['href'].startswith('http'):\n urls.append(link['href'])\n\nprint(urls)","tok_input_length":116,"tok_output_length":67,"system_prompt":"","index":1140}
{"question":"Write a code for sorting the words within a sentence, alphabetically.","input":"Python is a great language","expected_output":"\"\"\"\nWrite a code for sorting the words within a sentence, alphabetically.\n\"\"\"\n\ndef sort_words_alphabetically(sentence):\n    words = sentence.split()\n    words.sort()\n    return ' '.join(words)\n\nif __name__ == '__main__':\n    sentence = 'Python is a great language'\n    print(sort_words_alphabetically(sentence))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code for sorting the words within a sentence, alphabetically.\n\n### Input:\nPython is a great language\n\n### Output:\n\"\"\"\nWrite a code for sorting the words within a sentence, alphabetically.\n\"\"\"\n\ndef sort_words_alphabetically(sentence):\n    words = sentence.split()\n    words.sort()\n    return ' '.join(words)\n\nif __name__ == '__main__':\n    sentence = 'Python is a great language'\n    print(sort_words_alphabetically(sentence))","tok_input_length":116,"tok_output_length":69,"system_prompt":"","index":4200}
{"question":"Generate a sorting algorithm in Python to order a list of words alphabetically.","input":"Not applicable","expected_output":"def sort_words(words):\n    for i in range(len(words)-1):\n        min_index = i \n        for j in range(i + 1, len(words)):\n            if words[min_index] > words[j]: \n                min_index = j\n        words[i], words[min_index] = words[min_index], words[i]\n    return words","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a sorting algorithm in Python to order a list of words alphabetically.\n\n### Input:\nNot applicable\n\n### Output:\ndef sort_words(words):\n    for i in range(len(words)-1):\n        min_index = i \n        for j in range(i + 1, len(words)):\n            if words[min_index] > words[j]: \n                min_index = j\n        words[i], words[min_index] = words[min_index], words[i]\n    return words","tok_input_length":116,"tok_output_length":71,"system_prompt":"","index":9589}
{"question":"Write a python program to check if a given number is prime or not.","input":"27","expected_output":"def is_prime(num):\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n\nnumber = 27\n\nif is_prime(number):\n    print(str(number) + ' is a prime number.')\nelse:\n    print(str(number) + ' is not a prime number.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to check if a given number is prime or not.\n\n### Input:\n27\n\n### Output:\ndef is_prime(num):\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n\nnumber = 27\n\nif is_prime(number):\n    print(str(number) + ' is a prime number.')\nelse:\n    print(str(number) + ' is not a prime number.')","tok_input_length":116,"tok_output_length":72,"system_prompt":"","index":15511}
{"question":"Implement a data structure for a stack in Python.","input":"","expected_output":"class Stack(object):\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a data structure for a stack in Python.\n\n### Input:\n\n\n### Output:\nclass Stack(object):\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)","tok_input_length":116,"tok_output_length":79,"system_prompt":"","index":13329}
{"question":"Write a Python program that simulates a coin flip game. The program should randomize a value between 0 and 1 and return \"Heads\" for values less than .5 and \"Tails\" for values greather than .5","input":"Not applicable","expected_output":"import random\n\ndef coin_flip():\n\tif random.random() < 0.5:\n\t\treturn \"Heads\"\n\telse:\n\t\treturn \"Tails\"\n\nprint(coin_flip())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that simulates a coin flip game. The program should randomize a value between 0 and 1 and return \"Heads\" for values less than .5 and \"Tails\" for values greather than .5\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef coin_flip():\n\tif random.random() < 0.5:\n\t\treturn \"Heads\"\n\telse:\n\t\treturn \"Tails\"\n\nprint(coin_flip())","tok_input_length":117,"tok_output_length":37,"system_prompt":"","index":1343}
{"question":"Generate a function in Python to return the highest value in a dictionary for the given key.","input":"dictionary = {'A': 10, 'B': 20, 'C': 30, 'D': 40}","expected_output":"def highestValue(dictionary, key): \n    highest = 0 \n    for key,value in dictionary.items(): \n        if value > highest: \n            highest = value \n    return highest \n\nhighestValue(dictionary, key)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to return the highest value in a dictionary for the given key.\n\n### Input:\ndictionary = {'A': 10, 'B': 20, 'C': 30, 'D': 40}\n\n### Output:\ndef highestValue(dictionary, key): \n    highest = 0 \n    for key,value in dictionary.items(): \n        if value > highest: \n            highest = value \n    return highest \n\nhighestValue(dictionary, key)","tok_input_length":117,"tok_output_length":46,"system_prompt":"","index":6125}
{"question":"Write a Python program to search for a particular string in a given paragraph.","input":"The given paragraph is \"Juggling is the height of skill and it needs serious practice\".\nThe search string is \"height\"","expected_output":"def search_string (paragraph, search_string):\n    if search_string in paragraph:\n        print(\"Found the string '\" + search_string + \"'\")\n    else:\n        print(\"Sorry, string not found\")\nsearch_string(paragraph, 'height')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search for a particular string in a given paragraph.\n\n### Input:\nThe given paragraph is \"Juggling is the height of skill and it needs serious practice\".\nThe search string is \"height\"\n\n### Output:\ndef search_string (paragraph, search_string):\n    if search_string in paragraph:\n        print(\"Found the string '\" + search_string + \"'\")\n    else:\n        print(\"Sorry, string not found\")\nsearch_string(paragraph, 'height')","tok_input_length":117,"tok_output_length":50,"system_prompt":"","index":1913}
{"question":"Generate a Python script that updates all elements of a 1D numerical array by adding 10.","input":"arr = [1, 2, 3, 4, 5]","expected_output":"def updateArray(arr): \n    for i in range(len(arr)):\n        arr[i] += 10\n    return arr\n\narr = [1, 2, 3, 4, 5]\narr = updateArray(arr)\nprint(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that updates all elements of a 1D numerical array by adding 10.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Output:\ndef updateArray(arr): \n    for i in range(len(arr)):\n        arr[i] += 10\n    return arr\n\narr = [1, 2, 3, 4, 5]\narr = updateArray(arr)\nprint(arr)","tok_input_length":117,"tok_output_length":53,"system_prompt":"","index":3565}
{"question":"Create a function in Python which takes a list of integers as input and returns a sorted list.","input":"[3, 2, 5, 1, 4]","expected_output":"def sort_list(list):\n    list.sort()\n    return list\n    \nsorted_list = sort_list([3, 2, 5, 1, 4])\nprint(sorted_list) # output: [1, 2, 3, 4, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a list of integers as input and returns a sorted list.\n\n### Input:\n[3, 2, 5, 1, 4]\n\n### Output:\ndef sort_list(list):\n    list.sort()\n    return list\n    \nsorted_list = sort_list([3, 2, 5, 1, 4])\nprint(sorted_list) # output: [1, 2, 3, 4, 5]","tok_input_length":117,"tok_output_length":56,"system_prompt":"","index":4355}
{"question":"Create a function in Python to create a wordcount of a given text.","input":"\"The lines of text that you're about to write will be filled with wonder and excitement\"","expected_output":"def wordcount(text):\n    counts = dict()\n    words = text.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\nprint(wordcount(text))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to create a wordcount of a given text.\n\n### Input:\n\"The lines of text that you're about to write will be filled with wonder and excitement\"\n\n### Output:\ndef wordcount(text):\n    counts = dict()\n    words = text.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\nprint(wordcount(text))","tok_input_length":117,"tok_output_length":57,"system_prompt":"","index":18331}
{"question":"Can you provide a Python program to generate all possible combinations of a given list of numbers?","input":"\"list = [1, 2, 3]\"","expected_output":"import itertools\n\n# list of numbers\nlist_of_nums = [1, 2, 3]\n\n# get all possible combinations of numbers\ncombinations = itertools.combinations(list_of_nums, 3)\n\n# print all possible combinations\nfor combination in combinations:\n    print(combination)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a Python program to generate all possible combinations of a given list of numbers?\n\n### Input:\n\"list = [1, 2, 3]\"\n\n### Output:\nimport itertools\n\n# list of numbers\nlist_of_nums = [1, 2, 3]\n\n# get all possible combinations of numbers\ncombinations = itertools.combinations(list_of_nums, 3)\n\n# print all possible combinations\nfor combination in combinations:\n    print(combination)","tok_input_length":117,"tok_output_length":59,"system_prompt":"","index":6688}
{"question":"Compute the mean value of an array of integers using Python.","input":"[1, 2, 3, 4, 5]","expected_output":"def calculate_mean(values):\n    total_sum = 0\n\n    for num in values:\n        total_sum += num\n\n    return total_sum \/ len(values)\n\nvalues = [1, 2, 3, 4, 5]\n\nmean = calculate_mean(values)\nprint(\"Mean Value:\", mean)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the mean value of an array of integers using Python.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef calculate_mean(values):\n    total_sum = 0\n\n    for num in values:\n        total_sum += num\n\n    return total_sum \/ len(values)\n\nvalues = [1, 2, 3, 4, 5]\n\nmean = calculate_mean(values)\nprint(\"Mean Value:\", mean)","tok_input_length":117,"tok_output_length":63,"system_prompt":"","index":7875}
{"question":"Given the following input, write a Python program to output the characteristics of the longest word.","input":"laptop,computer,keyboard","expected_output":"def longest_word(list_words):\n    longest_word = max(list_words, key=len)\n    print(\"Length of longest word: \" + str(len(longest_word)))\n    print(\"Longest Word: \" + longest_word)\n\nlist_words = [\"laptop\", \"computer\", \"keyboard\"]\nlongest_word(list_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following input, write a Python program to output the characteristics of the longest word.\n\n### Input:\nlaptop,computer,keyboard\n\n### Output:\ndef longest_word(list_words):\n    longest_word = max(list_words, key=len)\n    print(\"Length of longest word: \" + str(len(longest_word)))\n    print(\"Longest Word: \" + longest_word)\n\nlist_words = [\"laptop\", \"computer\", \"keyboard\"]\nlongest_word(list_words)","tok_input_length":117,"tok_output_length":65,"system_prompt":"","index":12185}
{"question":"Write a Python program that prompts the user for three numbers and prints the mean of those numbers.","input":"Not applicable","expected_output":"def get_mean(a, b, c):\n    return (a + b + c)\/3\n\na = float(input('Enter a number: '))\nb = float(input('Enter a number: '))\nc = float(input('Enter a number: '))\n\nmean = get_mean(a, b, c)\nprint('Mean:', mean)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that prompts the user for three numbers and prints the mean of those numbers.\n\n### Input:\nNot applicable\n\n### Output:\ndef get_mean(a, b, c):\n    return (a + b + c)\/3\n\na = float(input('Enter a number: '))\nb = float(input('Enter a number: '))\nc = float(input('Enter a number: '))\n\nmean = get_mean(a, b, c)\nprint('Mean:', mean)","tok_input_length":117,"tok_output_length":68,"system_prompt":"","index":9757}
{"question":"Write a python program that will generate a password containing numbers and letters from an entered string.","input":"Hello","expected_output":"def generate_password(word):\n      # initialize variables \n    password = \"\"\n    letters = \"\"\n    numbers = \"\"\n\n    # create new password\n    for i in range(0, len(word)):\n      letters += word[i]\n      numbers += str(i)\n\n    password = letters + numbers\n    return password\n\nprint(generate_password(\"Hello\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that will generate a password containing numbers and letters from an entered string.\n\n### Input:\nHello\n\n### Output:\ndef generate_password(word):\n      # initialize variables \n    password = \"\"\n    letters = \"\"\n    numbers = \"\"\n\n    # create new password\n    for i in range(0, len(word)):\n      letters += word[i]\n      numbers += str(i)\n\n    password = letters + numbers\n    return password\n\nprint(generate_password(\"Hello\"))","tok_input_length":117,"tok_output_length":70,"system_prompt":"","index":655}
{"question":"Write a Python program which prints out the Fibonacci series up to the N-th term.","input":"15","expected_output":"def print_fibonacci_series(n): \n    a = 0\n    b = 1\n    c = 0\n\n    while c < n:\n        print(a,end=\" \")\n        c = c+1\n        temp = a+b\n        a = b \n        b = temp \n\t\t\nprint_fibonacci_series(15)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program which prints out the Fibonacci series up to the N-th term.\n\n### Input:\n15\n\n### Output:\ndef print_fibonacci_series(n): \n    a = 0\n    b = 1\n    c = 0\n\n    while c < n:\n        print(a,end=\" \")\n        c = c+1\n        temp = a+b\n        a = b \n        b = temp \n\t\t\nprint_fibonacci_series(15)","tok_input_length":117,"tok_output_length":71,"system_prompt":"","index":16549}
{"question":"Create a class in Python to represent a 2D point on a Cartesian plane.","input":"","expected_output":"class Point2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def get_distance(self, other):\n        dx = self.x - other.x\n        dy = self.y - other.y\n        return (dx ** 2 + dy ** 2) ** 0.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a 2D point on a Cartesian plane.\n\n### Input:\n\n\n### Output:\nclass Point2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def get_distance(self, other):\n        dx = self.x - other.x\n        dy = self.y - other.y\n        return (dx ** 2 + dy ** 2) ** 0.5","tok_input_length":117,"tok_output_length":73,"system_prompt":"","index":11235}
{"question":"Write a Python program to add two numbers taken as input from the user.","input":"","expected_output":"# get two numbers from the user\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# calculate the result\nresult = num1 + num2\n\n# display the result\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, result))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to add two numbers taken as input from the user.\n\n### Input:\n\n\n### Output:\n# get two numbers from the user\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# calculate the result\nresult = num1 + num2\n\n# display the result\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, result))","tok_input_length":117,"tok_output_length":75,"system_prompt":"","index":3197}
{"question":"Write a Python function to parse an HTML response from a website.","input":"","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef parse_html(url):\n  # Send a get request\n  response = requests.get(url)\n  \n  # Create a BeautifulSoup object\n  soup = BeautifulSoup(response.text, 'lxml')\n\n  # Find the required data\n  data = soup.find_all('div', class_='content')\n\n  # Return the data\n  return data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to parse an HTML response from a website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef parse_html(url):\n  # Send a get request\n  response = requests.get(url)\n  \n  # Create a BeautifulSoup object\n  soup = BeautifulSoup(response.text, 'lxml')\n\n  # Find the required data\n  data = soup.find_all('div', class_='content')\n\n  # Return the data\n  return data","tok_input_length":117,"tok_output_length":77,"system_prompt":"","index":5542}
{"question":"Write a Python program to combine two dictionaries of similar structure together, such that the entries in the two dictionaries are merged into a single dictionary.","input":"dict_a = {'a':1, 'b':2, 'c':3}\ndict_b = {'d':4, 'e':5, 'f':6}","expected_output":"def merge_dict(dict_a, dict_b):\n    merged_dict = {**dict_a, **dict_b}\n    return merged_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to combine two dictionaries of similar structure together, such that the entries in the two dictionaries are merged into a single dictionary.\n\n### Input:\ndict_a = {'a':1, 'b':2, 'c':3}\ndict_b = {'d':4, 'e':5, 'f':6}\n\n### Output:\ndef merge_dict(dict_a, dict_b):\n    merged_dict = {**dict_a, **dict_b}\n    return merged_dict","tok_input_length":118,"tok_output_length":27,"system_prompt":"","index":592}
{"question":"Create a Python function which takes a list of strings as an input and determines if the list contains palindrome strings (i.e. strings that are the same forward and backwards).","input":"list_of_strings = [\"racecar\", \"cat\", \"mom\", \"noon\"]","expected_output":"def is_palindrome(list_of_strings):\n  palindrome_list = [string for string in list_of_strings if string == string[::-1]]\n  if palindrome_list:\n    return True\n  return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function which takes a list of strings as an input and determines if the list contains palindrome strings (i.e. strings that are the same forward and backwards).\n\n### Input:\nlist_of_strings = [\"racecar\", \"cat\", \"mom\", \"noon\"]\n\n### Output:\ndef is_palindrome(list_of_strings):\n  palindrome_list = [string for string in list_of_strings if string == string[::-1]]\n  if palindrome_list:\n    return True\n  return False","tok_input_length":118,"tok_output_length":40,"system_prompt":"","index":9738}
{"question":"Create a function in Python that takes 2 lists and returns their intersection.","input":"list1 = [1, 4 , 6, 10]\nlist2 = [2, 10, 8, 6]","expected_output":"def intersection(list1, list2): \n    intersection_elements = set(list1) & set(list2) \n    return list(intersection_elements)\n\nintersection_list = intersection(list1, list2)\nprint(intersection_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes 2 lists and returns their intersection.\n\n### Input:\nlist1 = [1, 4 , 6, 10]\nlist2 = [2, 10, 8, 6]\n\n### Output:\ndef intersection(list1, list2): \n    intersection_elements = set(list1) & set(list2) \n    return list(intersection_elements)\n\nintersection_list = intersection(list1, list2)\nprint(intersection_list)","tok_input_length":118,"tok_output_length":46,"system_prompt":"","index":8762}
{"question":"Create a Python program that takes a list of strings and filters out strings that do not contain the letter 'a'.","input":"words = [\"apple\", \"banana\", \"grape\", \"pear\", \"kiwi\"]","expected_output":"# Filtering out strings without letter 'a'\nfiltered_words = [word for word in words if 'a' in word]\n\n# Print the filtered list\nprint(filtered_words)\n# Output: ['apple', 'banana', 'grape']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a list of strings and filters out strings that do not contain the letter 'a'.\n\n### Input:\nwords = [\"apple\", \"banana\", \"grape\", \"pear\", \"kiwi\"]\n\n### Output:\n# Filtering out strings without letter 'a'\nfiltered_words = [word for word in words if 'a' in word]\n\n# Print the filtered list\nprint(filtered_words)\n# Output: ['apple', 'banana', 'grape']","tok_input_length":118,"tok_output_length":49,"system_prompt":"","index":4257}
{"question":"Create a feature extraction function in Python to extract data from a json string.","input":"{\"id\":111,\"title\":\"This is a sample title\",\"body\":\"This is a sample body text\"}","expected_output":"def feature_extraction(input_str):\n    import json\n    data = json.loads(input_str)\n\n    features = {\n        \"id\": data[\"id\"],\n        \"title\": data[\"title\"],\n        \"body_len\": len(data[\"body\"])\n    }\n\n    return features","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a feature extraction function in Python to extract data from a json string.\n\n### Input:\n{\"id\":111,\"title\":\"This is a sample title\",\"body\":\"This is a sample body text\"}\n\n### Output:\ndef feature_extraction(input_str):\n    import json\n    data = json.loads(input_str)\n\n    features = {\n        \"id\": data[\"id\"],\n        \"title\": data[\"title\"],\n        \"body_len\": len(data[\"body\"])\n    }\n\n    return features","tok_input_length":118,"tok_output_length":54,"system_prompt":"","index":310}
{"question":"Write a Python program that takes a string as input and edits the string to remove all punctuation marks.","input":"string = \"This string contains , a comma, and a % symbol.\"","expected_output":"import string\n\ndef remove_puncutuation(string):\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(translator)\n\nstring = \"This string contains , a comma, and a % symbol.\"\n\nprint(remove_puncutuation(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a string as input and edits the string to remove all punctuation marks.\n\n### Input:\nstring = \"This string contains , a comma, and a % symbol.\"\n\n### Output:\nimport string\n\ndef remove_puncutuation(string):\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(translator)\n\nstring = \"This string contains , a comma, and a % symbol.\"\n\nprint(remove_puncutuation(string))","tok_input_length":118,"tok_output_length":56,"system_prompt":"","index":6340}
{"question":"Write a Python function that takes an array of integers as input and computes the average of the elements.","input":"array = [1, 2, 3, 4]","expected_output":"def compute_average(arr):\n sum = 0\n for i in arr:\n sum += i\n return sum \/ len(arr)\n \n arr = [1, 2, 3, 4]\n avg = compute_average(arr)\n print(\"Average of array elements is:\", avg)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes an array of integers as input and computes the average of the elements.\n\n### Input:\narray = [1, 2, 3, 4]\n\n### Output:\ndef compute_average(arr):\n sum = 0\n for i in arr:\n sum += i\n return sum \/ len(arr)\n \n arr = [1, 2, 3, 4]\n avg = compute_average(arr)\n print(\"Average of array elements is:\", avg)","tok_input_length":118,"tok_output_length":57,"system_prompt":"","index":12998}
{"question":"Write a code snippet in Python to create a Pandas Dataframe with three columns containing random numbers in the range 1-1000.","input":"Not applicable","expected_output":"import pandas as pd\nimport numpy as np\n\n# Create a Dataframe with 3 Columns and 10 Rows\ndf = pd.DataFrame(np.random.randint(1,1000,size=(10, 3)),\n columns=['col1', 'col2','col3'])\n \nprint(df)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet in Python to create a Pandas Dataframe with three columns containing random numbers in the range 1-1000.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\n# Create a Dataframe with 3 Columns and 10 Rows\ndf = pd.DataFrame(np.random.randint(1,1000,size=(10, 3)),\n columns=['col1', 'col2','col3'])\n \nprint(df)","tok_input_length":118,"tok_output_length":60,"system_prompt":"","index":1147}
{"question":"Create a Python program to generate an ISO8601-compliant string from a given date","input":"Date: 2020-07-15","expected_output":"from datetime import datetime\n\ndate_str = '2020-07-15'\ndate = datetime.strptime(date_str, '%Y-%m-%d')\niso8601_str = date.isoformat()\n\nprint(iso8601_str)\n# Output: 2020-07-15T00:00:00","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate an ISO8601-compliant string from a given date\n\n### Input:\nDate: 2020-07-15\n\n### Output:\nfrom datetime import datetime\n\ndate_str = '2020-07-15'\ndate = datetime.strptime(date_str, '%Y-%m-%d')\niso8601_str = date.isoformat()\n\nprint(iso8601_str)\n# Output: 2020-07-15T00:00:00","tok_input_length":118,"tok_output_length":63,"system_prompt":"","index":8270}
{"question":"Write a Python program that takes an integer and prints a set of stairs with that many levels.","input":"Number of levels: 5","expected_output":"def staircase(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j <= n-i:\n                print(' ', end='')\n            else:\n                print('#', end='')\n        print('')\n\nn = 5\nstaircase(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes an integer and prints a set of stairs with that many levels.\n\n### Input:\nNumber of levels: 5\n\n### Output:\ndef staircase(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j <= n-i:\n                print(' ', end='')\n            else:\n                print('#', end='')\n        print('')\n\nn = 5\nstaircase(n)","tok_input_length":118,"tok_output_length":65,"system_prompt":"","index":6486}
{"question":"Create a class in Python to represent a user, where a user is composed of a name and an email address.","input":"","expected_output":"class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        \n    def printDetails(self):\n        print(\"Name:\", self.name)\n        print(\"Email:\", self.email)\n        \nuser1 = User(\"John Smith\", \"john@example.com\")\nuser1.printDetails()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a user, where a user is composed of a name and an email address.\n\n### Input:\n\n\n### Output:\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        \n    def printDetails(self):\n        print(\"Name:\", self.name)\n        print(\"Email:\", self.email)\n        \nuser1 = User(\"John Smith\", \"john@example.com\")\nuser1.printDetails()","tok_input_length":118,"tok_output_length":68,"system_prompt":"","index":14644}
{"question":"Create a web-scraping function in Python to extract the text content from any website.","input":"Not applicable","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_text(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    texts = soup.find_all(text=True)\n    return ' '.join(texts)\n    \nscraped_text = scrape_text('https:\/\/example.com')\nprint(scraped_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-scraping function in Python to extract the text content from any website.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_text(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    texts = soup.find_all(text=True)\n    return ' '.join(texts)\n    \nscraped_text = scrape_text('https:\/\/example.com')\nprint(scraped_text)","tok_input_length":118,"tok_output_length":70,"system_prompt":"","index":10795}
{"question":"Can you create a program in Python which reverses a number?","input":"Number = 12345","expected_output":"# Using Python\n\ndef reverseNumber(number):\n    reversed = 0\n    while(number > 0):\n        digit = number%10\n        reversed = reversed*10 + digit\n        number = number\/\/10\n    \n    return reversed\n\nnumber = 12345\nreverse = reverseNumber(number)\nprint(reverse) \n# Output: 54321","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a program in Python which reverses a number?\n\n### Input:\nNumber = 12345\n\n### Output:\n# Using Python\n\ndef reverseNumber(number):\n    reversed = 0\n    while(number > 0):\n        digit = number%10\n        reversed = reversed*10 + digit\n        number = number\/\/10\n    \n    return reversed\n\nnumber = 12345\nreverse = reverseNumber(number)\nprint(reverse) \n# Output: 54321","tok_input_length":118,"tok_output_length":72,"system_prompt":"","index":822}
{"question":"Design a web application using python and Flask to save user data submitted via a form.","input":"","expected_output":"from flask import Flask\nfrom flask import render_template\nfrom flask import request\n\n@app.route('\/')\ndef form():\n    return render_template('form.html')\n\n@app.route('\/', methods=['POST']\ndef save_data():\n   name = request.form['name']\n   age = request.form['age']\n   # Save user data to database \n   return render_template('success.html')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web application using python and Flask to save user data submitted via a form.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask\nfrom flask import render_template\nfrom flask import request\n\n@app.route('\/')\ndef form():\n    return render_template('form.html')\n\n@app.route('\/', methods=['POST']\ndef save_data():\n   name = request.form['name']\n   age = request.form['age']\n   # Save user data to database \n   return render_template('success.html')","tok_input_length":118,"tok_output_length":74,"system_prompt":"","index":7463}
{"question":"Write an object oriented Python program to create an Employee class that stores employee details.","input":"","expected_output":"class Employee:\n \n    #constructor\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age\n \n    #methods\n    def getName(self):\n        return self.name\n \n    def getSalary(self):\n        return self.salary\n \n    def getAge(self):\n        return self.age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an object oriented Python program to create an Employee class that stores employee details.\n\n### Input:\n\n\n### Output:\nclass Employee:\n \n    #constructor\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age\n \n    #methods\n    def getName(self):\n        return self.name\n \n    def getSalary(self):\n        return self.salary\n \n    def getAge(self):\n        return self.age","tok_input_length":118,"tok_output_length":75,"system_prompt":"","index":16896}
{"question":"Create a Python program to find the deepest node in a tree.","input":"","expected_output":"def deepest_node(root):\n    if not root:\n        return 0\n    elif not root.left and not root.right:\n        return 1\n    else:\n        left_depth = deepest_node(root.left)\n        right_depth = deepest_node(root.right)\n\n        if left_depth > right_depth:\n            return 1 + left_depth\n        else:\n            return 1 + right_depth","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the deepest node in a tree.\n\n### Input:\n\n\n### Output:\ndef deepest_node(root):\n    if not root:\n        return 0\n    elif not root.left and not root.right:\n        return 1\n    else:\n        left_depth = deepest_node(root.left)\n        right_depth = deepest_node(root.right)\n\n        if left_depth > right_depth:\n            return 1 + left_depth\n        else:\n            return 1 + right_depth","tok_input_length":118,"tok_output_length":78,"system_prompt":"","index":13688}
{"question":"Write a Python program to create a JSON object for a student's marks database. The database should contain the student's name, id, subject name and the marks obtained.","input":"Student Name: John    \nId: 105    \nSubject: Science    \nMarks: 90","expected_output":"student_data = [\n    {\n        'name': 'John',\n        'id': 105, \n        'subjects': {\n            'Science': 90\n        }\n    }\n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a JSON object for a student's marks database. The database should contain the student's name, id, subject name and the marks obtained.\n\n### Input:\nStudent Name: John    \nId: 105    \nSubject: Science    \nMarks: 90\n\n### Output:\nstudent_data = [\n    {\n        'name': 'John',\n        'id': 105, \n        'subjects': {\n            'Science': 90\n        }\n    }\n]","tok_input_length":119,"tok_output_length":39,"system_prompt":"","index":8503}
{"question":"Create a Python program that features an endless loop that repeatedly asks the user to input a number between 1 and 10. When the number is valid, the program should output the number plus one.","input":"Not applicable","expected_output":"while True:\n    num = int(input(\"Please input a number between 1 and 10: \"))\n    if num in range(1, 11):\n        print(num + 1)\n    else:\n        print(\"Invalid number!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that features an endless loop that repeatedly asks the user to input a number between 1 and 10. When the number is valid, the program should output the number plus one.\n\n### Input:\nNot applicable\n\n### Output:\nwhile True:\n    num = int(input(\"Please input a number between 1 and 10: \"))\n    if num in range(1, 11):\n        print(num + 1)\n    else:\n        print(\"Invalid number!\")","tok_input_length":119,"tok_output_length":49,"system_prompt":"","index":9614}
{"question":"Write a Python program to validate the given password according to the given criteria.","input":"The given criteria are: minimum 8 characters, should contain one uppercase letter, should contain one numeric digit","expected_output":"def validate_password(password):\n    if len(password) < 8:\n        return False\n    if not any(c.isupper() for c in password):\n        return False\n    if not any(c.isdigit() for c in password):\n        return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to validate the given password according to the given criteria.\n\n### Input:\nThe given criteria are: minimum 8 characters, should contain one uppercase letter, should contain one numeric digit\n\n### Output:\ndef validate_password(password):\n    if len(password) < 8:\n        return False\n    if not any(c.isupper() for c in password):\n        return False\n    if not any(c.isdigit() for c in password):\n        return False\n    return True","tok_input_length":119,"tok_output_length":55,"system_prompt":"","index":13640}
{"question":"Edit the following Python code to remove duplicate values in the given array.","input":"arr = [1, 2, 4, 2, 5, 4]","expected_output":"arr = [1, 2, 4, 5]\n \nunique_arr = []\n \nfor element in arr:\n    if element not in unique_arr:\n        unique_arr.append(element)\n \nprint(unique_arr) # [1, 2, 4, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to remove duplicate values in the given array.\n\n### Input:\narr = [1, 2, 4, 2, 5, 4]\n\n### Output:\narr = [1, 2, 4, 5]\n \nunique_arr = []\n \nfor element in arr:\n    if element not in unique_arr:\n        unique_arr.append(element)\n \nprint(unique_arr) # [1, 2, 4, 5]","tok_input_length":119,"tok_output_length":58,"system_prompt":"","index":10528}
{"question":"Implement a function in Python to flatten an array of arbitrarily nested arrays of integers into a flat array of integers","input":"[[1,2,[3]],4]","expected_output":"def flatten_array(my_array):\n    flattened_array=[]\n    for element in my_array:\n        if type(element) == int:\n            flattened_array.append(element)\n        else:\n            flattened_array+=flatten_array(element)\n    return flattened_array\n\nprint(flatten_array([[1,2,[3]],4]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to flatten an array of arbitrarily nested arrays of integers into a flat array of integers\n\n### Input:\n[[1,2,[3]],4]\n\n### Output:\ndef flatten_array(my_array):\n    flattened_array=[]\n    for element in my_array:\n        if type(element) == int:\n            flattened_array.append(element)\n        else:\n            flattened_array+=flatten_array(element)\n    return flattened_array\n\nprint(flatten_array([[1,2,[3]],4]))","tok_input_length":119,"tok_output_length":61,"system_prompt":"","index":2793}
{"question":"Create a Python program to tokenize a sentence and calculate the frequency of each word in the sentence.","input":"The quick brown fox jumps over the lazy dog","expected_output":"import nltk\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\n\nwords = nltk.word_tokenize(sentence)\n\nword_freq = {}\n\nfor word in words:\n if word in word_freq:\n  word_freq[word] += 1\n else:\n  word_freq[word] = 1\n\nprint(word_freq)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to tokenize a sentence and calculate the frequency of each word in the sentence.\n\n### Input:\nThe quick brown fox jumps over the lazy dog\n\n### Output:\nimport nltk\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\n\nwords = nltk.word_tokenize(sentence)\n\nword_freq = {}\n\nfor word in words:\n if word in word_freq:\n  word_freq[word] += 1\n else:\n  word_freq[word] = 1\n\nprint(word_freq)","tok_input_length":119,"tok_output_length":63,"system_prompt":"","index":10461}
{"question":"Write a python script to generate an array of random numbers between two specified values.","input":"min = 0\nmax = 50","expected_output":"import random\n\n# Generate an array of random numbers between two specified values\ndef generate_array(min, max):\n array = []\n \n for i in range(min, max):\n  array.append(random.randint(min, max))\n \n return array\n \nmin = 0\nmax = 50\nprint(generate_array(min, max))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to generate an array of random numbers between two specified values.\n\n### Input:\nmin = 0\nmax = 50\n\n### Output:\nimport random\n\n# Generate an array of random numbers between two specified values\ndef generate_array(min, max):\n array = []\n \n for i in range(min, max):\n  array.append(random.randint(min, max))\n \n return array\n \nmin = 0\nmax = 50\nprint(generate_array(min, max))","tok_input_length":119,"tok_output_length":66,"system_prompt":"","index":368}
{"question":"Create a class in Python with a constructor that initializes 3 variables and a method that prints the values of these variables.","input":"","expected_output":"class Example:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    \n    def print_values(self):\n        print(self.a, self.b, self.c)\n\nexample = Example(10, 20, 30)\nexample.print_values()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python with a constructor that initializes 3 variables and a method that prints the values of these variables.\n\n### Input:\n\n\n### Output:\nclass Example:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    \n    def print_values(self):\n        print(self.a, self.b, self.c)\n\nexample = Example(10, 20, 30)\nexample.print_values()","tok_input_length":119,"tok_output_length":68,"system_prompt":"","index":12710}
{"question":"Create a Python class that represents a person and contains attributes such as name, age, and occupation.","input":"","expected_output":"class Person:\n    def __init__(self, name, age, occupation):\n        self.name = name\n        self.age = age\n        self.occupation = occupation\n  \n    def get_info(self):\n        print(\"Name: \"+self.name)\n        print(\"Age: \"+str(self.age))\n        print(\"Occupation: \"+self.occupation)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that represents a person and contains attributes such as name, age, and occupation.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age, occupation):\n        self.name = name\n        self.age = age\n        self.occupation = occupation\n  \n    def get_info(self):\n        print(\"Name: \"+self.name)\n        print(\"Age: \"+str(self.age))\n        print(\"Occupation: \"+self.occupation)","tok_input_length":119,"tok_output_length":72,"system_prompt":"","index":5790}
{"question":"Design a program in Python to produce a list of all prime numbers up to a given number.","input":"","expected_output":"def find_all_primes(n):\n    \"\"\"Finds all prime numbers up to a given number n.\"\"\"\n    primes = []\n    for num in range(2, n+1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            primes.append(num)\n    return primes","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to produce a list of all prime numbers up to a given number.\n\n### Input:\n\n\n### Output:\ndef find_all_primes(n):\n    \"\"\"Finds all prime numbers up to a given number n.\"\"\"\n    primes = []\n    for num in range(2, n+1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            primes.append(num)\n    return primes","tok_input_length":119,"tok_output_length":73,"system_prompt":"","index":10559}
{"question":"Generate a program in Python to print all prime numbers between 1 and 50.","input":"","expected_output":"# print all prime numbers between 1 and 50\nfor num in range(1,51): \n      \n   # prime numbers are greater than 1 \n   if num > 1: \n       for i in range(2,num): \n           if (num % i) == 0: \n               break\n       else: \n           print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to print all prime numbers between 1 and 50.\n\n### Input:\n\n\n### Output:\n# print all prime numbers between 1 and 50\nfor num in range(1,51): \n      \n   # prime numbers are greater than 1 \n   if num > 1: \n       for i in range(2,num): \n           if (num % i) == 0: \n               break\n       else: \n           print(num)","tok_input_length":119,"tok_output_length":75,"system_prompt":"","index":13514}
{"question":"Write a Python program to generate algebraic equations with randomly generated coefficients.","input":"","expected_output":"import random\n\ndef generate_equation():\n  a = random.randint(-10, 10)\n  b = random.randint(-10, 10)\n  c = random.randint(-10, 10)\n\n  equation = f'{a}x^2 + {b}x + {c} = 0'\n  return equation\n\nresult = generate_equation()\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate algebraic equations with randomly generated coefficients.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_equation():\n  a = random.randint(-10, 10)\n  b = random.randint(-10, 10)\n  c = random.randint(-10, 10)\n\n  equation = f'{a}x^2 + {b}x + {c} = 0'\n  return equation\n\nresult = generate_equation()\nprint(result)","tok_input_length":119,"tok_output_length":78,"system_prompt":"","index":17476}
{"question":"Optimize the following Python code by replacing the two for loops with one.","input":"list1 = [1,2,3]\nlist2 = [4,5,6]\nfor i in list1:\n  for j in list2:\n    print(i * j)","expected_output":"list1 = [1,2,3]\nlist2 = [4,5,6]\n \nfor i,j in zip(list1, list2):\n    print(i * j)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code by replacing the two for loops with one.\n\n### Input:\nlist1 = [1,2,3]\nlist2 = [4,5,6]\nfor i in list1:\n  for j in list2:\n    print(i * j)\n\n### Output:\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n \nfor i,j in zip(list1, list2):\n    print(i * j)","tok_input_length":120,"tok_output_length":39,"system_prompt":"","index":3005}
{"question":"Write a Python program to generate a random password of length 8 with the following requirements:","input":"The password must include the following \u2013 at least one lowercase letter, one uppercase letter, one numeric digit, one special character","expected_output":"import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random password of length 8 with the following requirements:\n\n### Input:\nThe password must include the following \u2013 at least one lowercase letter, one uppercase letter, one numeric digit, one special character\n\n### Output:\nimport string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password","tok_input_length":120,"tok_output_length":50,"system_prompt":"","index":14537}
{"question":"Create a utility in Python to generate a PDF of a webpage. The utility should accept a URL as input and generate a PDF of the webpage in the same directory.","input":"https:\/\/www.example.com","expected_output":"import pdfkit\n\ndef generate_pdf(url):\n filename = url.rsplit('\/', 1)[-1] + '.pdf'\n pdfkit.from_url(url, filename)\n\nif __name__ == '__main__':\n url = input('Enter a URL: ')\n generate_pdf(url)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a utility in Python to generate a PDF of a webpage. The utility should accept a URL as input and generate a PDF of the webpage in the same directory.\n\n### Input:\nhttps:\/\/www.example.com\n\n### Output:\nimport pdfkit\n\ndef generate_pdf(url):\n filename = url.rsplit('\/', 1)[-1] + '.pdf'\n pdfkit.from_url(url, filename)\n\nif __name__ == '__main__':\n url = input('Enter a URL: ')\n generate_pdf(url)","tok_input_length":120,"tok_output_length":54,"system_prompt":"","index":9928}
{"question":"Write a code to remove a specific value from a list in Python.","input":"mylist = [10, 20, 30, 40, 10]\nvalue = 10","expected_output":"mylist = [10, 20, 30, 40, 10]\nvalue_to_remove = 10\n\n# new list after value is removed\nnew_list = [item for item in mylist if item != value_to_remove] \n\nprint(new_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to remove a specific value from a list in Python.\n\n### Input:\nmylist = [10, 20, 30, 40, 10]\nvalue = 10\n\n### Output:\nmylist = [10, 20, 30, 40, 10]\nvalue_to_remove = 10\n\n# new list after value is removed\nnew_list = [item for item in mylist if item != value_to_remove] \n\nprint(new_list)","tok_input_length":120,"tok_output_length":56,"system_prompt":"","index":5929}
{"question":"Build a Python program to sort a list of strings by the length of the string in descending order.","input":"[\"cat\", \"dog\", \"elephant\", \"tiger\"]","expected_output":"def sort_list(list):\n    return sorted(list, key=lambda x: len(x), reverse=True)\n\nlist = [\"cat\", \"dog\", \"elephant\", \"tiger\"]\nprint(sort_list(list))\n\n# Output: [\"elephant\", \"tiger\", \"dog\", \"cat\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to sort a list of strings by the length of the string in descending order.\n\n### Input:\n[\"cat\", \"dog\", \"elephant\", \"tiger\"]\n\n### Output:\ndef sort_list(list):\n    return sorted(list, key=lambda x: len(x), reverse=True)\n\nlist = [\"cat\", \"dog\", \"elephant\", \"tiger\"]\nprint(sort_list(list))\n\n# Output: [\"elephant\", \"tiger\", \"dog\", \"cat\"]","tok_input_length":120,"tok_output_length":59,"system_prompt":"","index":3714}
{"question":"Create a Python program to compute the sum of all elements in a given array.","input":"array = [1, 2, 3, 4, 5]","expected_output":"def compute_sum(array):\n    sum = 0\n    for element in array:\n        sum += element\n    return sum\n    \nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(compute_sum(array))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compute the sum of all elements in a given array.\n\n### Input:\narray = [1, 2, 3, 4, 5]\n\n### Output:\ndef compute_sum(array):\n    sum = 0\n    for element in array:\n        sum += element\n    return sum\n    \nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(compute_sum(array))","tok_input_length":120,"tok_output_length":60,"system_prompt":"","index":17877}
{"question":"Create a Python script which inputs a sentence and performs POS tagging and letter count for the text using NLTK library.","input":"This is an example sentence.","expected_output":"import nltk\n\nsentence = 'This is an example sentence.'\nwords = nltk.word_tokenize(sentence)\ntagged_words = nltk.pos_tag(words)\n\nletter_count = 0\nfor word in words:\n letter_count += len(word)\n\nprint('POS Tags: ', tagged_words)\nprint('Letter Count: ', letter_count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script which inputs a sentence and performs POS tagging and letter count for the text using NLTK library.\n\n### Input:\nThis is an example sentence.\n\n### Output:\nimport nltk\n\nsentence = 'This is an example sentence.'\nwords = nltk.word_tokenize(sentence)\ntagged_words = nltk.pos_tag(words)\n\nletter_count = 0\nfor word in words:\n letter_count += len(word)\n\nprint('POS Tags: ', tagged_words)\nprint('Letter Count: ', letter_count)","tok_input_length":120,"tok_output_length":64,"system_prompt":"","index":8387}
{"question":"Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.","input":"","expected_output":"from datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.\n\n### Input:\n\n\n### Output:\nfrom datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00","tok_input_length":120,"tok_output_length":67,"system_prompt":"","index":57}
{"question":"Build a web-service using the Flask python library that returns a \"Hello, world!\" message when accessed through a browser.","input":"","expected_output":"#Import the Flask library\nfrom flask import flask\n\n# Initialize the Flask app\napp = Flask(__name__)\n\n#Define the hello function\n@app.route('\/')\ndef hello():\n    return \"Hello, world!\"\n\n# Have the Flask app listen on port 500\nif __name__ == '__main__':\n    app.run(port=500)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web-service using the Flask python library that returns a \"Hello, world!\" message when accessed through a browser.\n\n### Input:\n\n\n### Output:\n#Import the Flask library\nfrom flask import flask\n\n# Initialize the Flask app\napp = Flask(__name__)\n\n#Define the hello function\n@app.route('\/')\ndef hello():\n    return \"Hello, world!\"\n\n# Have the Flask app listen on port 500\nif __name__ == '__main__':\n    app.run(port=500)","tok_input_length":120,"tok_output_length":69,"system_prompt":"","index":15309}
{"question":"Design a Python program that counts the number of words in a sentence.","input":"This is a sentence with seven words.","expected_output":"def countWords(sentence): \n \n    # split the sentence into words \n    words = sentence.split() \n    wordCount = len(words) \n   \n    return wordCount \n  \n# Driver code \nsentence = \"This is a sentence with seven words.\"\nwordCount = countWords(sentence) \nprint(\"Number of words in the sentence =\", wordCount)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that counts the number of words in a sentence.\n\n### Input:\nThis is a sentence with seven words.\n\n### Output:\ndef countWords(sentence): \n \n    # split the sentence into words \n    words = sentence.split() \n    wordCount = len(words) \n   \n    return wordCount \n  \n# Driver code \nsentence = \"This is a sentence with seven words.\"\nwordCount = countWords(sentence) \nprint(\"Number of words in the sentence =\", wordCount)","tok_input_length":120,"tok_output_length":71,"system_prompt":"","index":16943}
{"question":"Implement a Python Script that prints out all the prime numbers between 0 and a given number.","input":"","expected_output":"def find_primes(number):\n    for num in range(1, number + 1):\n       # prime numbers are greater than 1\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)\n\nfind_primes(20)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python Script that prints out all the prime numbers between 0 and a given number.\n\n### Input:\n\n\n### Output:\ndef find_primes(number):\n    for num in range(1, number + 1):\n       # prime numbers are greater than 1\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)\n\nfind_primes(20)","tok_input_length":120,"tok_output_length":74,"system_prompt":"","index":6668}
{"question":"Write an algorithm in Python to calculate the nth prime number.","input":"Not applicable","expected_output":"def nth_prime(n):\n primes = [2]\n\nnum = 3\nwhile len(primes) < n:\n isPrime = True\n for prime in primes:\n if num % prime == 0:\n isPrime = False\n break\n if isPrime:\n primes.append(num)\n num += 2\n\nreturn primes[n-1]\n\n#Example\nprint(nth_prime(100))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to calculate the nth prime number.\n\n### Input:\nNot applicable\n\n### Output:\ndef nth_prime(n):\n primes = [2]\n\nnum = 3\nwhile len(primes) < n:\n isPrime = True\n for prime in primes:\n if num % prime == 0:\n isPrime = False\n break\n if isPrime:\n primes.append(num)\n num += 2\n\nreturn primes[n-1]\n\n#Example\nprint(nth_prime(100))","tok_input_length":120,"tok_output_length":78,"system_prompt":"","index":11036}
{"question":"Generate a Python class to construct a linked list.","input":"","expected_output":"class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n\ndef append(self, new_data):\n new_node = Node(new_data)\n if self.head == None:\n self.head = new_node\n return\n last = self.head\n while last.next:\n last = last.next\n last.next = new_node","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to construct a linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n\ndef append(self, new_data):\n new_node = Node(new_data)\n if self.head == None:\n self.head = new_node\n return\n last = self.head\n while last.next:\n last = last.next\n last.next = new_node","tok_input_length":120,"tok_output_length":83,"system_prompt":"","index":12531}
{"question":"Given an array of strings, you need to write a Python program to move the elements that contain a certain letter to the end of the array.","input":"strings = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\"]\nletter = \"m\"","expected_output":"def move_letter(strings, letter):\n new_list = []\n for s in strings:\n  if letter not in s:\n   new_list.append(s)\n  else:\n   new_list.append(s)\n return new_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of strings, you need to write a Python program to move the elements that contain a certain letter to the end of the array.\n\n### Input:\nstrings = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\"]\nletter = \"m\"\n\n### Output:\ndef move_letter(strings, letter):\n new_list = []\n for s in strings:\n  if letter not in s:\n   new_list.append(s)\n  else:\n   new_list.append(s)\n return new_list","tok_input_length":121,"tok_output_length":42,"system_prompt":"","index":5950}
{"question":"Write a Python program to sort a list of tuples using a lambda expression","input":"tuple_list = [(1, 3), (2, 2), (3, 1), (2, 3)]","expected_output":"sorted_list = sorted(tuple_list, key=lambda x: (x[1], x[0]))\nprint(sorted_list)\n\n# Output: [(3, 1), (2, 2), (1, 3), (2, 3)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of tuples using a lambda expression\n\n### Input:\ntuple_list = [(1, 3), (2, 2), (3, 1), (2, 3)]\n\n### Output:\nsorted_list = sorted(tuple_list, key=lambda x: (x[1], x[0]))\nprint(sorted_list)\n\n# Output: [(3, 1), (2, 2), (1, 3), (2, 3)]","tok_input_length":121,"tok_output_length":52,"system_prompt":"","index":17748}
{"question":"Create a Python function that takes two numbers, n and m, and prints out the first n odd numbers between 0 and m (both inclusive).","input":"n = 3, m = 10","expected_output":"def printOddNumbers(n, m):\n    nums = []\n    for i in range(m):\n        if i%2 != 0 and len(nums) < n:\n            nums.append(i)\n    return nums\n\nprint(printOddNumbers(3, 10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes two numbers, n and m, and prints out the first n odd numbers between 0 and m (both inclusive).\n\n### Input:\nn = 3, m = 10\n\n### Output:\ndef printOddNumbers(n, m):\n    nums = []\n    for i in range(m):\n        if i%2 != 0 and len(nums) < n:\n            nums.append(i)\n    return nums\n\nprint(printOddNumbers(3, 10))","tok_input_length":121,"tok_output_length":54,"system_prompt":"","index":15613}
{"question":"Create a Python program to search for an item in a list and return its index.","input":"[2, 3, 5, 7, 11], target = 5","expected_output":"def linear_search(list, target):\n  for index, item in enumerate(list):\n    if target == item:\n      return index\n    return -1\n\nresult = linear_search([2, 3, 5, 7, 11], 5)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search for an item in a list and return its index.\n\n### Input:\n[2, 3, 5, 7, 11], target = 5\n\n### Output:\ndef linear_search(list, target):\n  for index, item in enumerate(list):\n    if target == item:\n      return index\n    return -1\n\nresult = linear_search([2, 3, 5, 7, 11], 5)\nprint(result)","tok_input_length":121,"tok_output_length":57,"system_prompt":"","index":6047}
{"question":"You are given a data set. Compute the mean of the data set using Python.","input":"[1, 2, 5, 10, 20, 50]","expected_output":"def compute_mean(data):\n    total = 0\n    for num in data:\n        total += num\n    return total\/len(data)\n\ndata = [1, 2, 5, 10, 20, 50]\n\nresult = compute_mean(data)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given a data set. Compute the mean of the data set using Python.\n\n### Input:\n[1, 2, 5, 10, 20, 50]\n\n### Output:\ndef compute_mean(data):\n    total = 0\n    for num in data:\n        total += num\n    return total\/len(data)\n\ndata = [1, 2, 5, 10, 20, 50]\n\nresult = compute_mean(data)\nprint(result)","tok_input_length":121,"tok_output_length":59,"system_prompt":"","index":14680}
{"question":"Design a function in Python to classify all the numbers in a list as even or odd.","input":"my_list = [1,2,3,4,5]","expected_output":"def classify_odd_even(nums):\n    output = []\n    for n in nums:\n        if n%2 == 0:\n            output.append('even')\n        else:\n            output.append('odd')\n    return output\n\nif __name__ == '__main__':\n    print(classify_odd_even(my_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to classify all the numbers in a list as even or odd.\n\n### Input:\nmy_list = [1,2,3,4,5]\n\n### Output:\ndef classify_odd_even(nums):\n    output = []\n    for n in nums:\n        if n%2 == 0:\n            output.append('even')\n        else:\n            output.append('odd')\n    return output\n\nif __name__ == '__main__':\n    print(classify_odd_even(my_list))","tok_input_length":121,"tok_output_length":62,"system_prompt":"","index":12887}
{"question":"Write a python code to calculate the sum of numbers in a list except for the last element.","input":"[1,2,3,4,5]","expected_output":"def sum_except_last(arr):\n    total = 0\n    for i in range(len(arr) - 1):\n        total += arr[i]\n    return total\n\nif __name__ == '__main__':\n    output = sum_except_last([1,2,3,4,5])\n    print(output)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to calculate the sum of numbers in a list except for the last element.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef sum_except_last(arr):\n    total = 0\n    for i in range(len(arr) - 1):\n        total += arr[i]\n    return total\n\nif __name__ == '__main__':\n    output = sum_except_last([1,2,3,4,5])\n    print(output)","tok_input_length":121,"tok_output_length":64,"system_prompt":"","index":5887}
{"question":"Create a sentiment classifier using a linear regression algorithm in Python.","input":"Sentences:\n1. I love this movie \n2. I hate this movie","expected_output":"import numpy as np\n\nX = np.array([[1, 0], [0, 1]])\ny = np.array([1, 0])\n\nfrom sklearn.linear_model import LinearRegression \n\nmodel = LinearRegression().fit(X, y) \n  \npredictions = model.predict(X) \n  \nprint(\"Sentiment:\", predictions)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sentiment classifier using a linear regression algorithm in Python.\n\n### Input:\nSentences:\n1. I love this movie \n2. I hate this movie\n\n### Output:\nimport numpy as np\n\nX = np.array([[1, 0], [0, 1]])\ny = np.array([1, 0])\n\nfrom sklearn.linear_model import LinearRegression \n\nmodel = LinearRegression().fit(X, y) \n  \npredictions = model.predict(X) \n  \nprint(\"Sentiment:\", predictions)","tok_input_length":121,"tok_output_length":65,"system_prompt":"","index":16956}
{"question":"Generate an optimised Python program to calculate the greatest common divisor (GCD) of two positive integers.","input":"Not applicable","expected_output":"def gcd(x, y): \n    if x == 0: \n        return y \n    return gcd(y % x, x) \n  \n# Driver code \na = 8\nb = 4\nprint(\"GCD of {0} and {1} is {2}\".format(a, b, gcd(a, b)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an optimised Python program to calculate the greatest common divisor (GCD) of two positive integers.\n\n### Input:\nNot applicable\n\n### Output:\ndef gcd(x, y): \n    if x == 0: \n        return y \n    return gcd(y % x, x) \n  \n# Driver code \na = 8\nb = 4\nprint(\"GCD of {0} and {1} is {2}\".format(a, b, gcd(a, b)))","tok_input_length":121,"tok_output_length":70,"system_prompt":"","index":2808}
{"question":"Create a Python program that takes a string and indicates whether it is a palindrome or not.","input":"\"racecar\"","expected_output":"def is_palindrome(s):\n  s = s.lower()\n  left = 0\n  right = len(s) - 1\n  \n  while left < right:\n    if s[left] != s[right]:\n      return False\n    left += 1\n    right -= 1\n  return True\n  \nprint(is_palindrome(\"racecar\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a string and indicates whether it is a palindrome or not.\n\n### Input:\n\"racecar\"\n\n### Output:\ndef is_palindrome(s):\n  s = s.lower()\n  left = 0\n  right = len(s) - 1\n  \n  while left < right:\n    if s[left] != s[right]:\n      return False\n    left += 1\n    right -= 1\n  return True\n  \nprint(is_palindrome(\"racecar\"))","tok_input_length":121,"tok_output_length":72,"system_prompt":"","index":461}
{"question":"Design a Simple Calculator class in Python that contains methods for addition, subtraction, multiplication and division.","input":"","expected_output":"class Calculator:\n    def __init__(self):\n        # initialization code\n    \n    def add(self, x, y):\n        return x + y\n    \n    def subtract(self, x, y):\n        return x - y\n    \n    def multiply(self, x, y):\n        return x * y\n    \n    def divide(self, x, y):\n        return x \/ y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Simple Calculator class in Python that contains methods for addition, subtraction, multiplication and division.\n\n### Input:\n\n\n### Output:\nclass Calculator:\n    def __init__(self):\n        # initialization code\n    \n    def add(self, x, y):\n        return x + y\n    \n    def subtract(self, x, y):\n        return x - y\n    \n    def multiply(self, x, y):\n        return x * y\n    \n    def divide(self, x, y):\n        return x \/ y","tok_input_length":121,"tok_output_length":75,"system_prompt":"","index":2759}
{"question":"Develop a Python program that counts the number of times each word appears in a given sentence.","input":"","expected_output":"sentence = input('Enter a sentence: ') \nwords = sentence.split()\nword_freq = {} \n  \nfor word in words: \n    if word in word_freq: \n        word_freq[word] += 1\n    else: \n        word_freq[word] = 1\n  \nfor key, value in word_freq.items(): \n    print (key,\":\", value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that counts the number of times each word appears in a given sentence.\n\n### Input:\n\n\n### Output:\nsentence = input('Enter a sentence: ') \nwords = sentence.split()\nword_freq = {} \n  \nfor word in words: \n    if word in word_freq: \n        word_freq[word] += 1\n    else: \n        word_freq[word] = 1\n  \nfor key, value in word_freq.items(): \n    print (key,\":\", value)","tok_input_length":121,"tok_output_length":76,"system_prompt":"","index":15301}
{"question":"Create a Python program that can print out a sentence in reverse using recursion.","input":"","expected_output":"def reverse_sentence(sentence): \n  \n    # base condition for recursion\n    if len(sentence) == 0: \n        return \"\" \n  \n    # calling reverse_sentence recursively\n    return reverse_sentence(sentence[1:]) + sentence[0] \n  \n# driver code \nsentence = \"Geeks For Geeks\"\nprint(reverse_sentence(sentence)) \n\n# Output: skeeG roF skeeG","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that can print out a sentence in reverse using recursion.\n\n### Input:\n\n\n### Output:\ndef reverse_sentence(sentence): \n  \n    # base condition for recursion\n    if len(sentence) == 0: \n        return \"\" \n  \n    # calling reverse_sentence recursively\n    return reverse_sentence(sentence[1:]) + sentence[0] \n  \n# driver code \nsentence = \"Geeks For Geeks\"\nprint(reverse_sentence(sentence)) \n\n# Output: skeeG roF skeeG","tok_input_length":121,"tok_output_length":79,"system_prompt":"","index":8570}
{"question":"Design a recursive function to generate Fibonacci numbers using Python.","input":"","expected_output":"def Fibonacci_Generator(n): \n    if n<0: \n        print(\"Incorrect input\") \n  \n    # First and Second Fibonacci numbers are 0 and 1 respectively \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci_Generator(n-1)+Fibonacci_Generator(n-2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a recursive function to generate Fibonacci numbers using Python.\n\n### Input:\n\n\n### Output:\ndef Fibonacci_Generator(n): \n    if n<0: \n        print(\"Incorrect input\") \n  \n    # First and Second Fibonacci numbers are 0 and 1 respectively \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci_Generator(n-1)+Fibonacci_Generator(n-2)","tok_input_length":121,"tok_output_length":83,"system_prompt":"","index":12109}
{"question":"Write a Python program to calculate the total cost of a customer's online orders.","input":"orders = [\n {'item': 'Pizza', 'price': 12.00}, \n {'item': 'Chips', 'price': 3.50}, \n {'item': 'Coke', 'price': 2.50}\n]","expected_output":"total_cost = 0\nfor order in orders: \n total_cost += order['price']\n\nprint('Total cost is', total_cost)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total cost of a customer's online orders.\n\n### Input:\norders = [\n {'item': 'Pizza', 'price': 12.00}, \n {'item': 'Chips', 'price': 3.50}, \n {'item': 'Coke', 'price': 2.50}\n]\n\n### Output:\ntotal_cost = 0\nfor order in orders: \n total_cost += order['price']\n\nprint('Total cost is', total_cost)","tok_input_length":122,"tok_output_length":29,"system_prompt":"","index":1542}
{"question":"Optimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.","input":"def factorial(n):\n if n < 1:\n  return 1\n else:\n  return n*factorial(n-1)","expected_output":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.\n\n### Input:\ndef factorial(n):\n if n < 1:\n  return 1\n else:\n  return n*factorial(n-1)\n\n### Output:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result","tok_input_length":122,"tok_output_length":46,"system_prompt":"","index":1139}
{"question":"Write a Python program to print the key of the element in a dictionary that has the maximum value.","input":"{'a': 3, 'b': 6, 'c': 9, 'd': 12}","expected_output":"dictionary = {'a': 3, 'b': 6, 'c': 9, 'd': 12}\n\nmax_value = max(dictionary.values())\nfor key, value in dictionary.items():\n if value == max_value:\n print(key)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the key of the element in a dictionary that has the maximum value.\n\n### Input:\n{'a': 3, 'b': 6, 'c': 9, 'd': 12}\n\n### Output:\ndictionary = {'a': 3, 'b': 6, 'c': 9, 'd': 12}\n\nmax_value = max(dictionary.values())\nfor key, value in dictionary.items():\n if value == max_value:\n print(key)","tok_input_length":122,"tok_output_length":51,"system_prompt":"","index":14496}
{"question":"Generate a list of the top 10 common words in a given list of words.","input":"['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']","expected_output":"from collections import Counter\n\nwords = ['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']\n\nword_counts = Counter(words)\ntop_10 = word_counts.most_common(10)\nprint (top_10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of the top 10 common words in a given list of words.\n\n### Input:\n['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']\n\n### Output:\nfrom collections import Counter\n\nwords = ['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']\n\nword_counts = Counter(words)\ntop_10 = word_counts.most_common(10)\nprint (top_10)","tok_input_length":122,"tok_output_length":55,"system_prompt":"","index":1151}
{"question":"Optimize the following python program and reduce its runtime.","input":"def find_min(lst):\n    return min(lst)\n\nlist = [2, 3, 8, 4, 5]","expected_output":"def find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following python program and reduce its runtime.\n\n### Input:\ndef find_min(lst):\n    return min(lst)\n\nlist = [2, 3, 8, 4, 5]\n\n### Output:\ndef find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5]","tok_input_length":122,"tok_output_length":57,"system_prompt":"","index":15227}
{"question":"Remove the duplicates from a given array using Python","input":"data = [1, 3, 3, 4, 5, 6, 6, 7]","expected_output":"def remove_duplicates(data):\n    result = []\n    for element in data:\n        if element not in result:\n            result.append(element)\n    return result\n\nprint(remove_duplicates([1, 3, 3, 4, 5, 6, 6, 7]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRemove the duplicates from a given array using Python\n\n### Input:\ndata = [1, 3, 3, 4, 5, 6, 6, 7]\n\n### Output:\ndef remove_duplicates(data):\n    result = []\n    for element in data:\n        if element not in result:\n            result.append(element)\n    return result\n\nprint(remove_duplicates([1, 3, 3, 4, 5, 6, 6, 7]))","tok_input_length":122,"tok_output_length":59,"system_prompt":"","index":16810}
{"question":"Write a function in Python that will take a string as input, reverse the order of the words, and return the new string.","input":"string = \"Hello World\"","expected_output":"def reverseString(string):\n  words = string.split(' ')\n  reversedString = []\n  for i in range(len(words)-1, -1, -1):\n    reversedString.append(words[i])\n  return ' '.join(reversedString)\n  \nprint(reverseString(\"Hello World\")) # Output: World Hello","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that will take a string as input, reverse the order of the words, and return the new string.\n\n### Input:\nstring = \"Hello World\"\n\n### Output:\ndef reverseString(string):\n  words = string.split(' ')\n  reversedString = []\n  for i in range(len(words)-1, -1, -1):\n    reversedString.append(words[i])\n  return ' '.join(reversedString)\n  \nprint(reverseString(\"Hello World\")) # Output: World Hello","tok_input_length":122,"tok_output_length":63,"system_prompt":"","index":17278}
{"question":"Design a text editor in Python that prints \u2018Corrected\u2019 if a correct sentence is entered, and \u2018Incorrect\u2019 if an incorrect sentence is entered","input":"","expected_output":"def text_editor():\n  sentence = input(\"Enter the sentence: \")\n  is_correct = check_correctness(sentence)\n  \n  if is_correct:\n    print(\"Corrected\")\n  else:\n    print(\"Incorrect\")\n\ndef check_correctness(sentence):\n  # code to check the correctness of the sentence\n\n  return is_correct","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a text editor in Python that prints \u2018Corrected\u2019 if a correct sentence is entered, and \u2018Incorrect\u2019 if an incorrect sentence is entered\n\n### Input:\n\n\n### Output:\ndef text_editor():\n  sentence = input(\"Enter the sentence: \")\n  is_correct = check_correctness(sentence)\n  \n  if is_correct:\n    print(\"Corrected\")\n  else:\n    print(\"Incorrect\")\n\ndef check_correctness(sentence):\n  # code to check the correctness of the sentence\n\n  return is_correct","tok_input_length":122,"tok_output_length":65,"system_prompt":"","index":16570}
{"question":"Create a Python program that takes two numbers from user and generates a list of all numbers in between them.","input":"2, 6","expected_output":"def generateList(start, end):\n    res = []\n    for num in range(start, end+1):\n        res.append(num)\n    return res\n\nstart = 2\nend = 6\nprint(generateList(start, end))  # Output: [2, 3, 4, 5, 6]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two numbers from user and generates a list of all numbers in between them.\n\n### Input:\n2, 6\n\n### Output:\ndef generateList(start, end):\n    res = []\n    for num in range(start, end+1):\n        res.append(num)\n    return res\n\nstart = 2\nend = 6\nprint(generateList(start, end))  # Output: [2, 3, 4, 5, 6]","tok_input_length":122,"tok_output_length":69,"system_prompt":"","index":4701}
{"question":"Write a python program to submit the following operation","input":"Calculate the maximum sum of a contiguous subarray in the given array.","expected_output":"def max_contiguous_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to submit the following operation\n\n### Input:\nCalculate the maximum sum of a contiguous subarray in the given array.\n\n### Output:\ndef max_contiguous_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum","tok_input_length":122,"tok_output_length":71,"system_prompt":"","index":18284}
{"question":"Generate a graphical representation of a function using Python.","input":"f(x) = 2x + 3","expected_output":"import matplotlib.pyplot as plt\n\nx = range(-10, 11)\ny = [2 * x_coord + 3 for x_coord in x]\nplt.plot(x, y)\nplt.title('Graph of the function: f(x) = 2x + 3')\nplt.xlabel('x')\nplt.ylabel('2x + 3')\n\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a graphical representation of a function using Python.\n\n### Input:\nf(x) = 2x + 3\n\n### Output:\nimport matplotlib.pyplot as plt\n\nx = range(-10, 11)\ny = [2 * x_coord + 3 for x_coord in x]\nplt.plot(x, y)\nplt.title('Graph of the function: f(x) = 2x + 3')\nplt.xlabel('x')\nplt.ylabel('2x + 3')\n\nplt.show()","tok_input_length":122,"tok_output_length":74,"system_prompt":"","index":4723}
{"question":"Generate a Python implementation of an algorithm that traverses a binary tree and clears all of its nodes.","input":"","expected_output":"# A recursive function to clear a binary tree \ndef clearBinaryTree(root): \n\t\n\t# Base case \n\tif root is None: \n\t\treturn\n\n\t# First clear the left nodes \n\tclearBinaryTree(root.left) \n\t\n\t# Then clear the right nodes \n\tclearBinaryTree(root.right) \n\t\n\t# Clear the data of this node \n\troot.data = None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python implementation of an algorithm that traverses a binary tree and clears all of its nodes.\n\n### Input:\n\n\n### Output:\n# A recursive function to clear a binary tree \ndef clearBinaryTree(root): \n\t\n\t# Base case \n\tif root is None: \n\t\treturn\n\n\t# First clear the left nodes \n\tclearBinaryTree(root.left) \n\t\n\t# Then clear the right nodes \n\tclearBinaryTree(root.right) \n\t\n\t# Clear the data of this node \n\troot.data = None","tok_input_length":122,"tok_output_length":75,"system_prompt":"","index":3447}
{"question":"Find a Python library to create a connection to a MongoDB database and import the data.","input":"","expected_output":"# Import the necessary library\nimport pymongo\n\n# Establish a connection to the MongoDB database\nclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\n\n# Import the data into the database\ndb = client.myDatabase\nrecords = db.myCollection\nwith open('data.json', 'r') as f:\n    data = json.load(f)\n    records.insert_many(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind a Python library to create a connection to a MongoDB database and import the data.\n\n### Input:\n\n\n### Output:\n# Import the necessary library\nimport pymongo\n\n# Establish a connection to the MongoDB database\nclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\n\n# Import the data into the database\ndb = client.myDatabase\nrecords = db.myCollection\nwith open('data.json', 'r') as f:\n    data = json.load(f)\n    records.insert_many(data)","tok_input_length":122,"tok_output_length":78,"system_prompt":"","index":4555}
{"question":"Create a basic HTTP endpoint in Python that returns multiple parameters as a dictionary.","input":"","expected_output":"@app.route('\/multiple_params', methods=['GET'])\ndef multiple_params(): \n    name = request.args.get('name') \n    age = request.args.get('age') \n    city = request.args.get('city') \n    response = { \n        'name': name, \n        'age' : age, \n        'city': city \n    } \n    return jsonify(response)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic HTTP endpoint in Python that returns multiple parameters as a dictionary.\n\n### Input:\n\n\n### Output:\n@app.route('\/multiple_params', methods=['GET'])\ndef multiple_params(): \n    name = request.args.get('name') \n    age = request.args.get('age') \n    city = request.args.get('city') \n    response = { \n        'name': name, \n        'age' : age, \n        'city': city \n    } \n    return jsonify(response)","tok_input_length":122,"tok_output_length":80,"system_prompt":"","index":7563}
{"question":"Construct a function to compute the area of a triangle in Python","input":"","expected_output":"def area_of_triangle(base, height):\n    \"\"\"Compute the area of a triangle in Python\n    \n    Parameters\n    --------------\n    base: float\n        The length of the triangle's base\n    height: float\n        The measure of the triangle's height\n\n    Returns\n    --------------\n    float\n        The area of the triangle\n    \"\"\"\n    return 0.5 * base * height","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function to compute the area of a triangle in Python\n\n### Input:\n\n\n### Output:\ndef area_of_triangle(base, height):\n    \"\"\"Compute the area of a triangle in Python\n    \n    Parameters\n    --------------\n    base: float\n        The length of the triangle's base\n    height: float\n        The measure of the triangle's height\n\n    Returns\n    --------------\n    float\n        The area of the triangle\n    \"\"\"\n    return 0.5 * base * height","tok_input_length":122,"tok_output_length":82,"system_prompt":"","index":3782}
{"question":"Create a WebSocket server in Python.","input":"Not applicable","expected_output":"import asyncio\nimport websockets\n\nasync def hello(websocket, path):\n greeting = await websocket.recv()\n print(f\"< {greeting}\")\n\nasync def hello_server():\n server = await websockets.serve(hello, '127.0.0.1', 8765)\n await server.wait_closed()\n\nasyncio.get_event_loop().run_until_complete(hello_server())\nasyncio.get_event_loop().run_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a WebSocket server in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport asyncio\nimport websockets\n\nasync def hello(websocket, path):\n greeting = await websocket.recv()\n print(f\"< {greeting}\")\n\nasync def hello_server():\n server = await websockets.serve(hello, '127.0.0.1', 8765)\n await server.wait_closed()\n\nasyncio.get_event_loop().run_until_complete(hello_server())\nasyncio.get_event_loop().run_forever()","tok_input_length":122,"tok_output_length":85,"system_prompt":"","index":18002}
{"question":"Create a Python function that takes two lists and returns a list of all elements in common between them.","input":"list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8]","expected_output":"def find_common_elements(list1, list2):\n  common_elements = []\n  for i in list1: \n    if i in list2: \n        common_elements.append(i) \n  return common_elements","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes two lists and returns a list of all elements in common between them.\n\n### Input:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8]\n\n### Output:\ndef find_common_elements(list1, list2):\n  common_elements = []\n  for i in list1: \n    if i in list2: \n        common_elements.append(i) \n  return common_elements","tok_input_length":123,"tok_output_length":43,"system_prompt":"","index":8106}
{"question":"Optimize this code snippet in Python.","input":"data = [1, 2, 3, 4, 5, 6]\nsum = 0\n\nfor num in data:\n    sum = sum + num","expected_output":"data = [1, 2, 3, 4, 5, 6]\nsum = 0\n\nsum = sum + sum(data) # This is more efficient than iterating through the whole list with a `for` loop.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this code snippet in Python.\n\n### Input:\ndata = [1, 2, 3, 4, 5, 6]\nsum = 0\n\nfor num in data:\n    sum = sum + num\n\n### Output:\ndata = [1, 2, 3, 4, 5, 6]\nsum = 0\n\nsum = sum + sum(data) # This is more efficient than iterating through the whole list with a `for` loop.","tok_input_length":123,"tok_output_length":51,"system_prompt":"","index":3594}
{"question":"Write a Python program for generating random passwords. The program should allow the user to specify a length and should contain a mix of upper and lowercase letters, numbers, and symbols.","input":"length: 6","expected_output":"import string\nimport random\n\ndef generate_random_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.sample(characters, length))\n\npassword_length = 6\npassword = generate_random_password(password_length)\nprint(password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for generating random passwords. The program should allow the user to specify a length and should contain a mix of upper and lowercase letters, numbers, and symbols.\n\n### Input:\nlength: 6\n\n### Output:\nimport string\nimport random\n\ndef generate_random_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.sample(characters, length))\n\npassword_length = 6\npassword = generate_random_password(password_length)\nprint(password)","tok_input_length":123,"tok_output_length":56,"system_prompt":"","index":2548}
{"question":"Create an Python program that takes a list of words as input and prints out the longest word.","input":"words = [\"cat\", \"dog\", \"elephant\", \"rhinoceros\"]","expected_output":"words = [\"cat\", \"dog\", \"elephant\", \"rhinoceros\"]\n\ndef longest_word(words):\n longest_word = \"\"\n \n for word in words:\n if len(longest_word) < len(word):\n longest_word = word\n\n print(longest_word)\n\nlongest_word(words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an Python program that takes a list of words as input and prints out the longest word.\n\n### Input:\nwords = [\"cat\", \"dog\", \"elephant\", \"rhinoceros\"]\n\n### Output:\nwords = [\"cat\", \"dog\", \"elephant\", \"rhinoceros\"]\n\ndef longest_word(words):\n longest_word = \"\"\n \n for word in words:\n if len(longest_word) < len(word):\n longest_word = word\n\n print(longest_word)\n\nlongest_word(words)","tok_input_length":123,"tok_output_length":59,"system_prompt":"","index":12433}
{"question":"Write a Python 3 script that reads input from stdin line by line and prints the number of occurrences of each word.","input":"The quick brown fox jumps over the lazy dog","expected_output":"import sys\n\ndictionary={}\n\nfor line in sys.stdin:\n words_in_line = line.split()\n for word in words_in_line:\n word=word.lower()\n if word in dictionary:\n dictionary[word]+=1\n else:\n dictionary[word]=1\n\nfor word in dictionary:\n print(word +\":\"+ str(dictionary[word]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python 3 script that reads input from stdin line by line and prints the number of occurrences of each word.\n\n### Input:\nThe quick brown fox jumps over the lazy dog\n\n### Output:\nimport sys\n\ndictionary={}\n\nfor line in sys.stdin:\n words_in_line = line.split()\n for word in words_in_line:\n word=word.lower()\n if word in dictionary:\n dictionary[word]+=1\n else:\n dictionary[word]=1\n\nfor word in dictionary:\n print(word +\":\"+ str(dictionary[word]))","tok_input_length":123,"tok_output_length":62,"system_prompt":"","index":2574}
{"question":"Program a Python function to calculate the average of a list of integers.","input":"[1, 3, 5, 3, 7, 1]","expected_output":"def avg_list(lst): \n  sum_lst = 0\n  for i in range(len(lst)): \n    sum_lst = sum_lst + lst[i] \n  return sum_lst\/len(lst) \n  \nprint(avg_list([1, 3, 5, 3, 7, 1]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a Python function to calculate the average of a list of integers.\n\n### Input:\n[1, 3, 5, 3, 7, 1]\n\n### Output:\ndef avg_list(lst): \n  sum_lst = 0\n  for i in range(len(lst)): \n    sum_lst = sum_lst + lst[i] \n  return sum_lst\/len(lst) \n  \nprint(avg_list([1, 3, 5, 3, 7, 1]))","tok_input_length":123,"tok_output_length":64,"system_prompt":"","index":8618}
{"question":"Create a Python program that uses the Coinmarketcap API to track the prices of top 10 cryptocurrencies over a period of time.","input":"Not applicable","expected_output":"import requests\nimport pandas as pd\n\nurl = 'https:\/\/api.coinmarketcap.com\/v1\/ticker\/?limit=10'\ndata = requests.get(url).json()\n\ndf = pd.DataFrame(data)\n# select required column\ndf = df[['name', 'price_usd']]\n\n# print the dataframe\nprint(df)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the Coinmarketcap API to track the prices of top 10 cryptocurrencies over a period of time.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport pandas as pd\n\nurl = 'https:\/\/api.coinmarketcap.com\/v1\/ticker\/?limit=10'\ndata = requests.get(url).json()\n\ndf = pd.DataFrame(data)\n# select required column\ndf = df[['name', 'price_usd']]\n\n# print the dataframe\nprint(df)","tok_input_length":123,"tok_output_length":67,"system_prompt":"","index":3852}
{"question":"Write a function in Python that returns the longest word from a list.","input":"[\"Hello\", \"how\", \"are\", \"you\"]","expected_output":"def longest_word(word_list):\n    longest = word_list[0]\n    for word in word_list[1:]:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n\nwords = [\"Hello\", \"how\", \"are\", \"you\"]\n\nlongest_word = longest_word(words)\nprint(longest_word)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that returns the longest word from a list.\n\n### Input:\n[\"Hello\", \"how\", \"are\", \"you\"]\n\n### Output:\ndef longest_word(word_list):\n    longest = word_list[0]\n    for word in word_list[1:]:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n\nwords = [\"Hello\", \"how\", \"are\", \"you\"]\n\nlongest_word = longest_word(words)\nprint(longest_word)","tok_input_length":123,"tok_output_length":70,"system_prompt":"","index":7607}
{"question":"Write a Python program that calculates the greatest common divisor of two numbers and displays the result.","input":"10 and 20","expected_output":"def gcd(a, b):\n    if b == 0: \n        return a \n    return gcd(b, a % b) \n  \nnum1 = 10\nnum2 = 20\n\ngcd_value = gcd(num1, num2)\n\nprint(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that calculates the greatest common divisor of two numbers and displays the result.\n\n### Input:\n10 and 20\n\n### Output:\ndef gcd(a, b):\n    if b == 0: \n        return a \n    return gcd(b, a % b) \n  \nnum1 = 10\nnum2 = 20\n\ngcd_value = gcd(num1, num2)\n\nprint(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')","tok_input_length":123,"tok_output_length":73,"system_prompt":"","index":621}
{"question":"Create a class in Python for a game character with attributes for health, strength, and defense.","input":"Not applicable","expected_output":"class GameCharacter:\n def __init__(self, health, strength, defense):\n self.health = health\n self.strength = strength\n self.defense = defense\n \n def take_damage(self, damage):\n self.health -= damage\n \n def get_status(self):\n return f'Health: {self.health}, Strength: {self.strength}, Defense: {self.defense}'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python for a game character with attributes for health, strength, and defense.\n\n### Input:\nNot applicable\n\n### Output:\nclass GameCharacter:\n def __init__(self, health, strength, defense):\n self.health = health\n self.strength = strength\n self.defense = defense\n \n def take_damage(self, damage):\n self.health -= damage\n \n def get_status(self):\n return f'Health: {self.health}, Strength: {self.strength}, Defense: {self.defense}'","tok_input_length":123,"tok_output_length":74,"system_prompt":"","index":11620}
{"question":"Convert this SQL query to Python.","input":"SELECT *\nFROM customers\nWHERE customer_name LIKE '%John%'","expected_output":"import pydb\n\ndef query_customer_name(name):\n    query = \"\"\"\n    SELECT *\n    FROM customers\n    WHERE customer_name LIKE %s\"\"\"\n    name_wildcard = '%' + name + '%'\n    query_result = pydb.query(query, name_wildcard)\n    return query_result\n    \nif __name__ == '__main__':\n    query_customer_name('John')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this SQL query to Python.\n\n### Input:\nSELECT *\nFROM customers\nWHERE customer_name LIKE '%John%'\n\n### Output:\nimport pydb\n\ndef query_customer_name(name):\n    query = \"\"\"\n    SELECT *\n    FROM customers\n    WHERE customer_name LIKE %s\"\"\"\n    name_wildcard = '%' + name + '%'\n    query_result = pydb.query(query, name_wildcard)\n    return query_result\n    \nif __name__ == '__main__':\n    query_customer_name('John')","tok_input_length":123,"tok_output_length":76,"system_prompt":"","index":17283}
{"question":"Write a Python code to generate the Fibonacci sequence up to n-th number.","input":"7","expected_output":"def fibonacciSequence(n): \n    fibSequence = []\n    a, b = 0, 1\n    while b < n:\n        fibSequence.append(b)\n        a, b = b, a + b\n    return fibSequence\n\nn = 7\n\nprint(fibonacciSequence(n)) \/\/ [1, 1, 2, 3, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to generate the Fibonacci sequence up to n-th number.\n\n### Input:\n7\n\n### Output:\ndef fibonacciSequence(n): \n    fibSequence = []\n    a, b = 0, 1\n    while b < n:\n        fibSequence.append(b)\n        a, b = b, a + b\n    return fibSequence\n\nn = 7\n\nprint(fibonacciSequence(n)) \/\/ [1, 1, 2, 3, 5]","tok_input_length":123,"tok_output_length":79,"system_prompt":"","index":9119}
{"question":"Create a Python function that checks whether a given list contains any repeated elements.","input":"","expected_output":"def has_duplicates(arr): \n    # Create an empty set \n    s = set() \n  \n    # Traverse through the list \n    for item in arr:\n        # If the element is present \n        # in the set then it is a duplicate \n        if item in s:\n            return True \n        else:\n            s.add(item) \n\n    # No duplicate element found \n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that checks whether a given list contains any repeated elements.\n\n### Input:\n\n\n### Output:\ndef has_duplicates(arr): \n    # Create an empty set \n    s = set() \n  \n    # Traverse through the list \n    for item in arr:\n        # If the element is present \n        # in the set then it is a duplicate \n        if item in s:\n            return True \n        else:\n            s.add(item) \n\n    # No duplicate element found \n    return False","tok_input_length":123,"tok_output_length":81,"system_prompt":"","index":5648}
{"question":"Create a GUI application in Python to display a simple message.","input":"","expected_output":"# importing tkinter module \nfrom tkinter import *\n  \n# creating a GUI window \nroot = Tk() \n  \n# setting a geometry to the GUI window \nroot.geometry(\"300x200\") \n  \n# creating a label widget to display a message \n# this label is child of root window \nLabel(root, text=\"Hello, World!\").pack() \n  \n# looping the GUI window using an infinite loop \nroot.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI application in Python to display a simple message.\n\n### Input:\n\n\n### Output:\n# importing tkinter module \nfrom tkinter import *\n  \n# creating a GUI window \nroot = Tk() \n  \n# setting a geometry to the GUI window \nroot.geometry(\"300x200\") \n  \n# creating a label widget to display a message \n# this label is child of root window \nLabel(root, text=\"Hello, World!\").pack() \n  \n# looping the GUI window using an infinite loop \nroot.mainloop()","tok_input_length":123,"tok_output_length":84,"system_prompt":"","index":18060}
{"question":"Write a Python function that takes two lists as input and returns true if all the elements in List 1 are available in List 2.","input":"list1 = [21, 54, 8, 54]\nlist2 = [21, 24, 8, 16]","expected_output":"def check_if_all_in_list_2(list1, list2):\n    for item in list1: \n        if item not in list2: \n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two lists as input and returns true if all the elements in List 1 are available in List 2.\n\n### Input:\nlist1 = [21, 54, 8, 54]\nlist2 = [21, 24, 8, 16]\n\n### Output:\ndef check_if_all_in_list_2(list1, list2):\n    for item in list1: \n        if item not in list2: \n            return False\n    return True","tok_input_length":124,"tok_output_length":39,"system_prompt":"","index":10938}
{"question":"Generate a Python program to implement the following feature: Search a phrase in a given string.","input":"Search the phrase \"to be or not to be\" in the string \"Whether 'tis nobler in the mind to suffer\".","expected_output":"def search(phrase, string):\n  if phrase in string:\n     return True \n  else:\n     return False \n\nresult = search(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to implement the following feature: Search a phrase in a given string.\n\n### Input:\nSearch the phrase \"to be or not to be\" in the string \"Whether 'tis nobler in the mind to suffer\".\n\n### Output:\ndef search(phrase, string):\n  if phrase in string:\n     return True \n  else:\n     return False \n\nresult = search(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\nprint(result)","tok_input_length":124,"tok_output_length":52,"system_prompt":"","index":934}
{"question":"Write a Python program to sort a given list of numbers and return the sorted list","input":"list_of_numbers = [2, 3, 5, 8, 1, 4]","expected_output":"list_of_numbers = [2, 3, 5, 8, 1, 4]\n\ndef sort_list(list_of_numbers): \n    list_of_numbers.sort() \n    return list_of_numbers\n\nsorted_list = sort_list(list_of_numbers) \nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a given list of numbers and return the sorted list\n\n### Input:\nlist_of_numbers = [2, 3, 5, 8, 1, 4]\n\n### Output:\nlist_of_numbers = [2, 3, 5, 8, 1, 4]\n\ndef sort_list(list_of_numbers): \n    list_of_numbers.sort() \n    return list_of_numbers\n\nsorted_list = sort_list(list_of_numbers) \nprint(sorted_list)","tok_input_length":124,"tok_output_length":58,"system_prompt":"","index":7138}
{"question":"Generate a Python program that identifies all the words with more than five characters in a given list.","input":"words = [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"]","expected_output":"def more_than_five_characters(words):\n    result = []\n    for word in words:\n        if len(word) > 5:\n            result.append(word)\n    return result\n\nwords = [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"]\nprint(more_than_five_characters(words))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that identifies all the words with more than five characters in a given list.\n\n### Input:\nwords = [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"]\n\n### Output:\ndef more_than_five_characters(words):\n    result = []\n    for word in words:\n        if len(word) > 5:\n            result.append(word)\n    return result\n\nwords = [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"]\nprint(more_than_five_characters(words))","tok_input_length":124,"tok_output_length":61,"system_prompt":"","index":11594}
{"question":"Write a Python program to generate a random name from a set of given names.","input":"['John', 'Andy', 'Alex', 'Paul', 'Pippa']","expected_output":"import random\n\nnames = [\"John\", \"Andy\", \"Alex\", \"Paul\", \"Pippa\"]\n\ndef getRandomName(names):\n    randomIndex = random.randint(0, len(names)-1) \n    return names[randomIndex]\n\nif __name__ == '__main__':\n    print(getRandomName(names))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random name from a set of given names.\n\n### Input:\n['John', 'Andy', 'Alex', 'Paul', 'Pippa']\n\n### Output:\nimport random\n\nnames = [\"John\", \"Andy\", \"Alex\", \"Paul\", \"Pippa\"]\n\ndef getRandomName(names):\n    randomIndex = random.randint(0, len(names)-1) \n    return names[randomIndex]\n\nif __name__ == '__main__':\n    print(getRandomName(names))","tok_input_length":124,"tok_output_length":64,"system_prompt":"","index":14171}
{"question":"Compose a code in Python to check if a list contains any duplicate elements.","input":"[1, 2, 3, 4, 5]","expected_output":"def has_duplicates(arr):\n    seen = set()\n    for elem in arr:\n        if elem in seen:\n            return True\n        else:\n            seen.add(elem)\n    return False\n\ntest_arr = [1, 2, 3, 4, 5]\nresult = has_duplicates(test_arr)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a code in Python to check if a list contains any duplicate elements.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef has_duplicates(arr):\n    seen = set()\n    for elem in arr:\n        if elem in seen:\n            return True\n        else:\n            seen.add(elem)\n    return False\n\ntest_arr = [1, 2, 3, 4, 5]\nresult = has_duplicates(test_arr)\nprint(result)","tok_input_length":124,"tok_output_length":67,"system_prompt":"","index":8695}
{"question":"Create a python function that takes a string of characters as input and checks if it is a valid identifier.","input":"name = \"myVar\"","expected_output":"import string\n\ndef isValidIdentifier(name):\n    validChar = string.ascii_letters + \"_\"\n    if name[0] not in string.ascii_letters:\n        return False\n    for char in name[1:]:\n        if char not in validChar:\n            return False\n            \n    return True\n\nvalidResult = isValidIdentifier(name)\nprint(validResult)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that takes a string of characters as input and checks if it is a valid identifier.\n\n### Input:\nname = \"myVar\"\n\n### Output:\nimport string\n\ndef isValidIdentifier(name):\n    validChar = string.ascii_letters + \"_\"\n    if name[0] not in string.ascii_letters:\n        return False\n    for char in name[1:]:\n        if char not in validChar:\n            return False\n            \n    return True\n\nvalidResult = isValidIdentifier(name)\nprint(validResult)","tok_input_length":124,"tok_output_length":70,"system_prompt":"","index":3800}
{"question":"Create a Python function that returns the longest string from a given list.","input":"[\"my\", \"cat\", \"is\", \"lazy\"]","expected_output":"def longest_string(strings):\n  max_length = 0\n  longest_string = \"\"\n  \n  for s in strings:\n    if len(s) > max_length:\n      max_length = len(s)\n      longest_string = s\n  \n  return longest_string\n\nresult = longest_string([\"my\", \"cat\", \"is\", \"lazy\"])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that returns the longest string from a given list.\n\n### Input:\n[\"my\", \"cat\", \"is\", \"lazy\"]\n\n### Output:\ndef longest_string(strings):\n  max_length = 0\n  longest_string = \"\"\n  \n  for s in strings:\n    if len(s) > max_length:\n      max_length = len(s)\n      longest_string = s\n  \n  return longest_string\n\nresult = longest_string([\"my\", \"cat\", \"is\", \"lazy\"])\nprint(result)","tok_input_length":124,"tok_output_length":71,"system_prompt":"","index":17211}
{"question":"Implement a function in Python that returns the sum of Pythagorean triplets up to the given number n.","input":"","expected_output":"def pythagorean_triplet_sum(n):\n    result = 0\n    for c in range(1, n + 1):\n        for b in range(1, c):\n            for a in range(1, b):\n                if a**2 + b**2 == c**2:\n                    result += a + b + c\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that returns the sum of Pythagorean triplets up to the given number n.\n\n### Input:\n\n\n### Output:\ndef pythagorean_triplet_sum(n):\n    result = 0\n    for c in range(1, n + 1):\n        for b in range(1, c):\n            for a in range(1, b):\n                if a**2 + b**2 == c**2:\n                    result += a + b + c\n    return result","tok_input_length":124,"tok_output_length":75,"system_prompt":"","index":7958}
{"question":"Generate a Python code for finding the sum and difference of two numbers.","input":"7, 9","expected_output":"# Function to calculate the sum and difference\ndef sum_difference(num1, num2):\n    sum = num1 + num2\n    difference = num1 - num2\n    return sum, difference\n\n# Calculating the sum and difference \nx,y = sum_difference(7,9)\n\n# Print the results \nprint(\"Sum:\", x)\nprint(\"Difference:\", y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code for finding the sum and difference of two numbers.\n\n### Input:\n7, 9\n\n### Output:\n# Function to calculate the sum and difference\ndef sum_difference(num1, num2):\n    sum = num1 + num2\n    difference = num1 - num2\n    return sum, difference\n\n# Calculating the sum and difference \nx,y = sum_difference(7,9)\n\n# Print the results \nprint(\"Sum:\", x)\nprint(\"Difference:\", y)","tok_input_length":124,"tok_output_length":78,"system_prompt":"","index":13167}
{"question":"Use Python to create an encryption program that swaps out one character with another character.","input":"","expected_output":"def encrypt(message):\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    encrypted = ''\n\n    for char in message:\n        if char in chars:\n            char_index = chars.find(char)\n            new_char_index = (char_index + 13) % 26\n            encrypted += chars[new_char_index]\n        else:\n            encrypted += char\n    return encrypted\n\n# test\nprint(encrypt('HELLO'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to create an encryption program that swaps out one character with another character.\n\n### Input:\n\n\n### Output:\ndef encrypt(message):\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    encrypted = ''\n\n    for char in message:\n        if char in chars:\n            char_index = chars.find(char)\n            new_char_index = (char_index + 13) % 26\n            encrypted += chars[new_char_index]\n        else:\n            encrypted += char\n    return encrypted\n\n# test\nprint(encrypt('HELLO'))","tok_input_length":124,"tok_output_length":81,"system_prompt":"","index":10683}
{"question":"Create a RESTful API using Python and Flask.","input":"","expected_output":"from flask import Flask, jsonify, request\nfrom flask_restplus import Api, Resource, fields\n\n# Create and configure the Flask app\napp = Flask(__name__)\napi = Api(app)\n\n# Define the endpoints\n@api.route('\/employees', methods=['GET'])\ndef get_employees():\n    # Return a list of all employees\n    ...\n\n# Run the Flask app\napp.run(host='localhost', port=5000)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a RESTful API using Python and Flask.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, jsonify, request\nfrom flask_restplus import Api, Resource, fields\n\n# Create and configure the Flask app\napp = Flask(__name__)\napi = Api(app)\n\n# Define the endpoints\n@api.route('\/employees', methods=['GET'])\ndef get_employees():\n    # Return a list of all employees\n    ...\n\n# Run the Flask app\napp.run(host='localhost', port=5000)","tok_input_length":124,"tok_output_length":87,"system_prompt":"","index":4915}
{"question":"Edit the python code below to increase efficiency.","input":"arr = [24, 6, 15, 72, 5]\nsum = 0\n\nfor i in range(5):\n    if arr[i] % 2 == 0:\n        sum += arr[i]","expected_output":"arr = [24, 6, 15, 72, 5]\nsum = 0\n\nfor num in arr:\n    if num % 2 == 0:\n        sum += num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the python code below to increase efficiency.\n\n### Input:\narr = [24, 6, 15, 72, 5]\nsum = 0\n\nfor i in range(5):\n    if arr[i] % 2 == 0:\n        sum += arr[i]\n\n### Output:\narr = [24, 6, 15, 72, 5]\nsum = 0\n\nfor num in arr:\n    if num % 2 == 0:\n        sum += num","tok_input_length":125,"tok_output_length":42,"system_prompt":"","index":14708}
{"question":"Write a Python program to sort a dictionary by values.","input":"d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}","expected_output":"sorted_d = dict(sorted(d.items(), key=lambda x: x[1]))\nprint(sorted_d)\n\n    # Output: {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a dictionary by values.\n\n### Input:\nd = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\n### Output:\nsorted_d = dict(sorted(d.items(), key=lambda x: x[1]))\nprint(sorted_d)\n\n    # Output: {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}","tok_input_length":125,"tok_output_length":55,"system_prompt":"","index":8674}
{"question":"Create a Python program that computes the average of the numbers in the list [3, 5, 7, 9].","input":"[3, 5, 7, 9]","expected_output":"def get_average(numbers):\n sum = 0\n for num in numbers:\n  sum = sum + num\n return sum \/ len(numbers)\n \nnumbers = [3, 5, 7, 9]\naverage = get_average(numbers)\nprint(average) # Outputs 6.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that computes the average of the numbers in the list [3, 5, 7, 9].\n\n### Input:\n[3, 5, 7, 9]\n\n### Output:\ndef get_average(numbers):\n sum = 0\n for num in numbers:\n  sum = sum + num\n return sum \/ len(numbers)\n \nnumbers = [3, 5, 7, 9]\naverage = get_average(numbers)\nprint(average) # Outputs 6.5","tok_input_length":125,"tok_output_length":60,"system_prompt":"","index":14915}
{"question":"Implement an algorithm in Python to remove duplicate elements from a given list.","input":"list = [1,4,4,4,5,5,5,6,7]","expected_output":"def removeDuplicates(list): \n    uniqueList = []  \n    for item in list: \n        if item not in uniqueList: \n            uniqueList.append(item) \n    return uniqueList \n\nprint(removeDuplicates([1,4,4,4,5,5,5,6,7]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to remove duplicate elements from a given list.\n\n### Input:\nlist = [1,4,4,4,5,5,5,6,7]\n\n### Output:\ndef removeDuplicates(list): \n    uniqueList = []  \n    for item in list: \n        if item not in uniqueList: \n            uniqueList.append(item) \n    return uniqueList \n\nprint(removeDuplicates([1,4,4,4,5,5,5,6,7]))","tok_input_length":125,"tok_output_length":63,"system_prompt":"","index":16538}
{"question":"Create a class in Python to represent a student. This class should contain fields for name, age, and a list of subjects taken.","input":"Not applicable","expected_output":"class Student:\n    def __init__(self, name, age, subjects):\n        self.name = name\n        self.age = age\n        self.subjects = subjects\n    \n    def getName(self):\n        return self.name\n    \n    def getAge(self):\n        return self.age\n    \n    def getSubjects(self):\n        return self.subjects","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a student. This class should contain fields for name, age, and a list of subjects taken.\n\n### Input:\nNot applicable\n\n### Output:\nclass Student:\n    def __init__(self, name, age, subjects):\n        self.name = name\n        self.age = age\n        self.subjects = subjects\n    \n    def getName(self):\n        return self.name\n    \n    def getAge(self):\n        return self.age\n    \n    def getSubjects(self):\n        return self.subjects","tok_input_length":125,"tok_output_length":68,"system_prompt":"","index":15417}
{"question":"Write a Python program to validate a given email address. The program should ensure that the given email follows valid email syntax.","input":"example@example.com","expected_output":"import re\n\ndef is_valid_email(email):\n email_regex = re.compile(r\"^[\\w\\.\\+\\-]+\\@[\\w]+\\.[a-z]{2,3}$\")\n return email_regex.match(email)\n\nemail = \"example@example.com\"\nif is_valid_email(email):\n print(\"Valid email address\")\nelse:\n print(\"Invalid email address\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to validate a given email address. The program should ensure that the given email follows valid email syntax.\n\n### Input:\nexample@example.com\n\n### Output:\nimport re\n\ndef is_valid_email(email):\n email_regex = re.compile(r\"^[\\w\\.\\+\\-]+\\@[\\w]+\\.[a-z]{2,3}$\")\n return email_regex.match(email)\n\nemail = \"example@example.com\"\nif is_valid_email(email):\n print(\"Valid email address\")\nelse:\n print(\"Invalid email address\")","tok_input_length":125,"tok_output_length":70,"system_prompt":"","index":16530}
{"question":"Create a python code snippet to count the frequencies of words in a given string","input":"string = \"This is a test string\"","expected_output":"def countFrequencies(string):\n    words = string.split()\n    freq_dict = {}\n    for word in words:\n        if word not in freq_dict:\n            freq_dict[word] = 1\n        else:\n            freq_dict[word] += 1\n    return freq_dict\n\n# example\nresult = countFrequencies(\"This is a test string\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code snippet to count the frequencies of words in a given string\n\n### Input:\nstring = \"This is a test string\"\n\n### Output:\ndef countFrequencies(string):\n    words = string.split()\n    freq_dict = {}\n    for word in words:\n        if word not in freq_dict:\n            freq_dict[word] = 1\n        else:\n            freq_dict[word] += 1\n    return freq_dict\n\n# example\nresult = countFrequencies(\"This is a test string\")","tok_input_length":125,"tok_output_length":73,"system_prompt":"","index":11592}
{"question":"Implement a sorting algorithm in Python.","input":"array = [10,7,8,9,1,5]","expected_output":"def bubbleSort(array):\n    n = len(array)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if array[j] > array[j+1] : \n                array[j], array[j+1] = array[j+1], array[j] \n    return array\n\nprint(bubbleSort(array))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm in Python.\n\n### Input:\narray = [10,7,8,9,1,5]\n\n### Output:\ndef bubbleSort(array):\n    n = len(array)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if array[j] > array[j+1] : \n                array[j], array[j+1] = array[j+1], array[j] \n    return array\n\nprint(bubbleSort(array))","tok_input_length":125,"tok_output_length":76,"system_prompt":"","index":16767}
{"question":"Create a Python script for fetching Hacker News articles and printing the title of each article.","input":"Not applicable","expected_output":"import requests\nimport json\n\nresponse = requests.get('https:\/\/hacker-news.firebaseio.com\/v0\/topstories.json')\ntop_stories = json.loads(response.content)\n\nfor story_id in top_stories:\n response = requests.get(f'https:\/\/hacker-news.firebaseio.com\/v0\/item\/{story_id}.json')\n story_info = json.loads(response.content)\n print(story_info['title'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for fetching Hacker News articles and printing the title of each article.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport json\n\nresponse = requests.get('https:\/\/hacker-news.firebaseio.com\/v0\/topstories.json')\ntop_stories = json.loads(response.content)\n\nfor story_id in top_stories:\n response = requests.get(f'https:\/\/hacker-news.firebaseio.com\/v0\/item\/{story_id}.json')\n story_info = json.loads(response.content)\n print(story_info['title'])","tok_input_length":125,"tok_output_length":78,"system_prompt":"","index":18031}
{"question":"Create a payment processing system written in Python using the Stripe API.","input":"Not applicable","expected_output":"import stripe \n\ndef make_payment(token, amount):\n    stripe.api_key = \"sk_test_xxx\"\n\n    charge = stripe.Charge.create(\n        amount=amount,\n        currency=\"usd\",\n        source=token,\n        description=\"example charge\"\n    )\n\n    return charge\n\ntoken = \"tok_xxx\"\namount = 500\n\ncharge = make_payment(token, amount)\nprint(charge)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a payment processing system written in Python using the Stripe API.\n\n### Input:\nNot applicable\n\n### Output:\nimport stripe \n\ndef make_payment(token, amount):\n    stripe.api_key = \"sk_test_xxx\"\n\n    charge = stripe.Charge.create(\n        amount=amount,\n        currency=\"usd\",\n        source=token,\n        description=\"example charge\"\n    )\n\n    return charge\n\ntoken = \"tok_xxx\"\namount = 500\n\ncharge = make_payment(token, amount)\nprint(charge)","tok_input_length":125,"tok_output_length":82,"system_prompt":"","index":7364}
{"question":"Design an algorithm in Python to generate the Fibonacci series until n.","input":"","expected_output":"def Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n  print(\"Incorrect input Given\") \n elif n == 0: \n  return a \n elif n == 1: \n  return b \n else: \n  for i in range(2,n): \n   c = a + b \n   a = b \n   b = c \n return b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to generate the Fibonacci series until n.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n  print(\"Incorrect input Given\") \n elif n == 0: \n  return a \n elif n == 1: \n  return b \n else: \n  for i in range(2,n): \n   c = a + b \n   a = b \n   b = c \n return b","tok_input_length":125,"tok_output_length":85,"system_prompt":"","index":11613}
{"question":"Given two unsorted lists, create a Python program to identify the common elements between them.","input":"list1 = [5, 3, 2, 6, 8, 9] \nlist2 = [4, 2, 1, 6, 7]","expected_output":"def common_elements(list1, list2):\n return [element for element in list1 if element in list2]\n\ncommon_elements(list1, list2) # Output: [2, 6]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two unsorted lists, create a Python program to identify the common elements between them.\n\n### Input:\nlist1 = [5, 3, 2, 6, 8, 9] \nlist2 = [4, 2, 1, 6, 7]\n\n### Output:\ndef common_elements(list1, list2):\n return [element for element in list1 if element in list2]\n\ncommon_elements(list1, list2) # Output: [2, 6]","tok_input_length":126,"tok_output_length":41,"system_prompt":"","index":9278}
{"question":"Use the given data structure to create a Python dictionary that represents a contact list.","input":"Name: John Smith \nPhone: 123-456-7890 \nAddress: 123 Main St. \nCity: Seattle \nState: WA","expected_output":"dictionary = { \n\"John Smith\": { \n    \"phone\": \"123-456-7890\", \n    \"address\": \"123 Main St.\", \n    \"city\": \"Seattle\", \n    \"state\": \"WA\"\n} \n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the given data structure to create a Python dictionary that represents a contact list.\n\n### Input:\nName: John Smith \nPhone: 123-456-7890 \nAddress: 123 Main St. \nCity: Seattle \nState: WA\n\n### Output:\ndictionary = { \n\"John Smith\": { \n    \"phone\": \"123-456-7890\", \n    \"address\": \"123 Main St.\", \n    \"city\": \"Seattle\", \n    \"state\": \"WA\"\n} \n}","tok_input_length":126,"tok_output_length":52,"system_prompt":"","index":8740}
{"question":"Create a Python dictionary where the keys are student IDs and the values are the corresponding student names.","input":"id_lst = [123, 456, 789]\nname_lst = [\"John\", \"Emma\", \"David\"]","expected_output":"def create_dict(id_lst, name_lst): \n    dic = {}\n    \n    for i in range(len(id_lst)): \n        dic[id_lst[i]] = name_lst[i]\n    \n    return dic\n\nresult = create_dict(id_lst, name_lst) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary where the keys are student IDs and the values are the corresponding student names.\n\n### Input:\nid_lst = [123, 456, 789]\nname_lst = [\"John\", \"Emma\", \"David\"]\n\n### Output:\ndef create_dict(id_lst, name_lst): \n    dic = {}\n    \n    for i in range(len(id_lst)): \n        dic[id_lst[i]] = name_lst[i]\n    \n    return dic\n\nresult = create_dict(id_lst, name_lst) \nprint(result)","tok_input_length":126,"tok_output_length":56,"system_prompt":"","index":5642}
{"question":"Write code in Python to calculate the mean for a given list of numbers.","input":"[4, 17, 12, 78, 43, 13, 94, 77]","expected_output":"import numpy as np \n\n# given list of numbers \nlist = [4, 17, 12, 78, 43, 13, 94, 77] \n\n# calculating mean \nmean = np.mean(list) \n\n# printing mean \nprint(\"Mean:\", mean)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to calculate the mean for a given list of numbers.\n\n### Input:\n[4, 17, 12, 78, 43, 13, 94, 77]\n\n### Output:\nimport numpy as np \n\n# given list of numbers \nlist = [4, 17, 12, 78, 43, 13, 94, 77] \n\n# calculating mean \nmean = np.mean(list) \n\n# printing mean \nprint(\"Mean:\", mean)","tok_input_length":126,"tok_output_length":60,"system_prompt":"","index":10712}
{"question":"Create a Python function that takes a string and a pattern, and returns the number of times the pattern appears in the string.","input":"string = \"hello hello world\"\npattern = \"hello\"","expected_output":"def countSubstring(string, sub_string):\n  count = 0 \n  for i in range(0, len(string)-len(sub_string)+1):\n    if (string[i:i+len(sub_string)] == sub_string):\n      count+=1\n  return count\n  \nprint(countSubstring(string, pattern))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a string and a pattern, and returns the number of times the pattern appears in the string.\n\n### Input:\nstring = \"hello hello world\"\npattern = \"hello\"\n\n### Output:\ndef countSubstring(string, sub_string):\n  count = 0 \n  for i in range(0, len(string)-len(sub_string)+1):\n    if (string[i:i+len(sub_string)] == sub_string):\n      count+=1\n  return count\n  \nprint(countSubstring(string, pattern))","tok_input_length":126,"tok_output_length":62,"system_prompt":"","index":11971}
{"question":"Write a Python program to create a new list with only odd numbers.","input":"[1,2,3,4,5,6,7,8,9]","expected_output":"def get_odd_numbers(nums):\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n\nnums = [1,2,3,4,5,6,7,8,9]\nprint(get_odd_numbers(nums))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a new list with only odd numbers.\n\n### Input:\n[1,2,3,4,5,6,7,8,9]\n\n### Output:\ndef get_odd_numbers(nums):\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n\nnums = [1,2,3,4,5,6,7,8,9]\nprint(get_odd_numbers(nums))","tok_input_length":126,"tok_output_length":66,"system_prompt":"","index":1165}
{"question":"Write a python program to count how many times the word \"the\" appears in a given text.","input":"The quick brown fox jumps over the lazy dog","expected_output":"def count_the(text):\n    count = 0\n    words = text.split()\n    for word in words:\n        if word == \"the\":\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    text = \"The quick brown fox jumps over the lazy dog\"\n    print(count_the(text))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to count how many times the word \"the\" appears in a given text.\n\n### Input:\nThe quick brown fox jumps over the lazy dog\n\n### Output:\ndef count_the(text):\n    count = 0\n    words = text.split()\n    for word in words:\n        if word == \"the\":\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    text = \"The quick brown fox jumps over the lazy dog\"\n    print(count_the(text))","tok_input_length":126,"tok_output_length":69,"system_prompt":"","index":2532}
{"question":"Write a Python program using the SciPy library to solve the given equation.","input":"3x - 2y + z = 5","expected_output":"from scipy.optimize import fsolve\n\n#define the equation\ndef equation(p):\n    x, y, z = p\n    return (3*x - 2*y + z - 5)\n\n#solve the equation\nresult =  fsolve(equation, (1, 1, 1)) \n\n#Print the result \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program using the SciPy library to solve the given equation.\n\n### Input:\n3x - 2y + z = 5\n\n### Output:\nfrom scipy.optimize import fsolve\n\n#define the equation\ndef equation(p):\n    x, y, z = p\n    return (3*x - 2*y + z - 5)\n\n#solve the equation\nresult =  fsolve(equation, (1, 1, 1)) \n\n#Print the result \nprint(result)","tok_input_length":126,"tok_output_length":72,"system_prompt":"","index":16318}
{"question":"Create a program that sorts a list of strings in alphabetical order.","input":"['python', 'javascript', 'java', 'go']","expected_output":"\"\"\"\nCreate a program that sorts a list of strings in alphabetical order.\n\"\"\"\n\ndef sort_list(lst):\n    \"\"\"\n    This function sorts a list of strings in alphabetical order.\n    \"\"\"\n    lst.sort()\n    return lst\n \nif __name__ == '__main__':\n    lst = ['python', 'javascript', 'java', 'go']\n    print(sort_list(lst))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that sorts a list of strings in alphabetical order.\n\n### Input:\n['python', 'javascript', 'java', 'go']\n\n### Output:\n\"\"\"\nCreate a program that sorts a list of strings in alphabetical order.\n\"\"\"\n\ndef sort_list(lst):\n    \"\"\"\n    This function sorts a list of strings in alphabetical order.\n    \"\"\"\n    lst.sort()\n    return lst\n \nif __name__ == '__main__':\n    lst = ['python', 'javascript', 'java', 'go']\n    print(sort_list(lst))","tok_input_length":126,"tok_output_length":74,"system_prompt":"","index":13664}
{"question":"Is it possible to create a HTML page that displays a table of contents from the data stored in a database?","input":"","expected_output":"Yes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. You can use HTML, CSS, and JavaScript to create the table and a server-side language such as PHP or Python to query the database and retrieve the relevant data. Once you have the data, you can use JavaScript to render the table within the HTML page.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIs it possible to create a HTML page that displays a table of contents from the data stored in a database?\n\n### Input:\n\n\n### Output:\nYes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. You can use HTML, CSS, and JavaScript to create the table and a server-side language such as PHP or Python to query the database and retrieve the relevant data. Once you have the data, you can use JavaScript to render the table within the HTML page.","tok_input_length":126,"tok_output_length":77,"system_prompt":"","index":443}
{"question":"Create a Python program to read a string and return the character with the highest frequency.","input":"Sample string","expected_output":"import collections\n\nstr = \"Sample string\"\ncount = collections.Counter(str)\nhighest_freq = 0\nhighest_freq_char = ''\n\nfor char, value in count.items():\n    if value > highest_freq:\n        highest_freq = value\n        highest_freq_char = char\n\nprint(\"The character {} has the highest frequency of {} in this string\".format(highest_freq_char, highest_freq))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to read a string and return the character with the highest frequency.\n\n### Input:\nSample string\n\n### Output:\nimport collections\n\nstr = \"Sample string\"\ncount = collections.Counter(str)\nhighest_freq = 0\nhighest_freq_char = ''\n\nfor char, value in count.items():\n    if value > highest_freq:\n        highest_freq = value\n        highest_freq_char = char\n\nprint(\"The character {} has the highest frequency of {} in this string\".format(highest_freq_char, highest_freq))","tok_input_length":126,"tok_output_length":79,"system_prompt":"","index":2075}
{"question":"Design a Python program that analyses the sentiment of a given text.","input":"\"I love programming\"","expected_output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"I love programming\"\n\nsid = SentimentIntensityAnalyzer()\nscores = sid.polarity_scores(text)\n\nif scores['compound'] > 0.0:\n print(\"Positive sentiment\")\nelif scores['compound'] == 0.0:\n print(\"Neutral sentiment\")\nelse:\n print(\"Negative sentiment\")\n\n# Output: Positive sentiment","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that analyses the sentiment of a given text.\n\n### Input:\n\"I love programming\"\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"I love programming\"\n\nsid = SentimentIntensityAnalyzer()\nscores = sid.polarity_scores(text)\n\nif scores['compound'] > 0.0:\n print(\"Positive sentiment\")\nelif scores['compound'] == 0.0:\n print(\"Neutral sentiment\")\nelse:\n print(\"Negative sentiment\")\n\n# Output: Positive sentiment","tok_input_length":126,"tok_output_length":82,"system_prompt":"","index":7856}
{"question":"Implement a basic algorithm in Python for encrypting a string.","input":"Not applicable","expected_output":"def encrypt(message): \n encrypted_message = \"\" \n for character in message: \n # increment the character number to get its encrypted form \n encrypted_message += chr(ord(character) + 2) \n return encrypted_message \n \nif __name__ == \"__main__\": \n message = \"Hello World\" \n encrypted_message = encrypt(message) \n print(encrypted_message) \n \n output:\n Jgnnq Yqtnf","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic algorithm in Python for encrypting a string.\n\n### Input:\nNot applicable\n\n### Output:\ndef encrypt(message): \n encrypted_message = \"\" \n for character in message: \n # increment the character number to get its encrypted form \n encrypted_message += chr(ord(character) + 2) \n return encrypted_message \n \nif __name__ == \"__main__\": \n message = \"Hello World\" \n encrypted_message = encrypt(message) \n print(encrypted_message) \n \n output:\n Jgnnq Yqtnf","tok_input_length":126,"tok_output_length":84,"system_prompt":"","index":8351}
{"question":"Design a Python class that can store the properties of a person.","input":"","expected_output":"class Person:\n    def __init__(self, name, age, gender, address):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.address = address\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age \n    \n    def get_gender(self):\n        return self.gender\n    \n    def get_address(self):\n        return self.address","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class that can store the properties of a person.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age, gender, address):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.address = address\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age \n    \n    def get_gender(self):\n        return self.gender\n    \n    def get_address(self):\n        return self.address","tok_input_length":126,"tok_output_length":86,"system_prompt":"","index":1096}
{"question":"Design a class for random password generation in Python.","input":"","expected_output":"import random\n\nclass RandomPasswordGenerator:\n    def __init__(self, length=10):\n        self.length = length\n        self.password_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890!@#$%^\"\n\n    def generate_password(self):\n        password = \"\"\n        for _ in range(self.length):\n            index = random.randint(0, len(self.password_chars) - 1 )\n            password += self.password_chars[index]\n        return password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class for random password generation in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nclass RandomPasswordGenerator:\n    def __init__(self, length=10):\n        self.length = length\n        self.password_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890!@#$%^\"\n\n    def generate_password(self):\n        password = \"\"\n        for _ in range(self.length):\n            index = random.randint(0, len(self.password_chars) - 1 )\n            password += self.password_chars[index]\n        return password","tok_input_length":126,"tok_output_length":89,"system_prompt":"","index":7216}
{"question":"Create a python function which takes two inputs, a list of strings and a character, and returns a dictionary containing the count of each string beginning with the given character.","input":"words = ['apple','ball','cat','dog','elephant']\nchar = 'a'","expected_output":"def find_words(words, char):\n    count_dict = dict()\n    for word in words:\n        if word.startswith(char):\n            count_dict[word] = count_dict.get(word, 0) + 1\n    return count_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function which takes two inputs, a list of strings and a character, and returns a dictionary containing the count of each string beginning with the given character.\n\n### Input:\nwords = ['apple','ball','cat','dog','elephant']\nchar = 'a'\n\n### Output:\ndef find_words(words, char):\n    count_dict = dict()\n    for word in words:\n        if word.startswith(char):\n            count_dict[word] = count_dict.get(word, 0) + 1\n    return count_dict","tok_input_length":127,"tok_output_length":48,"system_prompt":"","index":14359}
{"question":"Create a Python script that given a list of strings and a target string, returns the strings from the list that contain the target string.","input":"['hello world', 'good bye', 'hello', 'hello planet'], 'hello'","expected_output":"target = 'hello'\nlist_strings = ['hello world', 'good bye', 'hello', 'hello planet']\n\nresults = [string for string in list_strings if target in string]\n\nprint(results)\n# Output: ['hello world', 'hello', 'hello planet']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that given a list of strings and a target string, returns the strings from the list that contain the target string.\n\n### Input:\n['hello world', 'good bye', 'hello', 'hello planet'], 'hello'\n\n### Output:\ntarget = 'hello'\nlist_strings = ['hello world', 'good bye', 'hello', 'hello planet']\n\nresults = [string for string in list_strings if target in string]\n\nprint(results)\n# Output: ['hello world', 'hello', 'hello planet']","tok_input_length":127,"tok_output_length":55,"system_prompt":"","index":4556}
{"question":"Write a Python program to calculate the average monthly temperature of a given city for the last 10 years.","input":"City: Los Angeles, California\n10 year average temperature from 2010 to 2020","expected_output":"import csv\n\ndef avg_month_temp(city):\n result = 0\n counter = 0\n temperatures = csv.reader(open('weatherdata.csv'))\n for row in temperatures:\n if row[1] == city:\n result += float(row[2])\n counter += 1\n return result\/counter","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the average monthly temperature of a given city for the last 10 years.\n\n### Input:\nCity: Los Angeles, California\n10 year average temperature from 2010 to 2020\n\n### Output:\nimport csv\n\ndef avg_month_temp(city):\n result = 0\n counter = 0\n temperatures = csv.reader(open('weatherdata.csv'))\n for row in temperatures:\n if row[1] == city:\n result += float(row[2])\n counter += 1\n return result\/counter","tok_input_length":127,"tok_output_length":59,"system_prompt":"","index":1735}
{"question":"Generate code using Python to find the largest and smallest number in a given list.","input":"[2, 3, 5, 8, 1, 9, 4]","expected_output":"def min_max(array):\n    min_val = array[0]\n    max_val = array[0]\n    for element in array:\n        if(element > max_val):\n            max_val = element\n        if(element < min_val):\n            min_val = element\n    return (min_val, max_val)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code using Python to find the largest and smallest number in a given list.\n\n### Input:\n[2, 3, 5, 8, 1, 9, 4]\n\n### Output:\ndef min_max(array):\n    min_val = array[0]\n    max_val = array[0]\n    for element in array:\n        if(element > max_val):\n            max_val = element\n        if(element < min_val):\n            min_val = element\n    return (min_val, max_val)","tok_input_length":127,"tok_output_length":63,"system_prompt":"","index":4027}
{"question":"Create a basic Python script that converts all strings in a given dictionary to uppercase.","input":"{\"name\": \"John\", \"age\": 45, \"location\": \"San Francisco\"}","expected_output":"d = {\"name\": \"John\", \"age\": 45, \"location\": \"San Francisco\"}\nfor key in d:\n d[key] = str(d[key]).upper()\n\nprint(d)\n# Output: {\"name\": \"JOHN\", \"age\": 45, \"location\": \"SAN FRANCISCO\"}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script that converts all strings in a given dictionary to uppercase.\n\n### Input:\n{\"name\": \"John\", \"age\": 45, \"location\": \"San Francisco\"}\n\n### Output:\nd = {\"name\": \"John\", \"age\": 45, \"location\": \"San Francisco\"}\nfor key in d:\n d[key] = str(d[key]).upper()\n\nprint(d)\n# Output: {\"name\": \"JOHN\", \"age\": 45, \"location\": \"SAN FRANCISCO\"}","tok_input_length":127,"tok_output_length":65,"system_prompt":"","index":8126}
{"question":"Implement an algorithm to find a substring in a given string using a greedy approach in Python.","input":"string = \"This is a sample string\"\nsubstring = \"sample\"","expected_output":"def find_substring(string, substring):\n    start = 0\n    result = \"\"\n    while start < len(string):\n        idx = string.find(substring, start)\n        if idx == -1:\n            break\n        result += string[idx:idx+len(substring)]\n        start = idx+len(substring)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm to find a substring in a given string using a greedy approach in Python.\n\n### Input:\nstring = \"This is a sample string\"\nsubstring = \"sample\"\n\n### Output:\ndef find_substring(string, substring):\n    start = 0\n    result = \"\"\n    while start < len(string):\n        idx = string.find(substring, start)\n        if idx == -1:\n            break\n        result += string[idx:idx+len(substring)]\n        start = idx+len(substring)\n    return result","tok_input_length":127,"tok_output_length":68,"system_prompt":"","index":16811}
{"question":"Write a Python program to determine if one number is a multiple of another.","input":"num1: 32\nnum2: 8","expected_output":"def is_multiple(num1, num2):\n   if (num1 % num2 == 0):\n       print(f'{num1} is a multiple of {num2}')\n   else:\n       print(f'{num1} is not a multiple of {num2}')\n\nis_multiple(32, 8)\n\nOutput:\n32 is a multiple of 8","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine if one number is a multiple of another.\n\n### Input:\nnum1: 32\nnum2: 8\n\n### Output:\ndef is_multiple(num1, num2):\n   if (num1 % num2 == 0):\n       print(f'{num1} is a multiple of {num2}')\n   else:\n       print(f'{num1} is not a multiple of {num2}')\n\nis_multiple(32, 8)\n\nOutput:\n32 is a multiple of 8","tok_input_length":127,"tok_output_length":73,"system_prompt":"","index":11107}
{"question":"Write a Python script to generate all possible permutations of a set of input strings.","input":"['a', 'b', 'c']","expected_output":"def permute(input):\n res = []\n for i in range(len(input)):\n for result in permute(input[:i] + input[i + 1:]):\n res.append([input[i]] + result)    \n return res\n\ninputValues = ['a', 'b', 'c']\npermutations = permute(inputValues)\n\nfor perm in permutations:\n print(perm)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate all possible permutations of a set of input strings.\n\n### Input:\n['a', 'b', 'c']\n\n### Output:\ndef permute(input):\n res = []\n for i in range(len(input)):\n for result in permute(input[:i] + input[i + 1:]):\n res.append([input[i]] + result)    \n return res\n\ninputValues = ['a', 'b', 'c']\npermutations = permute(inputValues)\n\nfor perm in permutations:\n print(perm)","tok_input_length":127,"tok_output_length":75,"system_prompt":"","index":833}
{"question":"Write a Python program that takes a string as input and returns a new string with all vowels removed.","input":"hello","expected_output":"# Function to remove vowels\ndef removeVowels(str):\n  vowels = ('a', 'e', 'i', 'o', 'u')\n  for x in str.lower():\n    if x in vowels:\n      str = str.replace(x,\"\")\n  print(str)  \n\n# Driver program\nstr = \"Hello\"\nremoveVowels(str)\n\n# Output:\nHll","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a string as input and returns a new string with all vowels removed.\n\n### Input:\nhello\n\n### Output:\n# Function to remove vowels\ndef removeVowels(str):\n  vowels = ('a', 'e', 'i', 'o', 'u')\n  for x in str.lower():\n    if x in vowels:\n      str = str.replace(x,\"\")\n  print(str)  \n\n# Driver program\nstr = \"Hello\"\nremoveVowels(str)\n\n# Output:\nHll","tok_input_length":127,"tok_output_length":78,"system_prompt":"","index":11484}
{"question":"Create a neural network in Python for a binary classification problem with two classes.","input":"Not applicable","expected_output":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(32, input_shape=(2,)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python for a binary classification problem with two classes.\n\n### Input:\nNot applicable\n\n### Output:\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(32, input_shape=(2,)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","tok_input_length":127,"tok_output_length":82,"system_prompt":"","index":4845}
{"question":"Write a python program to convert a string to int and float.","input":"Not applicable","expected_output":"# define a string\nstring = \"12345\"\n\n# convert string to int\ninteger = int(string)\n\n# convert string to float\nfloating = float(string)\n\n# print results\nprint(\"String: \", string)\nprint(\"Integer: \", integer)\nprint(\"Float: \", floating)\n\n# Output\n# String: 12345\n# Integer: 12345\n# Float: 12345.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to convert a string to int and float.\n\n### Input:\nNot applicable\n\n### Output:\n# define a string\nstring = \"12345\"\n\n# convert string to int\ninteger = int(string)\n\n# convert string to float\nfloating = float(string)\n\n# print results\nprint(\"String: \", string)\nprint(\"Integer: \", integer)\nprint(\"Float: \", floating)\n\n# Output\n# String: 12345\n# Integer: 12345\n# Float: 12345.0","tok_input_length":127,"tok_output_length":84,"system_prompt":"","index":9495}
{"question":"Design a class in python to represent a bank account.","input":"<no input>","expected_output":"class BankAccount:\n   def __init__(self, account_number, account_balance):\n        self.account_number = account_number\n        self.account_balance = account_balance\n\n    def deposit(self, deposit_amount):\n        self.account_balance += deposit_amount\n\n    def withdraw(self, withdraw_amount):\n        if self.account_balance - withdraw_amount >= 0:\n            self.account_balance -= withdraw_amount\n            return True\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in python to represent a bank account.\n\n### Input:\n<no input>\n\n### Output:\nclass BankAccount:\n   def __init__(self, account_number, account_balance):\n        self.account_number = account_number\n        self.account_balance = account_balance\n\n    def deposit(self, deposit_amount):\n        self.account_balance += deposit_amount\n\n    def withdraw(self, withdraw_amount):\n        if self.account_balance - withdraw_amount >= 0:\n            self.account_balance -= withdraw_amount\n            return True\n        return False","tok_input_length":127,"tok_output_length":85,"system_prompt":"","index":18386}
{"question":"Create a python program to serialize data in JSON format.","input":"","expected_output":"import json\n\n# some Python data\ndata = [{'name': 'John', 'age': 30, 'city': 'New York'},\n        {'name': 'Max', 'age': 20, 'city': 'Berlin'}]\n\n# convert to JSON\njson_data = json.dumps(data)\n\n# save as JSON file\nwith open(\"data.json\", \"w\") as json_file:\n json.dump(json_data, json_file)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to serialize data in JSON format.\n\n### Input:\n\n\n### Output:\nimport json\n\n# some Python data\ndata = [{'name': 'John', 'age': 30, 'city': 'New York'},\n        {'name': 'Max', 'age': 20, 'city': 'Berlin'}]\n\n# convert to JSON\njson_data = json.dumps(data)\n\n# save as JSON file\nwith open(\"data.json\", \"w\") as json_file:\n json.dump(json_data, json_file)","tok_input_length":127,"tok_output_length":89,"system_prompt":"","index":14552}
{"question":"Write a python script to extract the text from a HTML page and count the number of words.","input":"<html>\n<head>\n    <title>My Page<\/title>\n<\/head>\n<body>\n    <p>This is a test page<\/p>\n<\/body>\n<\/html>","expected_output":"from bs4 import BeautifulSoup\nimport re\n\nhtml_doc = <input>\nsoup = BeautifulSoup(html_doc, 'html.parser')\ntext = soup.get_text()\nwords = re.findall(r'\\w+', text)\nprint (len(words))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to extract the text from a HTML page and count the number of words.\n\n### Input:\n<html>\n<head>\n    <title>My Page<\/title>\n<\/head>\n<body>\n    <p>This is a test page<\/p>\n<\/body>\n<\/html>\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport re\n\nhtml_doc = <input>\nsoup = BeautifulSoup(html_doc, 'html.parser')\ntext = soup.get_text()\nwords = re.findall(r'\\w+', text)\nprint (len(words))","tok_input_length":128,"tok_output_length":47,"system_prompt":"","index":3998}
{"question":"Critique the given code for best coding practices.","input":"def calculate_total_sum(list_num):\n    total_sum = 0\n    for num in list_num:\n        total_sum += num\n    return total_sum","expected_output":"The code could improve by using the built-in sum() from the Python library. Also, you should use a more meaningful variable name instead of list_num to better explain the intent of the code. Lastly, you could use type hinting to specify the type of variables passed into the function.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCritique the given code for best coding practices.\n\n### Input:\ndef calculate_total_sum(list_num):\n    total_sum = 0\n    for num in list_num:\n        total_sum += num\n    return total_sum\n\n### Output:\nThe code could improve by using the built-in sum() from the Python library. Also, you should use a more meaningful variable name instead of list_num to better explain the intent of the code. Lastly, you could use type hinting to specify the type of variables passed into the function.","tok_input_length":128,"tok_output_length":59,"system_prompt":"","index":16966}
{"question":"Formulate an algorithm in Python to find the sum of all elements in a given matrix.","input":"[[ 1, 2, 3 ],\n[ 4, 5, 6 ]]","expected_output":"def matrixSum(matrix):\n    sum = 0\n    for row in matrix:\n        for element in row:\n            sum += element\n    return sum\n\nmatrix = [[1, 2, 3], [4, 5, 6]]\ntotal = matrixSum(matrix)\nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate an algorithm in Python to find the sum of all elements in a given matrix.\n\n### Input:\n[[ 1, 2, 3 ],\n[ 4, 5, 6 ]]\n\n### Output:\ndef matrixSum(matrix):\n    sum = 0\n    for row in matrix:\n        for element in row:\n            sum += element\n    return sum\n\nmatrix = [[1, 2, 3], [4, 5, 6]]\ntotal = matrixSum(matrix)\nprint(total)","tok_input_length":128,"tok_output_length":62,"system_prompt":"","index":13140}
{"question":"Develop a function in Python that removes all the duplicates from a list.","input":"arr = [1, 2, 2, 3, 3, 4, 4]","expected_output":"def remove_duplicates(arr):\n    new_list = []\n    for i in arr:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\narr = [1, 2, 2, 3, 3, 4, 4]\nprint(remove_duplicates(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that removes all the duplicates from a list.\n\n### Input:\narr = [1, 2, 2, 3, 3, 4, 4]\n\n### Output:\ndef remove_duplicates(arr):\n    new_list = []\n    for i in arr:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\narr = [1, 2, 2, 3, 3, 4, 4]\nprint(remove_duplicates(arr))","tok_input_length":128,"tok_output_length":64,"system_prompt":"","index":14324}
{"question":"Write Python code to get the difference between two lists.","input":"[1, 2, 3, 4]\n[1, 2, 5, 6]","expected_output":"def difference(list1, list2):\n    difference_list = []\n    for num1 in list1:\n        if num1 not in list2:\n            difference_list.append(num1)\n    for num2 in list2:\n        if num2 not in list1:\n            difference_list.append(num2)\n    return difference_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to get the difference between two lists.\n\n### Input:\n[1, 2, 3, 4]\n[1, 2, 5, 6]\n\n### Output:\ndef difference(list1, list2):\n    difference_list = []\n    for num1 in list1:\n        if num1 not in list2:\n            difference_list.append(num1)\n    for num2 in list2:\n        if num2 not in list1:\n            difference_list.append(num2)\n    return difference_list","tok_input_length":128,"tok_output_length":66,"system_prompt":"","index":15721}
{"question":"Develop a Python guess the number game. The program should pick a random number between 1 to 10 and the user has to guess it.","input":"Not applicable","expected_output":"import random\n\nanswer  = random.randint(1, 10)\n\nguess = int(input('Guess a number between 1 and 10: '))\n\nif guess == answer:\n print('You guessed correct!')\nelif guess < answer:\n print('Your guess is too low')\nelif guess > answer:\n print('Your guess is too high')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python guess the number game. The program should pick a random number between 1 to 10 and the user has to guess it.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nanswer  = random.randint(1, 10)\n\nguess = int(input('Guess a number between 1 and 10: '))\n\nif guess == answer:\n print('You guessed correct!')\nelif guess < answer:\n print('Your guess is too low')\nelif guess > answer:\n print('Your guess is too high')","tok_input_length":128,"tok_output_length":69,"system_prompt":"","index":13469}
{"question":"Create a web scrapper in Python that extracts the number of subscribers from a YouTube Channel.","input":"https:\/\/www.youtube.com\/user\/mahalo","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.youtube.com\/user\/mahalo'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\nsubs = soup.find(id='subscriber-count').text\n\nsubscribers = int(subs.replace(',', '').split(' ')[0])\nprint('Number of subscribers: ', subscribers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scrapper in Python that extracts the number of subscribers from a YouTube Channel.\n\n### Input:\nhttps:\/\/www.youtube.com\/user\/mahalo\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.youtube.com\/user\/mahalo'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\nsubs = soup.find(id='subscriber-count').text\n\nsubscribers = int(subs.replace(',', '').split(' ')[0])\nprint('Number of subscribers: ', subscribers)","tok_input_length":128,"tok_output_length":73,"system_prompt":"","index":1189}
{"question":"Create a program in Python to compute the cosine similarity between two given vectors.","input":"[2, 5], [1, 3]","expected_output":"import numpy\n\ndef cos_sim(vec1, vec2):\n    sim = numpy.dot(vec1, vec2)\/(numpy.linalg.norm(vec1)* numpy.linalg.norm(vec2)) \n    return sim\n\nvec1 = [2, 5]\nvec2 = [1, 3]\nprint(\"Cosine Similarity:\", cos_sim(vec1, vec2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to compute the cosine similarity between two given vectors.\n\n### Input:\n[2, 5], [1, 3]\n\n### Output:\nimport numpy\n\ndef cos_sim(vec1, vec2):\n    sim = numpy.dot(vec1, vec2)\/(numpy.linalg.norm(vec1)* numpy.linalg.norm(vec2)) \n    return sim\n\nvec1 = [2, 5]\nvec2 = [1, 3]\nprint(\"Cosine Similarity:\", cos_sim(vec1, vec2))","tok_input_length":128,"tok_output_length":74,"system_prompt":"","index":14971}
{"question":"Create a class in Python that can represent a 3D point with the given fields.","input":"x y and z coordinates","expected_output":"class Point3D:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z\n\n  def __str__(self):\n    return 'Point3D is at {x}, {y}, {z}'.format(x = self.x, y = self.y, z = self.z)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that can represent a 3D point with the given fields.\n\n### Input:\nx y and z coordinates\n\n### Output:\nclass Point3D:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z\n\n  def __str__(self):\n    return 'Point3D is at {x}, {y}, {z}'.format(x = self.x, y = self.y, z = self.z)","tok_input_length":128,"tok_output_length":77,"system_prompt":"","index":16674}
{"question":"Create a Python program to output the Fibonacci sequence until the value is greater than 2000.","input":"","expected_output":"def fibonacciUntil2000(): \n  f1 = 0\n  f2 = 1\n  print(f1)\n  print(f2)\n  while (f1 + f2) <= 2000: \n    f3 = f1 + f2\n    f1 = f2 \n    f2 = f3\n    print(f3)\n\nfibonacciUntil2000()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to output the Fibonacci sequence until the value is greater than 2000.\n\n### Input:\n\n\n### Output:\ndef fibonacciUntil2000(): \n  f1 = 0\n  f2 = 1\n  print(f1)\n  print(f2)\n  while (f1 + f2) <= 2000: \n    f3 = f1 + f2\n    f1 = f2 \n    f2 = f3\n    print(f3)\n\nfibonacciUntil2000()","tok_input_length":128,"tok_output_length":82,"system_prompt":"","index":2358}
{"question":"Design a Python function to print out all permutations of a given string.","input":"\"ABC\"","expected_output":"def permute(s):\n    if len(s) == 1:\n        return s\n\n    perms = []\n    for i in range(len(s)):\n        element = s[i]\n\n        remaining_elements = s[:i] + s[i+1:]\n        z = permute(remaining_elements)\n\n        for t in z:\n            perms.append(element + t)\n\n    return perms\n\nprint(permute(\"ABC\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function to print out all permutations of a given string.\n\n### Input:\n\"ABC\"\n\n### Output:\ndef permute(s):\n    if len(s) == 1:\n        return s\n\n    perms = []\n    for i in range(len(s)):\n        element = s[i]\n\n        remaining_elements = s[:i] + s[i+1:]\n        z = permute(remaining_elements)\n\n        for t in z:\n            perms.append(element + t)\n\n    return perms\n\nprint(permute(\"ABC\"))","tok_input_length":128,"tok_output_length":84,"system_prompt":"","index":12904}
{"question":"Design a python program that stores data associated to each user as a dictionary.","input":"","expected_output":"users = {} \n\ndef addUser(name, details): \n    users[name] = details \n\ndef getUser(name): \n    return users[name] \n\n# Add new user\naddUser('John', {'age': 25, 'email': 'john@example.com'})\n\n# Get user details\nuser_details = getUser('John')\nprint('Age: ', user_details['age'])\nprint('Email: ', user_details['email'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program that stores data associated to each user as a dictionary.\n\n### Input:\n\n\n### Output:\nusers = {} \n\ndef addUser(name, details): \n    users[name] = details \n\ndef getUser(name): \n    return users[name] \n\n# Add new user\naddUser('John', {'age': 25, 'email': 'john@example.com'})\n\n# Get user details\nuser_details = getUser('John')\nprint('Age: ', user_details['age'])\nprint('Email: ', user_details['email'])","tok_input_length":128,"tok_output_length":86,"system_prompt":"","index":10774}
{"question":"Generate an optimized Python program to multiply two given matrices.","input":"","expected_output":"def matrix_multiply(mat1, mat2):  \n    result = [[0] * len(mat2[0]) for i in range(len(mat1))] \n    for i in range(len(mat1)): \n        for j in range(len(mat2[0])): \n            for k in range(len(mat2)): \n                result[i][j] += mat1[i][k] * mat2[k][j] \n  \n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an optimized Python program to multiply two given matrices.\n\n### Input:\n\n\n### Output:\ndef matrix_multiply(mat1, mat2):  \n    result = [[0] * len(mat2[0]) for i in range(len(mat1))] \n    for i in range(len(mat1)): \n        for j in range(len(mat2[0])): \n            for k in range(len(mat2)): \n                result[i][j] += mat1[i][k] * mat2[k][j] \n  \n    return result","tok_input_length":128,"tok_output_length":90,"system_prompt":"","index":4808}
{"question":"Convert the following C code that takes a list and adds each number to the list to Python.","input":"int arr[] = {1, 2, 3, 4};\nint result = 0;\n\nfor (int i = 0; i < sizeof(arr) \/ sizeof(arr[0]); i++){\n  result += arr[i];\n}","expected_output":"arr = [1, 2, 3, 4]\nresult = 0\n\nfor i in range(len(arr)):\n  result += arr[i]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following C code that takes a list and adds each number to the list to Python.\n\n### Input:\nint arr[] = {1, 2, 3, 4};\nint result = 0;\n\nfor (int i = 0; i < sizeof(arr) \/ sizeof(arr[0]); i++){\n  result += arr[i];\n}\n\n### Output:\narr = [1, 2, 3, 4]\nresult = 0\n\nfor i in range(len(arr)):\n  result += arr[i]","tok_input_length":129,"tok_output_length":33,"system_prompt":"","index":9449}
{"question":"Generate a function in Python for finding the maximum value in a list of numbers with time complexity O(n).","input":"num_list = [3, 7, 4, 2, 8, 16, 1, 9, 10]","expected_output":"def max_val(num_list):\n\tif len(num_list) == 0:\n\t\treturn None\n\t\n\tmax_num = num_list[0]\n\t\n\tfor num in num_list:\n\t\tif num > max_num:\n\t\t\tmax_num = num\n\t\n\treturn max_num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python for finding the maximum value in a list of numbers with time complexity O(n).\n\n### Input:\nnum_list = [3, 7, 4, 2, 8, 16, 1, 9, 10]\n\n### Output:\ndef max_val(num_list):\n\tif len(num_list) == 0:\n\t\treturn None\n\t\n\tmax_num = num_list[0]\n\t\n\tfor num in num_list:\n\t\tif num > max_num:\n\t\t\tmax_num = num\n\t\n\treturn max_num","tok_input_length":129,"tok_output_length":51,"system_prompt":"","index":13997}
{"question":"Suggest an optimization technique to reduce the run time of this Python program.","input":"Python Program:\n\ndef time_function(n):\n    a = []\n    for i in range(n):\n        a.append(i)\n    return a","expected_output":"def time_function(n):\n    a = [i for i in range(n)]\n    return a\n\nThis will reduce the run time of the program as it eliminates the need for iterating over the range and appending to the list. Using list comprehension is faster and more memory efficient than regular looping.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an optimization technique to reduce the run time of this Python program.\n\n### Input:\nPython Program:\n\ndef time_function(n):\n    a = []\n    for i in range(n):\n        a.append(i)\n    return a\n\n### Output:\ndef time_function(n):\n    a = [i for i in range(n)]\n    return a\n\nThis will reduce the run time of the program as it eliminates the need for iterating over the range and appending to the list. Using list comprehension is faster and more memory efficient than regular looping.","tok_input_length":129,"tok_output_length":59,"system_prompt":"","index":7969}
{"question":"Write a Python program that takes a dictionary as an input, and prints the keys and values in alphabetical order.","input":"{'a': 1, 'b': 2, 'c': 3}","expected_output":"def print_dict_alphabetically(d):\n sorted_dict = {k: d[k] for k in sorted(d)}\n for key, value in sorted_dict.items():\n  print(key, value)\n\nprint_dict_alphabetically({'a': 1, 'b': 2, 'c': 3})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a dictionary as an input, and prints the keys and values in alphabetical order.\n\n### Input:\n{'a': 1, 'b': 2, 'c': 3}\n\n### Output:\ndef print_dict_alphabetically(d):\n sorted_dict = {k: d[k] for k in sorted(d)}\n for key, value in sorted_dict.items():\n  print(key, value)\n\nprint_dict_alphabetically({'a': 1, 'b': 2, 'c': 3})","tok_input_length":129,"tok_output_length":62,"system_prompt":"","index":14620}
{"question":"Write a Python program to apply a function to all the elements of a given list and return the mapped list.","input":"[1, 2, 3, 4, 5]","expected_output":"def applyFunc(lst, func):\n    mapped_list = []\n    for el in lst:\n        mapped_list.append(func(el))\n    return mapped_list\n\ndef square(x):\n    return x*x\n\nlst = [1, 2, 3, 4, 5]\n\nprint(applyFunc(lst, square))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to apply a function to all the elements of a given list and return the mapped list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef applyFunc(lst, func):\n    mapped_list = []\n    for el in lst:\n        mapped_list.append(func(el))\n    return mapped_list\n\ndef square(x):\n    return x*x\n\nlst = [1, 2, 3, 4, 5]\n\nprint(applyFunc(lst, square))","tok_input_length":129,"tok_output_length":65,"system_prompt":"","index":1869}
{"question":"Implement a function in Python to take a string of comma separated numbers and return the average of the numbers.","input":"\"3, 4, 5, 6, 7\"","expected_output":"def calculate_average(nums):\n nums_list = nums.split(\",\")\n total = 0\n for num in nums_list:\n total += float(num)\n return total \/ len(nums_list)\n \n# test code\nprint(calculate_average(\"3, 4, 5, 6, 7\")) # should print 5.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to take a string of comma separated numbers and return the average of the numbers.\n\n### Input:\n\"3, 4, 5, 6, 7\"\n\n### Output:\ndef calculate_average(nums):\n nums_list = nums.split(\",\")\n total = 0\n for num in nums_list:\n total += float(num)\n return total \/ len(nums_list)\n \n# test code\nprint(calculate_average(\"3, 4, 5, 6, 7\")) # should print 5.0","tok_input_length":129,"tok_output_length":66,"system_prompt":"","index":13783}
{"question":"Generate a Python program that removes all occurrences of an element from a list","input":"[1, 2, 2, 3, 2, 4]","expected_output":"def remove_element(arr, x):\n  new_arr = [i for i in arr if i != x] \n  return new_arr \n  \narr = [1, 2, 2, 3, 2, 4] \nx = 2\n\nnew_arr = remove_element(arr, x) \nprint(new_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that removes all occurrences of an element from a list\n\n### Input:\n[1, 2, 2, 3, 2, 4]\n\n### Output:\ndef remove_element(arr, x):\n  new_arr = [i for i in arr if i != x] \n  return new_arr \n  \narr = [1, 2, 2, 3, 2, 4] \nx = 2\n\nnew_arr = remove_element(arr, x) \nprint(new_arr)","tok_input_length":129,"tok_output_length":69,"system_prompt":"","index":6191}
{"question":"Sort the list in the following python code using the bubble sort algorithm.","input":"arr = [1, 10, 5, 4, 8]","expected_output":"def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nbubble_sort(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the list in the following python code using the bubble sort algorithm.\n\n### Input:\narr = [1, 10, 5, 4, 8]\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nbubble_sort(arr)","tok_input_length":129,"tok_output_length":71,"system_prompt":"","index":11888}
{"question":"Write a procedure in Python to rectify misspelled words in a paragraph.","input":"\"My favarite flowers are rose and tulples\"","expected_output":"import re\n\ndef fix_spelling(paragraph):\n    words = paragraph.split()\n    corrected_words = []\n    for word in words:\n        corrected_words.append(re.sub(r'[aeiou]',r'[aeiou]', word))\n \n    return \" \".join(corrected_words)\n\nprint(fix_spelling(\"My favarite flowers are rose and tulples\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a procedure in Python to rectify misspelled words in a paragraph.\n\n### Input:\n\"My favarite flowers are rose and tulples\"\n\n### Output:\nimport re\n\ndef fix_spelling(paragraph):\n    words = paragraph.split()\n    corrected_words = []\n    for word in words:\n        corrected_words.append(re.sub(r'[aeiou]',r'[aeiou]', word))\n \n    return \" \".join(corrected_words)\n\nprint(fix_spelling(\"My favarite flowers are rose and tulples\"))","tok_input_length":129,"tok_output_length":74,"system_prompt":"","index":14006}
{"question":"Produce a machine learning algorithm in Python that can identify digits from 0-9 in MNIST dataset.","input":"","expected_output":"from sklearn.neighbors import KNeighborsClassifier\n\n# Load the data\nfrom sklearn.datasets import fetch_openml\nX, y = fetch_openml('mnist_784', version=1, return_X_y=True)\n\n# Create the model and train it\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X, y)\n\n# Test the model\nprint(model.score(X, y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a machine learning algorithm in Python that can identify digits from 0-9 in MNIST dataset.\n\n### Input:\n\n\n### Output:\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load the data\nfrom sklearn.datasets import fetch_openml\nX, y = fetch_openml('mnist_784', version=1, return_X_y=True)\n\n# Create the model and train it\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X, y)\n\n# Test the model\nprint(model.score(X, y))","tok_input_length":129,"tok_output_length":80,"system_prompt":"","index":3048}
{"question":"Create a Python program for a count the number of occurrences of each letter in a given string.","input":"","expected_output":"def count_occurrences(string): \n    strings = list(string)\n    dict = dict() \n    for letter in strings: \n        if (letter in dict): \n            dict[letter] += 1\n        else: \n            dict[letter] = 1\n    return dict\n  \nmy_string = 'Hello World!'\nletter_occurrences = count_occurrences(my_string)\nprint(letter_occurrences)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for a count the number of occurrences of each letter in a given string.\n\n### Input:\n\n\n### Output:\ndef count_occurrences(string): \n    strings = list(string)\n    dict = dict() \n    for letter in strings: \n        if (letter in dict): \n            dict[letter] += 1\n        else: \n            dict[letter] = 1\n    return dict\n  \nmy_string = 'Hello World!'\nletter_occurrences = count_occurrences(my_string)\nprint(letter_occurrences)","tok_input_length":129,"tok_output_length":83,"system_prompt":"","index":11260}
{"question":"Create a Python program that can convert temperatures between celsius and fahrenheit.","input":"","expected_output":"def celsius_to_fahrenheit(temp):\n    fahrenheit = temp * 9\/5 + 32\n    return fahrenheit\n\ndef fahrenheit_to_celsius(temp):\n    celsius = (temp - 32) * 5\/9\n    return celsius\n\nprint(\"Fahrenheit to Celsius:\", fahrenheit_to_celsius(59))\nprint(\"Celsius to Fahrenheit:\", celsius_to_fahrenheit(15))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that can convert temperatures between celsius and fahrenheit.\n\n### Input:\n\n\n### Output:\ndef celsius_to_fahrenheit(temp):\n    fahrenheit = temp * 9\/5 + 32\n    return fahrenheit\n\ndef fahrenheit_to_celsius(temp):\n    celsius = (temp - 32) * 5\/9\n    return celsius\n\nprint(\"Fahrenheit to Celsius:\", fahrenheit_to_celsius(59))\nprint(\"Celsius to Fahrenheit:\", celsius_to_fahrenheit(15))","tok_input_length":129,"tok_output_length":87,"system_prompt":"","index":2629}
{"question":"Design a Python program to optimize the operation of a robot","input":"","expected_output":"\"\"\"\nDesign a Python program to optimize the operation of a robot\n\nThis program will take a function that maps the robot's movement from one cell to another in an environment, as well as a data structure that represents the cost associated with each cell as its input. The program will return an optimal path for the robot to take from a start cell to an end cell while minimizing its cost.\n\n\"\"\"\n\ndef optimize_robot(map_func, cost_map):\n    pass","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to optimize the operation of a robot\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python program to optimize the operation of a robot\n\nThis program will take a function that maps the robot's movement from one cell to another in an environment, as well as a data structure that represents the cost associated with each cell as its input. The program will return an optimal path for the robot to take from a start cell to an end cell while minimizing its cost.\n\n\"\"\"\n\ndef optimize_robot(map_func, cost_map):\n    pass","tok_input_length":129,"tok_output_length":90,"system_prompt":"","index":3329}
{"question":"Build a linear regression model using python.","input":"","expected_output":"import pandas as pd \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error\n\n# Read data\ndata = pd.read_csv('data.csv')\nX = data[['x']]\ny = data['y']\n\n# Create a linear regression model\nmodel = LinearRegression()\nmodel.fit(X,y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Calculate the mean squared error\nmse = mean_squared_error(y, predictions)\nprint(mse)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a linear regression model using python.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error\n\n# Read data\ndata = pd.read_csv('data.csv')\nX = data[['x']]\ny = data['y']\n\n# Create a linear regression model\nmodel = LinearRegression()\nmodel.fit(X,y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Calculate the mean squared error\nmse = mean_squared_error(y, predictions)\nprint(mse)","tok_input_length":129,"tok_output_length":94,"system_prompt":"","index":5977}
{"question":"Read an uncommented Python program, comment all the lines, and print the commented version.","input":"def func_name(param1, param2):\n    a = param1 + param2\n    b = param1 * param2\n    return a, b","expected_output":"def func_name(param1, param2):\n    # Add two parameters\n    a = param1 + param2\n    \n    # Multiply two parameters\n    b = param1 * param2\n    \n    # Return a and b\n    return a, b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRead an uncommented Python program, comment all the lines, and print the commented version.\n\n### Input:\ndef func_name(param1, param2):\n    a = param1 + param2\n    b = param1 * param2\n    return a, b\n\n### Output:\ndef func_name(param1, param2):\n    # Add two parameters\n    a = param1 + param2\n    \n    # Multiply two parameters\n    b = param1 * param2\n    \n    # Return a and b\n    return a, b","tok_input_length":130,"tok_output_length":52,"system_prompt":"","index":4144}
{"question":"Create a Python program to track and record the frequency of each word from a given list of words.","input":"['Good', 'Outlook', 'Good', 'Luck', 'Bad', 'Outlook', 'Good']","expected_output":"words = ['Good', 'Outlook', 'Good', 'Luck', 'Bad', 'Outlook', 'Good']\n \nfreq = {}\n \nfor word in words:\n if word in freq:\n freq[word] += 1\n else:\n freq[word] = 1\n \nprint(freq)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to track and record the frequency of each word from a given list of words.\n\n### Input:\n['Good', 'Outlook', 'Good', 'Luck', 'Bad', 'Outlook', 'Good']\n\n### Output:\nwords = ['Good', 'Outlook', 'Good', 'Luck', 'Bad', 'Outlook', 'Good']\n \nfreq = {}\n \nfor word in words:\n if word in freq:\n freq[word] += 1\n else:\n freq[word] = 1\n \nprint(freq)","tok_input_length":130,"tok_output_length":60,"system_prompt":"","index":7273}
{"question":"Write a function in Python to traverse a multi-dimensional array and print each item in the array.","input":"[[1,2,3], [4,5,6], [7,8,9]]","expected_output":"def traverse_array(arr): \n if isinstance(arr, list) or isinstance(arr, tuple): \n for item in arr:\n traverse_array(item)\n else:\n print(arr)\n\narr = [[1,2,3], [4,5,6], [7,8,9]] \ntraverse_array(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to traverse a multi-dimensional array and print each item in the array.\n\n### Input:\n[[1,2,3], [4,5,6], [7,8,9]]\n\n### Output:\ndef traverse_array(arr): \n if isinstance(arr, list) or isinstance(arr, tuple): \n for item in arr:\n traverse_array(item)\n else:\n print(arr)\n\narr = [[1,2,3], [4,5,6], [7,8,9]] \ntraverse_array(arr)","tok_input_length":130,"tok_output_length":63,"system_prompt":"","index":12982}
{"question":"Create an algorithm in Python that takes an array of strings and removes all duplicates","input":"['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']","expected_output":"input_array = ['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']\n\nunique_array = []\nfor item in input_array:\n if item not in unique_array:\n unique_array.append(item)\n\nprint(unique_array) #['Apple', 'Orange', 'Mango', 'Banana']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes an array of strings and removes all duplicates\n\n### Input:\n['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']\n\n### Output:\ninput_array = ['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']\n\nunique_array = []\nfor item in input_array:\n if item not in unique_array:\n unique_array.append(item)\n\nprint(unique_array) #['Apple', 'Orange', 'Mango', 'Banana']","tok_input_length":130,"tok_output_length":66,"system_prompt":"","index":3265}
{"question":"Design a Python program to extract the duplicate elements from an integer array.","input":"[1, 2, 3, 2, 4, 5, 5]","expected_output":"def extractDuplicates(nums): \n    result = [] \n\n    for i in range(len(nums)): \n        k = i + 1 \n        for j in range(k, len(nums)): \n            if nums[i] == nums[j] and nums[i] not in result: \n                result.append(nums[i]) \n  \n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to extract the duplicate elements from an integer array.\n\n### Input:\n[1, 2, 3, 2, 4, 5, 5]\n\n### Output:\ndef extractDuplicates(nums): \n    result = [] \n\n    for i in range(len(nums)): \n        k = i + 1 \n        for j in range(k, len(nums)): \n            if nums[i] == nums[j] and nums[i] not in result: \n                result.append(nums[i]) \n  \n    return result","tok_input_length":130,"tok_output_length":68,"system_prompt":"","index":1653}
{"question":"Write a function in Python that takes a single argument, an unsigned integer, and returns the binary representation of that argument as a string.","input":"number = 5","expected_output":"def IntToBinString(number):\n    if number == 0:\n        return \"0\"\n    ret = \"\"\n    while number > 0:\n        if number % 2 == 1:\n            ret = \"1\" + ret\n        else:\n            ret = \"0\" + ret\n        number \/\/= 2\n    return ret","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a single argument, an unsigned integer, and returns the binary representation of that argument as a string.\n\n### Input:\nnumber = 5\n\n### Output:\ndef IntToBinString(number):\n    if number == 0:\n        return \"0\"\n    ret = \"\"\n    while number > 0:\n        if number % 2 == 1:\n            ret = \"1\" + ret\n        else:\n            ret = \"0\" + ret\n        number \/\/= 2\n    return ret","tok_input_length":130,"tok_output_length":71,"system_prompt":"","index":13483}
{"question":"Create a Python function to calculate the standard deviation of a set of numbers.","input":"[1, 2, 3, 4, 5]","expected_output":"def calculate_std(numbers):\n  mean = sum(numbers)\/len(numbers)\n  squared_differences = [(num-mean)**2 for num in numbers]\n  variance = sum(squared_differences) \/ len(numbers)\n  return variance**0.5\n\nresult = calculate_std([1, 2, 3, 4, 5])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to calculate the standard deviation of a set of numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef calculate_std(numbers):\n  mean = sum(numbers)\/len(numbers)\n  squared_differences = [(num-mean)**2 for num in numbers]\n  variance = sum(squared_differences) \/ len(numbers)\n  return variance**0.5\n\nresult = calculate_std([1, 2, 3, 4, 5])\nprint(result)","tok_input_length":130,"tok_output_length":73,"system_prompt":"","index":16584}
{"question":"In Python, create a function that takes a list of strings and capitalizes the first letter of each word.","input":"['hello', 'world']","expected_output":"def capitalize_each_word(string_list):\n  \"\"\"Capitalizes the first letter of each word in a list of strings.\"\"\"\n  capitalized_strings = []\n  for s in string_list:\n    capitalized_strings.append(s.title())\n\n  return capitalized_strings\n\nif __name__ == \"__main__\":\n  string_list = ['hello', 'world']\n  print(capitalize_each_word(string_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a function that takes a list of strings and capitalizes the first letter of each word.\n\n### Input:\n['hello', 'world']\n\n### Output:\ndef capitalize_each_word(string_list):\n  \"\"\"Capitalizes the first letter of each word in a list of strings.\"\"\"\n  capitalized_strings = []\n  for s in string_list:\n    capitalized_strings.append(s.title())\n\n  return capitalized_strings\n\nif __name__ == \"__main__\":\n  string_list = ['hello', 'world']\n  print(capitalize_each_word(string_list))","tok_input_length":130,"tok_output_length":75,"system_prompt":"","index":4916}
{"question":"Create a function in Python to read specified properties from a list.","input":"props = ['name', 'age', 'gender']","expected_output":"def read_props(props):\n    \"\"\"\n    Read listed properties from a list.\n    \n    Args:\n        props (list): The list containing properties to be read.\n    \n    Returns:\n        tuple: Returns a tuple with values of the specified properties.\n    \"\"\"\n    data = list()\n    for prop in props:\n        data.append(input(\"Enter {}: \".format(prop)))\n    return tuple(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to read specified properties from a list.\n\n### Input:\nprops = ['name', 'age', 'gender']\n\n### Output:\ndef read_props(props):\n    \"\"\"\n    Read listed properties from a list.\n    \n    Args:\n        props (list): The list containing properties to be read.\n    \n    Returns:\n        tuple: Returns a tuple with values of the specified properties.\n    \"\"\"\n    data = list()\n    for prop in props:\n        data.append(input(\"Enter {}: \".format(prop)))\n    return tuple(data)","tok_input_length":130,"tok_output_length":79,"system_prompt":"","index":6810}
{"question":"Write a Python script to search a given dictionary for a given word.","input":"dictionary = {\"hello\": \"Str","expected_output":"def search_word(word, dictionary):\n    if word in dictionary.keys():\n        return dictionary[word]\n    else:\n        return None\n\ndictionary = {'hello': 'string', 'goodbye': 'bye'}\n\nword = 'hello'\n\nresult = search_word(word, dictionary)\n\nif result:\n    print('Word found in dictionary: ' + result)\n\nelse:\n    print('Word not found in dictionary.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to search a given dictionary for a given word.\n\n### Input:\ndictionary = {\"hello\": \"Str\n\n### Output:\ndef search_word(word, dictionary):\n    if word in dictionary.keys():\n        return dictionary[word]\n    else:\n        return None\n\ndictionary = {'hello': 'string', 'goodbye': 'bye'}\n\nword = 'hello'\n\nresult = search_word(word, dictionary)\n\nif result:\n    print('Word found in dictionary: ' + result)\n\nelse:\n    print('Word not found in dictionary.')","tok_input_length":130,"tok_output_length":81,"system_prompt":"","index":13757}
{"question":"Write a Python program to turn a string into Pig Latin.","input":"string = \"Hello World\"","expected_output":"def toPigLatin(s):\n   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n   if s[0] in vowels:\n      return s + 'way'\n   else:\n      return s[1:] + s[0] + 'ay'\n      \nprint(toPigLatin(\"Hello World\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to turn a string into Pig Latin.\n\n### Input:\nstring = \"Hello World\"\n\n### Output:\ndef toPigLatin(s):\n   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n   if s[0] in vowels:\n      return s + 'way'\n   else:\n      return s[1:] + s[0] + 'ay'\n      \nprint(toPigLatin(\"Hello World\"))","tok_input_length":130,"tok_output_length":85,"system_prompt":"","index":17304}
{"question":"What code would you write to implement an efficient binary search in Python?","input":"","expected_output":"def binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n\n  while low <= high:\n    mid = (low + high) \/\/ 2 # floor division\n    guess = arr[mid]\n\n    if guess == target:\n      return mid\n    elif guess > target:\n      high = mid - 1\n    else:\n      low = mid + 1\n  return None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat code would you write to implement an efficient binary search in Python?\n\n### Input:\n\n\n### Output:\ndef binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n\n  while low <= high:\n    mid = (low + high) \/\/ 2 # floor division\n    guess = arr[mid]\n\n    if guess == target:\n      return mid\n    elif guess > target:\n      high = mid - 1\n    else:\n      low = mid + 1\n  return None","tok_input_length":130,"tok_output_length":89,"system_prompt":"","index":4772}
{"question":"Generate a Python program to perform string matching.","input":"","expected_output":"def string_match(str1, str2):\n    if len(str1) > len(str2):\n        longer, shorter = str1, str2\n    else:\n        longer, shorter = str2, str1\n\n    # Check if strings are the same for all possible shifts\n    for i in range(len(longer)-len(shorter)+1):\n        if longer[i:len(shorter)+i] == shorter:\n            return True\n\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to perform string matching.\n\n### Input:\n\n\n### Output:\ndef string_match(str1, str2):\n    if len(str1) > len(str2):\n        longer, shorter = str1, str2\n    else:\n        longer, shorter = str2, str1\n\n    # Check if strings are the same for all possible shifts\n    for i in range(len(longer)-len(shorter)+1):\n        if longer[i:len(shorter)+i] == shorter:\n            return True\n\n    return False","tok_input_length":130,"tok_output_length":94,"system_prompt":"","index":5497}
{"question":"Given a JSON object, write a python program to print the square of every value, only if the value is even.","input":"{\n \"a\": 1,\n \"b\": 2,\n \"c\": 3,\n \"d\": 4\n}","expected_output":"import json\n\ndata = {\n \"a\": 1,\n \"b\": 2,\n \"c\": 3,\n \"d\": 4\n}\n\nfor key, value in data.items():\n if value % 2 == 0:\n print(value**2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a JSON object, write a python program to print the square of every value, only if the value is even.\n\n### Input:\n{\n \"a\": 1,\n \"b\": 2,\n \"c\": 3,\n \"d\": 4\n}\n\n### Output:\nimport json\n\ndata = {\n \"a\": 1,\n \"b\": 2,\n \"c\": 3,\n \"d\": 4\n}\n\nfor key, value in data.items():\n if value % 2 == 0:\n print(value**2)","tok_input_length":131,"tok_output_length":54,"system_prompt":"","index":6007}
{"question":"Devolop a Python code to remove the duplicates from a given list and sort them in ascending order.","input":"[2, 8, 5, 2, 6, 3, 4]","expected_output":"my_list = [2, 8, 5, 2, 6, 3, 4]\nmy_list = list(dict.fromkeys(my_list))\nmy_list.sort()\nprint(my_list) # [2, 3, 4, 5, 6, 8]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevolop a Python code to remove the duplicates from a given list and sort them in ascending order.\n\n### Input:\n[2, 8, 5, 2, 6, 3, 4]\n\n### Output:\nmy_list = [2, 8, 5, 2, 6, 3, 4]\nmy_list = list(dict.fromkeys(my_list))\nmy_list.sort()\nprint(my_list) # [2, 3, 4, 5, 6, 8]","tok_input_length":131,"tok_output_length":62,"system_prompt":"","index":630}
{"question":"In Python, create a function that takes an list of numbers and returns the list with any duplicate values removed.","input":"[1,2,3,3,2,1,4,5]","expected_output":"def remove_duplicates(list_num):\n    return list(dict.fromkeys(list_num))\n\nlist_num = [1,2,3,3,2,1,4,5]\nlist_num = remove_duplicates(list_num)\nprint(list_num)  \/\/ [1, 2, 3, 4, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a function that takes an list of numbers and returns the list with any duplicate values removed.\n\n### Input:\n[1,2,3,3,2,1,4,5]\n\n### Output:\ndef remove_duplicates(list_num):\n    return list(dict.fromkeys(list_num))\n\nlist_num = [1,2,3,3,2,1,4,5]\nlist_num = remove_duplicates(list_num)\nprint(list_num)  \/\/ [1, 2, 3, 4, 5]","tok_input_length":131,"tok_output_length":65,"system_prompt":"","index":8139}
{"question":"Enhance the following Python code for saving a webpage to a local directory.","input":"import urllib.request\n\ndef save_webpage(url, path):\n urllib.request.urlretrieve(url, path)","expected_output":"import urllib.request\nfrom urllib.parse import urlparse\nimport os\n\ndef save_webpage(url, path):\n parsed_url = urlparse(url)\n path = os.path.join(path, parsed_url.netloc + parsed_url.path)\n if not os.path.exists(os.path.dirname(path)):\n os.makedirs(os.path.dirname(path))\n urllib.request.urlretrieve(url, path)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEnhance the following Python code for saving a webpage to a local directory.\n\n### Input:\nimport urllib.request\n\ndef save_webpage(url, path):\n urllib.request.urlretrieve(url, path)\n\n### Output:\nimport urllib.request\nfrom urllib.parse import urlparse\nimport os\n\ndef save_webpage(url, path):\n parsed_url = urlparse(url)\n path = os.path.join(path, parsed_url.netloc + parsed_url.path)\n if not os.path.exists(os.path.dirname(path)):\n os.makedirs(os.path.dirname(path))\n urllib.request.urlretrieve(url, path)","tok_input_length":131,"tok_output_length":69,"system_prompt":"","index":15967}
{"question":"Create a Python program to get the least common multiple (LCM) of two numbers.","input":"num1 = 9\nnum2 = 17","expected_output":"def lcm(num1, num2):\n  if num1 > num2:\n    greater = num1\n  else:\n    greater = num2\n\n  while(True):\n    if((greater % num1 == 0) and (greater % num2 == 0)):\n      lcm = greater\n      break \n    greater += 1\n\n  return lcm","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to get the least common multiple (LCM) of two numbers.\n\n### Input:\nnum1 = 9\nnum2 = 17\n\n### Output:\ndef lcm(num1, num2):\n  if num1 > num2:\n    greater = num1\n  else:\n    greater = num2\n\n  while(True):\n    if((greater % num1 == 0) and (greater % num2 == 0)):\n      lcm = greater\n      break \n    greater += 1\n\n  return lcm","tok_input_length":131,"tok_output_length":74,"system_prompt":"","index":4280}
{"question":"Suggest a completion for the following Python code that finds the median of a list of numbers.","input":"def median(nums):\n    nums.sort()","expected_output":"def median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        left = len(nums) \/\/ 2 - 1\n        right = len(nums) \/\/ 2\n        return (nums[left] + nums[right]) \/ 2\n    else:\n        middle = len(nums) \/\/ 2\n        return nums[middle]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following Python code that finds the median of a list of numbers.\n\n### Input:\ndef median(nums):\n    nums.sort()\n\n### Output:\ndef median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        left = len(nums) \/\/ 2 - 1\n        right = len(nums) \/\/ 2\n        return (nums[left] + nums[right]) \/ 2\n    else:\n        middle = len(nums) \/\/ 2\n        return nums[middle]","tok_input_length":131,"tok_output_length":77,"system_prompt":"","index":2784}
{"question":"Generate a valid code in Python that takes two numbers as input from user, and checks if one is divisible by another","input":"","expected_output":"num1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\nif (num1 % num2 == 0):\n    print(\"The number %s is divisible by %s.\" % (num1, num2))\nelse:\n    print(\"The number %s is not divisible by %s.\" % (num1, num2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid code in Python that takes two numbers as input from user, and checks if one is divisible by another\n\n### Input:\n\n\n### Output:\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\nif (num1 % num2 == 0):\n    print(\"The number %s is divisible by %s.\" % (num1, num2))\nelse:\n    print(\"The number %s is not divisible by %s.\" % (num1, num2))","tok_input_length":131,"tok_output_length":80,"system_prompt":"","index":6529}
{"question":"Create a Python script that pulls data from an API and stores it in a database.","input":"Not applicable","expected_output":"import requests\nimport json\nimport sqlite3\n\n# Make a GET request to the API\nresponse = requests.get(url)\ndata = response.json()\n\n# Save the data to a database\nconn = sqlite3.connect('data.db')\nc = conn.cursor()\nfor item in data:\n    c.execute(\"INSERT INTO items VALUES (?, ?)\", (item['id'], item['name']))\nconn.commit()\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that pulls data from an API and stores it in a database.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport json\nimport sqlite3\n\n# Make a GET request to the API\nresponse = requests.get(url)\ndata = response.json()\n\n# Save the data to a database\nconn = sqlite3.connect('data.db')\nc = conn.cursor()\nfor item in data:\n    c.execute(\"INSERT INTO items VALUES (?, ?)\", (item['id'], item['name']))\nconn.commit()\nconn.close()","tok_input_length":131,"tok_output_length":84,"system_prompt":"","index":677}
{"question":"Develop a program in Python for converting a base 10 number to binary.","input":"17","expected_output":"def decimalToBinary(n):\n    binary = 0\n    power = 1\n    \n    while (n != 0):\n        last_bit = n % 2\n        binary = binary + last_bit * power\n        n = n \/\/ 2\n        power = power * 10\n \n    return binary\n\nn = 17\nprint('Binary Representation of', n, 'is', decimalToBinary(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python for converting a base 10 number to binary.\n\n### Input:\n17\n\n### Output:\ndef decimalToBinary(n):\n    binary = 0\n    power = 1\n    \n    while (n != 0):\n        last_bit = n % 2\n        binary = binary + last_bit * power\n        n = n \/\/ 2\n        power = power * 10\n \n    return binary\n\nn = 17\nprint('Binary Representation of', n, 'is', decimalToBinary(n))","tok_input_length":131,"tok_output_length":87,"system_prompt":"","index":2357}
{"question":"Write a function in Python that returns the nth term in a Fibonacci sequence.","input":"","expected_output":"# Fibonacci sequence generator\ndef fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 1:\n    return a\n  elif n == 2:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n    return b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that returns the nth term in a Fibonacci sequence.\n\n### Input:\n\n\n### Output:\n# Fibonacci sequence generator\ndef fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 1:\n    return a\n  elif n == 2:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n    return b","tok_input_length":131,"tok_output_length":89,"system_prompt":"","index":14270}
{"question":"Find and fix a bug in this piece of Python code","input":"def sum_list(list_of_numbers):\n    # calculates the sum of a list of numbers\n    result = 0\n    for number in list_of_numbers:\n        result += number\n    return result","expected_output":"def sum_list(list_of_numbers):\n    # calculates the sum of a list of numbers\n    result = 0\n    for number in list_of_numbers:\n        result += number\n    return int(result) # convert to an integer before returning the result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind and fix a bug in this piece of Python code\n\n### Input:\ndef sum_list(list_of_numbers):\n    # calculates the sum of a list of numbers\n    result = 0\n    for number in list_of_numbers:\n        result += number\n    return result\n\n### Output:\ndef sum_list(list_of_numbers):\n    # calculates the sum of a list of numbers\n    result = 0\n    for number in list_of_numbers:\n        result += number\n    return int(result) # convert to an integer before returning the result","tok_input_length":132,"tok_output_length":52,"system_prompt":"","index":10957}
{"question":"Using Python, write a program that takes a list of strings as input and returns a dictionary where the keys are the strings and the values are the lengths of the strings.","input":"['apple', 'banana', 'orange']","expected_output":"def length_dict(strings):\n    length_dict = {}\n    for string in strings:\n        length_dict[string] = len(string)\n    return length_dict\n\nprint(length_dict(['apple', 'banana', 'orange'])) # {'apple': 5, 'banana': 6, 'orange': 6}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, write a program that takes a list of strings as input and returns a dictionary where the keys are the strings and the values are the lengths of the strings.\n\n### Input:\n['apple', 'banana', 'orange']\n\n### Output:\ndef length_dict(strings):\n    length_dict = {}\n    for string in strings:\n        length_dict[string] = len(string)\n    return length_dict\n\nprint(length_dict(['apple', 'banana', 'orange'])) # {'apple': 5, 'banana': 6, 'orange': 6}","tok_input_length":132,"tok_output_length":62,"system_prompt":"","index":10586}
{"question":"Create a sorting algorithm in Python for evaluating and sorting a list of tuples with two elements.","input":"Input List: [('a', 3), ('b', 2), ('c', 1)]","expected_output":"def sort_list_tuples(tuples):\n  # sort by the second element in each tuple\n  return sorted(tuples, key=lambda x: x[1])\n\n# test code\ntuples = [('a', 3), ('b', 2), ('c', 1)] \nprint(sort_list_tuples(tuples))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python for evaluating and sorting a list of tuples with two elements.\n\n### Input:\nInput List: [('a', 3), ('b', 2), ('c', 1)]\n\n### Output:\ndef sort_list_tuples(tuples):\n  # sort by the second element in each tuple\n  return sorted(tuples, key=lambda x: x[1])\n\n# test code\ntuples = [('a', 3), ('b', 2), ('c', 1)] \nprint(sort_list_tuples(tuples))","tok_input_length":132,"tok_output_length":66,"system_prompt":"","index":6253}
{"question":"Create a program in Python to predict the sentiment of a phrase using a provided pretrained model.","input":"model_path = \"mymodel.model\"\nphrase = \"This is a great day\"","expected_output":"import numpy as np\nfrom keras.models import load_model\n\n# Load the model\nmodel = load_model(model_path)\n\n# Encode the phrase\nphrase_encoded = np.array([phrase])\n\n# Make the prediction\nprediction = model.predict(phrase_encoded)\n\n# Print the result\nprint(\"The sentiment of the phrase is: {}\".format(prediction))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to predict the sentiment of a phrase using a provided pretrained model.\n\n### Input:\nmodel_path = \"mymodel.model\"\nphrase = \"This is a great day\"\n\n### Output:\nimport numpy as np\nfrom keras.models import load_model\n\n# Load the model\nmodel = load_model(model_path)\n\n# Encode the phrase\nphrase_encoded = np.array([phrase])\n\n# Make the prediction\nprediction = model.predict(phrase_encoded)\n\n# Print the result\nprint(\"The sentiment of the phrase is: {}\".format(prediction))","tok_input_length":132,"tok_output_length":69,"system_prompt":"","index":10743}
{"question":"Create a REST API for a simple \"hello world\" application in Python. The API should have endpoints for greeting a visitor and returning the current date and time.","input":"Not applicable","expected_output":"# main.py\nimport datetime\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef hello():\n greeting = \"Hello, world!\"\n return jsonify(greeting)\n\n@app.route('\/date')\ndef date():\n now = datetime.datetime.now()\n return jsonify(now)\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API for a simple \"hello world\" application in Python. The API should have endpoints for greeting a visitor and returning the current date and time.\n\n### Input:\nNot applicable\n\n### Output:\n# main.py\nimport datetime\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef hello():\n greeting = \"Hello, world!\"\n return jsonify(greeting)\n\n@app.route('\/date')\ndef date():\n now = datetime.datetime.now()\n return jsonify(now)\n\nif __name__ == '__main__':\n app.run(debug=True)","tok_input_length":132,"tok_output_length":70,"system_prompt":"","index":15153}
{"question":"Generate a Python script to create a random password of length 8 characters consisting of alphabets(lower and upper), numbers, and symbols.","input":"Not applicable","expected_output":"import random\nimport string\n\n# generate a random password\ndef randomPassword():\n password = ''\n\n all_characters = string.ascii_letters + string.digits + string.punctuation\n # loop over the length\n for _ in range(8):\n # select a random character\n password += random.choice(all_characters)\n\n return password\n\n# print the generated password\nprint(randomPassword())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to create a random password of length 8 characters consisting of alphabets(lower and upper), numbers, and symbols.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\n# generate a random password\ndef randomPassword():\n password = ''\n\n all_characters = string.ascii_letters + string.digits + string.punctuation\n # loop over the length\n for _ in range(8):\n # select a random character\n password += random.choice(all_characters)\n\n return password\n\n# print the generated password\nprint(randomPassword())","tok_input_length":132,"tok_output_length":74,"system_prompt":"","index":13453}
{"question":"Use a Python library to visualize a Gaussian normal distribution with the mean set to 5 and the standard deviation set to 1.","input":"","expected_output":"import matplotlib.pyplot as plt \nimport numpy as np\n\nmean = 5 \nstd = 1 \nx = np.linspace(mean - 3*std, mean+3*std, 100)\nplt.plot(x, 1\/(np.sqrt(2*np.pi*std**2)) *np.exp(-(x-mean)**2\/(2*std**2))) \nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a Python library to visualize a Gaussian normal distribution with the mean set to 5 and the standard deviation set to 1.\n\n### Input:\n\n\n### Output:\nimport matplotlib.pyplot as plt \nimport numpy as np\n\nmean = 5 \nstd = 1 \nx = np.linspace(mean - 3*std, mean+3*std, 100)\nplt.plot(x, 1\/(np.sqrt(2*np.pi*std**2)) *np.exp(-(x-mean)**2\/(2*std**2))) \nplt.show()","tok_input_length":132,"tok_output_length":79,"system_prompt":"","index":4784}
{"question":"Create a webserver with Python which listens at port 80 and responds with a \"Hello World!\" message.","input":"","expected_output":"import http.server\n\nserver_address = ('', 80)\n\nclass MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text\/html')\n        self.end_headers()\n        self.wfile.write(b\"Hello World!\")\n\nhttpd = http.server.HTTPServer(server_address, MyHttpRequestHandler)\nhttpd.serve_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a webserver with Python which listens at port 80 and responds with a \"Hello World!\" message.\n\n### Input:\n\n\n### Output:\nimport http.server\n\nserver_address = ('', 80)\n\nclass MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text\/html')\n        self.end_headers()\n        self.wfile.write(b\"Hello World!\")\n\nhttpd = http.server.HTTPServer(server_address, MyHttpRequestHandler)\nhttpd.serve_forever()","tok_input_length":132,"tok_output_length":83,"system_prompt":"","index":2605}
{"question":"Create a command-line tool in Python that can calculate the sum of two numbers.","input":"Not applicable","expected_output":"import argparse\n\n# Create a parser\nparser = argparse.ArgumentParser()\n# Add the arguments\nparser.add_argument('--num1', type=int, help='First number')\nparser.add_argument('--num2', type=int, help='Second number')\n# Execute the parse_args() method\nargs = parser.parse_args()\n\n#Calculate the sum\nsum = args.num1 + args.num2\n#Print the sum\nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command-line tool in Python that can calculate the sum of two numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport argparse\n\n# Create a parser\nparser = argparse.ArgumentParser()\n# Add the arguments\nparser.add_argument('--num1', type=int, help='First number')\nparser.add_argument('--num2', type=int, help='Second number')\n# Execute the parse_args() method\nargs = parser.parse_args()\n\n#Calculate the sum\nsum = args.num1 + args.num2\n#Print the sum\nprint(sum)","tok_input_length":132,"tok_output_length":86,"system_prompt":"","index":4048}
{"question":"Develop a Python class to represent a stack with the functions push, pop and peek.","input":"","expected_output":"class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.items.pop()\n    \n    def peek(self):\n        if self.is_empty():\n            return None\n        return self.items[-1]\n    \n    def is_empty(self):\n        return self.items == []","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python class to represent a stack with the functions push, pop and peek.\n\n### Input:\n\n\n### Output:\nclass Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.items.pop()\n    \n    def peek(self):\n        if self.is_empty():\n            return None\n        return self.items[-1]\n    \n    def is_empty(self):\n        return self.items == []","tok_input_length":132,"tok_output_length":88,"system_prompt":"","index":6518}
{"question":"Produce a python program that calculates the prime factors of a given positive integer.","input":"","expected_output":"def prime_factors(num):\n    \"\"\"Returns the prime factors of a given positive integer.\n    \n    Args:\n        num (int): Positive integer.\n        \n    Returns:\n        list: List of prime factors.\n    \"\"\"\n    factors = []\n    d = 2\n    while num > 1:\n        while num % d == 0:\n            factors.append(d)\n            num \/= d\n        d += 1\n    return factors","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a python program that calculates the prime factors of a given positive integer.\n\n### Input:\n\n\n### Output:\ndef prime_factors(num):\n    \"\"\"Returns the prime factors of a given positive integer.\n    \n    Args:\n        num (int): Positive integer.\n        \n    Returns:\n        list: List of prime factors.\n    \"\"\"\n    factors = []\n    d = 2\n    while num > 1:\n        while num % d == 0:\n            factors.append(d)\n            num \/= d\n        d += 1\n    return factors","tok_input_length":132,"tok_output_length":89,"system_prompt":"","index":8186}
{"question":"Design an algorithm in Python to search a number in an sorted array.","input":"","expected_output":"def search(arr, x): \n    l = 0\n    r = len(arr) - 1\n    while l <= r: \n        mid = l + (r - l) \/\/ 2\n\n        if arr[mid] == x: \n            return mid \n        \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        else: \n            r = mid - 1\n  \n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to search a number in an sorted array.\n\n### Input:\n\n\n### Output:\ndef search(arr, x): \n    l = 0\n    r = len(arr) - 1\n    while l <= r: \n        mid = l + (r - l) \/\/ 2\n\n        if arr[mid] == x: \n            return mid \n        \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        else: \n            r = mid - 1\n  \n    return -1","tok_input_length":132,"tok_output_length":91,"system_prompt":"","index":17146}
{"question":"Explain a method of hashing a string in Python.","input":"","expected_output":"One method of hashing a string in Python is to use the built-in hash() function. This function generates a hash code for a given string, which is a numerical representation of the string\u2019s contents. It is important to note that the hash code generated is a fixed-length numerical representation regardless of the length of the string provided. Additionally, the hash code is unique for each input string and is deterministic, meaning it will always produce the same output for the same input.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain a method of hashing a string in Python.\n\n### Input:\n\n\n### Output:\nOne method of hashing a string in Python is to use the built-in hash() function. This function generates a hash code for a given string, which is a numerical representation of the string\u2019s contents. It is important to note that the hash code generated is a fixed-length numerical representation regardless of the length of the string provided. Additionally, the hash code is unique for each input string and is deterministic, meaning it will always produce the same output for the same input.","tok_input_length":132,"tok_output_length":94,"system_prompt":"","index":5146}
{"question":"Generate a Python program to classify a given feature set into two classes","input":"features = [[9, 3], [7, 2], [4, 1], [0, 5]]\nclass_labels = ['good', 'bad']","expected_output":"def classify(features, class_labels):\n    decision_boundary = 5 \n    predictions = []\n    for feature in features:\n        if feature[0] > decision_boundary:\n            predictions.append(class_labels[0])\n        else:\n            predictions.append(class_labels[1])\n    return predictions","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to classify a given feature set into two classes\n\n### Input:\nfeatures = [[9, 3], [7, 2], [4, 1], [0, 5]]\nclass_labels = ['good', 'bad']\n\n### Output:\ndef classify(features, class_labels):\n    decision_boundary = 5 \n    predictions = []\n    for feature in features:\n        if feature[0] > decision_boundary:\n            predictions.append(class_labels[0])\n        else:\n            predictions.append(class_labels[1])\n    return predictions","tok_input_length":133,"tok_output_length":57,"system_prompt":"","index":3831}
{"question":"Generate a Python program to transform a given list of integers into a dictionary with each list element as the key and its square root as the value.","input":"[4, 9, 16, 25]","expected_output":"def to_dict(lst): \n    # Initialize a new dictionary \n    new_dict = {}\n      \n    # Iterate over the list and assign the square root of each element as value  \n    for item in lst:\n        new_dict[item] = item**0.5\n      \n    # Return the dictionary  \n    return new_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to transform a given list of integers into a dictionary with each list element as the key and its square root as the value.\n\n### Input:\n[4, 9, 16, 25]\n\n### Output:\ndef to_dict(lst): \n    # Initialize a new dictionary \n    new_dict = {}\n      \n    # Iterate over the list and assign the square root of each element as value  \n    for item in lst:\n        new_dict[item] = item**0.5\n      \n    # Return the dictionary  \n    return new_dict","tok_input_length":133,"tok_output_length":65,"system_prompt":"","index":1354}
{"question":"Create a Python program that prints the most frequent item in a given list.","input":"[6, 5, 8, 3, 6, 5, 8, 6]","expected_output":"from collections import Counter\n\ndef most_frequent(items):\n    c = Counter(items)\n    return c.most_common(1)[0][0]\n\nitems = [6, 5, 8, 3, 6, 5, 8, 6]\nresult = most_frequent(items)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints the most frequent item in a given list.\n\n### Input:\n[6, 5, 8, 3, 6, 5, 8, 6]\n\n### Output:\nfrom collections import Counter\n\ndef most_frequent(items):\n    c = Counter(items)\n    return c.most_common(1)[0][0]\n\nitems = [6, 5, 8, 3, 6, 5, 8, 6]\nresult = most_frequent(items)\nprint(result)","tok_input_length":133,"tok_output_length":67,"system_prompt":"","index":11095}
{"question":"Write a Python program that web-scrapes data from a website and stores it in a structured format (e.g. JSON, CSV).","input":"Example Website: https:\/\/example.com","expected_output":"import requests\nimport json\n\n# Make a get request to get the data\nresponse = requests.get('https:\/\/example.com')\n\n# Store the data in a structured format\ndata = json.loads(response.text)\n\n# Save the data to a json file\nwith open('example.json', 'w') as f:\n json.dump(data, f)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that web-scrapes data from a website and stores it in a structured format (e.g. JSON, CSV).\n\n### Input:\nExample Website: https:\/\/example.com\n\n### Output:\nimport requests\nimport json\n\n# Make a get request to get the data\nresponse = requests.get('https:\/\/example.com')\n\n# Store the data in a structured format\ndata = json.loads(response.text)\n\n# Save the data to a json file\nwith open('example.json', 'w') as f:\n json.dump(data, f)","tok_input_length":133,"tok_output_length":70,"system_prompt":"","index":16137}
{"question":"Write a Python code snippet to create a user account with the given name and password.","input":"Name: John\nPassword: J0hnP455w0rd","expected_output":"import bcrypt\n\nname = \"John\"\npassword = \"J0hnP455w0rd\"\npassword_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n\n# Create user account in the database\n# with the given name and hashed password\n# ----------\n# Code to store username and \n# hashed password in the database \n# ----------","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to create a user account with the given name and password.\n\n### Input:\nName: John\nPassword: J0hnP455w0rd\n\n### Output:\nimport bcrypt\n\nname = \"John\"\npassword = \"J0hnP455w0rd\"\npassword_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n\n# Create user account in the database\n# with the given name and hashed password\n# ----------\n# Code to store username and \n# hashed password in the database \n# ----------","tok_input_length":133,"tok_output_length":74,"system_prompt":"","index":1691}
{"question":"Create a python function to compute the area of a triangle with given sides.","input":"a = 3\nb = 5\nc = 4","expected_output":"def calculateTriangleArea(a, b, c): \n    s = (a + b + c) \/ 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n  \narea = calculateTriangleArea(a, b, c) \nprint(\"Area of triangle is %.2f\" % area)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function to compute the area of a triangle with given sides.\n\n### Input:\na = 3\nb = 5\nc = 4\n\n### Output:\ndef calculateTriangleArea(a, b, c): \n    s = (a + b + c) \/ 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n  \narea = calculateTriangleArea(a, b, c) \nprint(\"Area of triangle is %.2f\" % area)","tok_input_length":133,"tok_output_length":76,"system_prompt":"","index":14447}
{"question":"Create a Python program which creates two thread, each printing the numbers 1 to 10 with a delay of 1 second.","input":"Not applicable","expected_output":"import threading \nimport time \n  \ndef printNumbers(): \n    for x in range(1, 11): \n        print(x) \n        time.sleep(1) \n  \nt1 = threading.Thread(target=printNumbers) \nt2 = threading.Thread(target=printNumbers) \n  \nt1.start() \nt2.start() \n  \nt1.join() \nt2.join()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which creates two thread, each printing the numbers 1 to 10 with a delay of 1 second.\n\n### Input:\nNot applicable\n\n### Output:\nimport threading \nimport time \n  \ndef printNumbers(): \n    for x in range(1, 11): \n        print(x) \n        time.sleep(1) \n  \nt1 = threading.Thread(target=printNumbers) \nt2 = threading.Thread(target=printNumbers) \n  \nt1.start() \nt2.start() \n  \nt1.join() \nt2.join()","tok_input_length":133,"tok_output_length":77,"system_prompt":"","index":16151}
{"question":"Create a Python web scraper to scrape a list of business email addresses from a web page.","input":"Website: www.example.com","expected_output":"import requests \nfrom bs4 import BeautifulSoup\n\n# make a request to the website\nr = requests.get('www.example.com')\n\n# parse the content\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# find all elements with the class \"business-email\"\nemails = soup.find_all(class_=\"business-email\")\n\n# extract the email from each element\nemails = [e.text for e in emails]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python web scraper to scrape a list of business email addresses from a web page.\n\n### Input:\nWebsite: www.example.com\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup\n\n# make a request to the website\nr = requests.get('www.example.com')\n\n# parse the content\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# find all elements with the class \"business-email\"\nemails = soup.find_all(class_=\"business-email\")\n\n# extract the email from each element\nemails = [e.text for e in emails]","tok_input_length":133,"tok_output_length":82,"system_prompt":"","index":2366}
{"question":"Add code to a Python program that will print a multiplication table of numbers from 1 to 5.","input":"","expected_output":"for i in range(1,6):\n    for j in range(1,6):\n        print(i*j,end=\"\\t\")\n    print(\"\\n\")\n\n# Output:\n1\t2\t3\t4\t5\t\n2\t4\t6\t8\t10\t\n3\t6\t9\t12\t15\t\n4\t8\t12\t16\t20\t\n5\t10\t15\t20\t25","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd code to a Python program that will print a multiplication table of numbers from 1 to 5.\n\n### Input:\n\n\n### Output:\nfor i in range(1,6):\n    for j in range(1,6):\n        print(i*j,end=\"\\t\")\n    print(\"\\n\")\n\n# Output:\n1\t2\t3\t4\t5\t\n2\t4\t6\t8\t10\t\n3\t6\t9\t12\t15\t\n4\t8\t12\t16\t20\t\n5\t10\t15\t20\t25","tok_input_length":133,"tok_output_length":85,"system_prompt":"","index":2703}
{"question":"Build a Python command-line program that takes in a string and encrypts it with a password.","input":"","expected_output":"import hashlib \n  \ndef encrypt_string(string, password):\n    md5_string = hashlib.md5(string.encode()).hexdigest()\n    password_string = hashlib.md5(password.encode()).hexdigest()\n    result = \"\"\n\n    for i in range(32):\n        result += md5_string[i] + password_string[i]\n    return result\n\nstring = \"Hello World!\"\npassword = \"password\"\n\nresult = encrypt_string(string, password)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python command-line program that takes in a string and encrypts it with a password.\n\n### Input:\n\n\n### Output:\nimport hashlib \n  \ndef encrypt_string(string, password):\n    md5_string = hashlib.md5(string.encode()).hexdigest()\n    password_string = hashlib.md5(password.encode()).hexdigest()\n    result = \"\"\n\n    for i in range(32):\n        result += md5_string[i] + password_string[i]\n    return result\n\nstring = \"Hello World!\"\npassword = \"password\"\n\nresult = encrypt_string(string, password)\nprint(result)","tok_input_length":133,"tok_output_length":87,"system_prompt":"","index":1088}
{"question":"Write a Python program to identify all sets of factors of a given number.","input":"","expected_output":"def get_factors(number):\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.append([i, int(number\/i)])\n    return factors\n\nprint(get_factors(45)) # Output: [[1, 45], [3, 15], [5, 9], [9, 5], [15, 3], [45, 1]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to identify all sets of factors of a given number.\n\n### Input:\n\n\n### Output:\ndef get_factors(number):\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.append([i, int(number\/i)])\n    return factors\n\nprint(get_factors(45)) # Output: [[1, 45], [3, 15], [5, 9], [9, 5], [15, 3], [45, 1]]","tok_input_length":133,"tok_output_length":91,"system_prompt":"","index":4432}
{"question":"Write a Python program to create a singly linked list","input":"","expected_output":"class Node():\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\nclass List():\n  def __init__(self):\n    self.head = None\n\n  def addNode(self, data):\n    node = Node(data)\n    if self.head == None:\n       self.head = node\n    else:\n      current = self.head\n      while current.next != None:\n        current = current.next\n      current.next = node","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a singly linked list\n\n### Input:\n\n\n### Output:\nclass Node():\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\nclass List():\n  def __init__(self):\n    self.head = None\n\n  def addNode(self, data):\n    node = Node(data)\n    if self.head == None:\n       self.head = node\n    else:\n      current = self.head\n      while current.next != None:\n        current = current.next\n      current.next = node","tok_input_length":133,"tok_output_length":95,"system_prompt":"","index":6258}
{"question":"Using Python, optimize the following code and explain the optimizations you applied.","input":"def count_words(text):\n    ''' Counts the number of words in a text '''\n    word_count = 0\n    for word in text.split(' '):\n        word_count += 1\n    return word_count","expected_output":"def count_words(text):\n    ''' Counts the number of words in a text '''\n    # Optimization #1: Replacing the loop and using Python's count method\n    word_count = len(text.split(' ')) \n    return word_count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, optimize the following code and explain the optimizations you applied.\n\n### Input:\ndef count_words(text):\n    ''' Counts the number of words in a text '''\n    word_count = 0\n    for word in text.split(' '):\n        word_count += 1\n    return word_count\n\n### Output:\ndef count_words(text):\n    ''' Counts the number of words in a text '''\n    # Optimization #1: Replacing the loop and using Python's count method\n    word_count = len(text.split(' ')) \n    return word_count","tok_input_length":134,"tok_output_length":49,"system_prompt":"","index":13631}
{"question":"Create a program in Python to delete all the elements from the list which have a value greater than a given number.","input":"list = [1, 5, 6, 8, 9, 10], num = 7","expected_output":"def removeGreaterNum(list, num): \n  \n    return [x for x in list if x < num] \n      \nlist = [1, 5, 6, 8, 9, 10] \nnum = 7\nprint(removeGreaterNum(list, num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to delete all the elements from the list which have a value greater than a given number.\n\n### Input:\nlist = [1, 5, 6, 8, 9, 10], num = 7\n\n### Output:\ndef removeGreaterNum(list, num): \n  \n    return [x for x in list if x < num] \n      \nlist = [1, 5, 6, 8, 9, 10] \nnum = 7\nprint(removeGreaterNum(list, num))","tok_input_length":134,"tok_output_length":59,"system_prompt":"","index":9704}
{"question":"Create a Python program to calculate the sum of two numbers, given their positions in a given list.","input":"[1, 4, 5, 8, 9], positions = 3, 5","expected_output":"def sum_positions(numbers, pos1, pos2):\n sum = numbers[pos1] + numbers[pos2]\n return sum\n\nnumbers = [1, 4, 5, 8, 9]\npositions = (3, 5)\nprint(sum_positions(numbers, positions[0], positions[1]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the sum of two numbers, given their positions in a given list.\n\n### Input:\n[1, 4, 5, 8, 9], positions = 3, 5\n\n### Output:\ndef sum_positions(numbers, pos1, pos2):\n sum = numbers[pos1] + numbers[pos2]\n return sum\n\nnumbers = [1, 4, 5, 8, 9]\npositions = (3, 5)\nprint(sum_positions(numbers, positions[0], positions[1]))","tok_input_length":134,"tok_output_length":64,"system_prompt":"","index":14237}
{"question":"Modify the following Python code to handle errors.","input":"def read_data_from_json(filename):\n    with open(filename, 'r') as f:\n        data = json.load(f)\n    return data","expected_output":"def read_data_from_json(filename):\n    try:\n        with open(filename, 'r') as f:\n            data = json.load(f)\n        return data\n    except FileNotFoundError:\n        print(\"The file specified does not exist.\")\n    except json.decoder.JSONDecodeError:\n        print(\"The file specified is not in a valid JSON format.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to handle errors.\n\n### Input:\ndef read_data_from_json(filename):\n    with open(filename, 'r') as f:\n        data = json.load(f)\n    return data\n\n### Output:\ndef read_data_from_json(filename):\n    try:\n        with open(filename, 'r') as f:\n            data = json.load(f)\n        return data\n    except FileNotFoundError:\n        print(\"The file specified does not exist.\")\n    except json.decoder.JSONDecodeError:\n        print(\"The file specified is not in a valid JSON format.\")","tok_input_length":134,"tok_output_length":69,"system_prompt":"","index":112}
{"question":"Create a class in Python to handle the following Student object.","input":"Name: John\nAge: 20\nMarks: [80, 90, 85, 100]","expected_output":"class Student:\n    def __init__(self, name, age, marks):\n        self.name = name\n        self.age = age\n        self.marks = marks\n        \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_total_marks(self):\n        return sum(self.marks)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to handle the following Student object.\n\n### Input:\nName: John\nAge: 20\nMarks: [80, 90, 85, 100]\n\n### Output:\nclass Student:\n    def __init__(self, name, age, marks):\n        self.name = name\n        self.age = age\n        self.marks = marks\n        \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_total_marks(self):\n        return sum(self.marks)","tok_input_length":134,"tok_output_length":72,"system_prompt":"","index":15929}
{"question":"Generate a correct python script to identify string elements whose length is even","input":"my_list = [\"House\", \"Car\", \"Tree\", \"Planet\", \"Satellite\"]","expected_output":"my_list = [\"House\", \"Car\", \"Tree\", \"Planet\", \"Satellite\"]\n\ndef find_even_length(lst):\n    even_list = []\n    for l in lst:\n        if len(l) % 2 == 0:\n            even_list.append(l)\n    return even_list\n\neven_list = find_even_length(my_list)\nprint(even_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct python script to identify string elements whose length is even\n\n### Input:\nmy_list = [\"House\", \"Car\", \"Tree\", \"Planet\", \"Satellite\"]\n\n### Output:\nmy_list = [\"House\", \"Car\", \"Tree\", \"Planet\", \"Satellite\"]\n\ndef find_even_length(lst):\n    even_list = []\n    for l in lst:\n        if len(l) % 2 == 0:\n            even_list.append(l)\n    return even_list\n\neven_list = find_even_length(my_list)\nprint(even_list)","tok_input_length":134,"tok_output_length":74,"system_prompt":"","index":9627}
{"question":"Perform unit testing in an existing Python code to ensure code reliability.","input":"UDF.py\n\ndef check_string(a):\n    return (type(a)==str)","expected_output":"import unittest\n\nclass TestCheckString(unittest.TestCase):\n  \n    def test_check_string_Integer(self):\n        a = 1\n        result = check_string(a)\n        self.assertFalse(result)\n  \n    def test_check_string_String(self):\n        a = 'Hello'\n        result = check_string(a)\n        self.assertTrue(result)\n\nif __name__ == '__main__':\n    unittest.main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform unit testing in an existing Python code to ensure code reliability.\n\n### Input:\nUDF.py\n\ndef check_string(a):\n    return (type(a)==str)\n\n### Output:\nimport unittest\n\nclass TestCheckString(unittest.TestCase):\n  \n    def test_check_string_Integer(self):\n        a = 1\n        result = check_string(a)\n        self.assertFalse(result)\n  \n    def test_check_string_String(self):\n        a = 'Hello'\n        result = check_string(a)\n        self.assertTrue(result)\n\nif __name__ == '__main__':\n    unittest.main()","tok_input_length":134,"tok_output_length":77,"system_prompt":"","index":13699}
{"question":"Create a Python program that shuffles the elements of an array.","input":"arr = [\"A\", \"B\", \"C\", \"D\"]","expected_output":"import random\n\ndef shuffleArray(arr):\n    n = len(arr)\n\n    for i in range(n-1, 0, -1):\n        j = random.randint(0, i)\n        arr[i], arr[j] = arr[j], arr[i] \n    \n    return arr\n\narr = [\"A\", \"B\", \"C\", \"D\"]\nshuffleArray(arr)\nprint(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that shuffles the elements of an array.\n\n### Input:\narr = [\"A\", \"B\", \"C\", \"D\"]\n\n### Output:\nimport random\n\ndef shuffleArray(arr):\n    n = len(arr)\n\n    for i in range(n-1, 0, -1):\n        j = random.randint(0, i)\n        arr[i], arr[j] = arr[j], arr[i] \n    \n    return arr\n\narr = [\"A\", \"B\", \"C\", \"D\"]\nshuffleArray(arr)\nprint(arr)","tok_input_length":134,"tok_output_length":80,"system_prompt":"","index":9217}
{"question":"Develop a Python code to parse an XML string.","input":"xml_string = \"<node><child>text<\/child><\/node>\"","expected_output":"import xml.etree.ElementTree as ET\n\ndef parse_xml(xml_string):\n\n    root  = ET.fromstring(xml_string)\n    for node in root:\n        print(f'Node: {node.tag}: {node.text}')\n\nif __name__ == '__main__':\n    xml_string = \"<node><child>text<\/child><\/node>\"\n    parse_xml(xml_string) # prints Node: child: text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python code to parse an XML string.\n\n### Input:\nxml_string = \"<node><child>text<\/child><\/node>\"\n\n### Output:\nimport xml.etree.ElementTree as ET\n\ndef parse_xml(xml_string):\n\n    root  = ET.fromstring(xml_string)\n    for node in root:\n        print(f'Node: {node.tag}: {node.text}')\n\nif __name__ == '__main__':\n    xml_string = \"<node><child>text<\/child><\/node>\"\n    parse_xml(xml_string) # prints Node: child: text","tok_input_length":134,"tok_output_length":82,"system_prompt":"","index":11128}
{"question":"Formulate a python code to remove the characters of odd index in a given string.","input":"string = \"welcome\"","expected_output":"def remove_odd_index_char(string):\n    \"\"\"\n    Remove the characters of odd index in a given string\n    \"\"\"\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result = result + string[i] \n    return result\n\nif __name__ == '__main__':\n    string = \"welcome\"\n    print(remove_odd_index_char(string)) # wloe","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate a python code to remove the characters of odd index in a given string.\n\n### Input:\nstring = \"welcome\"\n\n### Output:\ndef remove_odd_index_char(string):\n    \"\"\"\n    Remove the characters of odd index in a given string\n    \"\"\"\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result = result + string[i] \n    return result\n\nif __name__ == '__main__':\n    string = \"welcome\"\n    print(remove_odd_index_char(string)) # wloe","tok_input_length":134,"tok_output_length":85,"system_prompt":"","index":15591}
{"question":"Generate a valid python class that captures person information","input":"Name, Age, Gender, Nationality","expected_output":"class Person:\n    def __init__(self, name, age, gender, nationality):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.nationality = nationality\n \n    def __str__(self):\n        return 'Name: {}\\nAge: {}\\nGender: {}\\nNationality: {}'.format(\n            self.name, self.age, self.gender, self.nationality)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid python class that captures person information\n\n### Input:\nName, Age, Gender, Nationality\n\n### Output:\nclass Person:\n    def __init__(self, name, age, gender, nationality):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.nationality = nationality\n \n    def __str__(self):\n        return 'Name: {}\\nAge: {}\\nGender: {}\\nNationality: {}'.format(\n            self.name, self.age, self.gender, self.nationality)","tok_input_length":134,"tok_output_length":88,"system_prompt":"","index":11226}
{"question":"Create a web crawler in Python to crawl a website for links.","input":"Not applicable","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\n# get the HTML from the URL\nresponse = requests.get('https:\/\/example.com')\nhtml = response.text\n\n# create the BS4 object and get all the <a> elements\nbsobj = BeautifulSoup(html, 'html.parser')\nlinks = bsobj.find_all('a')\n\n# print all the links\nfor link in links:\n if link.has_attr('href'):\n   print(link['href'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python to crawl a website for links.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# get the HTML from the URL\nresponse = requests.get('https:\/\/example.com')\nhtml = response.text\n\n# create the BS4 object and get all the <a> elements\nbsobj = BeautifulSoup(html, 'html.parser')\nlinks = bsobj.find_all('a')\n\n# print all the links\nfor link in links:\n if link.has_attr('href'):\n   print(link['href'])","tok_input_length":134,"tok_output_length":91,"system_prompt":"","index":8424}
{"question":"Create a multi-threaded program in Python that uses database access.","input":"","expected_output":"import threading\nimport sqlite3\n\ndef database_access():\n    # Connect to the database \n    conn = sqlite3.connect('example.db')\n    c = conn.cursor()\n    # Do something with the database\n    c.execute(\"SELECT * FROM table_name\")\n    # Commit changes\n    conn.commit()\n    # Close the database connection\n    conn.close()\n\n# Create thread\nthread = threading.Thread(target=database_access)\n# Start the thread\nthread.start()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a multi-threaded program in Python that uses database access.\n\n### Input:\n\n\n### Output:\nimport threading\nimport sqlite3\n\ndef database_access():\n    # Connect to the database \n    conn = sqlite3.connect('example.db')\n    c = conn.cursor()\n    # Do something with the database\n    c.execute(\"SELECT * FROM table_name\")\n    # Commit changes\n    conn.commit()\n    # Close the database connection\n    conn.close()\n\n# Create thread\nthread = threading.Thread(target=database_access)\n# Start the thread\nthread.start()","tok_input_length":134,"tok_output_length":94,"system_prompt":"","index":6953}
{"question":"Optimize a Python script's performance by refactoring the code to use multiprocessing.","input":"def process_list_data(data):\n for record in data:\n  # Process the data\n\nlist_data = [1,2,3,4,5]\n\nprocess_list_data(list_data)","expected_output":"from multiprocessing import Pool\n\ndef process_data(record):\n # Process the data\n\ndef process_list_data(data):\n with Pool() as p:\n p.map(process_data, data)\n\nlist_data = [1,2,3,4,5]\n\nprocess_list_data(list_data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python script's performance by refactoring the code to use multiprocessing.\n\n### Input:\ndef process_list_data(data):\n for record in data:\n  # Process the data\n\nlist_data = [1,2,3,4,5]\n\nprocess_list_data(list_data)\n\n### Output:\nfrom multiprocessing import Pool\n\ndef process_data(record):\n # Process the data\n\ndef process_list_data(data):\n with Pool() as p:\n p.map(process_data, data)\n\nlist_data = [1,2,3,4,5]\n\nprocess_list_data(list_data)","tok_input_length":135,"tok_output_length":55,"system_prompt":"","index":16645}
{"question":"Write a Python program to convert a given list of strings to integers. If a string is not a number, then that string should be dropped from the list.","input":"['1', '2', '3', 'four', '5']","expected_output":"def convert_to_ints(lst):\n    result = []\n    for i in lst:\n        try:\n            result.append(int(i))\n        except:\n            pass\n    \n    return result\n\nresult = convert_to_ints(['1', '2', '3', 'four', '5'])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given list of strings to integers. If a string is not a number, then that string should be dropped from the list.\n\n### Input:\n['1', '2', '3', 'four', '5']\n\n### Output:\ndef convert_to_ints(lst):\n    result = []\n    for i in lst:\n        try:\n            result.append(int(i))\n        except:\n            pass\n    \n    return result\n\nresult = convert_to_ints(['1', '2', '3', 'four', '5'])\nprint(result)","tok_input_length":135,"tok_output_length":61,"system_prompt":"","index":11920}
{"question":"Create an algorithm in Python which prints out the number of even numbers in an array.","input":"[1, 2, 3, 4, 5, 6, 7, 8]","expected_output":"def count_even(arr):\n  evenNumbers=0\n  for x in arr:\n      if x % 2 == 0:\n          evenNumbers += 1\n  return evenNumbers\n  \nprint(count_even([1, 2, 3, 4, 5, 6, 7, 8]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python which prints out the number of even numbers in an array.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8]\n\n### Output:\ndef count_even(arr):\n  evenNumbers=0\n  for x in arr:\n      if x % 2 == 0:\n          evenNumbers += 1\n  return evenNumbers\n  \nprint(count_even([1, 2, 3, 4, 5, 6, 7, 8]))","tok_input_length":135,"tok_output_length":67,"system_prompt":"","index":10024}
{"question":"Write a Python program to generate a random password. The password should contain at least 8 characters, a lowercase letter, an uppercase letter, a digit, and a special character.","input":"Not applicable","expected_output":"import string\nimport random\n\ndef generate_password():\n passwords = []\n characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n for i in range(8):\n  passwords.append(random.choice(characters))\n return ''.join(passwords)\n\nprint(generate_password())\n\n# Output: #o4&2+-P","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random password. The password should contain at least 8 characters, a lowercase letter, an uppercase letter, a digit, and a special character.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n passwords = []\n characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n for i in range(8):\n  passwords.append(random.choice(characters))\n return ''.join(passwords)\n\nprint(generate_password())\n\n# Output: #o4&2+-P","tok_input_length":135,"tok_output_length":69,"system_prompt":"","index":11417}
{"question":"Simplify a fraction using a provided Python code.","input":"def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)","expected_output":"def simplify(numerator, denominator):\n    \n    # find the gcd (greatest common divisor)\n    gcd = gcd(numerator, denominator)\n\n    # divide both numerator and denominator by the gcd\n    simplified_numerator = int(numerator\/gcd)\n    simplified_denominator = int(denominator\/gcd)\n\n    return simplified_numerator, simplified_denominator","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSimplify a fraction using a provided Python code.\n\n### Input:\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n### Output:\ndef simplify(numerator, denominator):\n    \n    # find the gcd (greatest common divisor)\n    gcd = gcd(numerator, denominator)\n\n    # divide both numerator and denominator by the gcd\n    simplified_numerator = int(numerator\/gcd)\n    simplified_denominator = int(denominator\/gcd)\n\n    return simplified_numerator, simplified_denominator","tok_input_length":135,"tok_output_length":72,"system_prompt":"","index":1347}
{"question":"Create a function in Python that will take an array of integers and return the minimum value.","input":"[3, 9, 0, 7, 88]","expected_output":"def find_min(arr):\nmin = arr[0]\nfor num in arr:\n if num < min:\n min = num\nreturn min\n\n# Test\narr = [3, 9, 0, 7, 88]\nmin_val = find_min(arr)\nprint(\"Minimum value is:\", min_val)  # Output: Minimum value is: 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that will take an array of integers and return the minimum value.\n\n### Input:\n[3, 9, 0, 7, 88]\n\n### Output:\ndef find_min(arr):\nmin = arr[0]\nfor num in arr:\n if num < min:\n min = num\nreturn min\n\n# Test\narr = [3, 9, 0, 7, 88]\nmin_val = find_min(arr)\nprint(\"Minimum value is:\", min_val)  # Output: Minimum value is: 0","tok_input_length":135,"tok_output_length":75,"system_prompt":"","index":9055}
{"question":"Create a python program that takes a sentence and returns a list of words in alphabetical order.","input":"Sentence:  The quick brown fox jumped over the lazy dog.","expected_output":"sentence = \"The quick brown fox jumped over the lazy dog.\"\n\n# Split sentence into words\nwords = sentence.split()\n\n# Sort list of words alphabetically\nwords.sort()\n\n# Print sorted list of words\nprint(words)\n\n# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that takes a sentence and returns a list of words in alphabetical order.\n\n### Input:\nSentence:  The quick brown fox jumped over the lazy dog.\n\n### Output:\nsentence = \"The quick brown fox jumped over the lazy dog.\"\n\n# Split sentence into words\nwords = sentence.split()\n\n# Sort list of words alphabetically\nwords.sort()\n\n# Print sorted list of words\nprint(words)\n\n# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']","tok_input_length":135,"tok_output_length":77,"system_prompt":"","index":5168}
{"question":"Write a Python program to get all the information associated with an IPv4 address.","input":"IPv4 address = \"8.8.8.8\"","expected_output":"import socket\nip =  \"8.8.8.8\"\naddress_info = socket.getaddrinfo(ip, None)\n\nfor info in address_info:\n    print(\"IP version :\", info[0])\n    print(\"IP address as string:\", info[4][0])\n    print(\"IP address as tuple:\", info[4])\n    print(\"IP protocol:\", info[6])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to get all the information associated with an IPv4 address.\n\n### Input:\nIPv4 address = \"8.8.8.8\"\n\n### Output:\nimport socket\nip =  \"8.8.8.8\"\naddress_info = socket.getaddrinfo(ip, None)\n\nfor info in address_info:\n    print(\"IP version :\", info[0])\n    print(\"IP address as string:\", info[4][0])\n    print(\"IP address as tuple:\", info[4])\n    print(\"IP protocol:\", info[6])","tok_input_length":135,"tok_output_length":79,"system_prompt":"","index":7290}
{"question":"Create a Python program that will generate random passwords consisting of any combination of uppercase, lowercase letters, and numbers.","input":"Not applicable","expected_output":"import random\n\ndef generate_password(length):\n    password = \"\"\n    for i in range(length):\n        x = random.randint(1,3)\n        if x == 1:\n            password += chr(random.randint(48,57))\n        elif x == 2:\n            password += chr(random.randint(65,90))\n        else:\n            password += chr(random.randint(97,122))\n    return password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that will generate random passwords consisting of any combination of uppercase, lowercase letters, and numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generate_password(length):\n    password = \"\"\n    for i in range(length):\n        x = random.randint(1,3)\n        if x == 1:\n            password += chr(random.randint(48,57))\n        elif x == 2:\n            password += chr(random.randint(65,90))\n        else:\n            password += chr(random.randint(97,122))\n    return password","tok_input_length":135,"tok_output_length":83,"system_prompt":"","index":841}
{"question":"Write a Python program that calculates the nth Fibonacci number where n is a positive integer given by the user.","input":"8","expected_output":"# Fibonacci Sequence\n\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n\n    elif n==1: \n        return 0\n    \n    elif n==2: \n        return 1 \n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nn = int(input(\"Enter the value of n: \"))\nprint(Fibonacci(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that calculates the nth Fibonacci number where n is a positive integer given by the user.\n\n### Input:\n8\n\n### Output:\n# Fibonacci Sequence\n\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n\n    elif n==1: \n        return 0\n    \n    elif n==2: \n        return 1 \n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nn = int(input(\"Enter the value of n: \"))\nprint(Fibonacci(n))","tok_input_length":135,"tok_output_length":85,"system_prompt":"","index":13963}
{"question":"Write a Python program to classify the given list of words into two categories: positive and negative words.","input":"","expected_output":"positive_words = [\"happy\", \"glad\", \"love\", \"joyful\", \"grateful\"]\nnegative_words = [\"sad\", \"angry\", \"depressed\", \"hopeless\", \"heartbroken\"]\n\ndef classify_words(words):\n    positive = []\n    negative = []\n    for word in words:\n        if word in positive_words:\n            positive.append(word)\n        else:\n            negative.append(word)\n    return positive, negative","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the given list of words into two categories: positive and negative words.\n\n### Input:\n\n\n### Output:\npositive_words = [\"happy\", \"glad\", \"love\", \"joyful\", \"grateful\"]\nnegative_words = [\"sad\", \"angry\", \"depressed\", \"hopeless\", \"heartbroken\"]\n\ndef classify_words(words):\n    positive = []\n    negative = []\n    for word in words:\n        if word in positive_words:\n            positive.append(word)\n        else:\n            negative.append(word)\n    return positive, negative","tok_input_length":135,"tok_output_length":88,"system_prompt":"","index":2317}
{"question":"Create a Python script to scrape a website to extract the text from all the web-pages.","input":"","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n    # sending get request and saving the response as response object \n    r = requests.get(url) \n    \n    # extracting data in json format \n    data = r.text\n    soup = BeautifulSoup(data, 'html.parser')\n    \n    contents = soup.find_all('p')\n    for content in contents:\n        print(content.text)\n\nscrape_website(\"https:\/\/example.com\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape a website to extract the text from all the web-pages.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n    # sending get request and saving the response as response object \n    r = requests.get(url) \n    \n    # extracting data in json format \n    data = r.text\n    soup = BeautifulSoup(data, 'html.parser')\n    \n    contents = soup.find_all('p')\n    for content in contents:\n        print(content.text)\n\nscrape_website(\"https:\/\/example.com\")","tok_input_length":135,"tok_output_length":90,"system_prompt":"","index":4711}
{"question":"Write a distributed Python program which can generate the Fibonacci series using Spark.","input":"Not applicable","expected_output":"import findspark\nfindspark.init()\n\nfrom pyspark import SparkContext\n\nsc = SparkContext('local', 'fibonacci-generator')\n\ndef generate_fibonacci():\n rdd = sc.parallelize([0,1])\n for _ in range(100):\n rdd = rdd.flatMap(lambda x: [x, x + rdd.takeSample(withReplacement=True)[0]])\n return rdd.collect()\n\nresult = generate_fibonacci()\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a distributed Python program which can generate the Fibonacci series using Spark.\n\n### Input:\nNot applicable\n\n### Output:\nimport findspark\nfindspark.init()\n\nfrom pyspark import SparkContext\n\nsc = SparkContext('local', 'fibonacci-generator')\n\ndef generate_fibonacci():\n rdd = sc.parallelize([0,1])\n for _ in range(100):\n rdd = rdd.flatMap(lambda x: [x, x + rdd.takeSample(withReplacement=True)[0]])\n return rdd.collect()\n\nresult = generate_fibonacci()\nprint(result)","tok_input_length":135,"tok_output_length":91,"system_prompt":"","index":17010}
{"question":"Create a Python program that generates a histogram from a list of integers.","input":"","expected_output":"import matplotlib.pyplot as plt \n  \ndef plot_histogram(data): \n    plt.hist(data) \n    plt.title(\"Histogram\") \n    plt.xlabel(\"Values\") \n    plt.ylabel(\"Frequency\") \n    plt.show() \n\nif __name__ == \"__main__\": \n    data = [1, 2, 5, 7, 9, 4, 5, 9, 10, 12] \n    plot_histogram(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that generates a histogram from a list of integers.\n\n### Input:\n\n\n### Output:\nimport matplotlib.pyplot as plt \n  \ndef plot_histogram(data): \n    plt.hist(data) \n    plt.title(\"Histogram\") \n    plt.xlabel(\"Values\") \n    plt.ylabel(\"Frequency\") \n    plt.show() \n\nif __name__ == \"__main__\": \n    data = [1, 2, 5, 7, 9, 4, 5, 9, 10, 12] \n    plot_histogram(data)","tok_input_length":135,"tok_output_length":94,"system_prompt":"","index":9317}
{"question":"Create a class in Python to add two matrices.","input":"","expected_output":"class MatrixAddition:\n \n    def addTwoMatrices(self, X, Y):\n        result = [[0, 0, 0],\n                  [0, 0, 0],\n                  [0, 0, 0]]\n \n        for i in range(len(X)):\n            for j in range(len(X[0])):\n                result[i][j] = X[i][j] + Y[i][j]\n        for r in result:\n            print(r)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to add two matrices.\n\n### Input:\n\n\n### Output:\nclass MatrixAddition:\n \n    def addTwoMatrices(self, X, Y):\n        result = [[0, 0, 0],\n                  [0, 0, 0],\n                  [0, 0, 0]]\n \n        for i in range(len(X)):\n            for j in range(len(X[0])):\n                result[i][j] = X[i][j] + Y[i][j]\n        for r in result:\n            print(r)","tok_input_length":135,"tok_output_length":98,"system_prompt":"","index":18050}
{"question":"Write a Python script that takes a list of integers, and returns a list of tuples that contain the index and square of each number in the original list.","input":"nums = [1, 2, 3, 4, 5]","expected_output":"def square_index(nums):\n    return [(index, num ** 2) for index, num in enumerate(nums)]\n\nsquare_index(nums)\n# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes a list of integers, and returns a list of tuples that contain the index and square of each number in the original list.\n\n### Input:\nnums = [1, 2, 3, 4, 5]\n\n### Output:\ndef square_index(nums):\n    return [(index, num ** 2) for index, num in enumerate(nums)]\n\nsquare_index(nums)\n# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]","tok_input_length":136,"tok_output_length":61,"system_prompt":"","index":530}
{"question":"Write a Python program to compute the sum of items in a given list and multiply it by a given number.","input":"{'list': [1, 3, 5, 7], 'num': 3}","expected_output":"#initialize variables\nlist = [1, 3, 5, 7]\nnum = 3\n\n# compute sum\nsum = 0\nfor i in list:\n    sum = sum + i\n\n# compute product\nresult = sum * num\n\n# Print result\nprint(\"Result: \", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the sum of items in a given list and multiply it by a given number.\n\n### Input:\n{'list': [1, 3, 5, 7], 'num': 3}\n\n### Output:\n#initialize variables\nlist = [1, 3, 5, 7]\nnum = 3\n\n# compute sum\nsum = 0\nfor i in list:\n    sum = sum + i\n\n# compute product\nresult = sum * num\n\n# Print result\nprint(\"Result: \", result)","tok_input_length":136,"tok_output_length":66,"system_prompt":"","index":1767}
{"question":"Build a list comprehension in Python to print numbers divisible by 3 and not divisible by 7 in the range of 30 to 50","input":"Range: 30 to 50","expected_output":"divisible_by_3_or_7 = [n for n in range(30,51) if n % 3 == 0 and n % 7 != 0]\nprint(divisible_by_3_or_7) # output: [30, 33, 36, 39, 42, 45, 48]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a list comprehension in Python to print numbers divisible by 3 and not divisible by 7 in the range of 30 to 50\n\n### Input:\nRange: 30 to 50\n\n### Output:\ndivisible_by_3_or_7 = [n for n in range(30,51) if n % 3 == 0 and n % 7 != 0]\nprint(divisible_by_3_or_7) # output: [30, 33, 36, 39, 42, 45, 48]","tok_input_length":136,"tok_output_length":72,"system_prompt":"","index":11616}
{"question":"Write a Python script to calculate the distance between two points.","input":"Point1 = (x1, y1)\nPoint2 = (x2, y2)","expected_output":"import math\n\ndef calculate_distance(x1, y1, x2, y2):\n  x_diff = x2 - x1\n  y_diff = y2 - y1\n  distance = math.sqrt(x_diff**2 + y_diff**2)\n  return distance\n\nresult = calculate_distance(x1, y1, x2, y2)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the distance between two points.\n\n### Input:\nPoint1 = (x1, y1)\nPoint2 = (x2, y2)\n\n### Output:\nimport math\n\ndef calculate_distance(x1, y1, x2, y2):\n  x_diff = x2 - x1\n  y_diff = y2 - y1\n  distance = math.sqrt(x_diff**2 + y_diff**2)\n  return distance\n\nresult = calculate_distance(x1, y1, x2, y2)\nprint(result)","tok_input_length":136,"tok_output_length":77,"system_prompt":"","index":13292}
{"question":"How can you design a Python program to find the sum of all prime numbers between 1 and a given limit?","input":"Limit = 10","expected_output":"def sum_primes(limit):\n    sum = 0\n    for i in range(2, limit+1):\n        if is_prime(i):\n            sum += i\n\n    return sum\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you design a Python program to find the sum of all prime numbers between 1 and a given limit?\n\n### Input:\nLimit = 10\n\n### Output:\ndef sum_primes(limit):\n    sum = 0\n    for i in range(2, limit+1):\n        if is_prime(i):\n            sum += i\n\n    return sum\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True","tok_input_length":136,"tok_output_length":81,"system_prompt":"","index":3441}
{"question":"Write a python script to flatten a given nested list.","input":"[[1,2,3], [4,[5,6]]]","expected_output":"def flatten_list(input_list):\n    flattened_list = []\n    for i in input_list:\n        if isinstance(i, list):\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list\n\ninput_list = [[1,2,3], [4,[5,6]]]\nflattened_list = flatten_list(input_list)\nprint(flattened_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to flatten a given nested list.\n\n### Input:\n[[1,2,3], [4,[5,6]]]\n\n### Output:\ndef flatten_list(input_list):\n    flattened_list = []\n    for i in input_list:\n        if isinstance(i, list):\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list\n\ninput_list = [[1,2,3], [4,[5,6]]]\nflattened_list = flatten_list(input_list)\nprint(flattened_list)","tok_input_length":136,"tok_output_length":83,"system_prompt":"","index":14142}
{"question":"Build a Python script to optimize a given linear equation by minimizing the cost.","input":"x + 2y = 4","expected_output":"import numpy as np\nfrom scipy.optimize import minimize\n\ndef cost_function(X): \n    x = X[0]\n    y = X[1]\n    return x + 2*y - 4\n\nX = minimize(cost_function, [0, 0])\n\nx_opt = X.x[0]\ny_opt = X.x[1]\n\n# the optimal solution is x = 2, y = 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python script to optimize a given linear equation by minimizing the cost.\n\n### Input:\nx + 2y = 4\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef cost_function(X): \n    x = X[0]\n    y = X[1]\n    return x + 2*y - 4\n\nX = minimize(cost_function, [0, 0])\n\nx_opt = X.x[0]\ny_opt = X.x[1]\n\n# the optimal solution is x = 2, y = 1","tok_input_length":136,"tok_output_length":85,"system_prompt":"","index":18537}
{"question":"How would you format a JSON string using Python?","input":"\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\"","expected_output":"import json\n\n# Get json string\njson_string = \"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\"\n\n# Parse the json string\nparsed_string = json.loads(json_string)\n\n# Pretty print the parsed string\npretty_string = json.dumps(parsed_string, indent=4, sort_keys=True)\n\n# Show output\nprint(pretty_string)\n# Output:\n{\n    \"name\": \"John Doe\",\n    \"age\": 30\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you format a JSON string using Python?\n\n### Input:\n\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\"\n\n### Output:\nimport json\n\n# Get json string\njson_string = \"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\"\n\n# Parse the json string\nparsed_string = json.loads(json_string)\n\n# Pretty print the parsed string\npretty_string = json.dumps(parsed_string, indent=4, sort_keys=True)\n\n# Show output\nprint(pretty_string)\n# Output:\n{\n    \"name\": \"John Doe\",\n    \"age\": 30\n}","tok_input_length":136,"tok_output_length":88,"system_prompt":"","index":17688}
{"question":"Create a Python program that finds the longest word in a sentence.","input":"My name is John","expected_output":"def find_longest_word(sentence):\n    # Split sentence into a list of words\n    words = sentence.split()\n    # Track the longest word\n    longest_word = ''\n    # Iterate over the list of words\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    # Return the longest word\n    return longest_word\n\nprint(find_longest_word(\"My name is John\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that finds the longest word in a sentence.\n\n### Input:\nMy name is John\n\n### Output:\ndef find_longest_word(sentence):\n    # Split sentence into a list of words\n    words = sentence.split()\n    # Track the longest word\n    longest_word = ''\n    # Iterate over the list of words\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    # Return the longest word\n    return longest_word\n\nprint(find_longest_word(\"My name is John\"))","tok_input_length":136,"tok_output_length":91,"system_prompt":"","index":16903}
{"question":"Create a program in Python to generate all prime numbers between 2 and n.","input":"","expected_output":"def generate_primes(n):\n    primes = []\n\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(num)\n    return primes\n\nn = 10\nprint(generate_primes(n)) # [2, 3, 5, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to generate all prime numbers between 2 and n.\n\n### Input:\n\n\n### Output:\ndef generate_primes(n):\n    primes = []\n\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(num)\n    return primes\n\nn = 10\nprint(generate_primes(n)) # [2, 3, 5, 7]","tok_input_length":136,"tok_output_length":93,"system_prompt":"","index":12298}
{"question":"Output the Fibonacci sequence as a list of integers in Python","input":"","expected_output":"def fibonacci_sequence(n): \n    # Creating list of length n \n    fib_list  = [0]*n \n      \n    # first and second terms \n    fib_list[0] = 0\n    fib_list[1] = 1\n      \n    # Application of the recursive algorithm \n    for i in range(2, n): \n        fib_list[i] = fib_list[i-1] + fib_list[i-2] \n      \n    return fib_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput the Fibonacci sequence as a list of integers in Python\n\n### Input:\n\n\n### Output:\ndef fibonacci_sequence(n): \n    # Creating list of length n \n    fib_list  = [0]*n \n      \n    # first and second terms \n    fib_list[0] = 0\n    fib_list[1] = 1\n      \n    # Application of the recursive algorithm \n    for i in range(2, n): \n        fib_list[i] = fib_list[i-1] + fib_list[i-2] \n      \n    return fib_list","tok_input_length":136,"tok_output_length":97,"system_prompt":"","index":438}
{"question":"Propose a Pythonic solution to the following code","input":"# List of non-empty strings\nitems = ['apple', 'banana', 'cat', 'dog', 'elephant']\nfor i in range(len(items)):\n    print('item ' + str(i) + ' is ' + items[i])","expected_output":"# List of non-empty strings\nitems = ['apple', 'banana', 'cat', 'dog', 'elephant']\nfor i, item in enumerate(items):\n    print('item ' + str(i) + ' is ' + item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPropose a Pythonic solution to the following code\n\n### Input:\n# List of non-empty strings\nitems = ['apple', 'banana', 'cat', 'dog', 'elephant']\nfor i in range(len(items)):\n    print('item ' + str(i) + ' is ' + items[i])\n\n### Output:\n# List of non-empty strings\nitems = ['apple', 'banana', 'cat', 'dog', 'elephant']\nfor i, item in enumerate(items):\n    print('item ' + str(i) + ' is ' + item)","tok_input_length":137,"tok_output_length":50,"system_prompt":"","index":13840}
{"question":"Write a function in Python that takes a list of integers as an input and returns a new list with every even number doubled and every odd number quadrupled.","input":"[2, 5, 6, 8]","expected_output":"def multiply_values(lst):\n return [x * 2 if x % 2 == 0 else x * 4 for x in lst]\n\n# Example\nlst = [2, 5, 6, 8]\nprint(multiply_values(lst))\n# [4, 20, 12, 16]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a list of integers as an input and returns a new list with every even number doubled and every odd number quadrupled.\n\n### Input:\n[2, 5, 6, 8]\n\n### Output:\ndef multiply_values(lst):\n return [x * 2 if x % 2 == 0 else x * 4 for x in lst]\n\n# Example\nlst = [2, 5, 6, 8]\nprint(multiply_values(lst))\n# [4, 20, 12, 16]","tok_input_length":137,"tok_output_length":66,"system_prompt":"","index":1930}
{"question":"Convert a given python data structure into a json string using json package","input":"data = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}","expected_output":"import json\n\n# convert python data structure to json\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\ndata_string = json.dumps(data)\n\nprint(data_string) # '{\"name\": \"John\", \"age\": 30, \"location\": \"Greece\"}'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given python data structure into a json string using json package\n\n### Input:\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\n### Output:\nimport json\n\n# convert python data structure to json\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\ndata_string = json.dumps(data)\n\nprint(data_string) # '{\"name\": \"John\", \"age\": 30, \"location\": \"Greece\"}'","tok_input_length":137,"tok_output_length":70,"system_prompt":"","index":953}
{"question":"Create a Python function to count the number of strings that contain the substring \"cat\".","input":"[\"cat keeper\", \"cat lover\", \"lizard wrangler\", \"cat wrangler\"]","expected_output":"def count_substring_cat(string_list):\n    count = 0\n    for string in string_list:\n        if \"cat\" in string:\n            count += 1\n    return count\n\nstring_list = [\"cat keeper\", \"cat lover\", \"lizard wrangler\", \"cat wrangler\"]\nresult = count_substring_cat(string_list)\n\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to count the number of strings that contain the substring \"cat\".\n\n### Input:\n[\"cat keeper\", \"cat lover\", \"lizard wrangler\", \"cat wrangler\"]\n\n### Output:\ndef count_substring_cat(string_list):\n    count = 0\n    for string in string_list:\n        if \"cat\" in string:\n            count += 1\n    return count\n\nstring_list = [\"cat keeper\", \"cat lover\", \"lizard wrangler\", \"cat wrangler\"]\nresult = count_substring_cat(string_list)\n\nprint(result)","tok_input_length":137,"tok_output_length":74,"system_prompt":"","index":6881}
{"question":"Write a Python function that classifies all words in a sentence into two categories - \"positive\" and \"negative\".","input":"The weather is so gloomy today.","expected_output":"def classify_word(word):\n if word in [\"good\", \"wonderful\", \"amazing\"]:\n return \"positive\"\n if word in [\"bad\", \"gloomy\", \"sad\"]:\n return \"negative\"\n    \ndef classify_sentence(sentence):\n classified = []\n for word in sentence.split():\n classified.append(classify_word(word))\n return classified\n\n classify_sentence(\"The weather is so gloomy today.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that classifies all words in a sentence into two categories - \"positive\" and \"negative\".\n\n### Input:\nThe weather is so gloomy today.\n\n### Output:\ndef classify_word(word):\n if word in [\"good\", \"wonderful\", \"amazing\"]:\n return \"positive\"\n if word in [\"bad\", \"gloomy\", \"sad\"]:\n return \"negative\"\n    \ndef classify_sentence(sentence):\n classified = []\n for word in sentence.split():\n classified.append(classify_word(word))\n return classified\n\n classify_sentence(\"The weather is so gloomy today.\")","tok_input_length":137,"tok_output_length":79,"system_prompt":"","index":7059}
{"question":"Create a Python script to capture a range of numbers (as multiples of 100).","input":"Start = 20 and End = 400","expected_output":"# Python code to capture a range of numbers \n# Multiples of 100 \n\nstart = 20\nend = 400\n  \n# printing multiples of 100 in the given range \nfor num in range(start, end + 1): \n      \n    # checking if the current number is multiple of 100 \n    if num % 100 == 0: \n        print(num, end=\" \")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to capture a range of numbers (as multiples of 100).\n\n### Input:\nStart = 20 and End = 400\n\n### Output:\n# Python code to capture a range of numbers \n# Multiples of 100 \n\nstart = 20\nend = 400\n  \n# printing multiples of 100 in the given range \nfor num in range(start, end + 1): \n      \n    # checking if the current number is multiple of 100 \n    if num % 100 == 0: \n        print(num, end=\" \")","tok_input_length":137,"tok_output_length":83,"system_prompt":"","index":10081}
{"question":"Generate a solution for finding all possible subsets of a given set in Python.","input":"[1, 2, 3]","expected_output":"\"\"\"\nGenerate a solution for finding all possible subsets of a given set in Python.\n\"\"\"\n\ndef find_subsets(nums):\n  subsets = [[]]\n\n  for current_num in nums:\n    for i in range(len(subsets)):\n      set_to_add = subsets[i] + [current_num]\n      subsets.append(set_to_add)\n\n  return subsets\n\nnums = [1, 2, 3]\nprint(find_subsets(nums))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a solution for finding all possible subsets of a given set in Python.\n\n### Input:\n[1, 2, 3]\n\n### Output:\n\"\"\"\nGenerate a solution for finding all possible subsets of a given set in Python.\n\"\"\"\n\ndef find_subsets(nums):\n  subsets = [[]]\n\n  for current_num in nums:\n    for i in range(len(subsets)):\n      set_to_add = subsets[i] + [current_num]\n      subsets.append(set_to_add)\n\n  return subsets\n\nnums = [1, 2, 3]\nprint(find_subsets(nums))","tok_input_length":137,"tok_output_length":86,"system_prompt":"","index":4760}
{"question":"Write a Python program to extract all the words starting with a specific letter","input":"The letter is 's'","expected_output":"\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract all the words starting with a specific letter\n\n### Input:\nThe letter is 's'\n\n### Output:\n\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))","tok_input_length":137,"tok_output_length":89,"system_prompt":"","index":412}
{"question":"Create a Python class that can scrape a given website and return data as a list of dictionaries","input":"","expected_output":"class WebsiteScraper(object):\n    def __init__(self, url):\n        self.url = url\n\n    def scrapedata(self):\n        response = requests.get(self.url)\n        soup = BeautifulSoup(response.text)\n        scraped_list = []\n        for item in soup.find_all('div'):\n            data = {\n                'name': item.get('title'),\n                'value': item.get_text()\n            }\n            scraped_list.append(data)\n        return scraped_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that can scrape a given website and return data as a list of dictionaries\n\n### Input:\n\n\n### Output:\nclass WebsiteScraper(object):\n    def __init__(self, url):\n        self.url = url\n\n    def scrapedata(self):\n        response = requests.get(self.url)\n        soup = BeautifulSoup(response.text)\n        scraped_list = []\n        for item in soup.find_all('div'):\n            data = {\n                'name': item.get('title'),\n                'value': item.get_text()\n            }\n            scraped_list.append(data)\n        return scraped_list","tok_input_length":137,"tok_output_length":91,"system_prompt":"","index":6324}
{"question":"Suggest a code to create a series of Fibonacci numbers in Python.","input":"","expected_output":"# Function to generate Fibonacci series \ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect Input\") \n    # First two numbers of the series \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n    \n# Driver Program\nprint(Fibonacci(9))\n \n# Output: 21","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a code to create a series of Fibonacci numbers in Python.\n\n### Input:\n\n\n### Output:\n# Function to generate Fibonacci series \ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect Input\") \n    # First two numbers of the series \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n    \n# Driver Program\nprint(Fibonacci(9))\n \n# Output: 21","tok_input_length":137,"tok_output_length":96,"system_prompt":"","index":8872}
{"question":"Explain how hash tables work in Python.","input":"","expected_output":"Hash tables (also called hash maps) are Python data structures used to store key-value pairs. A hash table uses a hash function to compute the index of an item stored in the table, and then uses this index to store and quickly retrieve the item. The hash function takes the key and generates a value called a hash(or index). This hash is used to store the item in the corresponding position in the hash table. The item can then be quickly accessed by providing the key to the hash table.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain how hash tables work in Python.\n\n### Input:\n\n\n### Output:\nHash tables (also called hash maps) are Python data structures used to store key-value pairs. A hash table uses a hash function to compute the index of an item stored in the table, and then uses this index to store and quickly retrieve the item. The hash function takes the key and generates a value called a hash(or index). This hash is used to store the item in the corresponding position in the hash table. The item can then be quickly accessed by providing the key to the hash table.","tok_input_length":137,"tok_output_length":101,"system_prompt":"","index":2952}
{"question":"Create a Python function that takes two arrays as input and returns a new array containing the elements of both inputs.","input":"array1 = [1, 2, 3]\narray2 = [4, 5, 6]","expected_output":"def merge_arrays(array1, array2):\n    merged_array = array1 + array2\n    return merged_array\n\narray1 = [1, 2, 3]\narray2 = [4, 5, 6]\nmerged_array = merge_arrays(array1, array2)\nprint(merged_array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes two arrays as input and returns a new array containing the elements of both inputs.\n\n### Input:\narray1 = [1, 2, 3]\narray2 = [4, 5, 6]\n\n### Output:\ndef merge_arrays(array1, array2):\n    merged_array = array1 + array2\n    return merged_array\n\narray1 = [1, 2, 3]\narray2 = [4, 5, 6]\nmerged_array = merge_arrays(array1, array2)\nprint(merged_array)","tok_input_length":138,"tok_output_length":65,"system_prompt":"","index":11122}
{"question":"Develop a solution in Python for combining two sorted arrays into a third sorted array.","input":"arr1 = [1, 2, 5]\narr2 = [2, 4, 6]","expected_output":"def combine_sorted_arrays(arr1, arr2):\n    arr3 = arr1 + arr2\n    arr3.sort()\n    return arr3\n\narr1 = [1, 2, 5]\narr2 = [2, 4, 6]\n\narr3 = combine_sorted_arrays(arr1, arr2)\nprint(arr3)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a solution in Python for combining two sorted arrays into a third sorted array.\n\n### Input:\narr1 = [1, 2, 5]\narr2 = [2, 4, 6]\n\n### Output:\ndef combine_sorted_arrays(arr1, arr2):\n    arr3 = arr1 + arr2\n    arr3.sort()\n    return arr3\n\narr1 = [1, 2, 5]\narr2 = [2, 4, 6]\n\narr3 = combine_sorted_arrays(arr1, arr2)\nprint(arr3)","tok_input_length":138,"tok_output_length":71,"system_prompt":"","index":13429}
{"question":"In Python, write a program to find a single missing number in a sorted array of unique integers.","input":"arr = [1,2,3,4,6,7,8]","expected_output":"def findMissingNumber(arr):\n    n = len(arr)\n    total_sum = (n+1)*(n+2)\/\/2\n    arr_sum = sum(arr)\n    \n    missing_number = total_sum - arr_sum\n    \n    return missing_number\n\narr = [1,2,3,4,6,7,8]\n\nprint(findMissingNumber(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, write a program to find a single missing number in a sorted array of unique integers.\n\n### Input:\narr = [1,2,3,4,6,7,8]\n\n### Output:\ndef findMissingNumber(arr):\n    n = len(arr)\n    total_sum = (n+1)*(n+2)\/\/2\n    arr_sum = sum(arr)\n    \n    missing_number = total_sum - arr_sum\n    \n    return missing_number\n\narr = [1,2,3,4,6,7,8]\n\nprint(findMissingNumber(arr))","tok_input_length":138,"tok_output_length":74,"system_prompt":"","index":4124}
{"question":"Using Python, write a program that finds the most common word in a given set of text.","input":"\"This is an example sentence. The quick brown fox jumps over the lazy dog\"","expected_output":"from collections import Counter\n\ndef most_common_word(text):\n    words = text.split()\n    cnt = Counter()\n    for word in words:\n        cnt[word] += 1\n    return cnt.most_common(1)[0][0]\n\ntext = \"This is an example sentence. The quick brown fox jumps over the lazy dog\"\nprint(most_common_word(text))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, write a program that finds the most common word in a given set of text.\n\n### Input:\n\"This is an example sentence. The quick brown fox jumps over the lazy dog\"\n\n### Output:\nfrom collections import Counter\n\ndef most_common_word(text):\n    words = text.split()\n    cnt = Counter()\n    for word in words:\n        cnt[word] += 1\n    return cnt.most_common(1)[0][0]\n\ntext = \"This is an example sentence. The quick brown fox jumps over the lazy dog\"\nprint(most_common_word(text))","tok_input_length":138,"tok_output_length":76,"system_prompt":"","index":4976}
{"question":"Create a Python program to scrape a search engine for the top 10 results on a given query.","input":"Search query: \"best movies of 2019\"","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.google.com\/search?q=best+movies+of+2019&num=10'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nresults = soup.find_all('div', class_='rc')\n\nfor result in results:\n title = result.find('h3').text\n print(title)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to scrape a search engine for the top 10 results on a given query.\n\n### Input:\nSearch query: \"best movies of 2019\"\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.google.com\/search?q=best+movies+of+2019&num=10'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nresults = soup.find_all('div', class_='rc')\n\nfor result in results:\n title = result.find('h3').text\n print(title)","tok_input_length":138,"tok_output_length":80,"system_prompt":"","index":15687}
{"question":"Create a web scraper in Python to crawl a website and collect data about a particular topic.","input":"The URL of the website to be crawled.","expected_output":"import requests\nimport bs4\n\nweb_url = '<input URL>' # Insert URL here\n\ndef scrape(url):\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'lxml')\n\n    output = []\n\n    # Scrape the web page to get the required data\n    ...\n\n    return output\n\nif __name__ == '__main__':\n    print(scrape(web_url))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to crawl a website and collect data about a particular topic.\n\n### Input:\nThe URL of the website to be crawled.\n\n### Output:\nimport requests\nimport bs4\n\nweb_url = '<input URL>' # Insert URL here\n\ndef scrape(url):\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'lxml')\n\n    output = []\n\n    # Scrape the web page to get the required data\n    ...\n\n    return output\n\nif __name__ == '__main__':\n    print(scrape(web_url))","tok_input_length":138,"tok_output_length":84,"system_prompt":"","index":10578}
{"question":"Write a code to sort the words in a given sentence alphabetically.","input":"Sentence: Python is an interpreted high-level programming language.","expected_output":"\"\"\"\nSort the words in a given sentence alphabetically\n\"\"\"\n\ndef sort_words_alphabetically(sentence):\n    # Split sentence into words\n    words_list = sentence.split()\n\n    # Sort the words\n    words_list.sort()\n\n    # Join the words\n    return ' '.join(words_list)\n\nif __name__ == '__main__':\n    print(sort_words_alphabetically('Python is an interpreted high-level programming language.'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to sort the words in a given sentence alphabetically.\n\n### Input:\nSentence: Python is an interpreted high-level programming language.\n\n### Output:\n\"\"\"\nSort the words in a given sentence alphabetically\n\"\"\"\n\ndef sort_words_alphabetically(sentence):\n    # Split sentence into words\n    words_list = sentence.split()\n\n    # Sort the words\n    words_list.sort()\n\n    # Join the words\n    return ' '.join(words_list)\n\nif __name__ == '__main__':\n    print(sort_words_alphabetically('Python is an interpreted high-level programming language.'))","tok_input_length":138,"tok_output_length":86,"system_prompt":"","index":15040}
{"question":"Using a while loop, write a Python program to reverse a given sentence.","input":"\"Hello there my friend\"","expected_output":"# Initialize an empty string \nrevString = \"\"\n\n# Set 'idx' to point to the end of the string \nidx = len(sent) - 1\n \n# Iterate in reverse through the string \nwhile idx >= 0:\n    # Append each individual character to the result string\n    revString += sent[idx]\n    # Decrement the index\n    idx -= 1\n\n# Output the reversed result\nprint(revString)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a while loop, write a Python program to reverse a given sentence.\n\n### Input:\n\"Hello there my friend\"\n\n### Output:\n# Initialize an empty string \nrevString = \"\"\n\n# Set 'idx' to point to the end of the string \nidx = len(sent) - 1\n \n# Iterate in reverse through the string \nwhile idx >= 0:\n    # Append each individual character to the result string\n    revString += sent[idx]\n    # Decrement the index\n    idx -= 1\n\n# Output the reversed result\nprint(revString)","tok_input_length":138,"tok_output_length":90,"system_prompt":"","index":11718}
{"question":"Write a Python function to print the first n rows of Pascal's triangle.","input":"5","expected_output":"def pascal_triangle(rows): \n triangle = [[1]] \n for i in range(rows - 1): \n last_row = triangle[-1]\n new_row = [1] \n for j in range(len(last_row) - 1): \n new_row.append(last_row[j] + last_row[j+1]) \n new_row.append(1) \n triangle.append(new_row)\n \n for row in triangle: \n print(row)\n\npascal_triangle(5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to print the first n rows of Pascal's triangle.\n\n### Input:\n5\n\n### Output:\ndef pascal_triangle(rows): \n triangle = [[1]] \n for i in range(rows - 1): \n last_row = triangle[-1]\n new_row = [1] \n for j in range(len(last_row) - 1): \n new_row.append(last_row[j] + last_row[j+1]) \n new_row.append(1) \n triangle.append(new_row)\n \n for row in triangle: \n print(row)\n\npascal_triangle(5)","tok_input_length":138,"tok_output_length":94,"system_prompt":"","index":11815}
{"question":"Create a text-based user interface using Python.","input":"","expected_output":"options=[\"Create\",\"Update\",\"Delete\",\"Retrieve\",\"Quit\"]\n\ndef createUI():\n    \n    while True:\n        for i in range(len(options)): \n            print(str(i+1)+\" \"+options[i])\n        try:\n            inputValue=int(input('Make your selection:'))\n            if inputValue in range(1,len(options)+1):\n                break\n            else:\n                print('Please select a valid option!')\n        except:\n            print('Please select a valid option!')\n    return inputValue\n\nprint(createUI())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based user interface using Python.\n\n### Input:\n\n\n### Output:\noptions=[\"Create\",\"Update\",\"Delete\",\"Retrieve\",\"Quit\"]\n\ndef createUI():\n    \n    while True:\n        for i in range(len(options)): \n            print(str(i+1)+\" \"+options[i])\n        try:\n            inputValue=int(input('Make your selection:'))\n            if inputValue in range(1,len(options)+1):\n                break\n            else:\n                print('Please select a valid option!')\n        except:\n            print('Please select a valid option!')\n    return inputValue\n\nprint(createUI())","tok_input_length":138,"tok_output_length":102,"system_prompt":"","index":9454}
{"question":"Given a 2D array of integers, write a Python function to rotate the array clockwise by 90 degrees.","input":"[[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]]","expected_output":"def rotate_array(arr):\n    newarr = []\n    for i in range(len(arr[0])):\n        newarr_row = []\n        for j in range(len(arr)):\n            newarr_row.append(arr[len(arr)-j-1][i])\n        newarr.append(newarr_row)\n\n    return newarr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D array of integers, write a Python function to rotate the array clockwise by 90 degrees.\n\n### Input:\n[[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]]\n\n### Output:\ndef rotate_array(arr):\n    newarr = []\n    for i in range(len(arr[0])):\n        newarr_row = []\n        for j in range(len(arr)):\n            newarr_row.append(arr[len(arr)-j-1][i])\n        newarr.append(newarr_row)\n\n    return newarr","tok_input_length":139,"tok_output_length":62,"system_prompt":"","index":15603}
{"question":"Debug a Python function that swaps the values of two variables.","input":"def swap(x, y):\n temp = x\n x = y\n y = temp\n\na = 10\nb = 20\n\nswap(a, b)","expected_output":"def swap(x, y):\n temp = x\n x = y\n y = temp\n\na = 10\nb = 20\n\nswap(a, b)\n\n#Verify the result\nif a == 20 and b == 10:\n print(\"Swap successful\")\nelse:\n print(\"Swap unsuccessful\") # Output: Swap successful","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug a Python function that swaps the values of two variables.\n\n### Input:\ndef swap(x, y):\n temp = x\n x = y\n y = temp\n\na = 10\nb = 20\n\nswap(a, b)\n\n### Output:\ndef swap(x, y):\n temp = x\n x = y\n y = temp\n\na = 10\nb = 20\n\nswap(a, b)\n\n#Verify the result\nif a == 20 and b == 10:\n print(\"Swap successful\")\nelse:\n print(\"Swap unsuccessful\") # Output: Swap successful","tok_input_length":139,"tok_output_length":67,"system_prompt":"","index":9748}
{"question":"Write a python program to parse a JSON array of objects.","input":"[\"name\":\"Bob\",\"age\":30,\"city\":\"New York\"],[\"name\":\"Alice\",\"age\":27,\"city\":\"San Francisco\"]","expected_output":"import json\narr = json.loads('[{\"name\":\"Bob\",\"age\":30,\"city\":\"New York\"}, {\"name\":\"Alice\",\"age\":27,\"city\":\"San Francisco\"}]')\nfor obj in arr:\n    print(\"Name:\", obj[\"name\"])\n    print(\"Age:\", obj[\"age\"])\n    print(\"City:\", obj[\"city\"])\n    print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to parse a JSON array of objects.\n\n### Input:\n[\"name\":\"Bob\",\"age\":30,\"city\":\"New York\"],[\"name\":\"Alice\",\"age\":27,\"city\":\"San Francisco\"]\n\n### Output:\nimport json\narr = json.loads('[{\"name\":\"Bob\",\"age\":30,\"city\":\"New York\"}, {\"name\":\"Alice\",\"age\":27,\"city\":\"San Francisco\"}]')\nfor obj in arr:\n    print(\"Name:\", obj[\"name\"])\n    print(\"Age:\", obj[\"age\"])\n    print(\"City:\", obj[\"city\"])\n    print()","tok_input_length":139,"tok_output_length":73,"system_prompt":"","index":6655}
{"question":"Given a list of elements, write a program to shuffle the elements in Python.","input":"myList = [1, 2, 3, 4, 5, 6]","expected_output":"import random \n\ndef shuffle_list(myList): \n  shuffledList = random.sample(myList, len(myList)) \n  return shuffledList\n\nshuffledList = shuffle_list(myList) \n\nprint(\"Shuffled List :\", shuffledList) \n\n# Output: Shuffled List : [2, 6, 4, 5, 3, 1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of elements, write a program to shuffle the elements in Python.\n\n### Input:\nmyList = [1, 2, 3, 4, 5, 6]\n\n### Output:\nimport random \n\ndef shuffle_list(myList): \n  shuffledList = random.sample(myList, len(myList)) \n  return shuffledList\n\nshuffledList = shuffle_list(myList) \n\nprint(\"Shuffled List :\", shuffledList) \n\n# Output: Shuffled List : [2, 6, 4, 5, 3, 1]","tok_input_length":139,"tok_output_length":75,"system_prompt":"","index":10433}
{"question":"Create a function in Python to check if a given list of numbers is in ascending or descending order.","input":"[5, 3, 8, 6, 1]","expected_output":"def check_order(lst):\n  ascending = all(lst[i] < lst[i+1] for i in range(len(lst)-1))\n  descending = all(lst[i] > lst[i+1] for i in range(len(lst)-1))\n  if ascending:\n    return 'ascending'\n  elif descending:\n    return 'descending'\n  else:\n    return 'not ordered'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to check if a given list of numbers is in ascending or descending order.\n\n### Input:\n[5, 3, 8, 6, 1]\n\n### Output:\ndef check_order(lst):\n  ascending = all(lst[i] < lst[i+1] for i in range(len(lst)-1))\n  descending = all(lst[i] > lst[i+1] for i in range(len(lst)-1))\n  if ascending:\n    return 'ascending'\n  elif descending:\n    return 'descending'\n  else:\n    return 'not ordered'","tok_input_length":139,"tok_output_length":77,"system_prompt":"","index":4142}
{"question":"Create a function in Python that takes an array and returns the element at the middle index.","input":"[1, 2, 3, 4, 5]","expected_output":"def returnMiddle(arr):\n    if len(arr) % 2 == 0:\n        return (arr[int(len(arr) \/ 2) - 1] + arr[int(len(arr) \/ 2)])\/2\n    else:\n        return arr[int(len(arr) \/ 2)]\n print(returnMiddle([1, 2, 3, 4, 5]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes an array and returns the element at the middle index.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef returnMiddle(arr):\n    if len(arr) % 2 == 0:\n        return (arr[int(len(arr) \/ 2) - 1] + arr[int(len(arr) \/ 2)])\/2\n    else:\n        return arr[int(len(arr) \/ 2)]\n print(returnMiddle([1, 2, 3, 4, 5]))","tok_input_length":139,"tok_output_length":79,"system_prompt":"","index":15659}
{"question":"Develop a python program to calculate the average score of a student over the course of a semester.","input":"[10,8,9,6,7]","expected_output":"def avg_score(scores):\n    \"\"\"\n    Calculate the average score of a student over the course of a semester\n    \"\"\"\n \n    avg = 0\n    for score in scores:\n        avg += score\n    return round(avg\/len(scores),2)\n    \nif __name__ == '__main__':\n    scores = [10,8,9,6,7]\n    print(avg_score(scores))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to calculate the average score of a student over the course of a semester.\n\n### Input:\n[10,8,9,6,7]\n\n### Output:\ndef avg_score(scores):\n    \"\"\"\n    Calculate the average score of a student over the course of a semester\n    \"\"\"\n \n    avg = 0\n    for score in scores:\n        avg += score\n    return round(avg\/len(scores),2)\n    \nif __name__ == '__main__':\n    scores = [10,8,9,6,7]\n    print(avg_score(scores))","tok_input_length":139,"tok_output_length":82,"system_prompt":"","index":17037}
{"question":"Create a program in Python that rotates an array right by one place","input":"arr = [1,2,3,4,5]","expected_output":"def rotateArrayRight(arr): \n    temp = arr[len(arr) - 1] \n    \n    for i in range(len(arr)-1, 0, -1): \n        arr[i] = arr[i-1] \n          \n    arr[0] = temp \n    return arr\n\narr = [1, 2, 3, 4, 5]\n\nprint(rotateArrayRight(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that rotates an array right by one place\n\n### Input:\narr = [1,2,3,4,5]\n\n### Output:\ndef rotateArrayRight(arr): \n    temp = arr[len(arr) - 1] \n    \n    for i in range(len(arr)-1, 0, -1): \n        arr[i] = arr[i-1] \n          \n    arr[0] = temp \n    return arr\n\narr = [1, 2, 3, 4, 5]\n\nprint(rotateArrayRight(arr))","tok_input_length":139,"tok_output_length":85,"system_prompt":"","index":9076}
{"question":"Create a Python class called Person that includes parameters for a person's name, age, gender, and nationality.","input":"Not applicable","expected_output":"class Person:\n def __init__(self, name, age, gender, nationality):\n   self.name = name \n   self.age = age\n   self.gender = gender\n   self.nationality = nationality\n\ndef get_name(self):\n   return self.name\n\ndef get_age(self):\n   return self.age\n\ndef get_gender(self):\n   return self.gender\n\ndef get_nationality(self):\n   return self.nationality","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Person that includes parameters for a person's name, age, gender, and nationality.\n\n### Input:\nNot applicable\n\n### Output:\nclass Person:\n def __init__(self, name, age, gender, nationality):\n   self.name = name \n   self.age = age\n   self.gender = gender\n   self.nationality = nationality\n\ndef get_name(self):\n   return self.name\n\ndef get_age(self):\n   return self.age\n\ndef get_gender(self):\n   return self.gender\n\ndef get_nationality(self):\n   return self.nationality","tok_input_length":139,"tok_output_length":87,"system_prompt":"","index":14587}
{"question":"Propose a solution to build an AI assistant that can format and justify paragraphs using Python.","input":"Paragraph with improper formatting","expected_output":"# Install library for formatting and justifying paragraphs\npip install justify\n\n# Function for formatting and justifying paragraphs\ndef format_and_justify_paragraphs(paragraph):\n    from justify import Justify\n    formatted_text = Justify(paragraph, width=90).format()\n    return formatted_text\n\n# Example\nparagraph = \"Paragraph with improper formatting\";\nformatted_text = format_and_justify_paragraphs(paragraph)\nprint(formatted_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPropose a solution to build an AI assistant that can format and justify paragraphs using Python.\n\n### Input:\nParagraph with improper formatting\n\n### Output:\n# Install library for formatting and justifying paragraphs\npip install justify\n\n# Function for formatting and justifying paragraphs\ndef format_and_justify_paragraphs(paragraph):\n    from justify import Justify\n    formatted_text = Justify(paragraph, width=90).format()\n    return formatted_text\n\n# Example\nparagraph = \"Paragraph with improper formatting\";\nformatted_text = format_and_justify_paragraphs(paragraph)\nprint(formatted_text)","tok_input_length":139,"tok_output_length":89,"system_prompt":"","index":9183}
{"question":"Create a Python script to connect to a database and fetch the details of a particular table.","input":"","expected_output":"import mysql.connector\n\n# establish a database connection\nmydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"user\",\n    password=\"password\",\n    database=\"database\"\n)\n\n# create a cursor object\ncursor = mydb.cursor()\n\n# execute the SQL query\ncursor.execute(\"SELECT * FROM table\")\n\n# fetch the rows from the cursor object\nrows = cursor.fetchall()\n\n# print all the details\nfor row in rows:\n    print(row)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to connect to a database and fetch the details of a particular table.\n\n### Input:\n\n\n### Output:\nimport mysql.connector\n\n# establish a database connection\nmydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"user\",\n    password=\"password\",\n    database=\"database\"\n)\n\n# create a cursor object\ncursor = mydb.cursor()\n\n# execute the SQL query\ncursor.execute(\"SELECT * FROM table\")\n\n# fetch the rows from the cursor object\nrows = cursor.fetchall()\n\n# print all the details\nfor row in rows:\n    print(row)","tok_input_length":139,"tok_output_length":94,"system_prompt":"","index":6108}
{"question":"Write a Python script to generate the dates for the next 3 months.","input":"","expected_output":"import datetime\n\nstart_date = datetime.date.today()\n\n# Get the next 3 months\ndate_list = []\nfor i in range(3):\n month = start_date.month + i\n year = start_date.year + (month \/\/ 12)\n month = month % 12\n if month == 0:\n  month = 12\n date_list.append(datetime.date(year, month, 1))\n\n# Print the dates\nfor date in date_list:\n print(date)\n\n# Output","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate the dates for the next 3 months.\n\n### Input:\n\n\n### Output:\nimport datetime\n\nstart_date = datetime.date.today()\n\n# Get the next 3 months\ndate_list = []\nfor i in range(3):\n month = start_date.month + i\n year = start_date.year + (month \/\/ 12)\n month = month % 12\n if month == 0:\n  month = 12\n date_list.append(datetime.date(year, month, 1))\n\n# Print the dates\nfor date in date_list:\n print(date)\n\n# Output","tok_input_length":139,"tok_output_length":97,"system_prompt":"","index":12200}
{"question":"Write a function in Python to print the Fibonacci series.","input":"","expected_output":"def printFibonacciSeries(n): \n  \n    # Taking 1st two fibonacci nubers as 0 and 1 \n    f1 = 0\n    f2 = 1\n    print(f1, f2, end = \" \") \n  \n    for i in range(2, n): \n        next = f1 + f2 \n        print(next, end = \" \") \n  \n        # update values \n        f1 = f2 \n        f2 = next","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print the Fibonacci series.\n\n### Input:\n\n\n### Output:\ndef printFibonacciSeries(n): \n  \n    # Taking 1st two fibonacci nubers as 0 and 1 \n    f1 = 0\n    f2 = 1\n    print(f1, f2, end = \" \") \n  \n    for i in range(2, n): \n        next = f1 + f2 \n        print(next, end = \" \") \n  \n        # update values \n        f1 = f2 \n        f2 = next","tok_input_length":139,"tok_output_length":101,"system_prompt":"","index":515}
{"question":"Convert the following python code into a Java program (15 lines or less).","input":"def fact(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return n * fact(n - 1)","expected_output":"public class Factorial {\n    public static int fact(int n) {\n        if (n < 0) {\n            return 0;\n        }\n\n        if (n == 0) {\n            return 1;\n        }\n\n        return n * fact(n - 1);\n    }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following python code into a Java program (15 lines or less).\n\n### Input:\ndef fact(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return n * fact(n - 1)\n\n### Output:\npublic class Factorial {\n    public static int fact(int n) {\n        if (n < 0) {\n            return 0;\n        }\n\n        if (n == 0) {\n            return 1;\n        }\n\n        return n * fact(n - 1);\n    }\n}","tok_input_length":140,"tok_output_length":60,"system_prompt":"","index":9184}
{"question":"Create a Python program that updates the dictionary with the new key-value pair.","input":"dictionary = {'apple': 1, 'banana': 2, 'orange': 3}\nkey = 'mango'\nvalue = 4","expected_output":"dictionary = {'apple': 1, 'banana': 2, 'orange': 3}\nkey = 'mango'\nvalue = 4\n\ndictionary[key] = value\nprint(dictionary)\n# {'apple': 1, 'banana': 2, 'orange': 3, 'mango': 4}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that updates the dictionary with the new key-value pair.\n\n### Input:\ndictionary = {'apple': 1, 'banana': 2, 'orange': 3}\nkey = 'mango'\nvalue = 4\n\n### Output:\ndictionary = {'apple': 1, 'banana': 2, 'orange': 3}\nkey = 'mango'\nvalue = 4\n\ndictionary[key] = value\nprint(dictionary)\n# {'apple': 1, 'banana': 2, 'orange': 3, 'mango': 4}","tok_input_length":140,"tok_output_length":67,"system_prompt":"","index":5556}
{"question":"Generate a python code for an algorithmic solution for the following problem:","input":"Given a list A and a number X, determine whether or not there exist two elements in A whose sum is exactly X.","expected_output":"def is_sum_possible(A, X): \n    n = len(A) \n    # create an empty hash set\n    s = set() \n  \n    for i in range(n): \n        temp = X - A[i]  \n        if temp >= 0 and temp in s: \n            return True \n        s.add(A[i])  \n  \n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code for an algorithmic solution for the following problem:\n\n### Input:\nGiven a list A and a number X, determine whether or not there exist two elements in A whose sum is exactly X.\n\n### Output:\ndef is_sum_possible(A, X): \n    n = len(A) \n    # create an empty hash set\n    s = set() \n  \n    for i in range(n): \n        temp = X - A[i]  \n        if temp >= 0 and temp in s: \n            return True \n        s.add(A[i])  \n  \n    return False","tok_input_length":140,"tok_output_length":74,"system_prompt":"","index":18333}
{"question":"Design a Python program that takes an array of integers and returns the first element that is divisible by 7.","input":"[41, 42, 43, 44, 45]","expected_output":"def findFirstDivisibleBy7(arr):\n    for i in range(0, len(arr)):\n        if arr[i] % 7 == 0:\n            return arr[i]\n    return -1\n\narr = [41, 42, 43, 44, 45]\nresult = findFirstDivisibleBy7(arr)\nprint(result) # 42","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that takes an array of integers and returns the first element that is divisible by 7.\n\n### Input:\n[41, 42, 43, 44, 45]\n\n### Output:\ndef findFirstDivisibleBy7(arr):\n    for i in range(0, len(arr)):\n        if arr[i] % 7 == 0:\n            return arr[i]\n    return -1\n\narr = [41, 42, 43, 44, 45]\nresult = findFirstDivisibleBy7(arr)\nprint(result) # 42","tok_input_length":140,"tok_output_length":76,"system_prompt":"","index":14317}
{"question":"Write a Python program to convert a given binary form to its original string.","input":"b_string = \"0100100001100101011011000110110001101111\"","expected_output":"def binary_to_string(b_string):\n s = \"\" \n for i in range(0, len(b_string), 8):\n byte = b_string[i: i + 8]\n s += chr(int(byte, 2))\n return s\n\nb_string = \"0100100001100101011011000110110001101111\"\nprint(binary_to_string(b_string))\n# Output: Hello","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given binary form to its original string.\n\n### Input:\nb_string = \"0100100001100101011011000110110001101111\"\n\n### Output:\ndef binary_to_string(b_string):\n s = \"\" \n for i in range(0, len(b_string), 8):\n byte = b_string[i: i + 8]\n s += chr(int(byte, 2))\n return s\n\nb_string = \"0100100001100101011011000110110001101111\"\nprint(binary_to_string(b_string))\n# Output: Hello","tok_input_length":140,"tok_output_length":79,"system_prompt":"","index":14285}
{"question":"Build a Python program that extracts all email addresses from a given string.","input":"\"This is an example with two emails: john@example.com, and jane@example.com\"","expected_output":"import re\n\ndef find_emails(text):\n    regex = r\"([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)\"\n    emails = re.findall(regex, text)\n    return emails\n\nemails = find_emails(\"This is an example with two emails: john@example.com, and jane@example.com\")\nprint(emails)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program that extracts all email addresses from a given string.\n\n### Input:\n\"This is an example with two emails: john@example.com, and jane@example.com\"\n\n### Output:\nimport re\n\ndef find_emails(text):\n    regex = r\"([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)\"\n    emails = re.findall(regex, text)\n    return emails\n\nemails = find_emails(\"This is an example with two emails: john@example.com, and jane@example.com\")\nprint(emails)","tok_input_length":140,"tok_output_length":82,"system_prompt":"","index":190}
{"question":"Develop Python code to reverse an array.","input":"arr = [1, 2, 3, 4, 5]","expected_output":"def reverse_array(arr): \n    start = 0\n    end = len(arr) - 1\n      \n    while start < end: \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr \n  \n# Driver code \narr = [1, 2, 3, 4, 5] \nprint(reverse_array(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop Python code to reverse an array.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Output:\ndef reverse_array(arr): \n    start = 0\n    end = len(arr) - 1\n      \n    while start < end: \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr \n  \n# Driver code \narr = [1, 2, 3, 4, 5] \nprint(reverse_array(arr))","tok_input_length":140,"tok_output_length":88,"system_prompt":"","index":6556}
{"question":"Develop a function to generate all combinations of a given list in Python.","input":"[1, 2, 3]","expected_output":"def all_combinations(list_of_numbers): \n    if len(list_of_numbers) == 0: \n        return [] \n  \n    if len(list_of_numbers) == 1: \n        return [list_of_numbers] \n  \n    combinations = [] \n    for combination in all_combinations(list_of_numbers[1:]): \n        combinations.append(combination) \n        combinations.append([list_of_numbers[0]] + combination) \n  \n    return combinations","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function to generate all combinations of a given list in Python.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef all_combinations(list_of_numbers): \n    if len(list_of_numbers) == 0: \n        return [] \n  \n    if len(list_of_numbers) == 1: \n        return [list_of_numbers] \n  \n    combinations = [] \n    for combination in all_combinations(list_of_numbers[1:]): \n        combinations.append(combination) \n        combinations.append([list_of_numbers[0]] + combination) \n  \n    return combinations","tok_input_length":140,"tok_output_length":90,"system_prompt":"","index":5854}
{"question":"Write a Python script that prints all the prime numbers between 0 and the given number.","input":"10","expected_output":"def prime_numbers(num):\n    primes = []\n    for n in range(2, num + 1):\n        is_prime = True\n        for i in range(2, n):\n            if n % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes\n\nprint(prime_numbers(10)) # Outputs: [2, 3, 5, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that prints all the prime numbers between 0 and the given number.\n\n### Input:\n10\n\n### Output:\ndef prime_numbers(num):\n    primes = []\n    for n in range(2, num + 1):\n        is_prime = True\n        for i in range(2, n):\n            if n % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes\n\nprint(prime_numbers(10)) # Outputs: [2, 3, 5, 7]","tok_input_length":140,"tok_output_length":93,"system_prompt":"","index":13448}
{"question":"Create a Python function that prints the next prime number after a given number.","input":"19","expected_output":"def is_prime(n):\n \n if n <= 1:\n return False\n \n for i in range(2, int(n**0.5)+1):\n if n % i == 0:\n return False\n \n return True\n \n \ndef next_prime(num):\n \n if is_prime(num):\n num += 1\n \n while (True):\n if is_prime(num):\n return num\n \n num += 1\n \n \nnum = 19\nprint(next_prime(num))\n# Output: 23","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that prints the next prime number after a given number.\n\n### Input:\n19\n\n### Output:\ndef is_prime(n):\n \n if n <= 1:\n return False\n \n for i in range(2, int(n**0.5)+1):\n if n % i == 0:\n return False\n \n return True\n \n \ndef next_prime(num):\n \n if is_prime(num):\n num += 1\n \n while (True):\n if is_prime(num):\n return num\n \n num += 1\n \n \nnum = 19\nprint(next_prime(num))\n# Output: 23","tok_input_length":140,"tok_output_length":96,"system_prompt":"","index":4773}
{"question":"Create a data visualization in Python using Matplotlib.","input":"Not applicable","expected_output":"import matplotlib.pyplot as plt\n\nx_values = [1, 2, 3, 4, 5]\ny_values = [1, 8, 27, 64, 125]\n\n# Plot x and y values\nplt.plot(x_values, y_values)\n\n# Give the plot a title\nplt.title(\"Plot of x*x\")\n\n# Label the x and y axes\nplt.xlabel('x')\nplt.ylabel('x*x')\n\n# Show the plot\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data visualization in Python using Matplotlib.\n\n### Input:\nNot applicable\n\n### Output:\nimport matplotlib.pyplot as plt\n\nx_values = [1, 2, 3, 4, 5]\ny_values = [1, 8, 27, 64, 125]\n\n# Plot x and y values\nplt.plot(x_values, y_values)\n\n# Give the plot a title\nplt.title(\"Plot of x*x\")\n\n# Label the x and y axes\nplt.xlabel('x')\nplt.ylabel('x*x')\n\n# Show the plot\nplt.show()","tok_input_length":140,"tok_output_length":100,"system_prompt":"","index":8018}
{"question":"Create a Python program to print the Fibonacci sequence.","input":"","expected_output":"def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \n\nprint(Fibonacci(9))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \n\nprint(Fibonacci(9))","tok_input_length":140,"tok_output_length":103,"system_prompt":"","index":11678}
{"question":"Transform the following data frame in Python.","input":"df = [\n    {'name': 'Bob', 'age': 25},\n    {'name': 'Mary', 'age': 18},\n    {'name': 'John', 'age': 32},\n]","expected_output":"import pandas as pd\n\ndf = pd.DataFrame(df)\n\n#Transform the dataframe\ndf['age_group'] = [ \"under 20\" if a < 20\n   else \"20-35\" if a < 35\n   else \"over 35\"\n   for a in df['age']]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform the following data frame in Python.\n\n### Input:\ndf = [\n    {'name': 'Bob', 'age': 25},\n    {'name': 'Mary', 'age': 18},\n    {'name': 'John', 'age': 32},\n]\n\n### Output:\nimport pandas as pd\n\ndf = pd.DataFrame(df)\n\n#Transform the dataframe\ndf['age_group'] = [ \"under 20\" if a < 20\n   else \"20-35\" if a < 35\n   else \"over 35\"\n   for a in df['age']]","tok_input_length":141,"tok_output_length":63,"system_prompt":"","index":7621}
{"question":"What can be changed in the following Python code to improve its readability?","input":"def findMax(list):\n    x=list[0]\n    for i in list:\n        if i>x:\n            x=i\n    return x","expected_output":"def findMax(list):\n    # initialize the maximum variable to the first element of the list.\n    maximum = list[0]\n\n    # iterate through the list and compare each element to the current maximum element.\n    for element in list:\n        if element > maximum:\n            maximum = element\n    \n    # return the maximum element.\n    return maximum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat can be changed in the following Python code to improve its readability?\n\n### Input:\ndef findMax(list):\n    x=list[0]\n    for i in list:\n        if i>x:\n            x=i\n    return x\n\n### Output:\ndef findMax(list):\n    # initialize the maximum variable to the first element of the list.\n    maximum = list[0]\n\n    # iterate through the list and compare each element to the current maximum element.\n    for element in list:\n        if element > maximum:\n            maximum = element\n    \n    # return the maximum element.\n    return maximum","tok_input_length":141,"tok_output_length":70,"system_prompt":"","index":10453}
{"question":"Create a program in Python to add the elements of two given lists.","input":"list1 = [1, 2, 3]\nlist2 = [4, 5, 6]","expected_output":"list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\ndef addLists(list1, list2):\n    result = [] \n    for i in range(0, len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\nprint(addLists(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to add the elements of two given lists.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n### Output:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\ndef addLists(list1, list2):\n    result = [] \n    for i in range(0, len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\nprint(addLists(list1, list2))","tok_input_length":141,"tok_output_length":76,"system_prompt":"","index":8029}
{"question":"Create an algorithm in Python to find the largest element in an unsorted list of numbers.","input":"[10, 5, 20, 8, 9, 12]","expected_output":"def find_large_element(lst):\n  largest_number = lst[0]\n  for i in range(1, len(lst)):\n    if lst[i] > largest_number:\n      largest_number = lst[i]\n  return largest_number\n\nmy_list = [10, 5, 20, 8, 9, 12]\nprint(find_large_element(my_list)) # 20","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the largest element in an unsorted list of numbers.\n\n### Input:\n[10, 5, 20, 8, 9, 12]\n\n### Output:\ndef find_large_element(lst):\n  largest_number = lst[0]\n  for i in range(1, len(lst)):\n    if lst[i] > largest_number:\n      largest_number = lst[i]\n  return largest_number\n\nmy_list = [10, 5, 20, 8, 9, 12]\nprint(find_large_element(my_list)) # 20","tok_input_length":141,"tok_output_length":78,"system_prompt":"","index":8583}
{"question":"Design a function  in Python to count the total number of prime numbers between the two given numbers (inclusive).","input":"Start = 10, End = 20","expected_output":"def count_primes(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function  in Python to count the total number of prime numbers between the two given numbers (inclusive).\n\n### Input:\nStart = 10, End = 20\n\n### Output:\ndef count_primes(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True","tok_input_length":141,"tok_output_length":82,"system_prompt":"","index":15131}
{"question":"Generate a Python script to sort the given list of words.","input":"['bubble', 'selection', 'quicksort', 'insertion']","expected_output":"# function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to sort the given list of words.\n\n### Input:\n['bubble', 'selection', 'quicksort', 'insertion']\n\n### Output:\n# function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection']","tok_input_length":141,"tok_output_length":87,"system_prompt":"","index":65}
{"question":"Create an interactive program in Python that allows users to enter two numbers and then prints out the sum of the two numbers.","input":"","expected_output":"# define a function to take in two numbers\ndef adder(num1, num2):\n    return num1 + num2\n\n# prompt the user to enter the two numbers\nnum1 = float(input(\"Enter number 1: \"))\nnum2 = float(input(\"Enter number 2: \"))\n\n# print the sum of the two numbers\nprint(\"The sum of the two numbers is:\", adder(num1, num2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an interactive program in Python that allows users to enter two numbers and then prints out the sum of the two numbers.\n\n### Input:\n\n\n### Output:\n# define a function to take in two numbers\ndef adder(num1, num2):\n    return num1 + num2\n\n# prompt the user to enter the two numbers\nnum1 = float(input(\"Enter number 1: \"))\nnum2 = float(input(\"Enter number 2: \"))\n\n# print the sum of the two numbers\nprint(\"The sum of the two numbers is:\", adder(num1, num2))","tok_input_length":141,"tok_output_length":90,"system_prompt":"","index":15582}
{"question":"Create a decision-tree algorithm that takes a CSV of input data and predicts the correct class for python.","input":"","expected_output":"def decision_tree_classifier(input_data):\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.model_selection import train_test_split\n\n    X_train, X_test, y_train, y_test = train_test_split(input_data.drop(axis=1), input_data[input_data.columns[-1]], test_size=0.3)\n    classifier = DecisionTreeClassifier()\n    classifier.fit(X_train, y_train)\n\n    y_pred = classifier.predict(X_test)\n    return y_pred","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a decision-tree algorithm that takes a CSV of input data and predicts the correct class for python.\n\n### Input:\n\n\n### Output:\ndef decision_tree_classifier(input_data):\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.model_selection import train_test_split\n\n    X_train, X_test, y_train, y_test = train_test_split(input_data.drop(axis=1), input_data[input_data.columns[-1]], test_size=0.3)\n    classifier = DecisionTreeClassifier()\n    classifier.fit(X_train, y_train)\n\n    y_pred = classifier.predict(X_test)\n    return y_pred","tok_input_length":141,"tok_output_length":94,"system_prompt":"","index":1159}
{"question":"Create a program in Python to find the sum of all even numbers between a given range.","input":"","expected_output":"#Input range\nstart = int(input(\"Enter start of range: \"))\nend = int(input(\"Enter end of range: \"))\n\n#Initialize sum to 0\nsum = 0\n\n#Loop to find the sum of even numbers\nfor num in range(start,end+1):\n  if num % 2 == 0:\n    sum += num\n\n#Print the result\nprint(\"Sum of even numbers between\",start,\"and\",end,\"=\",sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find the sum of all even numbers between a given range.\n\n### Input:\n\n\n### Output:\n#Input range\nstart = int(input(\"Enter start of range: \"))\nend = int(input(\"Enter end of range: \"))\n\n#Initialize sum to 0\nsum = 0\n\n#Loop to find the sum of even numbers\nfor num in range(start,end+1):\n  if num % 2 == 0:\n    sum += num\n\n#Print the result\nprint(\"Sum of even numbers between\",start,\"and\",end,\"=\",sum)","tok_input_length":141,"tok_output_length":96,"system_prompt":"","index":6913}
{"question":"Create an array of numbers using python, only using the number 0","input":"","expected_output":"# Create an array of 10 zeros\narr = [0 for i in range(10)]\n\n# Create an array of 20 zeros\narr = [0 for i in range(20)]\n\n# Create a 3x3 array of zeros\narr = [[0 for i in range(3)] for j in range(3)]\n\n# Create a 5x5 array of zeros\narr = [[0 for i in range(5)] for j in range(5)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array of numbers using python, only using the number 0\n\n### Input:\n\n\n### Output:\n# Create an array of 10 zeros\narr = [0 for i in range(10)]\n\n# Create an array of 20 zeros\narr = [0 for i in range(20)]\n\n# Create a 3x3 array of zeros\narr = [[0 for i in range(3)] for j in range(3)]\n\n# Create a 5x5 array of zeros\narr = [[0 for i in range(5)] for j in range(5)]","tok_input_length":141,"tok_output_length":99,"system_prompt":"","index":8090}
{"question":"Develop a class in Python to store 3D vectors.","input":"","expected_output":"class Vector3D(object):\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def magnitude(self):\n         return math.sqrt(self.x**2 + self.y**2 + self.z**2)\n\n    def __add__(self, other):\n        return Vector3D(self.x + other.x,\n                        self.y + other.y,\n                        self.z + other.z)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class in Python to store 3D vectors.\n\n### Input:\n\n\n### Output:\nclass Vector3D(object):\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def magnitude(self):\n         return math.sqrt(self.x**2 + self.y**2 + self.z**2)\n\n    def __add__(self, other):\n        return Vector3D(self.x + other.x,\n                        self.y + other.y,\n                        self.z + other.z)","tok_input_length":141,"tok_output_length":102,"system_prompt":"","index":17108}
{"question":"Create a Python script that transforms a customer's address from one format to another.","input":"Input format: \"Street address, City, State, Zip code\"\nOutput format: \"City, State Zip code\"\nInput: \"123 Main Street, Orlando, FL, 32801\"","expected_output":"inputString = \"123 Main Street, Orlando, FL, 32801\"\n\nwords = inputString.split(\",\")\nif len(words) > 3:\n    outputString = words[1] + \", \" + words[2] + \" \" + words[3]\n    print(outputString)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that transforms a customer's address from one format to another.\n\n### Input:\nInput format: \"Street address, City, State, Zip code\"\nOutput format: \"City, State Zip code\"\nInput: \"123 Main Street, Orlando, FL, 32801\"\n\n### Output:\ninputString = \"123 Main Street, Orlando, FL, 32801\"\n\nwords = inputString.split(\",\")\nif len(words) > 3:\n    outputString = words[1] + \", \" + words[2] + \" \" + words[3]\n    print(outputString)","tok_input_length":142,"tok_output_length":60,"system_prompt":"","index":17855}
{"question":"Create a Python function for converting a list to a dictionary. The function should take a list of key-value tuples and return a dictionary.","input":"[('a', 1), ('b', 2), ('c', 3)]","expected_output":"def list_to_dict(input_list):\n result = {}\n for key, value in input_list:\n result[key] = value\n return result\n\nlist_to_dict([('a', 1), ('b', 2), ('c', 3)]) \n#{'a': 1, 'b': 2, 'c': 3}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function for converting a list to a dictionary. The function should take a list of key-value tuples and return a dictionary.\n\n### Input:\n[('a', 1), ('b', 2), ('c', 3)]\n\n### Output:\ndef list_to_dict(input_list):\n result = {}\n for key, value in input_list:\n result[key] = value\n return result\n\nlist_to_dict([('a', 1), ('b', 2), ('c', 3)]) \n#{'a': 1, 'b': 2, 'c': 3}","tok_input_length":142,"tok_output_length":69,"system_prompt":"","index":14203}
{"question":"Design a class in Python to represent a bank account.","input":"The class should include a constructor to create bank accounts, methods to deposit and withdraw money, and a toString() method to display the account balance.","expected_output":"class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        self.balance -= amount\n        return self.balance\n\n    def __str__(self):\n        return \"Current balance is \" + str(self.balance)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to represent a bank account.\n\n### Input:\nThe class should include a constructor to create bank accounts, methods to deposit and withdraw money, and a toString() method to display the account balance.\n\n### Output:\nclass BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        self.balance -= amount\n        return self.balance\n\n    def __str__(self):\n        return \"Current balance is \" + str(self.balance)","tok_input_length":142,"tok_output_length":75,"system_prompt":"","index":11884}
{"question":"Generate a Python class for an address book program. The class should contain methods for adding a new person's name, phone number and email, and editing an existing contact.","input":"Not applicable","expected_output":"class AddressBook:\n def __init__(self):\n self.people = {}\n\n def add_person(self, name):\n self.people[name] = { 'phone': None, 'email': None }\n \n def edit_person(self, name, phone=None, email=None):\n person = self.people[name]\n if phone: \n person['phone'] = phone\n if email:\n person['email'] = email","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class for an address book program. The class should contain methods for adding a new person's name, phone number and email, and editing an existing contact.\n\n### Input:\nNot applicable\n\n### Output:\nclass AddressBook:\n def __init__(self):\n self.people = {}\n\n def add_person(self, name):\n self.people[name] = { 'phone': None, 'email': None }\n \n def edit_person(self, name, phone=None, email=None):\n person = self.people[name]\n if phone: \n person['phone'] = phone\n if email:\n person['email'] = email","tok_input_length":142,"tok_output_length":78,"system_prompt":"","index":10538}
{"question":"Implement a bubble sort algorithm in Python to sort a list of numbers from lowest to highest.","input":"[5, 3, 1, 4, 7]","expected_output":"def bubble_sort(array):\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] > array[j]:\n                array[i], array[j] = array[j], array[i]\n    return array\n\narr = [5, 3, 1, 4, 7]\nsorted_arr = bubble_sort(arr)\nprint(sorted_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a bubble sort algorithm in Python to sort a list of numbers from lowest to highest.\n\n### Input:\n[5, 3, 1, 4, 7]\n\n### Output:\ndef bubble_sort(array):\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] > array[j]:\n                array[i], array[j] = array[j], array[i]\n    return array\n\narr = [5, 3, 1, 4, 7]\nsorted_arr = bubble_sort(arr)\nprint(sorted_arr)","tok_input_length":142,"tok_output_length":82,"system_prompt":"","index":15054}
{"question":"Can you write a python program to solve a system of linear equations?","input":"x + y = 5\n2x + y = 8","expected_output":"def solve_linear_equations(a, b, c):\n    \"\"\"\n    This function takes three parameters: a, b and c, which are the coefficients of a system of linear equations, \n    and returns a tuple of the solution of the system.\n    \"\"\"\n    x = (c - b) \/ (a - b)\n    y = (5 - a*x) \/ b\n    \n    return (x, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a python program to solve a system of linear equations?\n\n### Input:\nx + y = 5\n2x + y = 8\n\n### Output:\ndef solve_linear_equations(a, b, c):\n    \"\"\"\n    This function takes three parameters: a, b and c, which are the coefficients of a system of linear equations, \n    and returns a tuple of the solution of the system.\n    \"\"\"\n    x = (c - b) \/ (a - b)\n    y = (5 - a*x) \/ b\n    \n    return (x, y)","tok_input_length":142,"tok_output_length":86,"system_prompt":"","index":14833}
{"question":"Using Python, design a system that reads user input and suggests a suitable search query.","input":"\"I want to find the latest updates about Google\"","expected_output":"def generate_query_suggestion(user_input):\n    words = user_input.split(' ')\n    query_words = [word for word in words if not word in stopwords.words('english')]\n    phrase = \"+\".join(query_words)\n    return f\"{phrase}+latest+updates\"\n\nuser_input = \"I want to find the latest updates about Google\"\nquery = generate_query_suggestion(user_input)\nprint(query) # google+latest+updates","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, design a system that reads user input and suggests a suitable search query.\n\n### Input:\n\"I want to find the latest updates about Google\"\n\n### Output:\ndef generate_query_suggestion(user_input):\n    words = user_input.split(' ')\n    query_words = [word for word in words if not word in stopwords.words('english')]\n    phrase = \"+\".join(query_words)\n    return f\"{phrase}+latest+updates\"\n\nuser_input = \"I want to find the latest updates about Google\"\nquery = generate_query_suggestion(user_input)\nprint(query) # google+latest+updates","tok_input_length":142,"tok_output_length":88,"system_prompt":"","index":15266}
{"question":"Design a Python Program to convert a given DNA sequence into its RNA equivalent.","input":"DNA = \"ATCGATCG\"","expected_output":"def convert_to_rna(DNA):\n    rna = \"\"\n    # iterate through each character\n    for char in DNA:\n        # check character\n        if char == \"A\":\n            rna += \"U\"\n        elif char == \"T\":\n            rna += \"A\"\n        elif char == \"C\":\n            rna += \"G\"\n        elif char == \"G\":\n            rna += \"C\"\n    return rna","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python Program to convert a given DNA sequence into its RNA equivalent.\n\n### Input:\nDNA = \"ATCGATCG\"\n\n### Output:\ndef convert_to_rna(DNA):\n    rna = \"\"\n    # iterate through each character\n    for char in DNA:\n        # check character\n        if char == \"A\":\n            rna += \"U\"\n        elif char == \"T\":\n            rna += \"A\"\n        elif char == \"C\":\n            rna += \"G\"\n        elif char == \"G\":\n            rna += \"C\"\n    return rna","tok_input_length":142,"tok_output_length":92,"system_prompt":"","index":7514}
{"question":"Write a Python program to make a web crawler that fetches all the links on a webpage.","input":"","expected_output":"import requests\nfrom bs4 import BeautifulSoup \n\ndef get_all_links(url):\n  # make a GET request to fetch the raw HTML content\n  html_content = requests.get(url).text\n  \n  # parse the html content\n  soup = BeautifulSoup(html_content, \"lxml\")\n  \n  # fetch all anchors\n  links = soup.find_all(\"a\")\n\n  for link in links:\n    print(link.get(\"href\"))\n\nget_all_links(\"https:\/\/www.example.com\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to make a web crawler that fetches all the links on a webpage.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup \n\ndef get_all_links(url):\n  # make a GET request to fetch the raw HTML content\n  html_content = requests.get(url).text\n  \n  # parse the html content\n  soup = BeautifulSoup(html_content, \"lxml\")\n  \n  # fetch all anchors\n  links = soup.find_all(\"a\")\n\n  for link in links:\n    print(link.get(\"href\"))\n\nget_all_links(\"https:\/\/www.example.com\")","tok_input_length":142,"tok_output_length":96,"system_prompt":"","index":4110}
{"question":"Generate a Python function to generate prime numbers in a given range of numbers.","input":"","expected_output":"def generate_primes(start, end):\n    # A list to store prime numbers\n    primes = []\n \n    # Iterate from start to end and\n    # check if number is prime or not\n    for num in range(start, end + 1):\n        isPrime = True\n        for i in range(2, num):\n            if (num % i == 0):\n                isPrime = False\n        if isPrime:\n            primes.append(num)\n \n    return primes","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to generate prime numbers in a given range of numbers.\n\n### Input:\n\n\n### Output:\ndef generate_primes(start, end):\n    # A list to store prime numbers\n    primes = []\n \n    # Iterate from start to end and\n    # check if number is prime or not\n    for num in range(start, end + 1):\n        isPrime = True\n        for i in range(2, num):\n            if (num % i == 0):\n                isPrime = False\n        if isPrime:\n            primes.append(num)\n \n    return primes","tok_input_length":142,"tok_output_length":100,"system_prompt":"","index":7316}
{"question":"Develop a code to sort the following  Python dictionary by its values from low to high.","input":"students = {\n    'Jacob': 95.5, \n    'Leah': 91.8,\n    'Sebastian': 98.4,\n    'David': 95.1,\n    'Joseph': 90.4\n}","expected_output":"def sort_dict_by_values(students):\n    sorted_students = sorted(students, key=students.get)\n    return [sorted_students, [students[key] for key in sorted_students]]\n\nprint(sort_dict_by_values(students))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code to sort the following  Python dictionary by its values from low to high.\n\n### Input:\nstudents = {\n    'Jacob': 95.5, \n    'Leah': 91.8,\n    'Sebastian': 98.4,\n    'David': 95.1,\n    'Joseph': 90.4\n}\n\n### Output:\ndef sort_dict_by_values(students):\n    sorted_students = sorted(students, key=students.get)\n    return [sorted_students, [students[key] for key in sorted_students]]\n\nprint(sort_dict_by_values(students))","tok_input_length":143,"tok_output_length":46,"system_prompt":"","index":693}
{"question":"Create a function in Python which takes 3 arrays as input, and returns the arrays merged together into a single array.","input":"[1, 2, 3], [4, 5, 6], [7, 8, 9]","expected_output":"def merge_arrays(arr1, arr2, arr3):\n    combined_arr = arr1 + arr2 + arr3\n    return combined_arr\n\nresult = merge_arrays([1, 2, 3], [4, 5, 6], [7, 8, 9])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes 3 arrays as input, and returns the arrays merged together into a single array.\n\n### Input:\n[1, 2, 3], [4, 5, 6], [7, 8, 9]\n\n### Output:\ndef merge_arrays(arr1, arr2, arr3):\n    combined_arr = arr1 + arr2 + arr3\n    return combined_arr\n\nresult = merge_arrays([1, 2, 3], [4, 5, 6], [7, 8, 9])\nprint(result)","tok_input_length":143,"tok_output_length":65,"system_prompt":"","index":2362}
{"question":"Given a 2D array of integers, write a Python function that returns the sum of all values in the array.","input":"[[1, 2], [3, 4], [5, 6]]","expected_output":"def sum2dArray(arr):\n    two_d_sum = 0\n    for sub_arr in arr:\n        for elem in sub_arr:\n            two_d_sum += elem\n    return two_d_sum\n\narr = [[1,2], [3,4], [5,6]]\nresult = sum2dArray(arr)\nprint(result) # 21","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D array of integers, write a Python function that returns the sum of all values in the array.\n\n### Input:\n[[1, 2], [3, 4], [5, 6]]\n\n### Output:\ndef sum2dArray(arr):\n    two_d_sum = 0\n    for sub_arr in arr:\n        for elem in sub_arr:\n            two_d_sum += elem\n    return two_d_sum\n\narr = [[1,2], [3,4], [5,6]]\nresult = sum2dArray(arr)\nprint(result) # 21","tok_input_length":143,"tok_output_length":74,"system_prompt":"","index":5361}
{"question":"Develop a python program for predicting house prices.","input":"The input dataset contains a collection of 248 house prices from a neighborhood in the United States. Each house price is associated with 6 different attributes.","expected_output":"import pandas as pd\n\n# Load the input dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Split into X and y\nX = data.iloc[:,0:6]\ny = data.iloc[:,6]\n\n# Build the model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X,y)\n\n# Make predictions\npredictions = model.predict(X)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program for predicting house prices.\n\n### Input:\nThe input dataset contains a collection of 248 house prices from a neighborhood in the United States. Each house price is associated with 6 different attributes.\n\n### Output:\nimport pandas as pd\n\n# Load the input dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Split into X and y\nX = data.iloc[:,0:6]\ny = data.iloc[:,6]\n\n# Build the model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X,y)\n\n# Make predictions\npredictions = model.predict(X)","tok_input_length":143,"tok_output_length":77,"system_prompt":"","index":13063}
{"question":"Design and program a Python function to find the maximum number from an array of integers","input":"[10, 2, 4, 6, 8, 9]","expected_output":"def max_num(arr):\n    max_num = arr[0]\n    for i in arr:\n        if i > max_num:\n            max_num = i\n    return max_num\n\nif __name__ == '__main__':\n    arr = [10, 2, 4, 6, 8, 9]\n    print('The maximum number in array is', max_num(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and program a Python function to find the maximum number from an array of integers\n\n### Input:\n[10, 2, 4, 6, 8, 9]\n\n### Output:\ndef max_num(arr):\n    max_num = arr[0]\n    for i in arr:\n        if i > max_num:\n            max_num = i\n    return max_num\n\nif __name__ == '__main__':\n    arr = [10, 2, 4, 6, 8, 9]\n    print('The maximum number in array is', max_num(arr))","tok_input_length":143,"tok_output_length":81,"system_prompt":"","index":16574}
{"question":"Generate a program to output the most frequently used words in a given string","input":"txt = \"Python is a powerful language that is used for a wide range of applications\"","expected_output":"from collections import Counter \n\ndef most_frequent(string): \n\tdata = string.split(\" \") \n\tdata1 = Counter(data) \n\t\n\treturn data1.most_common(1)[0] \n\ntxt = \"Python is a powerful language that is used for a wide range of applications\"\nassert most_frequent(txt) == ('is', 2)\nprint(\"Most frequent word is : \", most_frequent(txt))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to output the most frequently used words in a given string\n\n### Input:\ntxt = \"Python is a powerful language that is used for a wide range of applications\"\n\n### Output:\nfrom collections import Counter \n\ndef most_frequent(string): \n\tdata = string.split(\" \") \n\tdata1 = Counter(data) \n\t\n\treturn data1.most_common(1)[0] \n\ntxt = \"Python is a powerful language that is used for a wide range of applications\"\nassert most_frequent(txt) == ('is', 2)\nprint(\"Most frequent word is : \", most_frequent(txt))","tok_input_length":143,"tok_output_length":83,"system_prompt":"","index":13233}
{"question":"Write a Python program to create a class to represent a bank account and add two methods, deposit and withdrawal, to modify the account balance.","input":"Not applicable.","expected_output":"class BankAccount:\n    \n    def __init__(self, name, balance=0.0):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    \n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a class to represent a bank account and add two methods, deposit and withdrawal, to modify the account balance.\n\n### Input:\nNot applicable.\n\n### Output:\nclass BankAccount:\n    \n    def __init__(self, name, balance=0.0):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    \n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance","tok_input_length":143,"tok_output_length":85,"system_prompt":"","index":16840}
{"question":"Construct a python program which takes in input the size of a jagged array and prints it(no values).","input":"<noInpit>","expected_output":"def print_jagged_array(array_size):    \n    # Initialize a jagged array with the given size\n    array = [None] * array_size\n    \n    # Populate the array with empty arrays\n    for i in range(array_size):\n        array[i] = []\n    \n    # Print the output array\n    print(array)\n\nif __name__ == \"__main__\":\n    array_size = 4\n    print_jagged_array(array_size)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program which takes in input the size of a jagged array and prints it(no values).\n\n### Input:\n<noInpit>\n\n### Output:\ndef print_jagged_array(array_size):    \n    # Initialize a jagged array with the given size\n    array = [None] * array_size\n    \n    # Populate the array with empty arrays\n    for i in range(array_size):\n        array[i] = []\n    \n    # Print the output array\n    print(array)\n\nif __name__ == \"__main__\":\n    array_size = 4\n    print_jagged_array(array_size)","tok_input_length":143,"tok_output_length":90,"system_prompt":"","index":557}
{"question":"Develop an algorithm in Python to replace all the vowels in a string with an asterisk.","input":"string = \u201cHello World\u201d","expected_output":"string = \u201cHello World\u201d\n\ndef replaceVowels(string):\n    vowels = (\"a\", \"e\", \"i\", \"o\", \"u\")\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"*\"\n        else:\n            result += char\n    return result\n\nnew_string = replaceVowels(string)\nprint(new_string) # This will print out \"H*ll* W*rld\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to replace all the vowels in a string with an asterisk.\n\n### Input:\nstring = \u201cHello World\u201d\n\n### Output:\nstring = \u201cHello World\u201d\n\ndef replaceVowels(string):\n    vowels = (\"a\", \"e\", \"i\", \"o\", \"u\")\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"*\"\n        else:\n            result += char\n    return result\n\nnew_string = replaceVowels(string)\nprint(new_string) # This will print out \"H*ll* W*rld\"","tok_input_length":143,"tok_output_length":92,"system_prompt":"","index":1059}
{"question":"Write a Python program that can compare two lists of integers and identify any elements that appear in both lists.","input":"","expected_output":"def find_common_elements(list1, list2):\n    common_elements = []\n\n    for e1 in list1:\n        for e2 in list2:\n            if e1 == e2:\n               common_elements.append(e1)\n\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8]\n\nprint(find_common_elements(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that can compare two lists of integers and identify any elements that appear in both lists.\n\n### Input:\n\n\n### Output:\ndef find_common_elements(list1, list2):\n    common_elements = []\n\n    for e1 in list1:\n        for e2 in list2:\n            if e1 == e2:\n               common_elements.append(e1)\n\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8]\n\nprint(find_common_elements(list1, list2))","tok_input_length":143,"tok_output_length":95,"system_prompt":"","index":3485}
{"question":"Design a python program to convert a given number of days into years, months, and days.","input":"","expected_output":"# convert days\ndef convert_days(days):\n  years = days \/\/ 365\n  months = (days % 365) \/\/ 30\n  days = (days % 365) % 30 \n  return (years, months, days)\n\n# test\ndays = 900\nyears, months, days = convert_days(days)\nprint(\"Number of years =\", years) \nprint(\"Number of months =\", months) \nprint(\"Number of days =\", days)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to convert a given number of days into years, months, and days.\n\n### Input:\n\n\n### Output:\n# convert days\ndef convert_days(days):\n  years = days \/\/ 365\n  months = (days % 365) \/\/ 30\n  days = (days % 365) % 30 \n  return (years, months, days)\n\n# test\ndays = 900\nyears, months, days = convert_days(days)\nprint(\"Number of years =\", years) \nprint(\"Number of months =\", months) \nprint(\"Number of days =\", days)","tok_input_length":143,"tok_output_length":97,"system_prompt":"","index":16026}
{"question":"Create a web service in Python which allows a user to register their email address.","input":"","expected_output":"from flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route(\"\/\")\ndef home():\n    return \"<form action='\/save' method='POST'><input type='text' name='email'\/><input type='submit\u2019\/><\/form>\"\n\n@app.route(\"\/save\", methods=[\"POST\"])\ndef save():\n    email = request.form[\"email\"]\n    # save the email address to your database\n    return redirect(\"\/\")\n\nif __name__ == \"__main__\":\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web service in Python which allows a user to register their email address.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route(\"\/\")\ndef home():\n    return \"<form action='\/save' method='POST'><input type='text' name='email'\/><input type='submit\u2019\/><\/form>\"\n\n@app.route(\"\/save\", methods=[\"POST\"])\ndef save():\n    email = request.form[\"email\"]\n    # save the email address to your database\n    return redirect(\"\/\")\n\nif __name__ == \"__main__\":\n    app.run()","tok_input_length":143,"tok_output_length":100,"system_prompt":"","index":5734}
{"question":"Create a data structure in JavaScript to represent a directory structure.","input":"","expected_output":"const directoryStructure = {\n  \"root\": {\n    \"Projects\": {\n      \"Python\": {\n        \"Scripts\": {\n          \"script1.py\": null,\n          \"script2.py\": null\n        }\n      },\n      \"JavaScript\": {\n        \"Scripts\": {\n          \"script1.js\": null,\n          \"script2.js\": null\n        }\n      }\n    },\n    \"Documents\": {\n      \"paper1.pdf\": null,\n      \"paper2.pdf\": null\n    }\n  }\n};","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data structure in JavaScript to represent a directory structure.\n\n### Input:\n\n\n### Output:\nconst directoryStructure = {\n  \"root\": {\n    \"Projects\": {\n      \"Python\": {\n        \"Scripts\": {\n          \"script1.py\": null,\n          \"script2.py\": null\n        }\n      },\n      \"JavaScript\": {\n        \"Scripts\": {\n          \"script1.js\": null,\n          \"script2.js\": null\n        }\n      }\n    },\n    \"Documents\": {\n      \"paper1.pdf\": null,\n      \"paper2.pdf\": null\n    }\n  }\n};","tok_input_length":143,"tok_output_length":104,"system_prompt":"","index":6061}
{"question":"Generate a Python program to fill missing values in the given table.","input":"Table: student_data\n\n| id  | name  | age |\n|-----|-------|-----|\n| 1   | John  |    |\n| 2   | Jane  |    |\n| 3   | Jack  | 28 |","expected_output":"import pandas as pd\n\n# Read the student data\ndata = pd.read_csv('student_data.csv')\n\n# Fill the missing values\ndata['age'] = data['age'].fillna(data['age'].mean())\n\n# Print the result\nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to fill missing values in the given table.\n\n### Input:\nTable: student_data\n\n| id  | name  | age |\n|-----|-------|-----|\n| 1   | John  |    |\n| 2   | Jane  |    |\n| 3   | Jack  | 28 |\n\n### Output:\nimport pandas as pd\n\n# Read the student data\ndata = pd.read_csv('student_data.csv')\n\n# Fill the missing values\ndata['age'] = data['age'].fillna(data['age'].mean())\n\n# Print the result\nprint(data)","tok_input_length":144,"tok_output_length":52,"system_prompt":"","index":14118}
{"question":"Write a Python program to find an index in a list of numbers, where sum of numbers before it is equal to the sum of numbers after it","input":"[1, 4, 9, 5, 3, 2]","expected_output":"def index_sum_equal(nums): \n    total = sum(nums) \n    left_sum = 0 \n    for i in range(len(nums)): \n        right_sum = total - left_sum - nums[i] \n        if left_sum == right_sum: \n            return i \n        left_sum += nums[i] \n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find an index in a list of numbers, where sum of numbers before it is equal to the sum of numbers after it\n\n### Input:\n[1, 4, 9, 5, 3, 2]\n\n### Output:\ndef index_sum_equal(nums): \n    total = sum(nums) \n    left_sum = 0 \n    for i in range(len(nums)): \n        right_sum = total - left_sum - nums[i] \n        if left_sum == right_sum: \n            return i \n        left_sum += nums[i] \n    return -1","tok_input_length":144,"tok_output_length":69,"system_prompt":"","index":1117}
{"question":"Write a Python program that takes a list of strings as an input and returns a dictionary containing the count of each string in the list.","input":"['a', 'b', 'c', 'a', 'b']","expected_output":"def count_strings(lst):\n    result = {}\n    for item in lst:\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result\n\nlist_of_strings = ['a', 'b', 'c', 'a', 'b']\nresult = count_strings(list_of_strings)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list of strings as an input and returns a dictionary containing the count of each string in the list.\n\n### Input:\n['a', 'b', 'c', 'a', 'b']\n\n### Output:\ndef count_strings(lst):\n    result = {}\n    for item in lst:\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result\n\nlist_of_strings = ['a', 'b', 'c', 'a', 'b']\nresult = count_strings(list_of_strings)\nprint(result)","tok_input_length":144,"tok_output_length":75,"system_prompt":"","index":7655}
{"question":"Create a python function that is able to parse a input string and extract all words that have at least 4 characters.","input":"input_string = 'This is a sample string'","expected_output":"def extract_words_with_length_greater_equal_than(input_string, length):\n    words = input_string.split(' ')\n    \n    result = []\n    for word in words:\n        if len(word) >= length:\n            result.append(word)\n    \n    return result\n\nresult = extract_words_with_length_greater_equal_than(input_string, 4)       \nprint(result) # This should print ['This', 'sample', 'string']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that is able to parse a input string and extract all words that have at least 4 characters.\n\n### Input:\ninput_string = 'This is a sample string'\n\n### Output:\ndef extract_words_with_length_greater_equal_than(input_string, length):\n    words = input_string.split(' ')\n    \n    result = []\n    for word in words:\n        if len(word) >= length:\n            result.append(word)\n    \n    return result\n\nresult = extract_words_with_length_greater_equal_than(input_string, 4)       \nprint(result) # This should print ['This', 'sample', 'string']","tok_input_length":144,"tok_output_length":83,"system_prompt":"","index":1334}
{"question":"Create a Python program that can convert a list of strings into their corresponding encoded values.","input":"list of strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]","expected_output":"def encode_list_of_strings(list_of_strings):\n  encoded = []\n  for string in list_of_strings:\n    encoded.append(string.encode(\"utf-8\"))\n  return encoded\n\nlist_of_strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]\nencoded = encode_list_of_strings(list_of_strings)\n\n# Output: [b'hello', b'world', b'how', b'are', b'you']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that can convert a list of strings into their corresponding encoded values.\n\n### Input:\nlist of strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]\n\n### Output:\ndef encode_list_of_strings(list_of_strings):\n  encoded = []\n  for string in list_of_strings:\n    encoded.append(string.encode(\"utf-8\"))\n  return encoded\n\nlist_of_strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]\nencoded = encode_list_of_strings(list_of_strings)\n\n# Output: [b'hello', b'world', b'how', b'are', b'you']","tok_input_length":144,"tok_output_length":85,"system_prompt":"","index":12097}
{"question":"Generate an optimized Python code that computes the product of two numbers without using the multiplication operator.","input":"The numbers are 3 and 7","expected_output":"def product_without_mul(x, y): \n result = 0\n while (y > 0): \n    partial_result = 0\n    for i in range(y): \n        partial_result += x\n    result += partial_result\n    y -= 1\n   \nreturn result \n\nx = 3\ny = 7\n\nprint(\"Product of two numbers without using \nmultiplication operator is \", product_without_mul(x, y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an optimized Python code that computes the product of two numbers without using the multiplication operator.\n\n### Input:\nThe numbers are 3 and 7\n\n### Output:\ndef product_without_mul(x, y): \n result = 0\n while (y > 0): \n    partial_result = 0\n    for i in range(y): \n        partial_result += x\n    result += partial_result\n    y -= 1\n   \nreturn result \n\nx = 3\ny = 7\n\nprint(\"Product of two numbers without using \nmultiplication operator is \", product_without_mul(x, y))","tok_input_length":144,"tok_output_length":90,"system_prompt":"","index":5430}
{"question":"Write a function in Python that takes in a size n and returns the n-th prime number.","input":"n = 5","expected_output":"def nth_prime_number(n):\n    prime_numbers = [2]\n    i = 3\n    while len(prime_numbers) < n:\n        for number in prime_numbers:\n            if i % number == 0:\n                break\n        else:\n            prime_numbers.append(i)\n        i+= 2\n    return prime_numbers[-1]\n\n\n# test \nprime_number = nth_prime_number(5)\nprint(prime_number) # Output: 11","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in a size n and returns the n-th prime number.\n\n### Input:\nn = 5\n\n### Output:\ndef nth_prime_number(n):\n    prime_numbers = [2]\n    i = 3\n    while len(prime_numbers) < n:\n        for number in prime_numbers:\n            if i % number == 0:\n                break\n        else:\n            prime_numbers.append(i)\n        i+= 2\n    return prime_numbers[-1]\n\n\n# test \nprime_number = nth_prime_number(5)\nprint(prime_number) # Output: 11","tok_input_length":144,"tok_output_length":93,"system_prompt":"","index":17889}
{"question":"Provide an example of how to use a decorator to debug a function in Python","input":"Noinput","expected_output":"import time\n\ndef time_it(func): \n    def wrapper(*args, **kwargs): \n        start = time.time() \n        result = func(*args, **kwargs) \n        end = time.time() \n        print(\"Execution time: {}\".format(end - start)) \n        return result \n  \n    return wrapper \n\n@time_it\ndef my_function(arg1, arg2):\n        # Some logic code..\n        return 10\n\nmy_function(10, 20)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide an example of how to use a decorator to debug a function in Python\n\n### Input:\nNoinput\n\n### Output:\nimport time\n\ndef time_it(func): \n    def wrapper(*args, **kwargs): \n        start = time.time() \n        result = func(*args, **kwargs) \n        end = time.time() \n        print(\"Execution time: {}\".format(end - start)) \n        return result \n  \n    return wrapper \n\n@time_it\ndef my_function(arg1, arg2):\n        # Some logic code..\n        return 10\n\nmy_function(10, 20)","tok_input_length":144,"tok_output_length":98,"system_prompt":"","index":4922}
{"question":"Generate a Python function for calculating the probability of two events occurring simultaneously.","input":"","expected_output":"def probability_of_two_events(probability_of_first_event, probability_of_second_event):\n    \"\"\"\n    Calculates the probability of two independent events occurring simultaneously.\n    \n    Args:\n        probability_of_first_event (float): The probability of the first event occuring.\n        probability_of_second_event (float): The probability of the second event occuring.\n    \n    Returns: \n        float: The probability of both events occurring simultaneously.\n    \"\"\"\n       \n    probability = probability_of_first_event * probability_of_second_event\n    \n    return probability","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function for calculating the probability of two events occurring simultaneously.\n\n### Input:\n\n\n### Output:\ndef probability_of_two_events(probability_of_first_event, probability_of_second_event):\n    \"\"\"\n    Calculates the probability of two independent events occurring simultaneously.\n    \n    Args:\n        probability_of_first_event (float): The probability of the first event occuring.\n        probability_of_second_event (float): The probability of the second event occuring.\n    \n    Returns: \n        float: The probability of both events occurring simultaneously.\n    \"\"\"\n       \n    probability = probability_of_first_event * probability_of_second_event\n    \n    return probability","tok_input_length":144,"tok_output_length":103,"system_prompt":"","index":2503}
{"question":"Write Python code to retrieve a specific element from a 2D array.","input":"my_2d_array = [[1,2,3],[4,5,6],[7,8,9]]\nrow_to_retrieve = 2\ncolumn_to_retrieve = 0","expected_output":"my_2d_array = [[1,2,3],[4,5,6],[7,8,9]]\nrow_to_retrieve = 2\ncolumn_to_retrieve = 0\n\nretrieved_element = my_2d_array[row_to_retrieve][column_to_retrieve]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to retrieve a specific element from a 2D array.\n\n### Input:\nmy_2d_array = [[1,2,3],[4,5,6],[7,8,9]]\nrow_to_retrieve = 2\ncolumn_to_retrieve = 0\n\n### Output:\nmy_2d_array = [[1,2,3],[4,5,6],[7,8,9]]\nrow_to_retrieve = 2\ncolumn_to_retrieve = 0\n\nretrieved_element = my_2d_array[row_to_retrieve][column_to_retrieve]","tok_input_length":145,"tok_output_length":62,"system_prompt":"","index":12104}
{"question":"Write an algorithm in Python that uses an iterative approach to count all elements greater than a given value in an array.","input":"array: [7, 8, 4, 2, 9], target: 5","expected_output":"def countGreaterThan(arr, target):\n    count = 0\n    for element in arr:\n        if element > target:\n            count += 1\n    return count\n\n# Example\narr = [7, 8, 4, 2, 9]\ntarget = 5\nprint(countGreaterThan(arr, target))\n# Output: 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that uses an iterative approach to count all elements greater than a given value in an array.\n\n### Input:\narray: [7, 8, 4, 2, 9], target: 5\n\n### Output:\ndef countGreaterThan(arr, target):\n    count = 0\n    for element in arr:\n        if element > target:\n            count += 1\n    return count\n\n# Example\narr = [7, 8, 4, 2, 9]\ntarget = 5\nprint(countGreaterThan(arr, target))\n# Output: 3","tok_input_length":145,"tok_output_length":73,"system_prompt":"","index":5395}
{"question":"Create a web scraper in Python using BeautifulSoup. The web scraper should take a website URL as input and parse the data from the HTML page to extract text.","input":"Website URL: https:\/\/www.example.com","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.find_all(text=True)\n\nfor t in text:\n if (t.parent.name not in ['style', 'script', 'head', 'title', 'meta', '[document]']):\n  print(t)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python using BeautifulSoup. The web scraper should take a website URL as input and parse the data from the HTML page to extract text.\n\n### Input:\nWebsite URL: https:\/\/www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.find_all(text=True)\n\nfor t in text:\n if (t.parent.name not in ['style', 'script', 'head', 'title', 'meta', '[document]']):\n  print(t)","tok_input_length":145,"tok_output_length":78,"system_prompt":"","index":7386}
{"question":"Design a Python function for determining if a) two strings are anagrams of each other, or b) if two strings are permutations of each other?","input":"\"algorithm\", \"logarithm\"","expected_output":"def anagram_permutation(string1, string2):\n    if sorted(string1) == sorted(string2):\n        print(\"The strings are anagrams.\")\n    elif sorted(string1) == sorted(string2[::-1]):\n        print(\"The strings are permutations.\")\n    else:\n        print(\"The strings are neither anagrams nor permutations.\")\n\nanagram_permutation(\"algorithm\", \"logarithm\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function for determining if a) two strings are anagrams of each other, or b) if two strings are permutations of each other?\n\n### Input:\n\"algorithm\", \"logarithm\"\n\n### Output:\ndef anagram_permutation(string1, string2):\n    if sorted(string1) == sorted(string2):\n        print(\"The strings are anagrams.\")\n    elif sorted(string1) == sorted(string2[::-1]):\n        print(\"The strings are permutations.\")\n    else:\n        print(\"The strings are neither anagrams nor permutations.\")\n\nanagram_permutation(\"algorithm\", \"logarithm\")","tok_input_length":145,"tok_output_length":80,"system_prompt":"","index":15532}
{"question":"Create a web scraper using Python\u2019s Beautiful Soup that scrapes the title of the latest blog post from a given website.","input":"Example website URL: https:\/\/example.com\/blog","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\n# get the html of the website\nresponse = requests.get(https:\/\/example.com\/blog')\nhtml = response.text\n\n# parse it using beautiful soup\nsoup = BeautifulSoup(html, 'html.parser')\n\n# find the latest blog post title\nlatest_post_title = soup.find('div', {'class': 'latest-post'}).h3.text\n\nprint(latest_post_title)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python\u2019s Beautiful Soup that scrapes the title of the latest blog post from a given website.\n\n### Input:\nExample website URL: https:\/\/example.com\/blog\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# get the html of the website\nresponse = requests.get(https:\/\/example.com\/blog')\nhtml = response.text\n\n# parse it using beautiful soup\nsoup = BeautifulSoup(html, 'html.parser')\n\n# find the latest blog post title\nlatest_post_title = soup.find('div', {'class': 'latest-post'}).h3.text\n\nprint(latest_post_title)","tok_input_length":145,"tok_output_length":84,"system_prompt":"","index":7046}
{"question":"Evaluate the following line of code written in Python and explain what it does.","input":"not any(map(lambda k,v: k in d or v in d, x))","expected_output":"This line of code is written in Python and is using the built-in \"any\" and \"map\" functions. The code is checking if none of the key-value pairs in the map \"x\" are in the dictionary \"d\". It does so using a lambda function to check if either the key or the value is present in the dictionary. If none are present, it will return True, otherwise it will return False.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEvaluate the following line of code written in Python and explain what it does.\n\n### Input:\nnot any(map(lambda k,v: k in d or v in d, x))\n\n### Output:\nThis line of code is written in Python and is using the built-in \"any\" and \"map\" functions. The code is checking if none of the key-value pairs in the map \"x\" are in the dictionary \"d\". It does so using a lambda function to check if either the key or the value is present in the dictionary. If none are present, it will return True, otherwise it will return False.","tok_input_length":145,"tok_output_length":86,"system_prompt":"","index":13696}
{"question":"Design an object-oriented Python class for a Car object which contains private fields for Milage, TopSpeed, and Manufacturer.","input":"Not applicable","expected_output":"class Car:\n def __init__(self, milage, top_speed, manufacturer):\n  self.__milage = milage\n  self.__top_speed = top_speed\n  self.__manufacturer = manufacturer\n  \n  @property\n  def milage(self):\n   return self.__milage\n  \n  @property\n  def top_speed(self):\n   return self.__top_speed\n  \n  @property\n  def manufacturer(self):\n   return self.__manufacturer","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an object-oriented Python class for a Car object which contains private fields for Milage, TopSpeed, and Manufacturer.\n\n### Input:\nNot applicable\n\n### Output:\nclass Car:\n def __init__(self, milage, top_speed, manufacturer):\n  self.__milage = milage\n  self.__top_speed = top_speed\n  self.__manufacturer = manufacturer\n  \n  @property\n  def milage(self):\n   return self.__milage\n  \n  @property\n  def top_speed(self):\n   return self.__top_speed\n  \n  @property\n  def manufacturer(self):\n   return self.__manufacturer","tok_input_length":145,"tok_output_length":91,"system_prompt":"","index":13525}
{"question":"Create a python module to edit a dataframe","input":"The DataFrame is composed of two columns, 'id' and 'value'.","expected_output":"import pandas as pd\n\ndef edit_dataframe(df):\n\n    # Adding the column 'new_value'\n    df['new_value'] = df['value'] + 1\n\n    # Replacing values in the 'id' column\n    df['new_id'] = df['id'].map(lambda x: 'id_' + str(x))\n\n    # Updating the value in the 'value' column\n    df.value = df.value * 2\n\n    return df","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python module to edit a dataframe\n\n### Input:\nThe DataFrame is composed of two columns, 'id' and 'value'.\n\n### Output:\nimport pandas as pd\n\ndef edit_dataframe(df):\n\n    # Adding the column 'new_value'\n    df['new_value'] = df['value'] + 1\n\n    # Replacing values in the 'id' column\n    df['new_id'] = df['id'].map(lambda x: 'id_' + str(x))\n\n    # Updating the value in the 'value' column\n    df.value = df.value * 2\n\n    return df","tok_input_length":145,"tok_output_length":94,"system_prompt":"","index":5675}
{"question":"Develop a Python program for randomly generating a 3-D object of n cubes","input":"n = 8","expected_output":"from random import random\n\ndef generate_cubed_object(n):\n    objects = []\n    for i in range(n):\n        x = random()\n        y = random()\n        z = random()\n        objects.append([x, y, z])\n    return objects\n\nprint(generate_cubed_object(8)) # [[0.4, 0.2, 0.3], [0.5, 0.6, 0.7], ....]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program for randomly generating a 3-D object of n cubes\n\n### Input:\nn = 8\n\n### Output:\nfrom random import random\n\ndef generate_cubed_object(n):\n    objects = []\n    for i in range(n):\n        x = random()\n        y = random()\n        z = random()\n        objects.append([x, y, z])\n    return objects\n\nprint(generate_cubed_object(8)) # [[0.4, 0.2, 0.3], [0.5, 0.6, 0.7], ....]","tok_input_length":145,"tok_output_length":97,"system_prompt":"","index":16847}
{"question":"Create a program in Python to generate a list of prime numbers up to N","input":"","expected_output":"def prime_list(N):\n    isPrime = [True for i in range(N + 1)]\n    p = 2\n    while p * p <= N:\n        if isPrime[p]:\n            for i in range(p * p, N + 1, p):\n                isPrime[i] = False\n        p += 1\n    prime_nums = []\n    for p in range(2, N):\n        if isPrime[p]:\n            prime_nums.append(p)\n    return prime_nums","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to generate a list of prime numbers up to N\n\n### Input:\n\n\n### Output:\ndef prime_list(N):\n    isPrime = [True for i in range(N + 1)]\n    p = 2\n    while p * p <= N:\n        if isPrime[p]:\n            for i in range(p * p, N + 1, p):\n                isPrime[i] = False\n        p += 1\n    prime_nums = []\n    for p in range(2, N):\n        if isPrime[p]:\n            prime_nums.append(p)\n    return prime_nums","tok_input_length":145,"tok_output_length":102,"system_prompt":"","index":7098}
{"question":"Generate a sequence of instructions to debug a Python Program.","input":"","expected_output":"1. Check your syntax \u2212 Check if there is any syntax error in your program. \n2. Check for runtime errors \u2212 Check if the program can be compiled without errors.\n3. Check the logic \u2212 Check if your program follows the intended logic and produces desired output. \n4. Add logging and debugging statements \u2212 Use print statements or logging functions for trace debugging and test the program execution.\n5. Use a debugger \u2212 A debugger allows you to step through the execution of a program and inspect the values of variables at each step.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a sequence of instructions to debug a Python Program.\n\n### Input:\n\n\n### Output:\n1. Check your syntax \u2212 Check if there is any syntax error in your program. \n2. Check for runtime errors \u2212 Check if the program can be compiled without errors.\n3. Check the logic \u2212 Check if your program follows the intended logic and produces desired output. \n4. Add logging and debugging statements \u2212 Use print statements or logging functions for trace debugging and test the program execution.\n5. Use a debugger \u2212 A debugger allows you to step through the execution of a program and inspect the values of variables at each step.","tok_input_length":145,"tok_output_length":107,"system_prompt":"","index":7399}
{"question":"Create an algorithm in Python that finds a 'magic number' in an array. A magic number is an integer in the array that is strictly greater than the number of elements before it in the array.","input":"[1, 2, 5, 7, 9, 10]","expected_output":"def find_magic_number(a):\n m = -1\n for i in range(len(a)):\n if a[i] > i:\n m = a[i]\n break\n\nreturn m\n\nprint(find_magic_number([1, 2, 5, 7, 9, 10]))\n# 7","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that finds a 'magic number' in an array. A magic number is an integer in the array that is strictly greater than the number of elements before it in the array.\n\n### Input:\n[1, 2, 5, 7, 9, 10]\n\n### Output:\ndef find_magic_number(a):\n m = -1\n for i in range(len(a)):\n if a[i] > i:\n m = a[i]\n break\n\nreturn m\n\nprint(find_magic_number([1, 2, 5, 7, 9, 10]))\n# 7","tok_input_length":146,"tok_output_length":61,"system_prompt":"","index":5257}
{"question":"Create a program in Python that takes a list of strings as input, sorts the strings in alphabetical order, and prints out the list in reverse alphabetical order.","input":"Sample List: [\"cat\",\"bird\",\"dog\",\"zebra\",\"ant\"]","expected_output":"# create a list\nsample_list = [\"cat\", \"bird\", \"dog\", \"zebra\", \"ant\"]\n \n# sort the list\nsample_list.sort()\n \n# reverse the list\nsample_list.reverse()\n \n# print the reversed list\nprint(sample_list)\n# ['zebra', 'dog', 'cat', 'bird', 'ant']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list of strings as input, sorts the strings in alphabetical order, and prints out the list in reverse alphabetical order.\n\n### Input:\nSample List: [\"cat\",\"bird\",\"dog\",\"zebra\",\"ant\"]\n\n### Output:\n# create a list\nsample_list = [\"cat\", \"bird\", \"dog\", \"zebra\", \"ant\"]\n \n# sort the list\nsample_list.sort()\n \n# reverse the list\nsample_list.reverse()\n \n# print the reversed list\nprint(sample_list)\n# ['zebra', 'dog', 'cat', 'bird', 'ant']","tok_input_length":146,"tok_output_length":73,"system_prompt":"","index":5519}
{"question":"Write a Python script to classify a given article into one of the following categories: 'Politics', 'Technology', 'Social'.","input":"\"The company announced a range of new innovative technologies to help combat climate change.\"","expected_output":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\narticle = \"The company announced a range of new innovative technologies to help combat climate change.\"\n\ntext = [article]\ncv = CountVectorizer()\nX = cv.fit_transform(text)\n\nclf = MultinomialNB()\nclf.fit(X, ['Technology'])\nprint(clf.predict(X))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to classify a given article into one of the following categories: 'Politics', 'Technology', 'Social'.\n\n### Input:\n\"The company announced a range of new innovative technologies to help combat climate change.\"\n\n### Output:\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\narticle = \"The company announced a range of new innovative technologies to help combat climate change.\"\n\ntext = [article]\ncv = CountVectorizer()\nX = cv.fit_transform(text)\n\nclf = MultinomialNB()\nclf.fit(X, ['Technology'])\nprint(clf.predict(X))","tok_input_length":146,"tok_output_length":79,"system_prompt":"","index":7283}
{"question":"Create a program in Python that takes 5 numbers input from the user and prints out their median.","input":"3, 4, 7, 6, 8","expected_output":"nums = []\nans = 0\n\nfor _ in range(5):\n nums.append(int(input()))\n \nnums.sort()\n\nif len(nums) % 2 == 0:\n ans = (nums[len(nums)\/\/2] + nums[len(nums)\/\/2-1]) \/ 2\nelse:\n ans = nums[len(nums) \/\/ 2]\n \nprint(\"Median of the given numbers is: \" + str(ans))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes 5 numbers input from the user and prints out their median.\n\n### Input:\n3, 4, 7, 6, 8\n\n### Output:\nnums = []\nans = 0\n\nfor _ in range(5):\n nums.append(int(input()))\n \nnums.sort()\n\nif len(nums) % 2 == 0:\n ans = (nums[len(nums)\/\/2] + nums[len(nums)\/\/2-1]) \/ 2\nelse:\n ans = nums[len(nums) \/\/ 2]\n \nprint(\"Median of the given numbers is: \" + str(ans))","tok_input_length":146,"tok_output_length":85,"system_prompt":"","index":11161}
{"question":"Compose a Python program to solve an equation using the Bisection method.","input":"Equation: f(x) = x^2 - 3","expected_output":"def f(x): \n    return x**2 - 3\n\ndef bisection(f,a,b,tol):\n  c = (a+b)\/2\n  if f(c)==0 or (b-a)\/2 < tol:\n    return c\n  elif f(c)*f(a) > 0:\n    return bisection(f,c,b,tol)\n  else:\n    return bisection(f,a,c,tol)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to solve an equation using the Bisection method.\n\n### Input:\nEquation: f(x) = x^2 - 3\n\n### Output:\ndef f(x): \n    return x**2 - 3\n\ndef bisection(f,a,b,tol):\n  c = (a+b)\/2\n  if f(c)==0 or (b-a)\/2 < tol:\n    return c\n  elif f(c)*f(a) > 0:\n    return bisection(f,c,b,tol)\n  else:\n    return bisection(f,a,c,tol)","tok_input_length":146,"tok_output_length":90,"system_prompt":"","index":12121}
{"question":"Generate an automated unit test in Python for the following function","input":"def add(a, b):\n    return a + b","expected_output":"import unittest\n\nclass TestAddition(unittest.TestCase):\n\n    def test_addition(self):\n        self.assertEqual(add(1, 1), 2)\n        self.assertEqual(add(2, 5), 7)\n        self.assertEqual(add(3, 3), 6)\n        self.assertEqual(add(-8, 6), -2)\n        self.assertEqual(add(-3, -3), -6)\n\nif __name__ == '__main__':\n    unittest.main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an automated unit test in Python for the following function\n\n### Input:\ndef add(a, b):\n    return a + b\n\n### Output:\nimport unittest\n\nclass TestAddition(unittest.TestCase):\n\n    def test_addition(self):\n        self.assertEqual(add(1, 1), 2)\n        self.assertEqual(add(2, 5), 7)\n        self.assertEqual(add(3, 3), 6)\n        self.assertEqual(add(-8, 6), -2)\n        self.assertEqual(add(-3, -3), -6)\n\nif __name__ == '__main__':\n    unittest.main()","tok_input_length":146,"tok_output_length":95,"system_prompt":"","index":12755}
{"question":"Develop a python program that checks if a given word is consonant or not.","input":"word: \"hello\"","expected_output":"def is_consonant(word): \n    # List containing all consonants \n    consonants = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"x\",\"z\"] \n    for char in word: \n        if char in consonants: \n            return True\n    return False\n\n# Example\nprint (is_consonant(\"hello\")) # False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program that checks if a given word is consonant or not.\n\n### Input:\nword: \"hello\"\n\n### Output:\ndef is_consonant(word): \n    # List containing all consonants \n    consonants = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"x\",\"z\"] \n    for char in word: \n        if char in consonants: \n            return True\n    return False\n\n# Example\nprint (is_consonant(\"hello\")) # False","tok_input_length":146,"tok_output_length":98,"system_prompt":"","index":6372}
{"question":"Classify an input sentence with a given set of labels in Python.","input":"The car is blue","expected_output":"def classify_sentence(sentence):\n    labels = [\u2018color\u2019, \u2018object\u2019]\n    features = sentence.split(' ')\n    feature_dict = {}\n    for f in features:\n        if f == 'blue':\n            feature_dict['color'] = 'blue'\n        elif f == 'car':\n            feature_dict['object'] = 'car'\n    return feature_dict\n\nsentence = 'The car is blue'\nlabels = [\u2018color\u2019, \u2018object\u2019]\nprint(classify_sentence(sentence, labels))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify an input sentence with a given set of labels in Python.\n\n### Input:\nThe car is blue\n\n### Output:\ndef classify_sentence(sentence):\n    labels = [\u2018color\u2019, \u2018object\u2019]\n    features = sentence.split(' ')\n    feature_dict = {}\n    for f in features:\n        if f == 'blue':\n            feature_dict['color'] = 'blue'\n        elif f == 'car':\n            feature_dict['object'] = 'car'\n    return feature_dict\n\nsentence = 'The car is blue'\nlabels = [\u2018color\u2019, \u2018object\u2019]\nprint(classify_sentence(sentence, labels))","tok_input_length":146,"tok_output_length":100,"system_prompt":"","index":16219}
{"question":"Generate all the permutations of a string using Python.","input":"str = \"abc\"","expected_output":"def permutations(str):\n\tif len(str) <= 1:\n\t\treturn [str]\n\n\tperms = [] \n\tfor i in range(len(str)):\n\t\trest_strings = str[:i] + str[i+1:]\n\t\tfor perm in permutations(rest_strings):\n\t\t\tperms.append(str[i:i+1] + perm)\n\t\n\treturn perms\n\nstr = \"abc\"\nperms = permutations(str)\nprint(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate all the permutations of a string using Python.\n\n### Input:\nstr = \"abc\"\n\n### Output:\ndef permutations(str):\n\tif len(str) <= 1:\n\t\treturn [str]\n\n\tperms = [] \n\tfor i in range(len(str)):\n\t\trest_strings = str[:i] + str[i+1:]\n\t\tfor perm in permutations(rest_strings):\n\t\t\tperms.append(str[i:i+1] + perm)\n\t\n\treturn perms\n\nstr = \"abc\"\nperms = permutations(str)\nprint(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']","tok_input_length":146,"tok_output_length":104,"system_prompt":"","index":7341}
{"question":"Generate a Python program to print the numbers 1 to 100, but only print \"fizz\" for multiples of 3, \"buzz\" for multiples of 5, and \"fizzbuzz\" for multiples of both 3 and 5.","input":"Not applicable","expected_output":"for i in range(1,101):\n if i % 3 == 0 and i % 5 == 0:\n print(\"fizzbuzz\")\n elif i % 3 == 0:\n print(\"fizz\")\n elif i % 5 == 0:\n print(\"buzz\")\n else:\n print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print the numbers 1 to 100, but only print \"fizz\" for multiples of 3, \"buzz\" for multiples of 5, and \"fizzbuzz\" for multiples of both 3 and 5.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(1,101):\n if i % 3 == 0 and i % 5 == 0:\n print(\"fizzbuzz\")\n elif i % 3 == 0:\n print(\"fizz\")\n elif i % 5 == 0:\n print(\"buzz\")\n else:\n print(i)","tok_input_length":147,"tok_output_length":65,"system_prompt":"","index":11212}
{"question":"Create a function in Python to calculate the distance between two points.","input":"point1 (x1, y1): (2, 7)\npoint2 (x2, y2): (4, 9)","expected_output":"import math\n\ndef distance_between_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    \n# Call the function\ndistance = distance_between_points(2, 7, 4, 9)\nprint(\"The distance between the two points is\", distance)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the distance between two points.\n\n### Input:\npoint1 (x1, y1): (2, 7)\npoint2 (x2, y2): (4, 9)\n\n### Output:\nimport math\n\ndef distance_between_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    \n# Call the function\ndistance = distance_between_points(2, 7, 4, 9)\nprint(\"The distance between the two points is\", distance)","tok_input_length":147,"tok_output_length":77,"system_prompt":"","index":608}
{"question":"Write a Python program for searching for a particular item in a list.","input":"[1, 5, 4, 6, 9, 10], item = 6","expected_output":"def search(input_list, item):\n  for i in range(len(input_list)):\n    if item == input_list[i]:\n      return i\n  \n  return -1\n\nif __name__ == '__main__':\n  input_list = [1, 5, 4, 6, 9, 10]\n  item = 6\n  result = search(input_list, item)\n  print(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for searching for a particular item in a list.\n\n### Input:\n[1, 5, 4, 6, 9, 10], item = 6\n\n### Output:\ndef search(input_list, item):\n  for i in range(len(input_list)):\n    if item == input_list[i]:\n      return i\n  \n  return -1\n\nif __name__ == '__main__':\n  input_list = [1, 5, 4, 6, 9, 10]\n  item = 6\n  result = search(input_list, item)\n  print(result)","tok_input_length":147,"tok_output_length":83,"system_prompt":"","index":3834}
{"question":"Create a Python program to find the most frequent item in a list.","input":"[1, 3, 1, 3, 2, 1]","expected_output":"def most_frequent(list): \n    counter = 0\n    num = list[0] \n    \n    for i in list: \n        curr_frequency = list.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num \n  \nlist = [1, 3, 1, 3, 2, 1]\nprint(most_frequent(list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the most frequent item in a list.\n\n### Input:\n[1, 3, 1, 3, 2, 1]\n\n### Output:\ndef most_frequent(list): \n    counter = 0\n    num = list[0] \n    \n    for i in list: \n        curr_frequency = list.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num \n  \nlist = [1, 3, 1, 3, 2, 1]\nprint(most_frequent(list))","tok_input_length":147,"tok_output_length":88,"system_prompt":"","index":6149}
{"question":"Write a Python program to solve a system of linear equations.","input":"2x+3y=8\n5x-1y=-10","expected_output":"def solve_linear_system(A, b):\n    \n    # Find the solution of the linear system\n    x = np.linalg.solve(A, b)\n    \n    # Print the solution\n    print('Solution: x = ' + str(x[0]) + ', y = ' + str(x[1]))\n    \n\nA = [[2, 3], [5, -1]]\nb = [8, -10]\nsolve_linear_system(A, b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to solve a system of linear equations.\n\n### Input:\n2x+3y=8\n5x-1y=-10\n\n### Output:\ndef solve_linear_system(A, b):\n    \n    # Find the solution of the linear system\n    x = np.linalg.solve(A, b)\n    \n    # Print the solution\n    print('Solution: x = ' + str(x[0]) + ', y = ' + str(x[1]))\n    \n\nA = [[2, 3], [5, -1]]\nb = [8, -10]\nsolve_linear_system(A, b)","tok_input_length":147,"tok_output_length":92,"system_prompt":"","index":1014}
{"question":"Create a web scraper in Python that extracts data from a given website.","input":"Website URL: \"https:\/\/www.example.com\"","expected_output":"# Importing necessary modules\nimport requests\nfrom bs4 import BeautifulSoup\n\n# The URL to get data from\nurl = \"https:\/\/www.example.com\"\n\n# Making a request to the website and getting the response\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extracting the required data\ndata = soup.find_all('p')\n\n# Looping through the data and printing it out\nfor item in data:\n print(item.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that extracts data from a given website.\n\n### Input:\nWebsite URL: \"https:\/\/www.example.com\"\n\n### Output:\n# Importing necessary modules\nimport requests\nfrom bs4 import BeautifulSoup\n\n# The URL to get data from\nurl = \"https:\/\/www.example.com\"\n\n# Making a request to the website and getting the response\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extracting the required data\ndata = soup.find_all('p')\n\n# Looping through the data and printing it out\nfor item in data:\n print(item.text)","tok_input_length":147,"tok_output_length":96,"system_prompt":"","index":12271}
{"question":"Design a loop in a Python program to print the Fibonacci series up to the nth term.","input":"n=10","expected_output":"def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \nprint(fibonacci(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a loop in a Python program to print the Fibonacci series up to the nth term.\n\n### Input:\nn=10\n\n### Output:\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \nprint(fibonacci(n))","tok_input_length":147,"tok_output_length":98,"system_prompt":"","index":1118}
{"question":"Develop Python code to check if a given number is plaindrome.","input":"1454","expected_output":"def is_plaindrome(num):\n    original_num = num\n    reversed_num = 0\n    while num > 0:\n        remainder = num % 10\n        reversed_num = (reversed_num * 10) + remainder\n        num \/\/= 10\n    return reversed_num == original_num\n\nnum = 1454\nif is_plaindrome(num):\n    print(num, \"is a plaindrome\")\nelse:\n    print(num, \"is not a plaindrome\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop Python code to check if a given number is plaindrome.\n\n### Input:\n1454\n\n### Output:\ndef is_plaindrome(num):\n    original_num = num\n    reversed_num = 0\n    while num > 0:\n        remainder = num % 10\n        reversed_num = (reversed_num * 10) + remainder\n        num \/\/= 10\n    return reversed_num == original_num\n\nnum = 1454\nif is_plaindrome(num):\n    print(num, \"is a plaindrome\")\nelse:\n    print(num, \"is not a plaindrome\")","tok_input_length":147,"tok_output_length":103,"system_prompt":"","index":10357}
{"question":"Generate a random Rubik's cube configuration in Python.","input":"Not applicable","expected_output":"import random\n\n# Create a 3x3x3 cube\ncube = [[[0] * 3 for _ in range(3)] for _ in range(3)]\n\n# Fill the cube with random colors\ncolors = [1, 2, 3, 4, 5, 6]\nfor plane in cube:\n for row in plane:\n for i in range(3):\n row[i] = random.choice(colors)\n\n# Print out the cube configuation\nfor plane in cube:\n print(plane)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random Rubik's cube configuration in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# Create a 3x3x3 cube\ncube = [[[0] * 3 for _ in range(3)] for _ in range(3)]\n\n# Fill the cube with random colors\ncolors = [1, 2, 3, 4, 5, 6]\nfor plane in cube:\n for row in plane:\n for i in range(3):\n row[i] = random.choice(colors)\n\n# Print out the cube configuation\nfor plane in cube:\n print(plane)","tok_input_length":147,"tok_output_length":106,"system_prompt":"","index":13465}
{"question":"Create a tree structure like below in Python","input":"","expected_output":"class Node():\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \n    def insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = Node(data)\n                else:\n                    self.left.insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = Node(data)\n                else:\n                    self.right.insert(data)\n        else:\n            self.data = data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a tree structure like below in Python\n\n### Input:\n\n\n### Output:\nclass Node():\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \n    def insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = Node(data)\n                else:\n                    self.left.insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = Node(data)\n                else:\n                    self.right.insert(data)\n        else:\n            self.data = data","tok_input_length":147,"tok_output_length":111,"system_prompt":"","index":14591}
{"question":"Rewrite this better Python program to calculate the square root of a given number.","input":"def squareRoot(number):\n  root = number\/2    \n  for k in range(20):\n    root = (1\/2)*(root + (number \/ root))\n  return root","expected_output":"def square_root(number): \n    \"\"\" \n    Calculate the square root of a number \n    \"\"\" \n    root = number # Initial guess \n    for i in range(20): # Iterative approach to refine guess \n        root = (1\/2) * (root + (number\/root)) \n    return root","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite this better Python program to calculate the square root of a given number.\n\n### Input:\ndef squareRoot(number):\n  root = number\/2    \n  for k in range(20):\n    root = (1\/2)*(root + (number \/ root))\n  return root\n\n### Output:\ndef square_root(number): \n    \"\"\" \n    Calculate the square root of a number \n    \"\"\" \n    root = number # Initial guess \n    for i in range(20): # Iterative approach to refine guess \n        root = (1\/2) * (root + (number\/root)) \n    return root","tok_input_length":148,"tok_output_length":66,"system_prompt":"","index":1953}
{"question":"Design an algorithm in Python to find the closest pair of numbers from two given lists.","input":"list_1 = [3, 5, 7, 11]\nlist_2 = [2, 4, 6, 8]","expected_output":"def closest_pair(list_1, list_2):\n    min_diff = float(\"inf\")\n    \n    for a in list_1:\n        for b in list_2:\n            diff = abs(a - b)\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (a, b)\n    \n    return closest_pair","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the closest pair of numbers from two given lists.\n\n### Input:\nlist_1 = [3, 5, 7, 11]\nlist_2 = [2, 4, 6, 8]\n\n### Output:\ndef closest_pair(list_1, list_2):\n    min_diff = float(\"inf\")\n    \n    for a in list_1:\n        for b in list_2:\n            diff = abs(a - b)\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (a, b)\n    \n    return closest_pair","tok_input_length":148,"tok_output_length":72,"system_prompt":"","index":12058}
{"question":"Generate a Python script that classifies the given set of tweets as 'positive' or 'negative'.","input":"[\"I'm having a great time!\", \"I hate this so much.\", \"This is really fun!\"]","expected_output":"def classify_tweets(tweets):\n classified_tweets = []\n \n for tweet in tweets:\n if \"great\" in tweet or \"fun\" in tweet:\n classified_tweets.append('positive')\n else:\n classified_tweets.append('negative')\n return classified_tweets\n \ntweets = [\"I'm having a great time!\", \"I hate this so much.\", \"This is really fun!\"]\nprint(classify_tweets(tweets))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that classifies the given set of tweets as 'positive' or 'negative'.\n\n### Input:\n[\"I'm having a great time!\", \"I hate this so much.\", \"This is really fun!\"]\n\n### Output:\ndef classify_tweets(tweets):\n classified_tweets = []\n \n for tweet in tweets:\n if \"great\" in tweet or \"fun\" in tweet:\n classified_tweets.append('positive')\n else:\n classified_tweets.append('negative')\n return classified_tweets\n \ntweets = [\"I'm having a great time!\", \"I hate this so much.\", \"This is really fun!\"]\nprint(classify_tweets(tweets))","tok_input_length":148,"tok_output_length":79,"system_prompt":"","index":4927}
{"question":"Create a Python program to retrieve the hours worked by an employee from a given list of timestamps.","input":"[1577296930, 1577297490, 1577299030]","expected_output":"def total_hours(timestamps):\n    total_hours = 0\n    for i in range(1, len(timestamps)):\n        total_hours += (timestamps[i] - timestamps[i-1]) \/ 3600\n    return total_hours\n\ntimestamps = [1577296930, 1577297490, 1577299030]\n\nprint(total_hours(timestamps))\n\n# Output should be 3.33","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to retrieve the hours worked by an employee from a given list of timestamps.\n\n### Input:\n[1577296930, 1577297490, 1577299030]\n\n### Output:\ndef total_hours(timestamps):\n    total_hours = 0\n    for i in range(1, len(timestamps)):\n        total_hours += (timestamps[i] - timestamps[i-1]) \/ 3600\n    return total_hours\n\ntimestamps = [1577296930, 1577297490, 1577299030]\n\nprint(total_hours(timestamps))\n\n# Output should be 3.33","tok_input_length":148,"tok_output_length":84,"system_prompt":"","index":12733}
{"question":"Design a Python program to return the largest and smallest elements from a given list.","input":"[7, 9, 5, 4, 8, 1]","expected_output":"def largest_smallest(array):\n    smallest = array[0]\n    largest = array[0]\n\n    for element in array:\n        if element > largest:\n            largest = element\n        elif element < smallest: \n            smallest = element\n\n    return (smallest, largest)\n\nlargest_smallest([7, 9, 5, 4, 8, 1]) => (1, 9)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to return the largest and smallest elements from a given list.\n\n### Input:\n[7, 9, 5, 4, 8, 1]\n\n### Output:\ndef largest_smallest(array):\n    smallest = array[0]\n    largest = array[0]\n\n    for element in array:\n        if element > largest:\n            largest = element\n        elif element < smallest: \n            smallest = element\n\n    return (smallest, largest)\n\nlargest_smallest([7, 9, 5, 4, 8, 1]) => (1, 9)","tok_input_length":148,"tok_output_length":87,"system_prompt":"","index":18139}
{"question":"Generate a Python program which use to generate an array of length N with random numbers based on the given seed.","input":"N = 10\nSeed = 42","expected_output":"import random\n\ndef generate_array_with_random_numbers(n, seed):\n random.seed(seed)\n return [random.randint(0, 100) for _ in range(n)]\n\nn = 10\nseed = 42\narray = generate_array_with_random_numbers(n, seed)\n\nprint(array)\n# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which use to generate an array of length N with random numbers based on the given seed.\n\n### Input:\nN = 10\nSeed = 42\n\n### Output:\nimport random\n\ndef generate_array_with_random_numbers(n, seed):\n random.seed(seed)\n return [random.randint(0, 100) for _ in range(n)]\n\nn = 10\nseed = 42\narray = generate_array_with_random_numbers(n, seed)\n\nprint(array)\n# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]","tok_input_length":148,"tok_output_length":89,"system_prompt":"","index":17069}
{"question":"You are asked to create an encryption program that produces an output which should be different from its original one when decrypted.","input":"\"<noinput>\"","expected_output":"# Python 3 program for the implementation of the Encryption Algorithm\n\n# Method to encrypt the given string\ndef encrypt_string(str): \n    cipher = \"\" \n    for s in str:\n        # Shift each character by 2 ascii value\n        s = chr(ord(s) + 2) \n        cipher += s \n  \n    return cipher \n    \n# Driver code \nstr = \"python\" \nprint (\"Encrypted String: \" + encrypt_string(str))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are asked to create an encryption program that produces an output which should be different from its original one when decrypted.\n\n### Input:\n\"<noinput>\"\n\n### Output:\n# Python 3 program for the implementation of the Encryption Algorithm\n\n# Method to encrypt the given string\ndef encrypt_string(str): \n    cipher = \"\" \n    for s in str:\n        # Shift each character by 2 ascii value\n        s = chr(ord(s) + 2) \n        cipher += s \n  \n    return cipher \n    \n# Driver code \nstr = \"python\" \nprint (\"Encrypted String: \" + encrypt_string(str))","tok_input_length":148,"tok_output_length":93,"system_prompt":"","index":13610}
{"question":"Write a python program which given a input string, identifies if it is a palindrome or not.","input":"Input String: \"bob\"","expected_output":"def is_palindrome(input_string): \n    # Reverse the string and see if it matches the original string\n    reversed_string = input_string[::-1] \n    if reversed_string == input_string: \n        return True\n    else: \n        return False\n  \n# Test the program\ntest_string = 'bob'\nif is_palindrome(test_string): \n    print(\"The string is a palindrome.\") \nelse: \n    print(\"The string is not a palindrome.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program which given a input string, identifies if it is a palindrome or not.\n\n### Input:\nInput String: \"bob\"\n\n### Output:\ndef is_palindrome(input_string): \n    # Reverse the string and see if it matches the original string\n    reversed_string = input_string[::-1] \n    if reversed_string == input_string: \n        return True\n    else: \n        return False\n  \n# Test the program\ntest_string = 'bob'\nif is_palindrome(test_string): \n    print(\"The string is a palindrome.\") \nelse: \n    print(\"The string is not a palindrome.\")","tok_input_length":148,"tok_output_length":96,"system_prompt":"","index":12239}
{"question":"Write a Python script that returns the most common words from a given text","input":"\"This is a sample text.\"","expected_output":"def most_common_words(text):\n    words = text.split()\n    word_frequency = {}\n    for word in words:\n        if word in word_frequency:\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    max_value = 0\n    most_common = None\n    for word in word_frequency:\n        if word_frequency[word] > max_value:\n            max_value = word_frequency[word]\n            most_common = word\n    return most_common","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that returns the most common words from a given text\n\n### Input:\n\"This is a sample text.\"\n\n### Output:\ndef most_common_words(text):\n    words = text.split()\n    word_frequency = {}\n    for word in words:\n        if word in word_frequency:\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    max_value = 0\n    most_common = None\n    for word in word_frequency:\n        if word_frequency[word] > max_value:\n            max_value = word_frequency[word]\n            most_common = word\n    return most_common","tok_input_length":148,"tok_output_length":100,"system_prompt":"","index":13166}
{"question":"Create a Machine Learning program in Python to classify a series of handwritten digits","input":"Not applicable","expected_output":"from sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\n\n# load the dataset\ndigits = load_digits()\n\n# split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target, random_state=0)\n\n# build the model\nmodel = SVC(gamma='auto')\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nprint(model.score(X_test, y_test))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Machine Learning program in Python to classify a series of handwritten digits\n\n### Input:\nNot applicable\n\n### Output:\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\n\n# load the dataset\ndigits = load_digits()\n\n# split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target, random_state=0)\n\n# build the model\nmodel = SVC(gamma='auto')\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nprint(model.score(X_test, y_test))","tok_input_length":148,"tok_output_length":103,"system_prompt":"","index":14390}
{"question":"Implement a class-level decorator in Python to time the execution of a method.","input":"","expected_output":"class timed_method(object):\n    def __init__(self,func):\n        self.func = func\n        \n    def __call__(self, *args, **kwargs):\n        start_time = time.time()\n        try:\n            result = self.func(*args, **kwargs)\n        except Exception as e:\n            raise e\n        \n        end_time = time.time()\n        print('Total elapsed time for method %s: %2.2f seconds' % (self.func.__name__, end_time - start_time))\n        return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a class-level decorator in Python to time the execution of a method.\n\n### Input:\n\n\n### Output:\nclass timed_method(object):\n    def __init__(self,func):\n        self.func = func\n        \n    def __call__(self, *args, **kwargs):\n        start_time = time.time()\n        try:\n            result = self.func(*args, **kwargs)\n        except Exception as e:\n            raise e\n        \n        end_time = time.time()\n        print('Total elapsed time for method %s: %2.2f seconds' % (self.func.__name__, end_time - start_time))\n        return result","tok_input_length":148,"tok_output_length":106,"system_prompt":"","index":12048}
{"question":"Write a Python script to automate the mouse or keyboard.","input":"","expected_output":"import pyautogui\n \n# Move mouse to (100, 200)\npyautogui.moveTo(100, 200)\n \n# Drag mouse from (100, 200) to (300, 400)\npyautogui.dragTo(300, 400, button='left')\n \n# Click at position (300, 400)\npyautogui.click(x=300, y=400, clicks=2, button='left')\n \n# Type the word \"Hello World\" \npyautogui.typewrite(\"Hello World\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to automate the mouse or keyboard.\n\n### Input:\n\n\n### Output:\nimport pyautogui\n \n# Move mouse to (100, 200)\npyautogui.moveTo(100, 200)\n \n# Drag mouse from (100, 200) to (300, 400)\npyautogui.dragTo(300, 400, button='left')\n \n# Click at position (300, 400)\npyautogui.click(x=300, y=400, clicks=2, button='left')\n \n# Type the word \"Hello World\" \npyautogui.typewrite(\"Hello World\")","tok_input_length":148,"tok_output_length":110,"system_prompt":"","index":17472}
{"question":"Create a function in Python which takes in a number n and returns \"Fizz\" if the number is divisible by 3, \"Buzz\" if the number is divisible by 5, and \"FizzBuzz\" if the number is divisible by both 3 and 5.","input":"Number: 15","expected_output":"def fizzbuzz(n):\n if n % 3 == 0 and n % 5 == 0:\n  return 'FizzBuzz'\n elif n % 3 == 0:\n  return 'Fizz'\n elif n % 5 == 0:\n  return 'Buzz'\n else:\n  return n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes in a number n and returns \"Fizz\" if the number is divisible by 3, \"Buzz\" if the number is divisible by 5, and \"FizzBuzz\" if the number is divisible by both 3 and 5.\n\n### Input:\nNumber: 15\n\n### Output:\ndef fizzbuzz(n):\n if n % 3 == 0 and n % 5 == 0:\n  return 'FizzBuzz'\n elif n % 3 == 0:\n  return 'Fizz'\n elif n % 5 == 0:\n  return 'Buzz'\n else:\n  return n","tok_input_length":149,"tok_output_length":62,"system_prompt":"","index":13060}
{"question":"Write a Python program to scrape the text from a web page and remove all the html tags.","input":"<p>This is a sample web page.<br>This text has <b>some<\/b> <i>html<\/i> tags.<\/p>","expected_output":"import re\n\ntext = \"<p>This is a sample web page.<br>This text has <b>some<\/b> <i>html<\/i> tags.<\/p>\"\n\ncleaned_text = re.sub(r'<.*?>', '', text)\n\nprint(cleaned_text)\n# Output: This is a sample web page.This text has some html tags.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to scrape the text from a web page and remove all the html tags.\n\n### Input:\n<p>This is a sample web page.<br>This text has <b>some<\/b> <i>html<\/i> tags.<\/p>\n\n### Output:\nimport re\n\ntext = \"<p>This is a sample web page.<br>This text has <b>some<\/b> <i>html<\/i> tags.<\/p>\"\n\ncleaned_text = re.sub(r'<.*?>', '', text)\n\nprint(cleaned_text)\n# Output: This is a sample web page.This text has some html tags.","tok_input_length":149,"tok_output_length":73,"system_prompt":"","index":8582}
{"question":"Write a function in Python that takes a list of strings and returns a dictionary of counts for each string.","input":"list_of_strings = [\"apple\", \"banana\", \"apple\", \"orange\", \"kiwi\"]","expected_output":"def count_list_items(list_of_strings):\n counts = {}\n \n for item in list_of_strings:\n if item not in counts:\n counts[item] = 1\n else:\n counts[item] += 1\n \n return counts\n \nprint(count_list_items(list_of_strings))\n# Output: {\"apple\": 2, \"banana\": 1, \"orange\": 1, \"kiwi\": 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a list of strings and returns a dictionary of counts for each string.\n\n### Input:\nlist_of_strings = [\"apple\", \"banana\", \"apple\", \"orange\", \"kiwi\"]\n\n### Output:\ndef count_list_items(list_of_strings):\n counts = {}\n \n for item in list_of_strings:\n if item not in counts:\n counts[item] = 1\n else:\n counts[item] += 1\n \n return counts\n \nprint(count_list_items(list_of_strings))\n# Output: {\"apple\": 2, \"banana\": 1, \"orange\": 1, \"kiwi\": 1}","tok_input_length":149,"tok_output_length":81,"system_prompt":"","index":7648}
{"question":"Create a Python script to display a table of values given a range of x and y coordinates.","input":"x range: 0 to 50\ny range: 0 to 10","expected_output":"import pandas as pd\nimport numpy as np\n\nx = np.arange(0, 50, 1)\ny = np.arange(0, 10, 1)\n\nxytable = []\n\nfor xi in x:\n    for yi in y:\n        xytable.append([xi, yi, xi*yi])\n\ntable = pd.DataFrame(xytable, columns=['X', 'Y', 'Product'])\n\nprint(table)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to display a table of values given a range of x and y coordinates.\n\n### Input:\nx range: 0 to 50\ny range: 0 to 10\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\nx = np.arange(0, 50, 1)\ny = np.arange(0, 10, 1)\n\nxytable = []\n\nfor xi in x:\n    for yi in y:\n        xytable.append([xi, yi, xi*yi])\n\ntable = pd.DataFrame(xytable, columns=['X', 'Y', 'Product'])\n\nprint(table)","tok_input_length":149,"tok_output_length":85,"system_prompt":"","index":11580}
{"question":"Create a Python script to generate an animated GIF. The GIF should display 5 frames, with an increasing value of a \u2018tick\u2019 numbers in each frame.","input":"","expected_output":"import imageio\n\n# Create a list of images\nimages = []\nfor i in range(5):\n # Create a blank image\n image = Image.new('RGB', (400, 400))\n draw = ImageDraw.Draw(image)\n draw.text((200, 200), str(i))\n # Add the image20 image to the list\n images.append(image)\n \n# Generate the gif\nimageio.mimsave('animated.gif', images)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate an animated GIF. The GIF should display 5 frames, with an increasing value of a \u2018tick\u2019 numbers in each frame.\n\n### Input:\n\n\n### Output:\nimport imageio\n\n# Create a list of images\nimages = []\nfor i in range(5):\n # Create a blank image\n image = Image.new('RGB', (400, 400))\n draw = ImageDraw.Draw(image)\n draw.text((200, 200), str(i))\n # Add the image20 image to the list\n images.append(image)\n \n# Generate the gif\nimageio.mimsave('animated.gif', images)","tok_input_length":149,"tok_output_length":90,"system_prompt":"","index":10581}
{"question":"Create a Python program to print the nth Fibonacci number in the sequence, where n is provided as an input.","input":"n = 10","expected_output":"def Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n+1): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n\nprint(Fibonacci(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print the nth Fibonacci number in the sequence, where n is provided as an input.\n\n### Input:\nn = 10\n\n### Output:\ndef Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n+1): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n\nprint(Fibonacci(10))","tok_input_length":149,"tok_output_length":95,"system_prompt":"","index":1164}
{"question":"Create a Python program to find all pairs of numbers that add up to a given sum.","input":"sum = 8","expected_output":"def find_pairs(lst, sum):\n pairs = []\n\n for i in range(len(lst)-1):\n   for j in range(i+1, len(lst)):\n     if lst[i] + lst[j] == sum:\n       pairs.append((lst[i], lst[j]))\n\n return pairs\n\npairs = find_pairs([1, 2, 3, 4, 5], 8)\nprint(pairs) # [(3,5), (2,6), (1,7)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find all pairs of numbers that add up to a given sum.\n\n### Input:\nsum = 8\n\n### Output:\ndef find_pairs(lst, sum):\n pairs = []\n\n for i in range(len(lst)-1):\n   for j in range(i+1, len(lst)):\n     if lst[i] + lst[j] == sum:\n       pairs.append((lst[i], lst[j]))\n\n return pairs\n\npairs = find_pairs([1, 2, 3, 4, 5], 8)\nprint(pairs) # [(3,5), (2,6), (1,7)]","tok_input_length":149,"tok_output_length":99,"system_prompt":"","index":3463}
{"question":"Write a Python program to generate a random color palette of five colors.","input":"Not applicable","expected_output":"import random\n\n# List of ten random colors\ncolors = [\"#000000\", \"#FFFFFF\", \"#A52A2A\", \"#008080\", \"#DAA520\", \"#008000\", \"#FF00FF\", \"#808080\", \"#800000\", \"#808000\", \"#FFC0CB\"]\n\n# Function that randomly selects five colors from the list\ndef generate_colors():\n random.shuffle(colors)\n palette = colors[:5]\n return palette\n\n# Generates and prints random color palette\nprint (generate_colors())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random color palette of five colors.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# List of ten random colors\ncolors = [\"#000000\", \"#FFFFFF\", \"#A52A2A\", \"#008080\", \"#DAA520\", \"#008000\", \"#FF00FF\", \"#808080\", \"#800000\", \"#808000\", \"#FFC0CB\"]\n\n# Function that randomly selects five colors from the list\ndef generate_colors():\n random.shuffle(colors)\n palette = colors[:5]\n return palette\n\n# Generates and prints random color palette\nprint (generate_colors())","tok_input_length":149,"tok_output_length":105,"system_prompt":"","index":14894}
{"question":"Write a Python function to check whether a year is leap year or not.","input":"","expected_output":"def is_leap_year(year):\n  if (year % 4 == 0):\n  if (year % 100 == 0):\n      if (year % 400 == 0):\n          return True\n      else:\n          return False\n  else:\n      return True\n  else:\n      return False\n\nyear = int(input(\"Enter a year: \"))\n\nif is_leap_year(year):\n  print(year, \"is a leap year\")\nelse:\n  print(year, \"is not a leap year\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check whether a year is leap year or not.\n\n### Input:\n\n\n### Output:\ndef is_leap_year(year):\n  if (year % 4 == 0):\n  if (year % 100 == 0):\n      if (year % 400 == 0):\n          return True\n      else:\n          return False\n  else:\n      return True\n  else:\n      return False\n\nyear = int(input(\"Enter a year: \"))\n\nif is_leap_year(year):\n  print(year, \"is a leap year\")\nelse:\n  print(year, \"is not a leap year\")","tok_input_length":149,"tok_output_length":107,"system_prompt":"","index":10276}
{"question":"Generate a Python function to calculate compound interest.","input":"","expected_output":"def calculate_compound_interest(principal_amount, rate, time_period): \n    total_amount = principal_amount * (pow((1 + rate \/ 100), time_period)) \n    compound_interest = total_amount - principal_amount \n    return compound_interest \n  \n# Driver code \nprincipal_amount = 1000\nrate = 4.4\ntime_period = 2\n  \n# Calculating compound interest \ncompound_interest = calculate_compound_interest(principal_amount, rate, time_period) \n  \n# Printing the values \nprint(\"Compound interest is\", compound_interest)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to calculate compound interest.\n\n### Input:\n\n\n### Output:\ndef calculate_compound_interest(principal_amount, rate, time_period): \n    total_amount = principal_amount * (pow((1 + rate \/ 100), time_period)) \n    compound_interest = total_amount - principal_amount \n    return compound_interest \n  \n# Driver code \nprincipal_amount = 1000\nrate = 4.4\ntime_period = 2\n  \n# Calculating compound interest \ncompound_interest = calculate_compound_interest(principal_amount, rate, time_period) \n  \n# Printing the values \nprint(\"Compound interest is\", compound_interest)","tok_input_length":149,"tok_output_length":113,"system_prompt":"","index":7095}
{"question":"Write a Python program that takes a list as input and returns a list that contains only the unique elements.","input":"list_items = [2, 3, 3, 4, 4, 5, 6, 7, 7]","expected_output":"list_items = [2, 3, 3, 4, 4, 5, 6, 7, 7]\n\ndef find_unique_items(input_list):\n    result = []\n    for elem in input_list:\n        if elem not in result:\n            result.append(elem)\n    return result\n\nprint(find_unique_items(list_items))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list as input and returns a list that contains only the unique elements.\n\n### Input:\nlist_items = [2, 3, 3, 4, 4, 5, 6, 7, 7]\n\n### Output:\nlist_items = [2, 3, 3, 4, 4, 5, 6, 7, 7]\n\ndef find_unique_items(input_list):\n    result = []\n    for elem in input_list:\n        if elem not in result:\n            result.append(elem)\n    return result\n\nprint(find_unique_items(list_items))","tok_input_length":150,"tok_output_length":72,"system_prompt":"","index":12558}
{"question":"Construct a Python program for finding the intersection of two arrays.","input":"Array 1: [1, 2, 3, 4]\nArray 2: [3, 4, 5, 6]","expected_output":"def intersection(arr1, arr2):\n  result = [i for i in arr1 if i in arr2]\n  return result\n\narr1 = [1, 2, 3, 4]\narr2 = [3, 4, 5, 6]\nresult = intersection(arr1, arr2)\nprint(result)  # [3, 4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program for finding the intersection of two arrays.\n\n### Input:\nArray 1: [1, 2, 3, 4]\nArray 2: [3, 4, 5, 6]\n\n### Output:\ndef intersection(arr1, arr2):\n  result = [i for i in arr1 if i in arr2]\n  return result\n\narr1 = [1, 2, 3, 4]\narr2 = [3, 4, 5, 6]\nresult = intersection(arr1, arr2)\nprint(result)  # [3, 4]","tok_input_length":150,"tok_output_length":79,"system_prompt":"","index":14357}
{"question":"Write a Python script to pad a matrix to a given size.","input":"matrix = [[1, 2], [3, 4], [5, 6]]\npad_size = 3","expected_output":"def pad_matrix(matrix, pad_size):\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    new_matrix = [[0 for j in range(pad_size)] for i in range(pad_size)] \n    \n    for i in range(rows):\n        for j in range(cols):\n            new_matrix[i][j] = matrix[i][j]\n\n    return new_matrix\n\nprint(pad_matrix(matrix, pad_size))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to pad a matrix to a given size.\n\n### Input:\nmatrix = [[1, 2], [3, 4], [5, 6]]\npad_size = 3\n\n### Output:\ndef pad_matrix(matrix, pad_size):\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    new_matrix = [[0 for j in range(pad_size)] for i in range(pad_size)] \n    \n    for i in range(rows):\n        for j in range(cols):\n            new_matrix[i][j] = matrix[i][j]\n\n    return new_matrix\n\nprint(pad_matrix(matrix, pad_size))","tok_input_length":150,"tok_output_length":84,"system_prompt":"","index":18550}
{"question":"Generate a Python script to calculate the sum of the following equation: 8x^2 + 5y^2 + 6x - 4y.","input":"","expected_output":"def calculate_sum(x, y):\n    '''This function calculates the sum of the following equation: 8x^2 + 5y^2 + 6x - 4y.'''\n    return 8*x**2 + 5*y**2 + 6*x - 4*y\n\n# Call the function\nresult = calculate_sum(2, 3)\n\n# Print the result\nprint(\"The sum is\", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to calculate the sum of the following equation: 8x^2 + 5y^2 + 6x - 4y.\n\n### Input:\n\n\n### Output:\ndef calculate_sum(x, y):\n    '''This function calculates the sum of the following equation: 8x^2 + 5y^2 + 6x - 4y.'''\n    return 8*x**2 + 5*y**2 + 6*x - 4*y\n\n# Call the function\nresult = calculate_sum(2, 3)\n\n# Print the result\nprint(\"The sum is\", result)","tok_input_length":150,"tok_output_length":90,"system_prompt":"","index":14989}
{"question":"Implement a validator in Python that checks the format of user input for a given field and throws an error if it is not valid.","input":"Not applicable","expected_output":"def validate(data, field, regex):\n    # makes sure data is not empty\n    if not data:\n        raise ValueError('Data is required.')\n    # makes sure data contains field\n    if not field in data:\n        raise ValueError('Field ' + field + ' is required.')\n    # check format of data\n    import re\n    if not re.match(regex, data[field]):\n        raise ValueError('Field ' + field + ' is not valid.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a validator in Python that checks the format of user input for a given field and throws an error if it is not valid.\n\n### Input:\nNot applicable\n\n### Output:\ndef validate(data, field, regex):\n    # makes sure data is not empty\n    if not data:\n        raise ValueError('Data is required.')\n    # makes sure data contains field\n    if not field in data:\n        raise ValueError('Field ' + field + ' is required.')\n    # check format of data\n    import re\n    if not re.match(regex, data[field]):\n        raise ValueError('Field ' + field + ' is not valid.')","tok_input_length":150,"tok_output_length":94,"system_prompt":"","index":10241}
{"question":"Generate a Python program which will compare two strings and determine corresponding factors.","input":"Compare string \"Hello World\" and string \"Bye World\".","expected_output":"def string_compare(str1, str2): \n    if len(str1) > len(str2):\n        return \"str1 is longer\"\n    elif len(str1) < len(str2):\n        return \"str2 is longer\"\n    else:\n        if(str1 == str2):\n            return \"strings are equal\"\n        else:\n            return \"strings are different\"\n\nprint(string_compare(\"Hello World\", \"Bye World\")) # Output: str1 is longer","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which will compare two strings and determine corresponding factors.\n\n### Input:\nCompare string \"Hello World\" and string \"Bye World\".\n\n### Output:\ndef string_compare(str1, str2): \n    if len(str1) > len(str2):\n        return \"str1 is longer\"\n    elif len(str1) < len(str2):\n        return \"str2 is longer\"\n    else:\n        if(str1 == str2):\n            return \"strings are equal\"\n        else:\n            return \"strings are different\"\n\nprint(string_compare(\"Hello World\", \"Bye World\")) # Output: str1 is longer","tok_input_length":150,"tok_output_length":96,"system_prompt":"","index":16711}
{"question":"Create an algorithm in Python to find the sum of the first n prime numbers","input":"n = 10","expected_output":"def sum_of_primes(n):\n    if n < 2: \n        return 0\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return sum(primes)\n\nprint(sum_of_primes(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the sum of the first n prime numbers\n\n### Input:\nn = 10\n\n### Output:\ndef sum_of_primes(n):\n    if n < 2: \n        return 0\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return sum(primes)\n\nprint(sum_of_primes(10))","tok_input_length":150,"tok_output_length":102,"system_prompt":"","index":9276}
{"question":"Design a Python script that takes two dates as input and returns the number of days between them.","input":"","expected_output":"from datetime import date\n\ndef days_between_dates(date1, date2):\n    d0 = date(date1[0], date1[1], date1[2])\n    d1 = date(date2[0], date2[1], date2[2])\n    return abs((d1 - d0).days)\n\ndate1 = [2020, 8, 1]\ndate2 = [2020, 8, 11]\n\nprint(days_between_dates(date1, date2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script that takes two dates as input and returns the number of days between them.\n\n### Input:\n\n\n### Output:\nfrom datetime import date\n\ndef days_between_dates(date1, date2):\n    d0 = date(date1[0], date1[1], date1[2])\n    d1 = date(date2[0], date2[1], date2[2])\n    return abs((d1 - d0).days)\n\ndate1 = [2020, 8, 1]\ndate2 = [2020, 8, 11]\n\nprint(days_between_dates(date1, date2))","tok_input_length":150,"tok_output_length":104,"system_prompt":"","index":13596}
{"question":"Write a Python program to create a 3D scatterplot.","input":"","expected_output":"import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = Axes3D(fig)\n\n# Data for a three-dimensional line\nzline = [0, 1, 2, 3]\nxline = [0, 1, 2, 3]\nyline = [0, 1, 2, 3]\nax.scatter3D(xline, yline, zline, c=zline, cmap='Greens');\n\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a 3D scatterplot.\n\n### Input:\n\n\n### Output:\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = Axes3D(fig)\n\n# Data for a three-dimensional line\nzline = [0, 1, 2, 3]\nxline = [0, 1, 2, 3]\nyline = [0, 1, 2, 3]\nax.scatter3D(xline, yline, zline, c=zline, cmap='Greens');\n\nplt.show()","tok_input_length":150,"tok_output_length":110,"system_prompt":"","index":6694}
{"question":"Create a Euclidean distance function in Python.","input":"","expected_output":"def euclidean_distance(x1, y1, x2, y2): \n    # Calculating distance \n    return math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2)) \n  \n# Driver Code \nx1 = int(input(\"Enter x1:\"))\ny1 = int(input(\"Enter y1:\"))\nx2 = int(input(\"Enter x2:\"))\ny2 = int(input(\"Enter y2:\"))\n\nprint(euclidean_distance(x1,y1,x2,y2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Euclidean distance function in Python.\n\n### Input:\n\n\n### Output:\ndef euclidean_distance(x1, y1, x2, y2): \n    # Calculating distance \n    return math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2)) \n  \n# Driver Code \nx1 = int(input(\"Enter x1:\"))\ny1 = int(input(\"Enter y1:\"))\nx2 = int(input(\"Enter x2:\"))\ny2 = int(input(\"Enter y2:\"))\n\nprint(euclidean_distance(x1,y1,x2,y2))","tok_input_length":150,"tok_output_length":114,"system_prompt":"","index":5538}
{"question":"Write a Python program to arrange two dictionaries in order of their keys.","input":"dct1 = {'a':1, 'b':2, 'c':3}\ndct2 = {'e':4, 'd':5, 'f':6}","expected_output":"def sort_dicts_by_keys(dct1, dct2):\n    result = {}\n    keys = sorted(list(dct1.keys()) + list(dct2.keys()))\n    for key in keys:\n        if key in dct1:\n            result[key] = dct1[key]\n        else:\n            result[key] = dct2[key]\n        \n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to arrange two dictionaries in order of their keys.\n\n### Input:\ndct1 = {'a':1, 'b':2, 'c':3}\ndct2 = {'e':4, 'd':5, 'f':6}\n\n### Output:\ndef sort_dicts_by_keys(dct1, dct2):\n    result = {}\n    keys = sorted(list(dct1.keys()) + list(dct2.keys()))\n    for key in keys:\n        if key in dct1:\n            result[key] = dct1[key]\n        else:\n            result[key] = dct2[key]\n        \n    return result","tok_input_length":151,"tok_output_length":72,"system_prompt":"","index":4647}
{"question":"Write a Python program that croscorrelates two given arrays.","input":"Array 1: [2, 3, 5, 7], Array 2: [1, 4, 6, 8]","expected_output":"import numpy as np\n \n#input arrays\narr1 = np.array([2, 3, 5, 7])\narr2 = np.array([1, 4, 6, 8])\n\n#calculating correlation\ncorrelation = np.corrcoef(arr1, arr2)\n\n#printing correlation\nprint(\"Correlation: \", correlation[0][1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that croscorrelates two given arrays.\n\n### Input:\nArray 1: [2, 3, 5, 7], Array 2: [1, 4, 6, 8]\n\n### Output:\nimport numpy as np\n \n#input arrays\narr1 = np.array([2, 3, 5, 7])\narr2 = np.array([1, 4, 6, 8])\n\n#calculating correlation\ncorrelation = np.corrcoef(arr1, arr2)\n\n#printing correlation\nprint(\"Correlation: \", correlation[0][1])","tok_input_length":151,"tok_output_length":78,"system_prompt":"","index":17574}
{"question":"Write a Python program to count the number of elements which are greater than the given number?","input":"list1 = [1, 2, 3, 4, 5], number = 3","expected_output":"list1 = [1, 2, 3, 4, 5] \nnumber = 3\n\n#initialize a count\ncount = 0\n\n#iterate through the list and count the elements that are greater than the given number\nfor num in list1:\n    if num > number:\n        count += 1\n\nprint(\"Number of elements greater than the given number:\", count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to count the number of elements which are greater than the given number?\n\n### Input:\nlist1 = [1, 2, 3, 4, 5], number = 3\n\n### Output:\nlist1 = [1, 2, 3, 4, 5] \nnumber = 3\n\n#initialize a count\ncount = 0\n\n#iterate through the list and count the elements that are greater than the given number\nfor num in list1:\n    if num > number:\n        count += 1\n\nprint(\"Number of elements greater than the given number:\", count)","tok_input_length":151,"tok_output_length":83,"system_prompt":"","index":3282}
{"question":"Write a Python program to insert a given string at the beginning of all items in a list.","input":"_list = ['digger', 'dog', 'deer']\nstring = 'The'","expected_output":"_list = ['digger', 'dog', 'deer']\nstring = 'The'\n\n# Create an empty list to store the modified elements\nnew_list = []\n\n# Iterate through the old list and create the modified list\nfor item in _list:\n    new_list.append(string + ' ' + item)\n\n# Print the modified list\nprint(new_list) # Output: ['The digger', 'The dog', 'The deer']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to insert a given string at the beginning of all items in a list.\n\n### Input:\n_list = ['digger', 'dog', 'deer']\nstring = 'The'\n\n### Output:\n_list = ['digger', 'dog', 'deer']\nstring = 'The'\n\n# Create an empty list to store the modified elements\nnew_list = []\n\n# Iterate through the old list and create the modified list\nfor item in _list:\n    new_list.append(string + ' ' + item)\n\n# Print the modified list\nprint(new_list) # Output: ['The digger', 'The dog', 'The deer']","tok_input_length":151,"tok_output_length":88,"system_prompt":"","index":5898}
{"question":"Create an algorithm in Python to rotate an array of numbers by k elements.","input":"Array: [1,2,3,4,5], k=2","expected_output":"def rotate_array(arr, k):\n n = len(arr)\n \n for i in range(k):\n  temp = arr[n-1]\n  for i in range(n-1,0,-1):\n   arr[i] = arr[i-1]\n  arr[0] = temp\n  \n return arr\n \nprint(rotate_array([1,2,3,4,5],2)) # prints [4,5,1,2,3]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to rotate an array of numbers by k elements.\n\n### Input:\nArray: [1,2,3,4,5], k=2\n\n### Output:\ndef rotate_array(arr, k):\n n = len(arr)\n \n for i in range(k):\n  temp = arr[n-1]\n  for i in range(n-1,0,-1):\n   arr[i] = arr[i-1]\n  arr[0] = temp\n  \n return arr\n \nprint(rotate_array([1,2,3,4,5],2)) # prints [4,5,1,2,3]","tok_input_length":151,"tok_output_length":92,"system_prompt":"","index":13482}
{"question":"Create a function to encode a string using the Caesar cipher in Python.","input":"string = \"the quick brown fox\"\nencryption_key = 3","expected_output":"def caesar_encrypt(string, encryption_key):\n    encrypted_string = \"\"\n    for char in string:\n        # convert char to ASCII code\n        ascii_code = ord(char)\n        # shift the char by given encryption_key\n        shifted_char = ascii_code + encryption_key\n        # convert shifted_char to its character form\n        encrypted_char = chr(shifted_char)\n        # append the encrypted_char to encrypted_string\n        encrypted_string += encrypted_char\n\n    return encrypted_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to encode a string using the Caesar cipher in Python.\n\n### Input:\nstring = \"the quick brown fox\"\nencryption_key = 3\n\n### Output:\ndef caesar_encrypt(string, encryption_key):\n    encrypted_string = \"\"\n    for char in string:\n        # convert char to ASCII code\n        ascii_code = ord(char)\n        # shift the char by given encryption_key\n        shifted_char = ascii_code + encryption_key\n        # convert shifted_char to its character form\n        encrypted_char = chr(shifted_char)\n        # append the encrypted_char to encrypted_string\n        encrypted_string += encrypted_char\n\n    return encrypted_string","tok_input_length":151,"tok_output_length":96,"system_prompt":"","index":3733}
{"question":"Create a Python module to generate random passwords. The module should have an API with two parameters: length and strength.","input":"Not applicable","expected_output":"import random\nimport string\n\ndef generate_password(length, strength):\n    \"\"\"Generate a random password given a length and strength.\"\"\"\n    if strength == 'weak':\n        return ''.join(random.choices(string.ascii_letters, k=length))\n    elif strength == 'medium':\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\n    elif strength == 'strong':\n        return ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module to generate random passwords. The module should have an API with two parameters: length and strength.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef generate_password(length, strength):\n    \"\"\"Generate a random password given a length and strength.\"\"\"\n    if strength == 'weak':\n        return ''.join(random.choices(string.ascii_letters, k=length))\n    elif strength == 'medium':\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\n    elif strength == 'strong':\n        return ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length))","tok_input_length":151,"tok_output_length":98,"system_prompt":"","index":14881}
{"question":"Write a Python function to generate a sequence of numbers of a given length which contain prime numbers only.","input":"8","expected_output":"def generate_prime_sequence(length):\n prime_sequence = []\n prime_number = 2\n while len(prime_sequence) < length:\n  is_prime = True\n  for i in range(2, int(prime_number\/2) + 1):\n    if prime_number % i == 0:\n      is_prime = False\n      break\n  if is_prime:\n    prime_sequence.append(prime_number)\n  prime_number += 1\n return prime_sequence\n\nprint(generate_prime_sequence(8))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate a sequence of numbers of a given length which contain prime numbers only.\n\n### Input:\n8\n\n### Output:\ndef generate_prime_sequence(length):\n prime_sequence = []\n prime_number = 2\n while len(prime_sequence) < length:\n  is_prime = True\n  for i in range(2, int(prime_number\/2) + 1):\n    if prime_number % i == 0:\n      is_prime = False\n      break\n  if is_prime:\n    prime_sequence.append(prime_number)\n  prime_number += 1\n return prime_sequence\n\nprint(generate_prime_sequence(8))","tok_input_length":151,"tok_output_length":102,"system_prompt":"","index":12528}
{"question":"Create a function in Python that takes a string input and converts it to Pig Latin.","input":"","expected_output":"def to_pig_latin(sentence):\n    result = \"\"\n    words = sentence.split()\n    for word in words:\n        # Check if the word starts with a vowel\n        if word[0] in \"aeiou\":\n            result += word + \"way \"\n        # If not, move the first letter to the end and add 'ay'\n        else:\n            result += word[1:] + word[0] + \"ay \"\n    return result\n\nprint(to_pig_latin(\"This is a sentence\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a string input and converts it to Pig Latin.\n\n### Input:\n\n\n### Output:\ndef to_pig_latin(sentence):\n    result = \"\"\n    words = sentence.split()\n    for word in words:\n        # Check if the word starts with a vowel\n        if word[0] in \"aeiou\":\n            result += word + \"way \"\n        # If not, move the first letter to the end and add 'ay'\n        else:\n            result += word[1:] + word[0] + \"ay \"\n    return result\n\nprint(to_pig_latin(\"This is a sentence\"))","tok_input_length":151,"tok_output_length":107,"system_prompt":"","index":7264}
{"question":"Build a class in Python 3 to represent a triangle.","input":"","expected_output":"class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def perimeter(self):\n        return (self.side1 + self.side2 + self.side3)\n\n    def area(self):\n        # Using Heron's formula\n        s = self.perimeter() \/ 2\n        return (s*(s-self.side1)*(s-self.side2)*(s-self.side3))**0.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a class in Python 3 to represent a triangle.\n\n### Input:\n\n\n### Output:\nclass Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def perimeter(self):\n        return (self.side1 + self.side2 + self.side3)\n\n    def area(self):\n        # Using Heron's formula\n        s = self.perimeter() \/ 2\n        return (s*(s-self.side1)*(s-self.side2)*(s-self.side3))**0.5","tok_input_length":151,"tok_output_length":112,"system_prompt":"","index":3453}
{"question":"Fix the bug in the following Python program:","input":"def prime_factorization(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0\n            factors.append(divisor)\n            n = n \/\/ divisor\n        else:\n            divisor += 1\n    return factors","expected_output":"def prime_factorization(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n \/\/ divisor\n        else:\n            divisor += 1\n    return factors","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFix the bug in the following Python program:\n\n### Input:\ndef prime_factorization(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0\n            factors.append(divisor)\n            n = n \/\/ divisor\n        else:\n            divisor += 1\n    return factors\n\n### Output:\ndef prime_factorization(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n \/\/ divisor\n        else:\n            divisor += 1\n    return factors","tok_input_length":152,"tok_output_length":58,"system_prompt":"","index":17132}
{"question":"Write a Python program to traverse a tree data structure and print all the nodes in preorder.","input":"tree \n\t \/   \\   \n    1     2 \n  \/      \/ \\ \n 3      4   5","expected_output":"def preorder(tree): \n    if tree: \n        print(tree.val) \n        preorder(tree.left) \n        preorder(tree.right) \n  \n# Driver code  \ntree = Node(1) \ntree.left = Node(2) \ntree.right = Node(3) \ntree.left.left = Node(4) \ntree.left.right = Node(5) \n  \npreorder(tree)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to traverse a tree data structure and print all the nodes in preorder.\n\n### Input:\ntree \n\t \/   \\   \n    1     2 \n  \/      \/ \\ \n 3      4   5\n\n### Output:\ndef preorder(tree): \n    if tree: \n        print(tree.val) \n        preorder(tree.left) \n        preorder(tree.right) \n  \n# Driver code  \ntree = Node(1) \ntree.left = Node(2) \ntree.right = Node(3) \ntree.left.left = Node(4) \ntree.left.right = Node(5) \n  \npreorder(tree)","tok_input_length":152,"tok_output_length":78,"system_prompt":"","index":9788}
{"question":"Create a Python function to sort a list of strings lexicographically, where strings are of varying lengths.","input":"string_list = [\"abcd\", \"def\", \"fh\", \"ac\", \"a\"]","expected_output":"def lexicographic_sort(string_list):\n    # Sort by length\n    string_list.sort(key=len)\n \n    # Second, sort by alphabetical order\n    string_list.sort()\n \n    return string_list\n\nstring_list = [\"abcd\", \"def\", \"fh\", \"ac\", \"a\"]\nprint(lexicographic_sort(string_list)) # [\"a\", \"ac\", \"def\", \"fh\", \"abcd\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to sort a list of strings lexicographically, where strings are of varying lengths.\n\n### Input:\nstring_list = [\"abcd\", \"def\", \"fh\", \"ac\", \"a\"]\n\n### Output:\ndef lexicographic_sort(string_list):\n    # Sort by length\n    string_list.sort(key=len)\n \n    # Second, sort by alphabetical order\n    string_list.sort()\n \n    return string_list\n\nstring_list = [\"abcd\", \"def\", \"fh\", \"ac\", \"a\"]\nprint(lexicographic_sort(string_list)) # [\"a\", \"ac\", \"def\", \"fh\", \"abcd\"]","tok_input_length":152,"tok_output_length":86,"system_prompt":"","index":11130}
{"question":"Create a program in Python to find all pairs of elements in a list with the given difference.","input":"[9, 4, 7, 5], 4","expected_output":"def find_pair_with_difference(list, difference):\n    result = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[j] - list[i] == difference:\n                result.append((list[i], list[j]))\n    return result\n\nlist=[9, 4, 7, 5]\ndifference = 4\nresult = find_pair_with_difference(list, difference)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find all pairs of elements in a list with the given difference.\n\n### Input:\n[9, 4, 7, 5], 4\n\n### Output:\ndef find_pair_with_difference(list, difference):\n    result = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[j] - list[i] == difference:\n                result.append((list[i], list[j]))\n    return result\n\nlist=[9, 4, 7, 5]\ndifference = 4\nresult = find_pair_with_difference(list, difference)\nprint(result)","tok_input_length":152,"tok_output_length":91,"system_prompt":"","index":5706}
{"question":"Write a Python script to print out all prime numbers in a given list.","input":"[4, 15, 22, 50, 119]","expected_output":"import math\n\ndef is_prime(n):\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0: \n            return False\n    return True\n\ninput_list = [4, 15, 22, 50, 119]\n\nfor num in input_list:\n    if is_prime(num):\n        print(num)\n\n# Output: \n# 4\n# 15\n# 50\n# 119","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to print out all prime numbers in a given list.\n\n### Input:\n[4, 15, 22, 50, 119]\n\n### Output:\nimport math\n\ndef is_prime(n):\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0: \n            return False\n    return True\n\ninput_list = [4, 15, 22, 50, 119]\n\nfor num in input_list:\n    if is_prime(num):\n        print(num)\n\n# Output: \n# 4\n# 15\n# 50\n# 119","tok_input_length":152,"tok_output_length":95,"system_prompt":"","index":10198}
{"question":"Write a python program to generate the Cartesian product of a given list","input":"lst = [1, 2, 3]","expected_output":"def cartesian_product(lst):\n    \"\"\"Generate the Cartesian product of a given list\n\n    Args:\n        lst (list): list of elements\n\n    Returns:\n        list: the Cartesian product of the input list\n    \"\"\"\n    res = [[i] for i in lst]\n    for j in range(len(lst)):\n        temp = []\n        for k in lst:\n            for element in res[j]:\n                temp.append(element + [k])\n        res.append(temp)\n    return res[len(lst)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate the Cartesian product of a given list\n\n### Input:\nlst = [1, 2, 3]\n\n### Output:\ndef cartesian_product(lst):\n    \"\"\"Generate the Cartesian product of a given list\n\n    Args:\n        lst (list): list of elements\n\n    Returns:\n        list: the Cartesian product of the input list\n    \"\"\"\n    res = [[i] for i in lst]\n    for j in range(len(lst)):\n        temp = []\n        for k in lst:\n            for element in res[j]:\n                temp.append(element + [k])\n        res.append(temp)\n    return res[len(lst)]","tok_input_length":152,"tok_output_length":100,"system_prompt":"","index":9233}
{"question":"Write an algorithm in Python to find a solution to the Tower of Hanoi game.","input":"3 discs","expected_output":"def hanoi_solver(n, start, temp, end):\n if n == 1:\n print(f'Move disc 1 from {start} to {end}')\n else:\n hanoi_solver(n-1, start, end, temp)\n print(f'Move disc {n} from {start} to {end}')\n hanoi_solver(n-1, temp, start, end)\n\n# Solve the Tower of Hanoi with 3 discs\nhanoi_solver(3, 'A', 'B', 'C')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to find a solution to the Tower of Hanoi game.\n\n### Input:\n3 discs\n\n### Output:\ndef hanoi_solver(n, start, temp, end):\n if n == 1:\n print(f'Move disc 1 from {start} to {end}')\n else:\n hanoi_solver(n-1, start, end, temp)\n print(f'Move disc {n} from {start} to {end}')\n hanoi_solver(n-1, temp, start, end)\n\n# Solve the Tower of Hanoi with 3 discs\nhanoi_solver(3, 'A', 'B', 'C')","tok_input_length":152,"tok_output_length":105,"system_prompt":"","index":7620}
{"question":"Write a python script to print the prime numbers between 1 to 100.","input":"","expected_output":"def prime_numbers(start, end):\n    for number in range(start, end + 1):\n        # if the number is divisible by any of the numbers from 2 to one less than the number itself, then it is not prime.\n        if number > 1:\n            for i in range(2, number):\n                if (number % i) == 0:\n                    break\n            else:\n                print(number)\n \n# To print all prime numbers from 1 to 100       \nprime_numbers(1, 100)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to print the prime numbers between 1 to 100.\n\n### Input:\n\n\n### Output:\ndef prime_numbers(start, end):\n    for number in range(start, end + 1):\n        # if the number is divisible by any of the numbers from 2 to one less than the number itself, then it is not prime.\n        if number > 1:\n            for i in range(2, number):\n                if (number % i) == 0:\n                    break\n            else:\n                print(number)\n \n# To print all prime numbers from 1 to 100       \nprime_numbers(1, 100)","tok_input_length":152,"tok_output_length":109,"system_prompt":"","index":10509}
{"question":"Construct an object-oriented Python model for a student database.","input":"","expected_output":"class Student:\n def __init__(self, name, student_id, courses):\n self.name = name\n self.student_id = student_id\n self.courses = courses\n\nclass Course:\n def __init__(self, title, course_id, credits):\n self.title = title\n self.course_id = course_id\n self.credits = credits\n\nclass Database:\n def __init__(self):\n self.students = []\n self.courses = []\n \n def add_student(self, student):\n self.students.append(student)\n \n def add_course(self, course):\n self.courses.append(course)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an object-oriented Python model for a student database.\n\n### Input:\n\n\n### Output:\nclass Student:\n def __init__(self, name, student_id, courses):\n self.name = name\n self.student_id = student_id\n self.courses = courses\n\nclass Course:\n def __init__(self, title, course_id, credits):\n self.title = title\n self.course_id = course_id\n self.credits = credits\n\nclass Database:\n def __init__(self):\n self.students = []\n self.courses = []\n \n def add_student(self, student):\n self.students.append(student)\n \n def add_course(self, course):\n self.courses.append(course)","tok_input_length":152,"tok_output_length":114,"system_prompt":"","index":2918}
{"question":"Write a Python program to print a formatted price list with a given list of expenses.","input":"expenses = {\n    \"bread\": 2.50,\n    \"butter\": 4.50,\n    \"cake\": 12.75,\n    \"sugar\": 6.95\n}","expected_output":"def print_price_list(expenses):\n    print(\"Price list of items available:\")\n    print(\"-\" * 30)\n    print(\"Item\\tPrice\")\n    print(\"-\" * 30)\n    for item in expenses.keys():\n        print(\"{}\\t{}\".format(item, expenses[item]))\n    print(\"-\" * 30)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print a formatted price list with a given list of expenses.\n\n### Input:\nexpenses = {\n    \"bread\": 2.50,\n    \"butter\": 4.50,\n    \"cake\": 12.75,\n    \"sugar\": 6.95\n}\n\n### Output:\ndef print_price_list(expenses):\n    print(\"Price list of items available:\")\n    print(\"-\" * 30)\n    print(\"Item\\tPrice\")\n    print(\"-\" * 30)\n    for item in expenses.keys():\n        print(\"{}\\t{}\".format(item, expenses[item]))\n    print(\"-\" * 30)","tok_input_length":153,"tok_output_length":67,"system_prompt":"","index":12602}
{"question":"Implement a function in Python that takes a nested list as an input, and flattens the list into a single list.","input":"[[1,2,3],[4,5,6],[7,8,9]]","expected_output":"def flatten_list(list):\n flattened_list = []\n for sublist in list:\n for item in sublist:\n flattened_list.append(item)\n return flattened_list\n\nprint(flatten_list([[1,2,3],[4,5,6],[7,8,9]]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes a nested list as an input, and flattens the list into a single list.\n\n### Input:\n[[1,2,3],[4,5,6],[7,8,9]]\n\n### Output:\ndef flatten_list(list):\n flattened_list = []\n for sublist in list:\n for item in sublist:\n flattened_list.append(item)\n return flattened_list\n\nprint(flatten_list([[1,2,3],[4,5,6],[7,8,9]]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]","tok_input_length":153,"tok_output_length":83,"system_prompt":"","index":10372}
{"question":"Write a Python program to find the largest and smallest number from a given list of numbers.","input":"[7, 4, 2, 9, 0, 5]","expected_output":"def find_num(input_list):\n    \"\"\"Finds the largest and smallest number from a given list of numbers.\"\"\"\n    max_num = max(input_list)\n    min_num = min(input_list)\n    return max_num, min_num\n\nlargest, smallest = find_num([7, 4, 2, 9, 0, 5])\nprint('The largest number is', largest)\nprint('The smallest number is', smallest)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the largest and smallest number from a given list of numbers.\n\n### Input:\n[7, 4, 2, 9, 0, 5]\n\n### Output:\ndef find_num(input_list):\n    \"\"\"Finds the largest and smallest number from a given list of numbers.\"\"\"\n    max_num = max(input_list)\n    min_num = min(input_list)\n    return max_num, min_num\n\nlargest, smallest = find_num([7, 4, 2, 9, 0, 5])\nprint('The largest number is', largest)\nprint('The smallest number is', smallest)","tok_input_length":153,"tok_output_length":90,"system_prompt":"","index":12952}
{"question":"Create a Python function to clean and normalize text strings.","input":"The text string to be normalized is \"Thi$$$s i$ a te$Xt!!!!!\"","expected_output":"import re\n\ndef clean_text(text):\n # Lowercase text\n text = text.lower()\n \n # Remove special characters\n text = re.sub(r'[^\\w\\s]','', text)\n \n # Remove extra whitespaces\n text = re.sub(r'\\s+',' ', text)\n \n return text\n \n# Sample Usage\ntext = 'Thi$$$s i$ a te$Xt!!!!!'\nclean_text(text)\n# Output: 'this is a text '","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to clean and normalize text strings.\n\n### Input:\nThe text string to be normalized is \"Thi$$$s i$ a te$Xt!!!!!\"\n\n### Output:\nimport re\n\ndef clean_text(text):\n # Lowercase text\n text = text.lower()\n \n # Remove special characters\n text = re.sub(r'[^\\w\\s]','', text)\n \n # Remove extra whitespaces\n text = re.sub(r'\\s+',' ', text)\n \n return text\n \n# Sample Usage\ntext = 'Thi$$$s i$ a te$Xt!!!!!'\nclean_text(text)\n# Output: 'this is a text '","tok_input_length":153,"tok_output_length":94,"system_prompt":"","index":11874}
{"question":"Write a Python class to represent a typical lock with methods to lock, unlock, check status, and reset code.","input":"not applicable","expected_output":"class Lock:\n    def __init__(self):\n        self._isLocked = False\n        self._code = \"\"\n    \n    def lock(self):\n        self._isLocked = True\n    \n    def unlock(self, code):\n        if code == self._code:\n            self._isLocked = False\n            return True\n        else:\n            return False\n    \n    def is_locked(self):\n        return self._isLocked\n    \n    def reset_code(self, code):\n        self._code = code","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to represent a typical lock with methods to lock, unlock, check status, and reset code.\n\n### Input:\nnot applicable\n\n### Output:\nclass Lock:\n    def __init__(self):\n        self._isLocked = False\n        self._code = \"\"\n    \n    def lock(self):\n        self._isLocked = True\n    \n    def unlock(self, code):\n        if code == self._code:\n            self._isLocked = False\n            return True\n        else:\n            return False\n    \n    def is_locked(self):\n        return self._isLocked\n    \n    def reset_code(self, code):\n        self._code = code","tok_input_length":153,"tok_output_length":100,"system_prompt":"","index":6496}
{"question":"Develop an Python program to classify some spoken words.","input":"Word list: ['happy', 'sad', 'angry']","expected_output":"import speech_recognition as sr\n\nr = sr.Recognizer()\n\nwords = ['happy', 'sad', 'angry']\n\nwith sr.Microphone() as source:\n    print(\"Say a word.\")\n    audio = r.listen(source)\n\ntry:\n    word = r.recognize_google(audio).lower()\n    if word in words:\n        print(\"The emotion of the word is:\", word)\n    else:\n        print(\"The word is unknown.\")\nexcept:\n    print(\"Sorry could not recognize\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an Python program to classify some spoken words.\n\n### Input:\nWord list: ['happy', 'sad', 'angry']\n\n### Output:\nimport speech_recognition as sr\n\nr = sr.Recognizer()\n\nwords = ['happy', 'sad', 'angry']\n\nwith sr.Microphone() as source:\n    print(\"Say a word.\")\n    audio = r.listen(source)\n\ntry:\n    word = r.recognize_google(audio).lower()\n    if word in words:\n        print(\"The emotion of the word is:\", word)\n    else:\n        print(\"The word is unknown.\")\nexcept:\n    print(\"Sorry could not recognize\")","tok_input_length":153,"tok_output_length":103,"system_prompt":"","index":14312}
{"question":"Develop a recursive algorithm in Python for generating permutations of a given set of elements.","input":"Not applicable","expected_output":"def permutations(s): \n if len(s) == 0: \n  return [] \n if len(s) == 1: \n  return [s] \n l = [] # empty list that will store current permutation \n # Iterate the input(s) and calculate the permutation \n for i in range(len(s)): \n   m = s[i] \n   rem = s[:i] + s[i+1:] \n   for p in permutations(rem): \n    l.append([m] + p) \n return l","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a recursive algorithm in Python for generating permutations of a given set of elements.\n\n### Input:\nNot applicable\n\n### Output:\ndef permutations(s): \n if len(s) == 0: \n  return [] \n if len(s) == 1: \n  return [s] \n l = [] # empty list that will store current permutation \n # Iterate the input(s) and calculate the permutation \n for i in range(len(s)): \n   m = s[i] \n   rem = s[:i] + s[i+1:] \n   for p in permutations(rem): \n    l.append([m] + p) \n return l","tok_input_length":153,"tok_output_length":107,"system_prompt":"","index":9929}
{"question":"Design a function in Python to determine if a given number is prime.","input":"37","expected_output":"def is_prime(n):\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n > 2 and n % 2 == 0: \n        return False\n\n    sqrt_n = int(n**0.5)\n    for i in range(3, sqrt_n+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nif is_prime(37):\n    print('37 is a prime number!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to determine if a given number is prime.\n\n### Input:\n37\n\n### Output:\ndef is_prime(n):\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n > 2 and n % 2 == 0: \n        return False\n\n    sqrt_n = int(n**0.5)\n    for i in range(3, sqrt_n+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nif is_prime(37):\n    print('37 is a prime number!')","tok_input_length":153,"tok_output_length":110,"system_prompt":"","index":12114}
{"question":"Summarize the text given below in 2 to 3 sentences.","input":"The Python programming language is a powerful, general-purpose, open-source language. It is a scripting language that supports object-oriented programming and procedural styles. It has a design philosophy which emphasizes code readability and a syntax that allows programmers to express concepts in fewer lines of code.","expected_output":"Python is a powerful, open-source programming language that is both object-oriented and procedural in nature. It focuses on readability of code and simplicity of syntax, enabling developers to quickly and efficiently express concepts with fewer lines of code. It is free to use and popularly used for scripting and automation.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSummarize the text given below in 2 to 3 sentences.\n\n### Input:\nThe Python programming language is a powerful, general-purpose, open-source language. It is a scripting language that supports object-oriented programming and procedural styles. It has a design philosophy which emphasizes code readability and a syntax that allows programmers to express concepts in fewer lines of code.\n\n### Output:\nPython is a powerful, open-source programming language that is both object-oriented and procedural in nature. It focuses on readability of code and simplicity of syntax, enabling developers to quickly and efficiently express concepts with fewer lines of code. It is free to use and popularly used for scripting and automation.","tok_input_length":154,"tok_output_length":59,"system_prompt":"","index":4602}
{"question":"Generate a Python program to parse a given list of URLs and extract the titles of the web pages.","input":"[\n\"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\",\n\"https:\/\/wikipedia.org\/wiki\/Deep_learning\",\n\"https:\/\/www.wikipedia.org\/wiki\/Cat\"\n]","expected_output":"import urllib.request\nfrom bs4 import BeautifulSoup\n\nurls = [\n\"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\",\n\"https:\/\/wikipedia.org\/wiki\/Deep_learning\",\n\"https:\/\/www.wikipedia.org\/wiki\/Cat\"\n]\n\nfor url in urls:\n html = urllib.request.urlopen(url).read()\n soup = BeautifulSoup(html)\n title = soup.title.string\n print(title)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to parse a given list of URLs and extract the titles of the web pages.\n\n### Input:\n[\n\"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\",\n\"https:\/\/wikipedia.org\/wiki\/Deep_learning\",\n\"https:\/\/www.wikipedia.org\/wiki\/Cat\"\n]\n\n### Output:\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\nurls = [\n\"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\",\n\"https:\/\/wikipedia.org\/wiki\/Deep_learning\",\n\"https:\/\/www.wikipedia.org\/wiki\/Cat\"\n]\n\nfor url in urls:\n html = urllib.request.urlopen(url).read()\n soup = BeautifulSoup(html)\n title = soup.title.string\n print(title)","tok_input_length":154,"tok_output_length":74,"system_prompt":"","index":1555}
{"question":"Write a Python program to find the elements that are present in both lists.","input":"<list1:[1, 2, 3, 4]><list2:[3, 4, 5, 6]>","expected_output":"list1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\n\ncommon_elements = []\nfor i in range(len(list1)):\n for j in range(len(list2)):\n  if list1[i] == list2[j]:\n   common_elements.append(list1[i])\n\nprint(common_elements) # [3, 4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the elements that are present in both lists.\n\n### Input:\n<list1:[1, 2, 3, 4]><list2:[3, 4, 5, 6]>\n\n### Output:\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\n\ncommon_elements = []\nfor i in range(len(list1)):\n for j in range(len(list2)):\n  if list1[i] == list2[j]:\n   common_elements.append(list1[i])\n\nprint(common_elements) # [3, 4]","tok_input_length":154,"tok_output_length":81,"system_prompt":"","index":2001}
{"question":"Write a Python program to group a list of string elements into a dictionary of word counts.","input":"['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']","expected_output":"words = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']\n\nword_counts = {word: words.count(word) for word in words}\n\nprint(word_counts)\n# Output: {'hello': 2, 'world': 2, 'this': 1, 'is': 1, 'a': 1, 'test': 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to group a list of string elements into a dictionary of word counts.\n\n### Input:\n['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']\n\n### Output:\nwords = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']\n\nword_counts = {word: words.count(word) for word in words}\n\nprint(word_counts)\n# Output: {'hello': 2, 'world': 2, 'this': 1, 'is': 1, 'a': 1, 'test': 1}","tok_input_length":154,"tok_output_length":85,"system_prompt":"","index":2620}
{"question":"Create a Python function that takes a list of strings and returns a dict with the strings grouped by the length of the strings.","input":"['word', 'sentence', 'hello', 'programming']","expected_output":"def group_by_length(lst):\n res = {}\n for x in lst:\n length = len(x)\n if length not in res:\n res[length] = [x]\n else:\n res[length].append(x)\n return res\n \ninput = ['word', 'sentence', 'hello', 'programming']\noutput = group_by_length(input)\nprint(output) \/\/ {4: ['word', 'hello'], 8: ['sentence'], 11: ['programming']}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a list of strings and returns a dict with the strings grouped by the length of the strings.\n\n### Input:\n['word', 'sentence', 'hello', 'programming']\n\n### Output:\ndef group_by_length(lst):\n res = {}\n for x in lst:\n length = len(x)\n if length not in res:\n res[length] = [x]\n else:\n res[length].append(x)\n return res\n \ninput = ['word', 'sentence', 'hello', 'programming']\noutput = group_by_length(input)\nprint(output) \/\/ {4: ['word', 'hello'], 8: ['sentence'], 11: ['programming']}","tok_input_length":154,"tok_output_length":90,"system_prompt":"","index":7048}
{"question":"Write a Python program to generate a dictionary that contains a number (between 1 and n) in the form (x, x*x).","input":"n = 8","expected_output":"def generate_dict(n):\n    my_dict = {}\n    for num in range(1, n+1):\n        my_dict[num] = num * num\n    return my_dict\n\nprint(generate_dict(8)) # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a dictionary that contains a number (between 1 and n) in the form (x, x*x).\n\n### Input:\nn = 8\n\n### Output:\ndef generate_dict(n):\n    my_dict = {}\n    for num in range(1, n+1):\n        my_dict[num] = num * num\n    return my_dict\n\nprint(generate_dict(8)) # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}","tok_input_length":154,"tok_output_length":94,"system_prompt":"","index":4613}
{"question":"Modify the given Python code to perform sentiment analysis (positive or negative) on a given text.","input":"text = \"This movie was truly amazing\"","expected_output":"import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsid = SentimentIntensityAnalyzer() \n  \ntext = \"This movie was truly amazing\"\n\nsentiment_scores = sid.polarity_scores(text) \n\nif sentiment_scores['compound'] >= 0.05 : \n    print(\"Positive\") \nelif sentiment_scores['compound'] <= - 0.05 : \n    print(\"Negative\")\nelse : \n    print(\"Neutral\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given Python code to perform sentiment analysis (positive or negative) on a given text.\n\n### Input:\ntext = \"This movie was truly amazing\"\n\n### Output:\nimport nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsid = SentimentIntensityAnalyzer() \n  \ntext = \"This movie was truly amazing\"\n\nsentiment_scores = sid.polarity_scores(text) \n\nif sentiment_scores['compound'] >= 0.05 : \n    print(\"Positive\") \nelif sentiment_scores['compound'] <= - 0.05 : \n    print(\"Negative\")\nelse : \n    print(\"Neutral\")","tok_input_length":154,"tok_output_length":99,"system_prompt":"","index":1176}
{"question":"Build a program in Python that takes in a CSV and a value, and returns only the rows that have that value.","input":"5","expected_output":"\"\"\"\nreturn only the rows that have that value from a csv\n\"\"\"\n\nimport csv\n\ndef get_rows(filename, value):\n    rows = []\n    with open(filename, newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            if int(row[0]) == value:\n                rows.append(row)\n    return rows\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    value = 5\n    print(get_rows(filename, value))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a program in Python that takes in a CSV and a value, and returns only the rows that have that value.\n\n### Input:\n5\n\n### Output:\n\"\"\"\nreturn only the rows that have that value from a csv\n\"\"\"\n\nimport csv\n\ndef get_rows(filename, value):\n    rows = []\n    with open(filename, newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            if int(row[0]) == value:\n                rows.append(row)\n    return rows\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    value = 5\n    print(get_rows(filename, value))","tok_input_length":154,"tok_output_length":101,"system_prompt":"","index":7927}
{"question":"Write a Python class to modify the case of the string","input":"A String with the text: \"Hello World\"","expected_output":"class StringCaseModifier:\n    def __init__(self, string):\n        self.string = string\n\n    def to_upper(self):\n        return self.string.upper()\n\n    def to_lower(self):\n        return self.string.lower()\n    \n    def to_title(self):\n        return self.string.title()\n\nif __name__ == '__main__':\n    test_string = 'Hello World'\n    string_modifier = StringCaseModifier(test_string)\n    print(string_modifier.to_upper())\n    print(string_modifier.to_lower())\n    print(string_modifier.to_title())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to modify the case of the string\n\n### Input:\nA String with the text: \"Hello World\"\n\n### Output:\nclass StringCaseModifier:\n    def __init__(self, string):\n        self.string = string\n\n    def to_upper(self):\n        return self.string.upper()\n\n    def to_lower(self):\n        return self.string.lower()\n    \n    def to_title(self):\n        return self.string.title()\n\nif __name__ == '__main__':\n    test_string = 'Hello World'\n    string_modifier = StringCaseModifier(test_string)\n    print(string_modifier.to_upper())\n    print(string_modifier.to_lower())\n    print(string_modifier.to_title())","tok_input_length":154,"tok_output_length":105,"system_prompt":"","index":468}
{"question":"Design a Python program to print all prime numbers between 0 and a given number.","input":"30","expected_output":"def is_prime(num):\n    #Ignore negative numbers and zero\n    if num < 2:\n        return False\n    \n    #Return true if num is prime\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n#Print all prime numbers between 0 and a given number\nnum_input = int(input(\"Enter a number: \"))\nfor i in range(num_input):\n    if is_prime(i):\n        print(i, \"is a prime number\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to print all prime numbers between 0 and a given number.\n\n### Input:\n30\n\n### Output:\ndef is_prime(num):\n    #Ignore negative numbers and zero\n    if num < 2:\n        return False\n    \n    #Return true if num is prime\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n#Print all prime numbers between 0 and a given number\nnum_input = int(input(\"Enter a number: \"))\nfor i in range(num_input):\n    if is_prime(i):\n        print(i, \"is a prime number\")","tok_input_length":154,"tok_output_length":108,"system_prompt":"","index":4459}
{"question":"Create a Python algorithm to predict the house prices using the given dataset.","input":"","expected_output":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data \ndata = pd.read_csv('housing_data.csv')\n\n# Features and labels\nX = data[['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors']]\ny = data['price']\n\n# Create the model \nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Predict the house prices\npredictions = model.predict(X)\n\n# Print the predictions\nprint('Predicted Prices:', predictions)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to predict the house prices using the given dataset.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data \ndata = pd.read_csv('housing_data.csv')\n\n# Features and labels\nX = data[['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors']]\ny = data['price']\n\n# Create the model \nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Predict the house prices\npredictions = model.predict(X)\n\n# Print the predictions\nprint('Predicted Prices:', predictions)","tok_input_length":154,"tok_output_length":113,"system_prompt":"","index":18527}
{"question":"Design a Python program to sort a list of dictionaries by a given field.","input":"[\n\t{\n\t\t\"name\": \"A\",\n\t\t\"age\": 25,\n\t\t\"salary\": 100\n\t},\n\t{\n\t\t\"name\": \"B\",\n\t\t\"age\": 35,\n\t\t\"salary\": 200\n\t},\n\t{\n\t\t\"name\": \"C\",\n\t\t\"age\": 15,\n\t\t\"salary\": 50\n\t},\n]","expected_output":"def sort_dicts_by_field(dict_list, field):\n    sorted_list = sorted(dict_list, key=lambda k: k[field])\n    return sorted_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to sort a list of dictionaries by a given field.\n\n### Input:\n[\n\t{\n\t\t\"name\": \"A\",\n\t\t\"age\": 25,\n\t\t\"salary\": 100\n\t},\n\t{\n\t\t\"name\": \"B\",\n\t\t\"age\": 35,\n\t\t\"salary\": 200\n\t},\n\t{\n\t\t\"name\": \"C\",\n\t\t\"age\": 15,\n\t\t\"salary\": 50\n\t},\n]\n\n### Output:\ndef sort_dicts_by_field(dict_list, field):\n    sorted_list = sorted(dict_list, key=lambda k: k[field])\n    return sorted_list","tok_input_length":155,"tok_output_length":30,"system_prompt":"","index":10318}
{"question":"Write a python script that transforms the data from a news article into a structured format.","input":"A revered American Nobel laureate, Bob Dylan, has won the 2016 Nobel Prize for Literature for \"having created new poetic expressions within the great American song tradition\".","expected_output":"import json\n\narticle_data = {\n    'name': 'Bob Dylan', \n    'prize': 'Nobel Prize for Literature',\n    'year': 2016,\n    'description': 'having created new poetic expressions within the great American song tradition'\n}\n\nwith open('article_data.json', 'w') as outfile:  \n    json.dump(article_data, outfile)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that transforms the data from a news article into a structured format.\n\n### Input:\nA revered American Nobel laureate, Bob Dylan, has won the 2016 Nobel Prize for Literature for \"having created new poetic expressions within the great American song tradition\".\n\n### Output:\nimport json\n\narticle_data = {\n    'name': 'Bob Dylan', \n    'prize': 'Nobel Prize for Literature',\n    'year': 2016,\n    'description': 'having created new poetic expressions within the great American song tradition'\n}\n\nwith open('article_data.json', 'w') as outfile:  \n    json.dump(article_data, outfile)","tok_input_length":155,"tok_output_length":77,"system_prompt":"","index":17335}
{"question":"Write a Python code to find the RMSE (root mean squared error) of two given lists.","input":"list1 = [1, 2, 3]\nlist2 = [2, 3, 4]","expected_output":"import math \n\ndef rmse(list1, list2): \n    mean_square = 0\n    for i in range(len(list1)):\n        mean_square += math.pow((list1[i] - list2[i]), 2)\n    return math.sqrt(mean_square\/len(list1))\n\nrmse_value = rmse(list1, list2)\nprint(\"Root Mean Square Error is:\", rmse_value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the RMSE (root mean squared error) of two given lists.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]\n\n### Output:\nimport math \n\ndef rmse(list1, list2): \n    mean_square = 0\n    for i in range(len(list1)):\n        mean_square += math.pow((list1[i] - list2[i]), 2)\n    return math.sqrt(mean_square\/len(list1))\n\nrmse_value = rmse(list1, list2)\nprint(\"Root Mean Square Error is:\", rmse_value)","tok_input_length":155,"tok_output_length":84,"system_prompt":"","index":14526}
{"question":"Use a basic linear regression model in Python to predict the price of a house based on its size and number of rooms.","input":"Example data: \nSize: 500, Rooms: 4","expected_output":"import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Create\ndata = {'Size': [500], \n'Rooms': [4]}\n\ndf = pd.DataFrame(data)\n\n# Train\nX = df[['Size','Rooms']] \nY = df['Price'] \n  \nreg = LinearRegression().fit(X, Y) \n  \n# Predict\nreg.predict([[500,4]]) # Predicted price: 1715.667543","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a basic linear regression model in Python to predict the price of a house based on its size and number of rooms.\n\n### Input:\nExample data: \nSize: 500, Rooms: 4\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Create\ndata = {'Size': [500], \n'Rooms': [4]}\n\ndf = pd.DataFrame(data)\n\n# Train\nX = df[['Size','Rooms']] \nY = df['Price'] \n  \nreg = LinearRegression().fit(X, Y) \n  \n# Predict\nreg.predict([[500,4]]) # Predicted price: 1715.667543","tok_input_length":155,"tok_output_length":90,"system_prompt":"","index":2336}
{"question":"Create a Python program which sorts elements of an array in ascending order.","input":"[5, 2, 1, 3, 6, 4]","expected_output":"def sort_ascending(array):\n    for i in range(len(array)-1):\n        for j in range(i, len(array)):\n            if array[i] > array[j]:\n                array[i], array[j] = array[j], array[i]\n\n    return array\n\nsort_ascending([5, 2, 1, 3, 6, 4]) # Output = [1, 2, 3, 4, 5, 6]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which sorts elements of an array in ascending order.\n\n### Input:\n[5, 2, 1, 3, 6, 4]\n\n### Output:\ndef sort_ascending(array):\n    for i in range(len(array)-1):\n        for j in range(i, len(array)):\n            if array[i] > array[j]:\n                array[i], array[j] = array[j], array[i]\n\n    return array\n\nsort_ascending([5, 2, 1, 3, 6, 4]) # Output = [1, 2, 3, 4, 5, 6]","tok_input_length":155,"tok_output_length":96,"system_prompt":"","index":5210}
{"question":"Write a python program to find the longest substring from a given string, which contains all vowels.","input":"String = 'I love learning new languages'","expected_output":"def find_longest_substring(input_text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    longest_string = \"\"\n    for i in range(len(input_text)):\n        for j in range (i, len(input_text)):\n            sub_str = input_text[i:j + 1]\n            if all(char in sub_str for char in vowels) and len(sub_str) > len(longest_string):\n                longest_string = sub_str\n    return longest_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the longest substring from a given string, which contains all vowels.\n\n### Input:\nString = 'I love learning new languages'\n\n### Output:\ndef find_longest_substring(input_text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    longest_string = \"\"\n    for i in range(len(input_text)):\n        for j in range (i, len(input_text)):\n            sub_str = input_text[i:j + 1]\n            if all(char in sub_str for char in vowels) and len(sub_str) > len(longest_string):\n                longest_string = sub_str\n    return longest_string","tok_input_length":155,"tok_output_length":100,"system_prompt":"","index":6209}
{"question":"Create a Python function that returns all the prime numbers between 1 and a given number.","input":"Number: 25","expected_output":"def get_primes(n):\n primes = []\n for num in range(2, n + 1):\n is_prime = True\n for divisor in range(2, num):\n if num % divisor == 0:\n is_prime = False\n break\n \n if is_prime:\n primes.append(num)\n \n return primes\n \nprimes = get_primes(25)\nprint(primes) # prints [2, 3, 5, 7, 11, 13, 17, 19, 23]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that returns all the prime numbers between 1 and a given number.\n\n### Input:\nNumber: 25\n\n### Output:\ndef get_primes(n):\n primes = []\n for num in range(2, n + 1):\n is_prime = True\n for divisor in range(2, num):\n if num % divisor == 0:\n is_prime = False\n break\n \n if is_prime:\n primes.append(num)\n \n return primes\n \nprimes = get_primes(25)\nprint(primes) # prints [2, 3, 5, 7, 11, 13, 17, 19, 23]","tok_input_length":155,"tok_output_length":105,"system_prompt":"","index":15742}
{"question":"Write a Python program that prints out all the prime numbers between 0 and 100.","input":"","expected_output":"def isPrime(n):\n    \"\"\"\n    This function checks if a given number is a prime or not\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef printPrime():\n    \"\"\"\n    This function prints all the prime numbers in between 0 and 100\n    \"\"\"\n    for i in range(0, 101):\n        if isPrime(i):\n            print(i)\n\nprintPrime()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that prints out all the prime numbers between 0 and 100.\n\n### Input:\n\n\n### Output:\ndef isPrime(n):\n    \"\"\"\n    This function checks if a given number is a prime or not\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef printPrime():\n    \"\"\"\n    This function prints all the prime numbers in between 0 and 100\n    \"\"\"\n    for i in range(0, 101):\n        if isPrime(i):\n            print(i)\n\nprintPrime()","tok_input_length":155,"tok_output_length":110,"system_prompt":"","index":4537}
{"question":"Create a program in Python that computes the n-th Fibonacci number.","input":"15","expected_output":"def calculate_fibonacci(n):\n    \"\"\"\n    Calculates the n-th Fibonacci number.\n    Args:\n        n: the n-th Fibonacci number.\n    Returns:\n        The Fibonacci number at a given index.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Calculate n-th Fibonacci number\n    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n\nfib = calculate_fibonacci(15)\nprint(fib)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that computes the n-th Fibonacci number.\n\n### Input:\n15\n\n### Output:\ndef calculate_fibonacci(n):\n    \"\"\"\n    Calculates the n-th Fibonacci number.\n    Args:\n        n: the n-th Fibonacci number.\n    Returns:\n        The Fibonacci number at a given index.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Calculate n-th Fibonacci number\n    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n\nfib = calculate_fibonacci(15)\nprint(fib)","tok_input_length":155,"tok_output_length":113,"system_prompt":"","index":17134}
{"question":"Given a list of dictionaries, write a python program to find the item with the highest value for the key 'price'.","input":"[\n {'name': 'apple', 'price': 3}, \n {'name': 'orange', 'price': 2}, \n {'name': 'banana', 'price': 6}, \n {'name': 'kiwi', 'price': 4}\n]","expected_output":"maxVal = 0\nmaxItem = {}\nfor item in items:\n if item['price'] > maxVal:\n maxVal = item['price']\n maxItem = item\n\nprint(\"The item with the highest price is: \", maxItem)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of dictionaries, write a python program to find the item with the highest value for the key 'price'.\n\n### Input:\n[\n {'name': 'apple', 'price': 3}, \n {'name': 'orange', 'price': 2}, \n {'name': 'banana', 'price': 6}, \n {'name': 'kiwi', 'price': 4}\n]\n\n### Output:\nmaxVal = 0\nmaxItem = {}\nfor item in items:\n if item['price'] > maxVal:\n maxVal = item['price']\n maxItem = item\n\nprint(\"The item with the highest price is: \", maxItem)","tok_input_length":156,"tok_output_length":51,"system_prompt":"","index":15027}
{"question":"Create an algorithm in Python to group the numbers of an array in such a way that the total sum of each group is equal.","input":"[1, 2, 3, 4, 5, 6, 7, 8]","expected_output":"def group_equal_sum(arr):\n    result = []\n    arr.sort()\n\n    while len(arr) > 0:\n        group = [arr[0]]\n        arr.remove(arr[0])\n\n        sum_ = group[0]\n        while sum_ in arr:\n            group.append(sum_)\n            arr.remove(sum_)\n            sum_ += 1\n\n        result.append(group)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to group the numbers of an array in such a way that the total sum of each group is equal.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8]\n\n### Output:\ndef group_equal_sum(arr):\n    result = []\n    arr.sort()\n\n    while len(arr) > 0:\n        group = [arr[0]]\n        arr.remove(arr[0])\n\n        sum_ = group[0]\n        while sum_ in arr:\n            group.append(sum_)\n            arr.remove(sum_)\n            sum_ += 1\n\n        result.append(group)\n    return result","tok_input_length":156,"tok_output_length":79,"system_prompt":"","index":6436}
{"question":"Create a Python program to find all elements in a list that appear more than once.","input":"list=[1, 2, 3, 2, 4, 5, 1, 0]","expected_output":"def duplicate_elements(lst):\n \n seen_elements = set()\n duplicates = set()\n \n for element in lst:\n if element in seen_elements:\n duplicates.add(element)\n else:\n seen_elements.add(element)\n \n return duplicates\n \nlist = [1, 2, 3, 2, 4, 5, 1, 0]\nduplicates = duplicate_elements(list)\nprint(duplicates) # {1, 2}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find all elements in a list that appear more than once.\n\n### Input:\nlist=[1, 2, 3, 2, 4, 5, 1, 0]\n\n### Output:\ndef duplicate_elements(lst):\n \n seen_elements = set()\n duplicates = set()\n \n for element in lst:\n if element in seen_elements:\n duplicates.add(element)\n else:\n seen_elements.add(element)\n \n return duplicates\n \nlist = [1, 2, 3, 2, 4, 5, 1, 0]\nduplicates = duplicate_elements(list)\nprint(duplicates) # {1, 2}","tok_input_length":156,"tok_output_length":87,"system_prompt":"","index":14392}
{"question":"Perform linear regression on a set of data points using only basic Python syntax and libraries.","input":"X=[1,3,4,5]\nY=[0,3,2,5]","expected_output":"# import the necessary libraries\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# create the arrays\nx = np.array(X).reshape(-1,1)\ny = np.array(Y).reshape(-1,1)\n\n# create and fit the model\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# print the model coefficients\nprint('Intercept: ', model.intercept_)\nprint('Coefficient: ', model.coef_)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform linear regression on a set of data points using only basic Python syntax and libraries.\n\n### Input:\nX=[1,3,4,5]\nY=[0,3,2,5]\n\n### Output:\n# import the necessary libraries\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# create the arrays\nx = np.array(X).reshape(-1,1)\ny = np.array(Y).reshape(-1,1)\n\n# create and fit the model\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# print the model coefficients\nprint('Intercept: ', model.intercept_)\nprint('Coefficient: ', model.coef_)","tok_input_length":156,"tok_output_length":92,"system_prompt":"","index":15124}
{"question":"Create a Python program to generate a 2D array of a defined size and fill it with random numbers.","input":"Size of the array: 10x10","expected_output":"import random\n\n# define the size of the array\nx, y = 10, 10\n\n# create an empty array of the given size\narr = [[0 for j in range(x)] for i in range(y)]\n\n# fill the array with random numbers\nfor i in range(x):\n for j in range(y):\n arr[i][j] = random.randint(0, 9)\n\n# print the array\nfor i in range(x):\n print(arr[i])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a 2D array of a defined size and fill it with random numbers.\n\n### Input:\nSize of the array: 10x10\n\n### Output:\nimport random\n\n# define the size of the array\nx, y = 10, 10\n\n# create an empty array of the given size\narr = [[0 for j in range(x)] for i in range(y)]\n\n# fill the array with random numbers\nfor i in range(x):\n for j in range(y):\n arr[i][j] = random.randint(0, 9)\n\n# print the array\nfor i in range(x):\n print(arr[i])","tok_input_length":156,"tok_output_length":97,"system_prompt":"","index":1743}
{"question":"Code a web scraper with Python, using BeautifulSoup and Requests, that extracts product prices from an online store.","input":"url: https:\/\/example.com\/store","expected_output":"import requests\nimport bs4\n \n# Make the request\nurl = 'https:\/\/example.com\/store'\nresponse = requests.get(url)\n \n# Create the soup object\nsoup = bs4.BeautifulSoup(response.text, 'html.parser')\n \n# Extract the prices\nprices = []\nfor item in soup.find_all('div', {'class': 'product'}):\n    price = item.find('div', {'class': 'price'}).text\n    prices.append(price)\n \nprint(prices)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a web scraper with Python, using BeautifulSoup and Requests, that extracts product prices from an online store.\n\n### Input:\nurl: https:\/\/example.com\/store\n\n### Output:\nimport requests\nimport bs4\n \n# Make the request\nurl = 'https:\/\/example.com\/store'\nresponse = requests.get(url)\n \n# Create the soup object\nsoup = bs4.BeautifulSoup(response.text, 'html.parser')\n \n# Extract the prices\nprices = []\nfor item in soup.find_all('div', {'class': 'product'}):\n    price = item.find('div', {'class': 'price'}).text\n    prices.append(price)\n \nprint(prices)","tok_input_length":156,"tok_output_length":100,"system_prompt":"","index":4096}
{"question":"Write a Python program to align the text in columns.","input":"text = \"This is a test text to be aligned in columns\"","expected_output":"def align_columns(text):\n        words = text.split(\" \")\n        max_len = 0\n        for w in words:\n            if len(w) > max_len:\n                max_len = len(w)\n        for i, w in enumerate(words):\n            words[i] = w.ljust(max_len) \n        return \" \".join(words)\n\nif __name__ == '__main__':\n    text = \"This is a test text to be aligned in columns\"\n    print(\"Aligned in columns:\", align_columns(text))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to align the text in columns.\n\n### Input:\ntext = \"This is a test text to be aligned in columns\"\n\n### Output:\ndef align_columns(text):\n        words = text.split(\" \")\n        max_len = 0\n        for w in words:\n            if len(w) > max_len:\n                max_len = len(w)\n        for i, w in enumerate(words):\n            words[i] = w.ljust(max_len) \n        return \" \".join(words)\n\nif __name__ == '__main__':\n    text = \"This is a test text to be aligned in columns\"\n    print(\"Aligned in columns:\", align_columns(text))","tok_input_length":156,"tok_output_length":104,"system_prompt":"","index":13728}
{"question":"Create a basic web scraper in Python using the BeautifulSoup library and the Requests library.","input":"Not applicable","expected_output":"import requests \nfrom bs4 import BeautifulSoup\n\n# URL of the site to scrape\nurl = 'https:\/\/www.example.com'\n\n# Send the request to the URL\nresponse = requests.get(url)\n\n# Parse the html content\nhtml_soup = BeautifulSoup(response.text, 'html.parser')\n\n# Get all of the <div> elements with a class of 'content'\ncontent = html_soup.find_all('div', class_ = 'content')\n\n# Iterate over the content and print out the text\nfor item in content:\n print(item.text.strip())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web scraper in Python using the BeautifulSoup library and the Requests library.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup\n\n# URL of the site to scrape\nurl = 'https:\/\/www.example.com'\n\n# Send the request to the URL\nresponse = requests.get(url)\n\n# Parse the html content\nhtml_soup = BeautifulSoup(response.text, 'html.parser')\n\n# Get all of the <div> elements with a class of 'content'\ncontent = html_soup.find_all('div', class_ = 'content')\n\n# Iterate over the content and print out the text\nfor item in content:\n print(item.text.strip())","tok_input_length":156,"tok_output_length":110,"system_prompt":"","index":2983}
{"question":"Write a function in Python to generate n numbers of Fibonacci series.","input":"","expected_output":"def fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to generate n numbers of Fibonacci series.\n\n### Input:\n\n\n### Output:\ndef fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34","tok_input_length":156,"tok_output_length":116,"system_prompt":"","index":944}
{"question":"Edit the code to make it in a Python program to check if a number is divisible by 5 and 11.","input":"def isDivisible(num): \n    if num % 5 == 0: \n        print(\"Number is divisible by 5\") \n    if num % 11 == 0:\n        print(\"Number is divisible by 11\")","expected_output":"def isDivisible(num): \n    if num % 5 == 0 and num % 11 == 0:\n        print(\"Number is divisible by 5 and 11\") \n    else:\n        print(\"Number is not divisible by 5 and 11\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the code to make it in a Python program to check if a number is divisible by 5 and 11.\n\n### Input:\ndef isDivisible(num): \n    if num % 5 == 0: \n        print(\"Number is divisible by 5\") \n    if num % 11 == 0:\n        print(\"Number is divisible by 11\")\n\n### Output:\ndef isDivisible(num): \n    if num % 5 == 0 and num % 11 == 0:\n        print(\"Number is divisible by 5 and 11\") \n    else:\n        print(\"Number is not divisible by 5 and 11\")","tok_input_length":157,"tok_output_length":57,"system_prompt":"","index":7803}
{"question":"Write a Python program to append multiple lists into one list.","input":"list1 = [2, 3, 4]\nlist2 = [5, 6, 7]\nlist3 = [8, 9, 10]","expected_output":"list1 = [2, 3, 4]\nlist2 = [5, 6, 7]\nlist3 = [8, 9, 10]\n\nlist = list1 + list2 + list3\nprint(list) \n# Output: [2, 3, 4, 5, 6, 7, 8, 9, 10]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to append multiple lists into one list.\n\n### Input:\nlist1 = [2, 3, 4]\nlist2 = [5, 6, 7]\nlist3 = [8, 9, 10]\n\n### Output:\nlist1 = [2, 3, 4]\nlist2 = [5, 6, 7]\nlist3 = [8, 9, 10]\n\nlist = list1 + list2 + list3\nprint(list) \n# Output: [2, 3, 4, 5, 6, 7, 8, 9, 10]","tok_input_length":157,"tok_output_length":82,"system_prompt":"","index":6350}
{"question":"Create a Python program to search through a list of given strings and return the substrings that start with the same letter.","input":"strings = ['apple', 'mango', 'carrot', 'dog']","expected_output":"def find_same_letter_substrings(strings):\n result = []\n for string in strings:\n if string[0] in [x[0] for x in strings if x != string]:\n result.append(string)\n return result\n\nif __name__ == '__main__':\n strings = ['apple', 'mango', 'carrot', 'dog']\n print(find_same_letter_substrings(strings))\n# Result: ['apple', 'mango', 'carrot']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search through a list of given strings and return the substrings that start with the same letter.\n\n### Input:\nstrings = ['apple', 'mango', 'carrot', 'dog']\n\n### Output:\ndef find_same_letter_substrings(strings):\n result = []\n for string in strings:\n if string[0] in [x[0] for x in strings if x != string]:\n result.append(string)\n return result\n\nif __name__ == '__main__':\n strings = ['apple', 'mango', 'carrot', 'dog']\n print(find_same_letter_substrings(strings))\n# Result: ['apple', 'mango', 'carrot']","tok_input_length":157,"tok_output_length":90,"system_prompt":"","index":12421}
{"question":"Generate a Python program to generate JSON output for reading all the records from a given table in the database.","input":"Sample table 1 with columns: id, name, and address","expected_output":"import sqlite3\nimport json\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\nc.execute('SELECT * FROM table1 WHERE 1')\nrows = c.fetchall()\n\ndata = []\nfor row in rows:\n  record = {\n    'id': row[0], \n    'name': row[1], \n    'address': row[2]\n  }\n  data.append(record)\n\njson_data = json.dumps(data)\nprint(json_data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate JSON output for reading all the records from a given table in the database.\n\n### Input:\nSample table 1 with columns: id, name, and address\n\n### Output:\nimport sqlite3\nimport json\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\nc.execute('SELECT * FROM table1 WHERE 1')\nrows = c.fetchall()\n\ndata = []\nfor row in rows:\n  record = {\n    'id': row[0], \n    'name': row[1], \n    'address': row[2]\n  }\n  data.append(record)\n\njson_data = json.dumps(data)\nprint(json_data)","tok_input_length":157,"tok_output_length":95,"system_prompt":"","index":14725}
{"question":"Write a Python program that takes a positive integer and prints the squares of all the numbers from 1 to the given number.","input":"Given number: 5","expected_output":"# Program to print the squares of all \n# the numbers from 1 to the given number \n  \n# Positive number taken as an input \nnum = 5\n  \n# Iterate from 1 to num \nfor i in range(1, num+1): \n  \n    # Calculate the square \n    value = i**2\n      \n    # Print the value \n    print(value)\n\n# Output:\n# 1\n# 4\n# 9\n# 16\n# 25","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a positive integer and prints the squares of all the numbers from 1 to the given number.\n\n### Input:\nGiven number: 5\n\n### Output:\n# Program to print the squares of all \n# the numbers from 1 to the given number \n  \n# Positive number taken as an input \nnum = 5\n  \n# Iterate from 1 to num \nfor i in range(1, num+1): \n  \n    # Calculate the square \n    value = i**2\n      \n    # Print the value \n    print(value)\n\n# Output:\n# 1\n# 4\n# 9\n# 16\n# 25","tok_input_length":157,"tok_output_length":99,"system_prompt":"","index":2237}
{"question":"Convert this sql query into a python program","input":"SELECT * FROM orders\nWHERE YEAR(order_date) = 2020","expected_output":"import datetime, pyodbc\n\n# Establish a connection to the database\nconn = pyodbc.connect(\"<connection details>\")\ncursor = conn.cursor()\n\n# Get the year of the order date\nsql = \"SELECT * FROM orders\"\nquery_date = datetime.date.today().year\nwhere_clause = \"WHERE YEAR(order_date) = ?\"\n\n# Execute the query\ncursor.execute(sql + \" \" + where_clause, query_date)\nresults = cursor.fetchall()\n\n# Output the results\nfor result in results:\n    print(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this sql query into a python program\n\n### Input:\nSELECT * FROM orders\nWHERE YEAR(order_date) = 2020\n\n### Output:\nimport datetime, pyodbc\n\n# Establish a connection to the database\nconn = pyodbc.connect(\"<connection details>\")\ncursor = conn.cursor()\n\n# Get the year of the order date\nsql = \"SELECT * FROM orders\"\nquery_date = datetime.date.today().year\nwhere_clause = \"WHERE YEAR(order_date) = ?\"\n\n# Execute the query\ncursor.execute(sql + \" \" + where_clause, query_date)\nresults = cursor.fetchall()\n\n# Output the results\nfor result in results:\n    print(result)","tok_input_length":157,"tok_output_length":106,"system_prompt":"","index":487}
{"question":"Create a Python program to calculate the area of given shapes (triangle, square and rectangle).","input":"Not applicable","expected_output":"def calculate_area(shape, *args):\n if shape == 'triangle':\n base= args[0]\n height= args[1]\n return (0.5 * base * height)\n\n elif shape == 'square':\n side = args[0]\n return (side ** 2)\n\n elif shape == 'rectangle':\n length = args[0]\n breadth = args[1]\n return (length * breadth)\n\n elif shape == 'circle':\n radius = args[0]\n return (3.142 * radius * radius)\n\nelse:\n return \"Incorrect shape\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the area of given shapes (triangle, square and rectangle).\n\n### Input:\nNot applicable\n\n### Output:\ndef calculate_area(shape, *args):\n if shape == 'triangle':\n base= args[0]\n height= args[1]\n return (0.5 * base * height)\n\n elif shape == 'square':\n side = args[0]\n return (side ** 2)\n\n elif shape == 'rectangle':\n length = args[0]\n breadth = args[1]\n return (length * breadth)\n\n elif shape == 'circle':\n radius = args[0]\n return (3.142 * radius * radius)\n\nelse:\n return \"Incorrect shape\"","tok_input_length":157,"tok_output_length":109,"system_prompt":"","index":4403}
{"question":"Create a linear regression model in Python to predict the number of visits to a particular website.","input":"","expected_output":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# input data\nX = np.array([[1, 1], [2, 2], [3, 3], [4, 4]])\ny = np.array([5, 10, 15, 20])\n\n# create and fit the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# make a prediction\ny_pred = model.predict([[5, 5]])\nprint(round(y_pred[0], 2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linear regression model in Python to predict the number of visits to a particular website.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# input data\nX = np.array([[1, 1], [2, 2], [3, 3], [4, 4]])\ny = np.array([5, 10, 15, 20])\n\n# create and fit the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# make a prediction\ny_pred = model.predict([[5, 5]])\nprint(round(y_pred[0], 2))","tok_input_length":157,"tok_output_length":112,"system_prompt":"","index":8197}
{"question":"Write a python program for sentiment analysis on movie reviews.","input":"No input","expected_output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n \nsentiment_analyzer = SentimentIntensityAnalyzer()\n \ndef detect_sentiment(review):\n    scores = sentiment_analyzer.polarity_scores(review)\n    if scores['compound'] > 0.05:\n        return \"positive\"\n    elif scores['compound'] < -0.05:\n        return \"negative\"\n    else:\n        return \"neutral\"\n    \nreviews = [\"This is a great movie!\", \"This movie is terrible\"]\n \nfor review in reviews:\n    print(detect_sentiment(review))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program for sentiment analysis on movie reviews.\n\n### Input:\nNo input\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n \nsentiment_analyzer = SentimentIntensityAnalyzer()\n \ndef detect_sentiment(review):\n    scores = sentiment_analyzer.polarity_scores(review)\n    if scores['compound'] > 0.05:\n        return \"positive\"\n    elif scores['compound'] < -0.05:\n        return \"negative\"\n    else:\n        return \"neutral\"\n    \nreviews = [\"This is a great movie!\", \"This movie is terrible\"]\n \nfor review in reviews:\n    print(detect_sentiment(review))","tok_input_length":157,"tok_output_length":116,"system_prompt":"","index":7237}
{"question":"Format the following code to meet the style guidelines of Python.","input":"class Building():\n    def __init__(self,size ='medium'):\n        self.size = size\n        if self.size == 'small':\n            self.rooms = 2\n        elif self.size == 'medium':\n            self.rooms = 3\n        else:\n            self.rooms = 4","expected_output":"class Building:\n    def __init__(self, size=\"medium\"):\n        self.size = size\n        if self.size == \"small\":\n            self.rooms = 2\n        elif self.size == \"medium\":\n            self.rooms = 3\n        else:\n            self.rooms = 4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormat the following code to meet the style guidelines of Python.\n\n### Input:\nclass Building():\n    def __init__(self,size ='medium'):\n        self.size = size\n        if self.size == 'small':\n            self.rooms = 2\n        elif self.size == 'medium':\n            self.rooms = 3\n        else:\n            self.rooms = 4\n\n### Output:\nclass Building:\n    def __init__(self, size=\"medium\"):\n        self.size = size\n        if self.size == \"small\":\n            self.rooms = 2\n        elif self.size == \"medium\":\n            self.rooms = 3\n        else:\n            self.rooms = 4","tok_input_length":158,"tok_output_length":60,"system_prompt":"","index":13122}
{"question":"Suggest a completion for processing a web form using Python.","input":"import requests\n\n# Get form's (POST) data\ndata = {\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"message\": \"Hello\"\n}","expected_output":"import requests\n\n# Get form's (POST) data\ndata = {\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"message\": \"Hello\"\n}\n\n# Send POST request\nr = requests.post(\"http:\/\/www.example.com\/submit-form.php\", params=data)\n\n# Get web form's response\nprint(r.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for processing a web form using Python.\n\n### Input:\nimport requests\n\n# Get form's (POST) data\ndata = {\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"message\": \"Hello\"\n}\n\n### Output:\nimport requests\n\n# Get form's (POST) data\ndata = {\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"message\": \"Hello\"\n}\n\n# Send POST request\nr = requests.post(\"http:\/\/www.example.com\/submit-form.php\", params=data)\n\n# Get web form's response\nprint(r.text)","tok_input_length":158,"tok_output_length":77,"system_prompt":"","index":10152}
{"question":"Create a program in Python to take one input argument, a string, and return a new string with the last character of the string repeating n times, where n is the length of the string.","input":"","expected_output":"def repeat_last_character(s):\n    # base case: if string is empty\n    if len(s) == 0:\n        return ''\n\n    final_char = s[-1] # last character of the string\n    result = final_char * len(s) # repeat the last character n times, where n is the length of the string\n\n    return result\n\n# Example\nstring = 'Hello'\nprint(repeat_last_character(string)) # ooooo","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to take one input argument, a string, and return a new string with the last character of the string repeating n times, where n is the length of the string.\n\n### Input:\n\n\n### Output:\ndef repeat_last_character(s):\n    # base case: if string is empty\n    if len(s) == 0:\n        return ''\n\n    final_char = s[-1] # last character of the string\n    result = final_char * len(s) # repeat the last character n times, where n is the length of the string\n\n    return result\n\n# Example\nstring = 'Hello'\nprint(repeat_last_character(string)) # ooooo","tok_input_length":158,"tok_output_length":92,"system_prompt":"","index":3405}
{"question":"Create a Python program that takes two strings as input, then counts and returns the number of characters that are different between the two strings.","input":"\"Hello World\", \"Hello!\"","expected_output":"def count_difference(str1, str2): \n    # the number of characters that are different \n    diff = 0\n    # loop through the length \n    for i in range(min(len(str1), len(str2))): \n        # check if characters are different \n        if str1[i] != str2[i]: \n            diff += 1\n    # returning final result \n    return diff\n\nprint(count_difference(\"Hello World\", \"Hello!\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two strings as input, then counts and returns the number of characters that are different between the two strings.\n\n### Input:\n\"Hello World\", \"Hello!\"\n\n### Output:\ndef count_difference(str1, str2): \n    # the number of characters that are different \n    diff = 0\n    # loop through the length \n    for i in range(min(len(str1), len(str2))): \n        # check if characters are different \n        if str1[i] != str2[i]: \n            diff += 1\n    # returning final result \n    return diff\n\nprint(count_difference(\"Hello World\", \"Hello!\"))","tok_input_length":158,"tok_output_length":97,"system_prompt":"","index":2016}
{"question":"Come up with a python program to find the longest common prefix in a list of strings.","input":"[\"hello\", \"hey\", \"hi\", \"have\"]","expected_output":"def longest_common_prefix(strings):\n    if len(strings) == 0: \n        return ''\n\n    prefix = strings[0]\n    for s in strings:\n        i = 0 \n        while i < len(prefix) and i < len(s) and s[i] == prefix[i]: \n            i += 1 \n        prefix = prefix[:i] \n    return prefix \n\nprint(longest_common_prefix([\"hello\", \"hey\", \"hi\", \"have\"]))  # Output: h","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a python program to find the longest common prefix in a list of strings.\n\n### Input:\n[\"hello\", \"hey\", \"hi\", \"have\"]\n\n### Output:\ndef longest_common_prefix(strings):\n    if len(strings) == 0: \n        return ''\n\n    prefix = strings[0]\n    for s in strings:\n        i = 0 \n        while i < len(prefix) and i < len(s) and s[i] == prefix[i]: \n            i += 1 \n        prefix = prefix[:i] \n    return prefix \n\nprint(longest_common_prefix([\"hello\", \"hey\", \"hi\", \"have\"]))  # Output: h","tok_input_length":158,"tok_output_length":101,"system_prompt":"","index":13930}
{"question":"Create an AI assistant in Python that can generate a forecast with any given dataset.","input":"weather dataset: dates, temperature in Celsius, humidity","expected_output":"from sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# Read dataset\ndf = pd.read_csv('weather.csv')\n\n# Define features and target\nX = df[['date', 'temp']]\ny = df['humidity']\n\n# Create Linear Regression model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Display results\nprint('Forecasted Humidity')\nfor i in range(len(predictions)):\n    print('{:.2f}'.format(predictions[i]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI assistant in Python that can generate a forecast with any given dataset.\n\n### Input:\nweather dataset: dates, temperature in Celsius, humidity\n\n### Output:\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# Read dataset\ndf = pd.read_csv('weather.csv')\n\n# Define features and target\nX = df[['date', 'temp']]\ny = df['humidity']\n\n# Create Linear Regression model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Display results\nprint('Forecasted Humidity')\nfor i in range(len(predictions)):\n    print('{:.2f}'.format(predictions[i]))","tok_input_length":158,"tok_output_length":104,"system_prompt":"","index":17600}
{"question":"Create a machine learning model in Python to predict if a customer will place a new order based on past sales.","input":"","expected_output":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\ndata = pd.read_csv('dataset.csv')\n\nX = data.drop('label', axis=1).to_numpy()\ny = data['label'].to_numpy()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict if a customer will place a new order based on past sales.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\ndata = pd.read_csv('dataset.csv')\n\nX = data.drop('label', axis=1).to_numpy()\ny = data['label'].to_numpy()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)","tok_input_length":158,"tok_output_length":109,"system_prompt":"","index":9740}
{"question":"Create a web scraper in Python to extract data from a given website.","input":"https:\/\/www.example.com\/","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com\/'\n\nresponse = requests.get(url) #get the response\nhtml_data = response.text # get the data in text\n\nsoup = BeautifulSoup(html_data, 'html.parser') #parse the data\n\nfor item in soup.find_all('div', {'class': 'post-content'}): #find all elements with the class 'post-content' and loop through them\n    content = item.get_text() #get the text content\n    print(content) #print the content","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract data from a given website.\n\n### Input:\nhttps:\/\/www.example.com\/\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com\/'\n\nresponse = requests.get(url) #get the response\nhtml_data = response.text # get the data in text\n\nsoup = BeautifulSoup(html_data, 'html.parser') #parse the data\n\nfor item in soup.find_all('div', {'class': 'post-content'}): #find all elements with the class 'post-content' and loop through them\n    content = item.get_text() #get the text content\n    print(content) #print the content","tok_input_length":158,"tok_output_length":111,"system_prompt":"","index":10898}
{"question":"Create a Python script to transform given numbers into a digital clock format.","input":"Not applicable","expected_output":"# A Program to convert given number to digital clock format\ndef num2clock(n):\n  hour = int (n \/ 3600)\n  minute = int ((n % 3600) \/ 60)\n  second = int ((n % 3600) % 60)\n  return str(hour).zfill(2) + ':' + str(minute).zfill(2) + ':' + str(second).zfill(2) \n\n# Main\nn = int(input((\"Enter a number: \")))\nprint(num2clock(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to transform given numbers into a digital clock format.\n\n### Input:\nNot applicable\n\n### Output:\n# A Program to convert given number to digital clock format\ndef num2clock(n):\n  hour = int (n \/ 3600)\n  minute = int ((n % 3600) \/ 60)\n  second = int ((n % 3600) % 60)\n  return str(hour).zfill(2) + ':' + str(minute).zfill(2) + ':' + str(second).zfill(2) \n\n# Main\nn = int(input((\"Enter a number: \")))\nprint(num2clock(n))","tok_input_length":158,"tok_output_length":114,"system_prompt":"","index":18303}
{"question":"Generate Python class to define and simulate a bouncing ball.","input":"","expected_output":"import math\n\nclass BouncingBall():\n    def __init__(self):\n        self.x = 0.0   # horizontal position \n        self.y = 5.0   # vertical position \n        self.vy = 0.2  # vertical velocity \n        self.g = 9.81  # gravitational acceleration \n\n    def update(self, dt):\n        self.y -= self.vy * dt\n        self.vy -= self.g * dt\n\n        if self.y <= 0:\n            self.y = 0\n            self.vy *= -0.9","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python class to define and simulate a bouncing ball.\n\n### Input:\n\n\n### Output:\nimport math\n\nclass BouncingBall():\n    def __init__(self):\n        self.x = 0.0   # horizontal position \n        self.y = 5.0   # vertical position \n        self.vy = 0.2  # vertical velocity \n        self.g = 9.81  # gravitational acceleration \n\n    def update(self, dt):\n        self.y -= self.vy * dt\n        self.vy -= self.g * dt\n\n        if self.y <= 0:\n            self.y = 0\n            self.vy *= -0.9","tok_input_length":158,"tok_output_length":120,"system_prompt":"","index":2447}
{"question":"Create a Python script using the twitter-text-python library that takes a tweet as input and returns the text of the tweet with all the hashtags and URLs converted to their original versions.","input":"Input tweet: \"Such a great #day today! Check out this link: http:\/\/example.com #cool\"","expected_output":"import twitter_text\n\ntweet_text = 'Such a great #day today! Check out this link: http:\/\/example.com #cool'\n\nparsed_tweet = twitter_text.Parser(tweet_text).parse()\n\n# Print the plain text of the tweet\nprint(parsed_tweet.plain_text)\n\n# Output: Such a great day today! Check out this link: http:\/\/example.com cool","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script using the twitter-text-python library that takes a tweet as input and returns the text of the tweet with all the hashtags and URLs converted to their original versions.\n\n### Input:\nInput tweet: \"Such a great #day today! Check out this link: http:\/\/example.com #cool\"\n\n### Output:\nimport twitter_text\n\ntweet_text = 'Such a great #day today! Check out this link: http:\/\/example.com #cool'\n\nparsed_tweet = twitter_text.Parser(tweet_text).parse()\n\n# Print the plain text of the tweet\nprint(parsed_tweet.plain_text)\n\n# Output: Such a great day today! Check out this link: http:\/\/example.com cool","tok_input_length":159,"tok_output_length":74,"system_prompt":"","index":15501}
{"question":"Can you design a function in Python to sort a list of tuples based on the second item in the tuple?","input":"tuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]","expected_output":"def sort_tuple(tuples):\n    # sort by 2nd item of the tuple\n    tuples.sort(key=lambda x: x[1])\n    return tuples\n\n# Test\ntuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]\nsorted_tuples = sort_tuple(tuples)\nprint(sorted_tuples) # [(\"c\", -1), (\"b\", 0), (\"a\", 1)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you design a function in Python to sort a list of tuples based on the second item in the tuple?\n\n### Input:\ntuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]\n\n### Output:\ndef sort_tuple(tuples):\n    # sort by 2nd item of the tuple\n    tuples.sort(key=lambda x: x[1])\n    return tuples\n\n# Test\ntuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]\nsorted_tuples = sort_tuple(tuples)\nprint(sorted_tuples) # [(\"c\", -1), (\"b\", 0), (\"a\", 1)]","tok_input_length":159,"tok_output_length":89,"system_prompt":"","index":18608}
{"question":"Generate a Python program to replace a given text segment with another one.","input":"\"Roses are red, violets are blue.\"\nreplace_word=\"blue\"\nreplace_with=\"red\"","expected_output":"def replace_word(txt, replace_word, replace_with): \n    words = txt.split(\" \") \n    for i in range(0, len(words)): \n        if (words[i] == replace_word): \n            words[i] = replace_with\n    return \" \".join(words)\n\ns = \"Roses are red, violets are blue.\"\nprint(replace_word(s, \"blue\", \"red\")) # Roses are red, violets are red.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to replace a given text segment with another one.\n\n### Input:\n\"Roses are red, violets are blue.\"\nreplace_word=\"blue\"\nreplace_with=\"red\"\n\n### Output:\ndef replace_word(txt, replace_word, replace_with): \n    words = txt.split(\" \") \n    for i in range(0, len(words)): \n        if (words[i] == replace_word): \n            words[i] = replace_with\n    return \" \".join(words)\n\ns = \"Roses are red, violets are blue.\"\nprint(replace_word(s, \"blue\", \"red\")) # Roses are red, violets are red.","tok_input_length":159,"tok_output_length":96,"system_prompt":"","index":6330}
{"question":"Write a function in Python to perform a selection sort on an unsorted array.","input":"[4, 6, 1, 3, 8, 2]","expected_output":"def selection_sort(arr):\n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n        \nconst result = selection_sort([4, 6, 1, 3, 8, 2]);\nconsole.log(result);","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to perform a selection sort on an unsorted array.\n\n### Input:\n[4, 6, 1, 3, 8, 2]\n\n### Output:\ndef selection_sort(arr):\n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n        \nconst result = selection_sort([4, 6, 1, 3, 8, 2]);\nconsole.log(result);","tok_input_length":159,"tok_output_length":98,"system_prompt":"","index":8995}
{"question":"Write a Python program for creating a histogram from a given dataset.","input":"Dataset contains values from 0 to 10 and their respective count or frequency.","expected_output":"import matplotlib.pyplot as plt\n\ndata = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfrequency = [10, 8, 12, 6, 15, 7, 5, 2, 6, 9, 3]\n\nplt.hist(data, weights=frequency)\nplt.title(\"Histogram\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for creating a histogram from a given dataset.\n\n### Input:\nDataset contains values from 0 to 10 and their respective count or frequency.\n\n### Output:\nimport matplotlib.pyplot as plt\n\ndata = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfrequency = [10, 8, 12, 6, 15, 7, 5, 2, 6, 9, 3]\n\nplt.hist(data, weights=frequency)\nplt.title(\"Histogram\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()","tok_input_length":159,"tok_output_length":103,"system_prompt":"","index":11652}
{"question":"Given an array of numbers, create an algorithm in Python to find the maximum sum of any subarray.","input":"Not applicable","expected_output":"def max_subarray_sum(arr):\n  max_sum = 0\n  for i in range(len(arr)):\n    for j in range(i, len(arr)):\n      current_sum = 0\n      for k in range(i, j+1):\n        current_sum += arr[k]\n      max_sum = max(max_sum, current_sum)\n  return max_sum\n\narr = [1, 8, -1, 3, 4, -2]\nresult = max_subarray_sum(arr)\nprint(result) # 17","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of numbers, create an algorithm in Python to find the maximum sum of any subarray.\n\n### Input:\nNot applicable\n\n### Output:\ndef max_subarray_sum(arr):\n  max_sum = 0\n  for i in range(len(arr)):\n    for j in range(i, len(arr)):\n      current_sum = 0\n      for k in range(i, j+1):\n        current_sum += arr[k]\n      max_sum = max(max_sum, current_sum)\n  return max_sum\n\narr = [1, 8, -1, 3, 4, -2]\nresult = max_subarray_sum(arr)\nprint(result) # 17","tok_input_length":159,"tok_output_length":108,"system_prompt":"","index":5091}
{"question":"Write a function in Python to find the number of prime numbers up to a given number.","input":"100","expected_output":"def countPrimes(num): \n    if num <= 1:  \n        return 0\n \n    primes = [2] \n    x = 3\n    \n    while x <= num: \n        for y in primes: \n            if x % y == 0: \n                x += 2\n                continue\n        primes.append(x) \n        x += 2\n    \n    return len(primes) \n\nnum_primes = countPrimes(100)\nprint(\"Number of primes between 1 and 100:\", num_primes)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to find the number of prime numbers up to a given number.\n\n### Input:\n100\n\n### Output:\ndef countPrimes(num): \n    if num <= 1:  \n        return 0\n \n    primes = [2] \n    x = 3\n    \n    while x <= num: \n        for y in primes: \n            if x % y == 0: \n                x += 2\n                continue\n        primes.append(x) \n        x += 2\n    \n    return len(primes) \n\nnum_primes = countPrimes(100)\nprint(\"Number of primes between 1 and 100:\", num_primes)","tok_input_length":159,"tok_output_length":112,"system_prompt":"","index":14762}
{"question":"Generate a neural network in Python for understanding and generating natural language.","input":"No input","expected_output":"import numpy as np\nimport tensorflow as tf\n\n# Create neural network model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(1000,)),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(16, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(inputs, labels, epochs=100)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a neural network in Python for understanding and generating natural language.\n\n### Input:\nNo input\n\n### Output:\nimport numpy as np\nimport tensorflow as tf\n\n# Create neural network model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(1000,)),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(16, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(inputs, labels, epochs=100)","tok_input_length":159,"tok_output_length":116,"system_prompt":"","index":17201}
{"question":"Provide a Python program to print out a Pascal triangle","input":"","expected_output":"\"\"\"\nA function to print out a Pascal triangle\n\"\"\"\n\ndef pascal_triangle(n): \n    # Initialize the row\n    row = [1]\n\n    # Calculate each successive row \n    y = [0] \n    for x in range(max(n, 0)): \n        print(row)\n\t\t# Compute the next row\n        row = [sum(i) for i in zip(row + y, y + row)] \n        # Copy the row\n        y = row[:] \n\t\t\nif __name__ == '__main__':\n    n = 5\n    pascal_triangle(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a Python program to print out a Pascal triangle\n\n### Input:\n\n\n### Output:\n\"\"\"\nA function to print out a Pascal triangle\n\"\"\"\n\ndef pascal_triangle(n): \n    # Initialize the row\n    row = [1]\n\n    # Calculate each successive row \n    y = [0] \n    for x in range(max(n, 0)): \n        print(row)\n\t\t# Compute the next row\n        row = [sum(i) for i in zip(row + y, y + row)] \n        # Copy the row\n        y = row[:] \n\t\t\nif __name__ == '__main__':\n    n = 5\n    pascal_triangle(n)","tok_input_length":159,"tok_output_length":121,"system_prompt":"","index":11868}
{"question":"Improve the performance of the given Python program by using optimized algorithms.","input":"def compute_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * compute_factorial(n-1)\n\nprint(compute_factorial(5))","expected_output":"def compute_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * compute_factorial(n-1)\n\ndef compute_factorial_optimized(n):\n    result = 1\n\n    for i in range(2, n + 1):\n        result *= i\n\t\n    return result\n\nprint(compute_factorial_optimized(5))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImprove the performance of the given Python program by using optimized algorithms.\n\n### Input:\ndef compute_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * compute_factorial(n-1)\n\nprint(compute_factorial(5))\n\n### Output:\ndef compute_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * compute_factorial(n-1)\n\ndef compute_factorial_optimized(n):\n    result = 1\n\n    for i in range(2, n + 1):\n        result *= i\n\t\n    return result\n\nprint(compute_factorial_optimized(5))","tok_input_length":160,"tok_output_length":79,"system_prompt":"","index":7352}
{"question":"Using the data provided, write a Python program to find and print the root of the quadratic equation ax2 + bx + c = 0","input":"a = 1, b = 5, c = 6","expected_output":"import math\n\na = 1\nb = 5\nc = 6\n\n# calculate the discriminant\nd = (b**2) - (4*a*c)\n\n# find the two solutions \nsol1 = (-b-math.sqrt(d))\/(2*a)\nsol2 = (-b+math.sqrt(d))\/(2*a)\n\nprint('The solutions are {0} and {1}'.format(sol1, sol2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the data provided, write a Python program to find and print the root of the quadratic equation ax2 + bx + c = 0\n\n### Input:\na = 1, b = 5, c = 6\n\n### Output:\nimport math\n\na = 1\nb = 5\nc = 6\n\n# calculate the discriminant\nd = (b**2) - (4*a*c)\n\n# find the two solutions \nsol1 = (-b-math.sqrt(d))\/(2*a)\nsol2 = (-b+math.sqrt(d))\/(2*a)\n\nprint('The solutions are {0} and {1}'.format(sol1, sol2))","tok_input_length":160,"tok_output_length":89,"system_prompt":"","index":3682}
{"question":"Design a Python script to generate a frequency table from a given data set.","input":"data_set = [9, 5, 9, 8, 5, 5, 9]","expected_output":"def calculateFrequency(data_set):\n    frequency_table = dict()\n    for item in data_set:\n        frequency_table[item] = frequency_table.get(item, 0) + 1\n    return frequency_table\n\ndata_set = [9,5,9,8,5,5,9]\nfrequency_table = calculateFrequency(data_set)\nprint(frequency_table) # Outputs {9: 3, 5: 3, 8: 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to generate a frequency table from a given data set.\n\n### Input:\ndata_set = [9, 5, 9, 8, 5, 5, 9]\n\n### Output:\ndef calculateFrequency(data_set):\n    frequency_table = dict()\n    for item in data_set:\n        frequency_table[item] = frequency_table.get(item, 0) + 1\n    return frequency_table\n\ndata_set = [9,5,9,8,5,5,9]\nfrequency_table = calculateFrequency(data_set)\nprint(frequency_table) # Outputs {9: 3, 5: 3, 8: 1}","tok_input_length":160,"tok_output_length":94,"system_prompt":"","index":18583}
{"question":"Generate a REST API using Python to allow users to search through a library catalogue. The endpoint should accept a keyword and return all books that match that keyword.","input":"Not applicable","expected_output":"import os\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\nimport json\n\napp = Flask(__name__)\napi = Api(app)\n\nclass SearchBooks(Resource):\n def get(self):\n query = request.args.get('q') \n \n books = find_books(query) \n \n return {'results': books}\n\napi.add_resource(SearchBooks, '\/search')\n\nif __name__ == '__main__':\n app.run()\n\ndef find_books(term):\n # code for searching library here\n return []","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a REST API using Python to allow users to search through a library catalogue. The endpoint should accept a keyword and return all books that match that keyword.\n\n### Input:\nNot applicable\n\n### Output:\nimport os\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\nimport json\n\napp = Flask(__name__)\napi = Api(app)\n\nclass SearchBooks(Resource):\n def get(self):\n query = request.args.get('q') \n \n books = find_books(query) \n \n return {'results': books}\n\napi.add_resource(SearchBooks, '\/search')\n\nif __name__ == '__main__':\n app.run()\n\ndef find_books(term):\n # code for searching library here\n return []","tok_input_length":160,"tok_output_length":99,"system_prompt":"","index":2802}
{"question":"Write a Python program to calculate the number of even and odd numbers from a series of numbers.","input":"1, 4, 5, 7","expected_output":"series = [1, 4, 5, 7]\n\n# count even and odd numbers\neven_count = 0\nodd_count = 0\n\nfor num in series:\n    if num % 2 == 0:\n        even_count += 1\n    else:\n        odd_count += 1\n\n# Print the total number of even and odd numbers\nprint('Number of even numbers: {}'.format(even_count))\nprint('Number of odd numbers: {}'.format(odd_count))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the number of even and odd numbers from a series of numbers.\n\n### Input:\n1, 4, 5, 7\n\n### Output:\nseries = [1, 4, 5, 7]\n\n# count even and odd numbers\neven_count = 0\nodd_count = 0\n\nfor num in series:\n    if num % 2 == 0:\n        even_count += 1\n    else:\n        odd_count += 1\n\n# Print the total number of even and odd numbers\nprint('Number of even numbers: {}'.format(even_count))\nprint('Number of odd numbers: {}'.format(odd_count))","tok_input_length":160,"tok_output_length":103,"system_prompt":"","index":4212}
{"question":"Create a web crawler using Python to extract data from a website and export it as a CSV.","input":"https:\/\/example.com\/","expected_output":"import csv\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ncsv_file = open('data.csv', 'w')\ncsv_writer = csv.writer(csv_file)\ncsv_writer.writerow(['title', 'description'])\n\nfor article in soup.find_all('article'):\n title = article.h2.a.text\n description = article.find('div', class_='entry-content').p.text\n csv_writer.writerow([title, description])\n\ncsv_file.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler using Python to extract data from a website and export it as a CSV.\n\n### Input:\nhttps:\/\/example.com\/\n\n### Output:\nimport csv\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ncsv_file = open('data.csv', 'w')\ncsv_writer = csv.writer(csv_file)\ncsv_writer.writerow(['title', 'description'])\n\nfor article in soup.find_all('article'):\n title = article.h2.a.text\n description = article.find('div', class_='entry-content').p.text\n csv_writer.writerow([title, description])\n\ncsv_file.close()","tok_input_length":160,"tok_output_length":109,"system_prompt":"","index":5760}
{"question":"Write a function in Python to print the Fibonacci sequence up to the nth term.","input":"n = 10","expected_output":"def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n    \nprint(\"Fibonacci sequence:\")\nfor i in range(n):\n    print(fibonacci(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print the Fibonacci sequence up to the nth term.\n\n### Input:\nn = 10\n\n### Output:\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n    \nprint(\"Fibonacci sequence:\")\nfor i in range(n):\n    print(fibonacci(i))","tok_input_length":160,"tok_output_length":112,"system_prompt":"","index":6689}
{"question":"Generate a fuzzy search algorithm in Python that can match strings with near similarities.","input":"","expected_output":"def find_matches(query, choices, threshold):\n    # Convert query and choices to lower case\n    query, choices = query.lower(), [choice.lower() for choice in choices]\n    # Initialize empty list to store matches\n    matches = []\n    \n    # Loop through each choice\n    for choice in choices:\n        # Calculate Levenshtein distance between query and choice\n        distance = levenshtein_distance(query, choice)\n        # If distance is less than threshold, append choice to matches\n        if distance <= threshold:\n            matches.append(choice)\n    \n    return matches","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a fuzzy search algorithm in Python that can match strings with near similarities.\n\n### Input:\n\n\n### Output:\ndef find_matches(query, choices, threshold):\n    # Convert query and choices to lower case\n    query, choices = query.lower(), [choice.lower() for choice in choices]\n    # Initialize empty list to store matches\n    matches = []\n    \n    # Loop through each choice\n    for choice in choices:\n        # Calculate Levenshtein distance between query and choice\n        distance = levenshtein_distance(query, choice)\n        # If distance is less than threshold, append choice to matches\n        if distance <= threshold:\n            matches.append(choice)\n    \n    return matches","tok_input_length":160,"tok_output_length":118,"system_prompt":"","index":441}
{"question":"Create a random forest model in Python from the given data set.","input":"import pandas as pd\n\ndata = {\n    'Gender': ['male', 'female', 'male', 'female'],\n    'Income': [30000, 50000, 40000, 60000],\n    'Label': [1, 0, 0, 1]\n}\n\ndf = pd.DataFrame(data)","expected_output":"from sklearn.ensemble import RandomForestClassifier\n\nfeatures = ['Gender', 'Income']\nX = df[features]\ny = df['Label']\n\nclf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)\nclf.fit(X, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a random forest model in Python from the given data set.\n\n### Input:\nimport pandas as pd\n\ndata = {\n    'Gender': ['male', 'female', 'male', 'female'],\n    'Income': [30000, 50000, 40000, 60000],\n    'Label': [1, 0, 0, 1]\n}\n\ndf = pd.DataFrame(data)\n\n### Output:\nfrom sklearn.ensemble import RandomForestClassifier\n\nfeatures = ['Gender', 'Income']\nX = df[features]\ny = df['Label']\n\nclf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)\nclf.fit(X, y)","tok_input_length":161,"tok_output_length":54,"system_prompt":"","index":4363}
{"question":"Write a Python program to merge two given dictionaries.","input":"dict1 = {'a': 10, 'b': 20, 'c': 30}\ndict2 = {'d': 40, 'e': 50, 'f': 60}","expected_output":"def merge_dicts(dict1, dict2):\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    return new_dict\n\ndict1 = {'a': 10, 'b': 20, 'c': 30}\ndict2 = {'d': 40, 'e': 50, 'f': 60}\n\nprint(merge_dicts(dict1, dict2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to merge two given dictionaries.\n\n### Input:\ndict1 = {'a': 10, 'b': 20, 'c': 30}\ndict2 = {'d': 40, 'e': 50, 'f': 60}\n\n### Output:\ndef merge_dicts(dict1, dict2):\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    return new_dict\n\ndict1 = {'a': 10, 'b': 20, 'c': 30}\ndict2 = {'d': 40, 'e': 50, 'f': 60}\n\nprint(merge_dicts(dict1, dict2))","tok_input_length":161,"tok_output_length":82,"system_prompt":"","index":17159}
{"question":"Create a Python program for classifying an array of numbers into one of three classes (low, medium, or high).","input":"Example array: [-5, 0, 2, 10, 15]","expected_output":"def classify(arr):\n output = []\n for n in arr:\n if n < 0:\n output.append('low')\n elif n < 5:\n output.append('medium')\n else:\n output.append('high')\n return output\n\n# Example Usage\nexample_array = [-5, 0, 2, 10, 15]\nresult = classify(example_array)\nprint(result) # ['low', 'medium', 'medium', 'high', 'high']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for classifying an array of numbers into one of three classes (low, medium, or high).\n\n### Input:\nExample array: [-5, 0, 2, 10, 15]\n\n### Output:\ndef classify(arr):\n output = []\n for n in arr:\n if n < 0:\n output.append('low')\n elif n < 5:\n output.append('medium')\n else:\n output.append('high')\n return output\n\n# Example Usage\nexample_array = [-5, 0, 2, 10, 15]\nresult = classify(example_array)\nprint(result) # ['low', 'medium', 'medium', 'high', 'high']","tok_input_length":161,"tok_output_length":92,"system_prompt":"","index":16049}
{"question":"Create a program in Python for performing a linear search on a given list.","input":"[1, 2, 3, 4, 5, 6], 5","expected_output":"def linear_search(list, n): \n  \n    for i in range(len(list)): \n  \n        if list[i] == n: \n            return i \n\nlist = [1, 2, 3, 4, 5, 6] \nn = 5\n\nx = linear_search(list, n) \n\nif x == None: \n    print(\"Element is not present in the list\") \nelse: \n    print(\"Element is present at index\", x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python for performing a linear search on a given list.\n\n### Input:\n[1, 2, 3, 4, 5, 6], 5\n\n### Output:\ndef linear_search(list, n): \n  \n    for i in range(len(list)): \n  \n        if list[i] == n: \n            return i \n\nlist = [1, 2, 3, 4, 5, 6] \nn = 5\n\nx = linear_search(list, n) \n\nif x == None: \n    print(\"Element is not present in the list\") \nelse: \n    print(\"Element is present at index\", x)","tok_input_length":161,"tok_output_length":98,"system_prompt":"","index":867}
{"question":"Create a Python function to compute the root mean square (RMS) of an array of values.","input":"values = [3,4,5,6,7]","expected_output":"import math\n\ndef computeRMS(values):\n    # calculate the mean\n    mean = sum(values)\/len(values)\n    # calculate the sum of the squares\n    squares_sum = sum([val**2 for val in values])\n    # calculate the RMS\n    rms = math.sqrt(squares_sum\/len(values))\n    \n    return rms\n    \nvalues = [3,4,5,6,7]\nrms = computeRMS(values)\nprint(\"Root mean square is: \", rms)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to compute the root mean square (RMS) of an array of values.\n\n### Input:\nvalues = [3,4,5,6,7]\n\n### Output:\nimport math\n\ndef computeRMS(values):\n    # calculate the mean\n    mean = sum(values)\/len(values)\n    # calculate the sum of the squares\n    squares_sum = sum([val**2 for val in values])\n    # calculate the RMS\n    rms = math.sqrt(squares_sum\/len(values))\n    \n    return rms\n    \nvalues = [3,4,5,6,7]\nrms = computeRMS(values)\nprint(\"Root mean square is: \", rms)","tok_input_length":161,"tok_output_length":101,"system_prompt":"","index":18433}
{"question":"Create a Python program to calculate the grade for a student.","input":"Maths = 85\nEnglish = 70\nScience = 90","expected_output":"Maths = 85\nEnglish = 70\nScience = 90\n\n# Calculate the average \naverage = (Maths + English + Science) \/ 3\n\n# Check the grade\nif average >= 80:\n    grade = 'A'\nelif average >= 70:\n    grade = 'B'\nelif average >= 60:\n    grade = 'C'\nelif average >= 50:\n    grade = 'D'\nelse:\n    grade = 'F'\n\n# Print the grade\nprint(grade)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the grade for a student.\n\n### Input:\nMaths = 85\nEnglish = 70\nScience = 90\n\n### Output:\nMaths = 85\nEnglish = 70\nScience = 90\n\n# Calculate the average \naverage = (Maths + English + Science) \/ 3\n\n# Check the grade\nif average >= 80:\n    grade = 'A'\nelif average >= 70:\n    grade = 'B'\nelif average >= 60:\n    grade = 'C'\nelif average >= 50:\n    grade = 'D'\nelse:\n    grade = 'F'\n\n# Print the grade\nprint(grade)","tok_input_length":161,"tok_output_length":106,"system_prompt":"","index":9598}
{"question":"Develop a Python 3 function that implements a linear search algorithm.","input":"[4, 1, 9, 6]","expected_output":"def linear_search(arr, target_val):\n    \"\"\" This function performs linear search on an array to find the target value \"\"\"\n    for idx in range(len(arr)):\n        if arr[idx] == target_val:\n            return idx\n\n    return -1\n\ntarget_val = 9\narr = [4, 1, 9, 6]\n\ntarget_idx = linear_search(arr, target_val)\nif target_idx == -1:\n    print(\"Target not found!\")\nelse:\n    print(f\"Target found at index {target_idx}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python 3 function that implements a linear search algorithm.\n\n### Input:\n[4, 1, 9, 6]\n\n### Output:\ndef linear_search(arr, target_val):\n    \"\"\" This function performs linear search on an array to find the target value \"\"\"\n    for idx in range(len(arr)):\n        if arr[idx] == target_val:\n            return idx\n\n    return -1\n\ntarget_val = 9\narr = [4, 1, 9, 6]\n\ntarget_idx = linear_search(arr, target_val)\nif target_idx == -1:\n    print(\"Target not found!\")\nelse:\n    print(f\"Target found at index {target_idx}\")","tok_input_length":161,"tok_output_length":109,"system_prompt":"","index":15751}
{"question":"Implement an algorithm in Python to find the longest palindromic substring from a given string.","input":"","expected_output":"def longest_palindromic_substring(s):\n    longest = ''\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if is_palindrome(substr) and len(substr) > len(longest):\n                longest = substr\n    return longest\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Find the longest palindromic substring in \"cabbad\"\nlongest = longest_palindromic_substring(\"cabbad\")\nprint(longest)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to find the longest palindromic substring from a given string.\n\n### Input:\n\n\n### Output:\ndef longest_palindromic_substring(s):\n    longest = ''\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if is_palindrome(substr) and len(substr) > len(longest):\n                longest = substr\n    return longest\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Find the longest palindromic substring in \"cabbad\"\nlongest = longest_palindromic_substring(\"cabbad\")\nprint(longest)","tok_input_length":161,"tok_output_length":115,"system_prompt":"","index":12652}
{"question":"Extend a Python program to calculate the area of any regular polygon.","input":"3 sides","expected_output":"def calculate_area(n):\n    \"\"\"\n    Calculates the area of an n-sided regular polygon\n    \"\"\"\n    # Calculate the area of the n-sided regular polygon\n    side_length = 1\n    area = (n * side_length**2) \/ (4 * math.tan(math.pi \/ n))\n    return round(area, 2)\n\n# Get the number of sides as an input\nn = int(input(\"Enter the number of sides\"))\n\n# Calculate the area and print it\narea = calculate_area(n)\nprint(\"The area of the regular polygon is\", area)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExtend a Python program to calculate the area of any regular polygon.\n\n### Input:\n3 sides\n\n### Output:\ndef calculate_area(n):\n    \"\"\"\n    Calculates the area of an n-sided regular polygon\n    \"\"\"\n    # Calculate the area of the n-sided regular polygon\n    side_length = 1\n    area = (n * side_length**2) \/ (4 * math.tan(math.pi \/ n))\n    return round(area, 2)\n\n# Get the number of sides as an input\nn = int(input(\"Enter the number of sides\"))\n\n# Calculate the area and print it\narea = calculate_area(n)\nprint(\"The area of the regular polygon is\", area)","tok_input_length":161,"tok_output_length":118,"system_prompt":"","index":4985}
{"question":"Generate a set of commands to create a web application.","input":"","expected_output":"# Create the project structure\nmkdir app\ncd app\nmkdir static templates\n\n# Install all the dependencies\npip install flask\npip install flask-sqlalchemy\n\n# Create the application\ntouch app.py\n\n# Create the base template\ntouch templates\/base.html\n\n# Create the model\ntouch models.py\n\n# Create the view\ntouch views.py\n\n# Create the routes\ntouch routes.py\n\n# Create the static assets\ntouch static\/style.css\n\n# Create the database\npython manage.py db init\npython manage.py db migrate\npython manage.py db upgrade\n\n# Run the server\npython app.py","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a set of commands to create a web application.\n\n### Input:\n\n\n### Output:\n# Create the project structure\nmkdir app\ncd app\nmkdir static templates\n\n# Install all the dependencies\npip install flask\npip install flask-sqlalchemy\n\n# Create the application\ntouch app.py\n\n# Create the base template\ntouch templates\/base.html\n\n# Create the model\ntouch models.py\n\n# Create the view\ntouch views.py\n\n# Create the routes\ntouch routes.py\n\n# Create the static assets\ntouch static\/style.css\n\n# Create the database\npython manage.py db init\npython manage.py db migrate\npython manage.py db upgrade\n\n# Run the server\npython app.py","tok_input_length":161,"tok_output_length":123,"system_prompt":"","index":12246}
{"question":"Create a Python program to reverse a dictionary. The program should take a dictionary as input and return a new dictionary with the keys and values swapped.","input":"dictionary = { 'a': 1, 'b':  2, 'c': 3 }","expected_output":"def reverse_dictionary(dictionary): \n result = dict() \n  \n for key, value in dictionary.items(): \n  result[value] = key \n  \n return result \n\ndictionary = { 'a': 1, 'b':  2, 'c': 3 }\nres = reverse_dictionary(dictionary) \nprint(res) # Output: {1: 'a', 2: 'b', 3: 'c'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to reverse a dictionary. The program should take a dictionary as input and return a new dictionary with the keys and values swapped.\n\n### Input:\ndictionary = { 'a': 1, 'b':  2, 'c': 3 }\n\n### Output:\ndef reverse_dictionary(dictionary): \n result = dict() \n  \n for key, value in dictionary.items(): \n  result[value] = key \n  \n return result \n\ndictionary = { 'a': 1, 'b':  2, 'c': 3 }\nres = reverse_dictionary(dictionary) \nprint(res) # Output: {1: 'a', 2: 'b', 3: 'c'}","tok_input_length":162,"tok_output_length":84,"system_prompt":"","index":4973}
{"question":"Design a Python program which takes two arrays of strings as input and sorts them alphabetically.","input":"['zebra', 'apple', 'carrot'], ['banana', 'elephant', 'cat']","expected_output":"def sort_str_arr(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n\n    return arr1 + arr2\n\narr1 = [\"zebra\", \"apple\", \"carrot\"]\narr2 = [\"banana\", \"elephant\", \"cat\"]\n\nsorted_arrs = sort_str_arr(arr1, arr2)\n\nprint(sorted_arrs) # ['apple', 'banana', 'carrot', 'cat', 'elephant', 'zebra']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program which takes two arrays of strings as input and sorts them alphabetically.\n\n### Input:\n['zebra', 'apple', 'carrot'], ['banana', 'elephant', 'cat']\n\n### Output:\ndef sort_str_arr(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n\n    return arr1 + arr2\n\narr1 = [\"zebra\", \"apple\", \"carrot\"]\narr2 = [\"banana\", \"elephant\", \"cat\"]\n\nsorted_arrs = sort_str_arr(arr1, arr2)\n\nprint(sorted_arrs) # ['apple', 'banana', 'carrot', 'cat', 'elephant', 'zebra']","tok_input_length":162,"tok_output_length":96,"system_prompt":"","index":10438}
{"question":"Implement a sorting algorithm in Python that sorts a given array of numbers.","input":"array = [2, 7, 4, 1, 5, 3]","expected_output":"def sort_array(array):\n    for i in range(len(array)): \n        min_idx = i \n        for j in range(i+1, len(array)): \n            if array[min_idx] > array[j]: \n                min_idx = j       \n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array\nresult = sort_array(array)\nprint(result) \/\/ Output: [1, 2, 3, 4, 5, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm in Python that sorts a given array of numbers.\n\n### Input:\narray = [2, 7, 4, 1, 5, 3]\n\n### Output:\ndef sort_array(array):\n    for i in range(len(array)): \n        min_idx = i \n        for j in range(i+1, len(array)): \n            if array[min_idx] > array[j]: \n                min_idx = j       \n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array\nresult = sort_array(array)\nprint(result) \/\/ Output: [1, 2, 3, 4, 5, 7]","tok_input_length":162,"tok_output_length":101,"system_prompt":"","index":12555}
{"question":"Develop an algorithm in Python to optimize a given set of integers.","input":"nums = [2, 4, 6, 10, 12]","expected_output":"def optimize_ints(nums): \n    left = 0\n    right = len(nums) - 1\n\n    while left < right: \n        min_num = min(nums[left], nums[right]) \n        nums[right] = nums[left] = min_num + \n                                 nums[left] - nums[right] \n        left += 1\n        right -= 1\n    return nums\n\nnums = [2, 4, 6, 10, 12]\nprint(optimize_ints(nums))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to optimize a given set of integers.\n\n### Input:\nnums = [2, 4, 6, 10, 12]\n\n### Output:\ndef optimize_ints(nums): \n    left = 0\n    right = len(nums) - 1\n\n    while left < right: \n        min_num = min(nums[left], nums[right]) \n        nums[right] = nums[left] = min_num + \n                                 nums[left] - nums[right] \n        left += 1\n        right -= 1\n    return nums\n\nnums = [2, 4, 6, 10, 12]\nprint(optimize_ints(nums))","tok_input_length":162,"tok_output_length":105,"system_prompt":"","index":9927}
{"question":"Convert an array of hexadecimal strings to decimal numbers with a Python script.","input":"[\"FF\", \"A0\", \"5E\"]","expected_output":"def hex_to_dec(hex_strings):\n    # Define an array to store the decimal numbers\n    dec_nums = []\n  \n    # Iterate over each hex string in the array\n    for hex_string in hex_strings:\n        # Convert the hexadecimal to integer and \n        # store the result in dec_nums \n        dec_nums.append(int(hex_string, 16))\n  \n    return dec_nums\n\n# Test example\nprint(hex_to_dec([\"FF\", \"A0\", \"5E\"]))\n# Output: [255, 160, 94]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert an array of hexadecimal strings to decimal numbers with a Python script.\n\n### Input:\n[\"FF\", \"A0\", \"5E\"]\n\n### Output:\ndef hex_to_dec(hex_strings):\n    # Define an array to store the decimal numbers\n    dec_nums = []\n  \n    # Iterate over each hex string in the array\n    for hex_string in hex_strings:\n        # Convert the hexadecimal to integer and \n        # store the result in dec_nums \n        dec_nums.append(int(hex_string, 16))\n  \n    return dec_nums\n\n# Test example\nprint(hex_to_dec([\"FF\", \"A0\", \"5E\"]))\n# Output: [255, 160, 94]","tok_input_length":162,"tok_output_length":110,"system_prompt":"","index":6482}
{"question":"Create a program that can generate anagrams from a set of words.","input":"['python', 'coding', 'programming']","expected_output":"\"\"\"\nCreate a program to generate anagrams from a set of words.\n\n# Importing libraries\nimport itertools\n \ndef anagrams(words):\n    # Generate all permutations of the given words\n    anagram_list = [''.join(permutation) for permutation in itertools.permutations(words)]\n \n    # Return the list of anagrams\n    return anagram_list\n \n# Sample input\nwords = ['python', 'coding', 'programming']\n \n# Function call\nanagram_list = anagrams(words)\n \n# Printing output\nprint(anagram_list)\n\"\"\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that can generate anagrams from a set of words.\n\n### Input:\n['python', 'coding', 'programming']\n\n### Output:\n\"\"\"\nCreate a program to generate anagrams from a set of words.\n\n# Importing libraries\nimport itertools\n \ndef anagrams(words):\n    # Generate all permutations of the given words\n    anagram_list = [''.join(permutation) for permutation in itertools.permutations(words)]\n \n    # Return the list of anagrams\n    return anagram_list\n \n# Sample input\nwords = ['python', 'coding', 'programming']\n \n# Function call\nanagram_list = anagrams(words)\n \n# Printing output\nprint(anagram_list)\n\"\"\"","tok_input_length":162,"tok_output_length":112,"system_prompt":"","index":16054}
{"question":"Define an interface for a data import task in Python.","input":"Not applicable","expected_output":"class DataImportTask:\n\n    def __init__(self, source, destination):\n        self.source = source\n        self.destination = destination\n\n    # Method to download the source file to the file system\n    def download(self):\n        # Implementation here\n\n    # Method to read the content of the source file into a CSV format\n    def read(self):\n        # Implementation here\n\n    # Method to format the content into the destination format\n    def format(self):\n        # Implementation here\n\n    # Method to save the destination in the desired location\n    def save(self):\n        # Implementation here","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine an interface for a data import task in Python.\n\n### Input:\nNot applicable\n\n### Output:\nclass DataImportTask:\n\n    def __init__(self, source, destination):\n        self.source = source\n        self.destination = destination\n\n    # Method to download the source file to the file system\n    def download(self):\n        # Implementation here\n\n    # Method to read the content of the source file into a CSV format\n    def read(self):\n        # Implementation here\n\n    # Method to format the content into the destination format\n    def format(self):\n        # Implementation here\n\n    # Method to save the destination in the desired location\n    def save(self):\n        # Implementation here","tok_input_length":162,"tok_output_length":121,"system_prompt":"","index":1192}
{"question":"Implement a function in Python that takes a 2D Numpy array and returns a dictionary whose keys are the unique values in the array, and the values are the number of occurrences for each of the unique values.","input":"arr = [[1,2,3],\n       [2,3,4],\n       [2,1,3]]","expected_output":"import numpy as np\n\ndef count_occurrences(arr):\n    result = {}\n    for value in np.unique(arr):\n        result[value] = np.sum(arr == value)\n    return result\n\narr = [[1,2,3], [2,3,4], [2,1,3]]\nprint(count_occurrences(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes a 2D Numpy array and returns a dictionary whose keys are the unique values in the array, and the values are the number of occurrences for each of the unique values.\n\n### Input:\narr = [[1,2,3],\n       [2,3,4],\n       [2,1,3]]\n\n### Output:\nimport numpy as np\n\ndef count_occurrences(arr):\n    result = {}\n    for value in np.unique(arr):\n        result[value] = np.sum(arr == value)\n    return result\n\narr = [[1,2,3], [2,3,4], [2,1,3]]\nprint(count_occurrences(arr))","tok_input_length":163,"tok_output_length":68,"system_prompt":"","index":11273}
{"question":"Design a class in Python to represent a Credit Card Account. The class should include attributes for name, card number, balance, and limit. It should also include methods for adding and subtracting from the balance and returning the card number.","input":"Not applicable","expected_output":"class CreditCardAccount:\n def __init__(self, name, card_number, balance, limit):\n  self.name = name\n  self.card_number = card_number\n  self.balance = balance\n  self.limit = limit\n\n def add_to_balance(self, amount):\n  self.balance += amount\n\n def subtract_from_balance(self, amount):\n  self.balance -= amount\n\n def get_card_number(self):\n  return self.card_number","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to represent a Credit Card Account. The class should include attributes for name, card number, balance, and limit. It should also include methods for adding and subtracting from the balance and returning the card number.\n\n### Input:\nNot applicable\n\n### Output:\nclass CreditCardAccount:\n def __init__(self, name, card_number, balance, limit):\n  self.name = name\n  self.card_number = card_number\n  self.balance = balance\n  self.limit = limit\n\n def add_to_balance(self, amount):\n  self.balance += amount\n\n def subtract_from_balance(self, amount):\n  self.balance -= amount\n\n def get_card_number(self):\n  return self.card_number","tok_input_length":163,"tok_output_length":86,"system_prompt":"","index":6729}
{"question":"Create a Python script, given the following input data, which will convert the given data from Fahrenheit to Celsius and print out the results.","input":"Below are the temperatures in Fahrenheit:\n30\n40\n50","expected_output":"fahrenheit_temps = [30, 40, 50]\ncelsius_temps = [(temp - 32) * 5\/9 for temp in fahrenheit_temps]\n\nprint(f'Below are the temperatures converted from Fahrenheit to Celsius:')\nprint(*celsius_temps, sep=\"\\n\")\n\nOutput:\nBelow are the temperatures converted from Fahrenheit to Celsius:\n-1.1111111111111112\n4.444444444444445\n10.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script, given the following input data, which will convert the given data from Fahrenheit to Celsius and print out the results.\n\n### Input:\nBelow are the temperatures in Fahrenheit:\n30\n40\n50\n\n### Output:\nfahrenheit_temps = [30, 40, 50]\ncelsius_temps = [(temp - 32) * 5\/9 for temp in fahrenheit_temps]\n\nprint(f'Below are the temperatures converted from Fahrenheit to Celsius:')\nprint(*celsius_temps, sep=\"\\n\")\n\nOutput:\nBelow are the temperatures converted from Fahrenheit to Celsius:\n-1.1111111111111112\n4.444444444444445\n10.0","tok_input_length":163,"tok_output_length":96,"system_prompt":"","index":4578}
{"question":"Create a Python script to calculate the monthly mortgage payment.","input":"loan_amount = 120000\nannual_interest_rate = 3.25\nloan_duration_in_years = 30","expected_output":"def monthly_mortgage_payment(loan_amount, annual_interest_rate, loan_duration_in_years):\n monthly_interest_rate = annual_interest_rate \/ 12\n number_of_payments = loan_duration_in_years * 12\n monthly_payment = loan_amount * (monthly_interest_rate \/ (1 - (1 + monthly_interest_rate)**(-number_of_payments)))\nreturn monthly_payment\n\nprint(monthly_mortgage_payment(loan_amount, annual_interest_rate, loan_duration_in_years))  # Output -> 585.89","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the monthly mortgage payment.\n\n### Input:\nloan_amount = 120000\nannual_interest_rate = 3.25\nloan_duration_in_years = 30\n\n### Output:\ndef monthly_mortgage_payment(loan_amount, annual_interest_rate, loan_duration_in_years):\n monthly_interest_rate = annual_interest_rate \/ 12\n number_of_payments = loan_duration_in_years * 12\n monthly_payment = loan_amount * (monthly_interest_rate \/ (1 - (1 + monthly_interest_rate)**(-number_of_payments)))\nreturn monthly_payment\n\nprint(monthly_mortgage_payment(loan_amount, annual_interest_rate, loan_duration_in_years))  # Output -> 585.89","tok_input_length":163,"tok_output_length":101,"system_prompt":"","index":13820}
{"question":"Write a function in Python to perform standard normalization of a given data.","input":"Data:\n[35,45,55,65,75]","expected_output":"def normalize(data):\n    \"\"\"Performs standard normalization of a given data\"\"\"\n    mean = sum(data)\/len(data)\n    std_dev = (sum([(x-mean)**2 for x in data])\/len(data)) ** 0.5\n    return [(x-mean)\/std_dev for x in data]\n\ndata = [35,45,55,65,75]\n\nprint(normalize(data)) # output: [-1.0, -0.5, 0.0, 0.5, 1.0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to perform standard normalization of a given data.\n\n### Input:\nData:\n[35,45,55,65,75]\n\n### Output:\ndef normalize(data):\n    \"\"\"Performs standard normalization of a given data\"\"\"\n    mean = sum(data)\/len(data)\n    std_dev = (sum([(x-mean)**2 for x in data])\/len(data)) ** 0.5\n    return [(x-mean)\/std_dev for x in data]\n\ndata = [35,45,55,65,75]\n\nprint(normalize(data)) # output: [-1.0, -0.5, 0.0, 0.5, 1.0]","tok_input_length":163,"tok_output_length":109,"system_prompt":"","index":7425}
{"question":"Compose a python script to create a bar chart.","input":"[4,6,3,7,2]","expected_output":"import matplotlib.pyplot as plt\n \n# x-axis values \nx = [4, 6, 3, 7, 2] \n\n# Y-axis values \ny = [0, 2, 3, 4, 5] \n\n# Function to plot the bar\nplt.bar(x, y)\n\n# Naming the x-axis \nplt.xlabel('x - axis')\n# Naming the y-axis \nplt.ylabel('y - axis')\n# Writing a title to the graph\nplt.title('Bar Chart') \n# Show the plot\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a python script to create a bar chart.\n\n### Input:\n[4,6,3,7,2]\n\n### Output:\nimport matplotlib.pyplot as plt\n \n# x-axis values \nx = [4, 6, 3, 7, 2] \n\n# Y-axis values \ny = [0, 2, 3, 4, 5] \n\n# Function to plot the bar\nplt.bar(x, y)\n\n# Naming the x-axis \nplt.xlabel('x - axis')\n# Naming the y-axis \nplt.ylabel('y - axis')\n# Writing a title to the graph\nplt.title('Bar Chart') \n# Show the plot\nplt.show()","tok_input_length":163,"tok_output_length":115,"system_prompt":"","index":7629}
{"question":"Develop a program in Python to detect the outliers of a given dataset.","input":"Not applicable","expected_output":"import numpy as np \n\n# Load dataset \ndata = np.genfromtxt(\"data.csv\", delimiter=\",\") \n\n# Calculate interquartile range \nQ1 = np.percentile(data, 25) \nQ3 = np.percentile(data, 75) \n\n# Interquartile range \nIQR = Q3 - Q1 \n\n# Remove outliers \noutliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))\n\n# Print outliers \nprint(data[outliers])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to detect the outliers of a given dataset.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np \n\n# Load dataset \ndata = np.genfromtxt(\"data.csv\", delimiter=\",\") \n\n# Calculate interquartile range \nQ1 = np.percentile(data, 25) \nQ3 = np.percentile(data, 75) \n\n# Interquartile range \nIQR = Q3 - Q1 \n\n# Remove outliers \noutliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))\n\n# Print outliers \nprint(data[outliers])","tok_input_length":163,"tok_output_length":119,"system_prompt":"","index":8054}
{"question":"Write a Python program to simulate a random neuron network.","input":"","expected_output":"import random\n\n# Neuron class\nclass Neuron:\n    # Initialize inputs and weights\n    def __init__(self, numInputs):\n        self.weights = []\n        for i in range(numInputs):\n            self.weights.append(random.uniform(-1, 1))\n\n    # Process inputs and produce output\n    def process(self, inputs):\n        # Multiply inputs by weights\n        output = 0\n        for i in range(len(self.weights)):\n            output += self.weights[i] * inputs[i]\n\n        # Use sigmoid function to normalize result\n        return 1 \/ (1 + math.exp(-output))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate a random neuron network.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Neuron class\nclass Neuron:\n    # Initialize inputs and weights\n    def __init__(self, numInputs):\n        self.weights = []\n        for i in range(numInputs):\n            self.weights.append(random.uniform(-1, 1))\n\n    # Process inputs and produce output\n    def process(self, inputs):\n        # Multiply inputs by weights\n        output = 0\n        for i in range(len(self.weights)):\n            output += self.weights[i] * inputs[i]\n\n        # Use sigmoid function to normalize result\n        return 1 \/ (1 + math.exp(-output))","tok_input_length":163,"tok_output_length":125,"system_prompt":"","index":16605}
{"question":"Implement a REST API endpoint with Python and Flask to POST user data including username, email, and password.","input":"{\n \"username\": \"scott_pilgrim\",\n \"email\": \"scott@pilgrim.com\",\n \"password\": \"ferriswheel\"\n}","expected_output":"import flask\nfrom flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route('\/users', methods=['POST'])\ndef create_user():\n data = request.get_json()\n username = data['username']\n email = data['email']\n password = data['password']\n\n # Insert into database\n\n return jsonify({\"message\": \"User created successfully\"})\n\nif __name__ == '__main__':\n app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a REST API endpoint with Python and Flask to POST user data including username, email, and password.\n\n### Input:\n{\n \"username\": \"scott_pilgrim\",\n \"email\": \"scott@pilgrim.com\",\n \"password\": \"ferriswheel\"\n}\n\n### Output:\nimport flask\nfrom flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route('\/users', methods=['POST'])\ndef create_user():\n data = request.get_json()\n username = data['username']\n email = data['email']\n password = data['password']\n\n # Insert into database\n\n return jsonify({\"message\": \"User created successfully\"})\n\nif __name__ == '__main__':\n app.run()","tok_input_length":164,"tok_output_length":83,"system_prompt":"","index":13181}
{"question":"Create a program in Python for searching a database for a specified record.","input":"Input database:\nname\t\tage\nJohn Smith\t25\nJane Doe\t32\n\nRecord to search for: John Smith","expected_output":"def search_database(data, record):\n \n    # Search each row in the database\n    for row in data:\n        if row[0] == record:\n            # Record found\n            print(\"Record found:\", row)\n            return\n \n    # Record not found\n    print(\"Record not found\")\n \n# Driver code\ndata = [[\"John Smith\", 25], [\"Jane Doe\", 32]]\n \nrecord = \"John Smith\"\n \nsearch_database(data, record)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python for searching a database for a specified record.\n\n### Input:\nInput database:\nname\t\tage\nJohn Smith\t25\nJane Doe\t32\n\nRecord to search for: John Smith\n\n### Output:\ndef search_database(data, record):\n \n    # Search each row in the database\n    for row in data:\n        if row[0] == record:\n            # Record found\n            print(\"Record found:\", row)\n            return\n \n    # Record not found\n    print(\"Record not found\")\n \n# Driver code\ndata = [[\"John Smith\", 25], [\"Jane Doe\", 32]]\n \nrecord = \"John Smith\"\n \nsearch_database(data, record)","tok_input_length":164,"tok_output_length":97,"system_prompt":"","index":6545}
{"question":"Write a JavaScript algorithm to check if a given string contains all the characters of another given string.","input":"str1 = 'python' \nstr2 = 'ono',","expected_output":"function checkStringContains(str1, str2) {\n  let occurs = 0;\n  for (let i = 0; i < str1.length; i++) {\n    for (let j = 0; j <= str2.length; j++) {\n      if (str1[i] === str2[j]) {\n        occurs++;\n        break;\n      }\n    }\n  }\n  return occurs === str2.length;\n}\n\nconst result = checkStringContains('python', 'ono');\nconsole.log(result);","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a JavaScript algorithm to check if a given string contains all the characters of another given string.\n\n### Input:\nstr1 = 'python' \nstr2 = 'ono',\n\n### Output:\nfunction checkStringContains(str1, str2) {\n  let occurs = 0;\n  for (let i = 0; i < str1.length; i++) {\n    for (let j = 0; j <= str2.length; j++) {\n      if (str1[i] === str2[j]) {\n        occurs++;\n        break;\n      }\n    }\n  }\n  return occurs === str2.length;\n}\n\nconst result = checkStringContains('python', 'ono');\nconsole.log(result);","tok_input_length":164,"tok_output_length":105,"system_prompt":"","index":1839}
{"question":"Given a string S, write a Python program to find the longest substring of S which contains distinct characters.","input":"stringS = \"abcabcbb\"","expected_output":"def longest_distinct_substring(s):\n longest = 0\n \n# creating a dictionary \n seen = {}\n start = 0\n \n for i, char in enumerate(s):\n  if char in seen and start <= seen[char]:\n   start = seen[char] + 1\n  \n  else:\n   longest = max(longest, i - start + 1)\n \n seen[char] = i\n \n return longest\n\nprint(longest_distinct_substring(\"abcabcbb\"))\n# Output: 3 (the longest substring is \"abc\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string S, write a Python program to find the longest substring of S which contains distinct characters.\n\n### Input:\nstringS = \"abcabcbb\"\n\n### Output:\ndef longest_distinct_substring(s):\n longest = 0\n \n# creating a dictionary \n seen = {}\n start = 0\n \n for i, char in enumerate(s):\n  if char in seen and start <= seen[char]:\n   start = seen[char] + 1\n  \n  else:\n   longest = max(longest, i - start + 1)\n \n seen[char] = i\n \n return longest\n\nprint(longest_distinct_substring(\"abcabcbb\"))\n# Output: 3 (the longest substring is \"abc\")","tok_input_length":164,"tok_output_length":108,"system_prompt":"","index":6391}
{"question":"Design a Python program to calculate the area of a triangle given three side lengths.","input":"3, 4, 5","expected_output":"def calculate_triangle_area(a, b, c):\n    # Calculate the semi-perimeter\n    s = (a + b + c) \/ 2\n    # Calculate the area of the triangle\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\na = 3\nb = 4\nc = 5\n\narea = calculate_triangle_area(a, b, c)\nprint(\"Area of the triangle is: {}\".format(area))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to calculate the area of a triangle given three side lengths.\n\n### Input:\n3, 4, 5\n\n### Output:\ndef calculate_triangle_area(a, b, c):\n    # Calculate the semi-perimeter\n    s = (a + b + c) \/ 2\n    # Calculate the area of the triangle\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\na = 3\nb = 4\nc = 5\n\narea = calculate_triangle_area(a, b, c)\nprint(\"Area of the triangle is: {}\".format(area))","tok_input_length":164,"tok_output_length":113,"system_prompt":"","index":3251}
{"question":"Create a class in Python to convert temperature values from Fahrenheit to Celsius.","input":"Not applicable","expected_output":"class TemperatureConverter:\n  \n  def __init__(self):\n    self.temp = 0\n  \n  def set_temp(self, temp):\n    self.temp = temp\n  \n  def convert_temp(self):\n    return (self.temp - 32.0) * 5.0\/9.0\n\n#Example Temperature Value\nf_temperature = 212\n\n# Create an instance\ntc = TemperatureConverter()\n\n#Set the temp value\ntc.set_temp(f_temperature)\n\n#Convert and print it\ncelsius_temp = tc.convert_temp()\nprint(celsius_temp)\n# Output: 100.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to convert temperature values from Fahrenheit to Celsius.\n\n### Input:\nNot applicable\n\n### Output:\nclass TemperatureConverter:\n  \n  def __init__(self):\n    self.temp = 0\n  \n  def set_temp(self, temp):\n    self.temp = temp\n  \n  def convert_temp(self):\n    return (self.temp - 32.0) * 5.0\/9.0\n\n#Example Temperature Value\nf_temperature = 212\n\n# Create an instance\ntc = TemperatureConverter()\n\n#Set the temp value\ntc.set_temp(f_temperature)\n\n#Convert and print it\ncelsius_temp = tc.convert_temp()\nprint(celsius_temp)\n# Output: 100.0","tok_input_length":164,"tok_output_length":120,"system_prompt":"","index":17470}
{"question":"Create a Python program which takes a list of integers and prints a list containing only those integers which have more than 2 occurrences in the input list.","input":"list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]","expected_output":"list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]\n\ndef findDuplicates(list):\n result = []\n seen = set()\n \n for num in list:\n if num not in seen:\n seen.add(num)\n else:\n result.append(num)\n \n return result\n\nprint(findDuplicates(list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes a list of integers and prints a list containing only those integers which have more than 2 occurrences in the input list.\n\n### Input:\nlist = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]\n\n### Output:\nlist = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]\n\ndef findDuplicates(list):\n result = []\n seen = set()\n \n for num in list:\n if num not in seen:\n seen.add(num)\n else:\n result.append(num)\n \n return result\n\nprint(findDuplicates(list))","tok_input_length":165,"tok_output_length":76,"system_prompt":"","index":964}
{"question":"Write a Python program to sort a list of strings alphabetically using the Bubble Sort algorithm.","input":"unsorted_list = [\"cobra\", \"rhinoceros\", \"armadillo\", \"aardvark\"]","expected_output":"def bubble_sort(lst):\n    for i in range(len(lst)-1):\n        for j in range(len(lst)-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\nunsorted_list = [\"cobra\", \"rhinoceros\", \"armadillo\", \"aardvark\"]\n\nsorted_list = bubble_sort(unsorted_list)\n\nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of strings alphabetically using the Bubble Sort algorithm.\n\n### Input:\nunsorted_list = [\"cobra\", \"rhinoceros\", \"armadillo\", \"aardvark\"]\n\n### Output:\ndef bubble_sort(lst):\n    for i in range(len(lst)-1):\n        for j in range(len(lst)-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\nunsorted_list = [\"cobra\", \"rhinoceros\", \"armadillo\", \"aardvark\"]\n\nsorted_list = bubble_sort(unsorted_list)\n\nprint(sorted_list)","tok_input_length":165,"tok_output_length":96,"system_prompt":"","index":10701}
{"question":"Create a Python code to find the second smallest number in an array.","input":"array = [5, 3, 4, 6, 1, 8]","expected_output":"def second_smallest(array):\n    smallest = None\n    second_smallest = None\n\n    for e in array:\n        if smallest is None or e < smallest:\n            second_smallest = smallest\n            smallest = e\n        elif second_smallest is None or e < second_smallest:\n            second_smallest = e\n\n    return second_smallest\n\narray = [5, 3, 4, 6, 1, 8]\nresult = second_smallest(array)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to find the second smallest number in an array.\n\n### Input:\narray = [5, 3, 4, 6, 1, 8]\n\n### Output:\ndef second_smallest(array):\n    smallest = None\n    second_smallest = None\n\n    for e in array:\n        if smallest is None or e < smallest:\n            second_smallest = smallest\n            smallest = e\n        elif second_smallest is None or e < second_smallest:\n            second_smallest = e\n\n    return second_smallest\n\narray = [5, 3, 4, 6, 1, 8]\nresult = second_smallest(array)\nprint(result)","tok_input_length":165,"tok_output_length":104,"system_prompt":"","index":17237}
{"question":"Write a code in Python to display the mean and standard deviation of a list of numbers","input":"[3,3,3,3,3]","expected_output":"#importing the statistics module \nimport statistics \n  \n# declaring a list  \nMyList = [3,3,3,3,3] \n  \n# using mean() to calculate mean of list elements \nMean = statistics.mean(MyList) \n  \n# using stdev() to calculate standard deviation of list elements \nStandard_Deviation = statistics.stdev(MyList) \n  \n# printing mean \nprint(\"Mean of List Elements is :\", Mean) \n  \n# printing standard deviation \nprint(\"Standard Deviation of List Elements is :\", Standard_Deviation)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to display the mean and standard deviation of a list of numbers\n\n### Input:\n[3,3,3,3,3]\n\n### Output:\n#importing the statistics module \nimport statistics \n  \n# declaring a list  \nMyList = [3,3,3,3,3] \n  \n# using mean() to calculate mean of list elements \nMean = statistics.mean(MyList) \n  \n# using stdev() to calculate standard deviation of list elements \nStandard_Deviation = statistics.stdev(MyList) \n  \n# printing mean \nprint(\"Mean of List Elements is :\", Mean) \n  \n# printing standard deviation \nprint(\"Standard Deviation of List Elements is :\", Standard_Deviation)","tok_input_length":165,"tok_output_length":109,"system_prompt":"","index":10606}
{"question":"Create a Python function that takes a string and finds the longest word in it.","input":"str = \"I love learning new things\"","expected_output":"def findLongestWord(string):\n # Split the string into an array of words\n words = string.split(\" \")\n\n # Initialize the longest word as empty string\n longestWord = \"\"\n\n# Iterate over the words and keep track of the longest one\n for word in words:\n if len(word) > len(longestWord):\n longestWord = word\n\n # Return the longest word\n return longestWord\n\n# Test\nstring = \"I love learning new things\"\nlongestWord = findLongestWord(string)\nprint(\"Longest word is \" + longestWord)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a string and finds the longest word in it.\n\n### Input:\nstr = \"I love learning new things\"\n\n### Output:\ndef findLongestWord(string):\n # Split the string into an array of words\n words = string.split(\" \")\n\n # Initialize the longest word as empty string\n longestWord = \"\"\n\n# Iterate over the words and keep track of the longest one\n for word in words:\n if len(word) > len(longestWord):\n longestWord = word\n\n # Return the longest word\n return longestWord\n\n# Test\nstring = \"I love learning new things\"\nlongestWord = findLongestWord(string)\nprint(\"Longest word is \" + longestWord)","tok_input_length":165,"tok_output_length":113,"system_prompt":"","index":15445}
{"question":"Read a given time-series dataset in Python and build a forecast model to predict future values.","input":"","expected_output":"import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndf = pd.read_csv('data.csv')\n\n# Split data into train and test sets\nX_train = df.loc[:2000, ['time']].values\ny_train = df.loc[:2000, ['value']].values\nX_test = df.loc[2000:, ['time']].values\ny_test = df.loc[2000:, ['value']].values\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict values\npredictions = model.predict(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRead a given time-series dataset in Python and build a forecast model to predict future values.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndf = pd.read_csv('data.csv')\n\n# Split data into train and test sets\nX_train = df.loc[:2000, ['time']].values\ny_train = df.loc[:2000, ['value']].values\nX_test = df.loc[2000:, ['time']].values\ny_test = df.loc[2000:, ['value']].values\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict values\npredictions = model.predict(X_test)","tok_input_length":165,"tok_output_length":120,"system_prompt":"","index":8152}
{"question":"Generate a list of the first 10 Fibonacci numbers in Python.","input":"","expected_output":"def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nfib_list = [] \nfor i in range(10):\n   fib_list.append(fibonacci(i)) \n\nprint(fib_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of the first 10 Fibonacci numbers in Python.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nfib_list = [] \nfor i in range(10):\n   fib_list.append(fibonacci(i)) \n\nprint(fib_list)","tok_input_length":165,"tok_output_length":125,"system_prompt":"","index":3595}
{"question":"Write a Python script that takes in two lists of length n and outputs a set of combinations of the two lists such that the resulting list is of length n^2.","input":"list1 = [1,2,3]\nlist2 = [4,5,6]","expected_output":"combinations = []\n\nfor i in range(len(list1)):\nfor j in range(len(list2)):\ncombinations.append((list1[i], list2[j]))\n\nprint(combinations)\n# Output: [(1,4), (1,5), (1,6), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes in two lists of length n and outputs a set of combinations of the two lists such that the resulting list is of length n^2.\n\n### Input:\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\n### Output:\ncombinations = []\n\nfor i in range(len(list1)):\nfor j in range(len(list2)):\ncombinations.append((list1[i], list2[j]))\n\nprint(combinations)\n# Output: [(1,4), (1,5), (1,6), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6)]","tok_input_length":166,"tok_output_length":85,"system_prompt":"","index":8998}
{"question":"Given a list of tuples containing names and grades, calculate the average grade for each name using Python.","input":"[('Bob', 80), ('John', 90), ('Bob', 70), ('John', 85)]","expected_output":"grades = [('Bob', 80), ('John', 90), ('Bob', 70), ('John', 85)]\n\ngrade_totals = {}\n\nfor name, grade in grades:\n if name in grade_totals:\n    grade_totals[name] = (grade_totals[name] + grade) \/ 2\n else:\n    grade_totals[name] = grade\n\nfor name, average in grade_totals.items():\n print(f'{name} has an average grade of {average}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of tuples containing names and grades, calculate the average grade for each name using Python.\n\n### Input:\n[('Bob', 80), ('John', 90), ('Bob', 70), ('John', 85)]\n\n### Output:\ngrades = [('Bob', 80), ('John', 90), ('Bob', 70), ('John', 85)]\n\ngrade_totals = {}\n\nfor name, grade in grades:\n if name in grade_totals:\n    grade_totals[name] = (grade_totals[name] + grade) \/ 2\n else:\n    grade_totals[name] = grade\n\nfor name, average in grade_totals.items():\n print(f'{name} has an average grade of {average}')","tok_input_length":166,"tok_output_length":94,"system_prompt":"","index":2034}
{"question":"Design and implement a neural network in Python to predict the price of a house given a set of features.","input":"[0.8, 0.4, 0.7]","expected_output":"import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nfeatures = np.array([[0.8, 0.4, 0.7]])\n\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=3, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\n\nmodel.compile(loss='mse', optimizer='adam', metrics=['mse'])\n\nmodel.fit(features, batch_size=3,epochs=200)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement a neural network in Python to predict the price of a house given a set of features.\n\n### Input:\n[0.8, 0.4, 0.7]\n\n### Output:\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nfeatures = np.array([[0.8, 0.4, 0.7]])\n\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=3, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\n\nmodel.compile(loss='mse', optimizer='adam', metrics=['mse'])\n\nmodel.fit(features, batch_size=3,epochs=200)","tok_input_length":166,"tok_output_length":103,"system_prompt":"","index":312}
{"question":"Generate a Python program to calculate the most common value in a list","input":"['a', 'a', 'b', 'd', 'e', 'a']","expected_output":"def most_common(list):\n    dict = {}\n    for item in list:\n        dict[item] = dict.get(item,0) + 1\n    max_count = 0\n    max_item = list[0]\n    for k,v in dict.items():\n        if v > max_count:\n            max_count = v\n            max_item = k\n    return max_item\n\nlist = ['a', 'a', 'b', 'd', 'e', 'a']\nresult = most_common(list)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the most common value in a list\n\n### Input:\n['a', 'a', 'b', 'd', 'e', 'a']\n\n### Output:\ndef most_common(list):\n    dict = {}\n    for item in list:\n        dict[item] = dict.get(item,0) + 1\n    max_count = 0\n    max_item = list[0]\n    for k,v in dict.items():\n        if v > max_count:\n            max_count = v\n            max_item = k\n    return max_item\n\nlist = ['a', 'a', 'b', 'd', 'e', 'a']\nresult = most_common(list)\nprint(result)","tok_input_length":166,"tok_output_length":107,"system_prompt":"","index":6139}
{"question":"Build a Python module that contains a class called \u201cFibonacci\u201d capable of generating a list of n Fibonacci numbers","input":"n = 5","expected_output":"class Fibonacci:\n    def __init__(self, n):\n        self.n = n\n        self.fib = []\n    \n    def generate_list(self):\n        if self.n <= 0:\n            print('Invalid input.')\n        elif self.n == 1:\n            self.fib = [0]\n        else:\n            self.fib = [0,1]\n            for i in range(2,self.n):\n                self.fib.append(self.fib[i-2] + self.fib[i-1])\n        return self.fib","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python module that contains a class called \u201cFibonacci\u201d capable of generating a list of n Fibonacci numbers\n\n### Input:\nn = 5\n\n### Output:\nclass Fibonacci:\n    def __init__(self, n):\n        self.n = n\n        self.fib = []\n    \n    def generate_list(self):\n        if self.n <= 0:\n            print('Invalid input.')\n        elif self.n == 1:\n            self.fib = [0]\n        else:\n            self.fib = [0,1]\n            for i in range(2,self.n):\n                self.fib.append(self.fib[i-2] + self.fib[i-1])\n        return self.fib","tok_input_length":166,"tok_output_length":110,"system_prompt":"","index":3072}
{"question":"Create a web scraper in Python that extracts information from a webpage and stores it in a JSON object.","input":"Not applicable","expected_output":"import requests\nfrom bs4 import BeautifulSoup\nimport json\n\nurl = 'http:\/\/example.com\/'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the information\ninformation = {}    \ninformation['title'] = soup.title.string\ninformation['h1'] = soup.h1.string\ninformation['description'] = soup.find('meta', attrs={'name':'description'})['content']\n\n# Save the information\nwith open('information.json', 'w') as f:\n    json.dump(information, f)\nprint('Data saved!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that extracts information from a webpage and stores it in a JSON object.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport json\n\nurl = 'http:\/\/example.com\/'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the information\ninformation = {}    \ninformation['title'] = soup.title.string\ninformation['h1'] = soup.h1.string\ninformation['description'] = soup.find('meta', attrs={'name':'description'})['content']\n\n# Save the information\nwith open('information.json', 'w') as f:\n    json.dump(information, f)\nprint('Data saved!')","tok_input_length":166,"tok_output_length":116,"system_prompt":"","index":5226}
{"question":"Develop a Python program to print the digits of a given integer in reverse order.","input":"123","expected_output":"\"\"\"\nPython script to print the digits of a given integer in reverse order\n\"\"\"\n\nnum = int(input('Enter an integer: '))\n\n# Initializing the variable to hold the reversed digits \nreverse = 0\n\nwhile (num > 0):\n    # Extracting the last digit\n    remainder = num % 10\n\n    # Multiplying the reverse variable by 10 and adding the remainder\n    reverse = (reverse * 10) + remainder\n\n    # Removing the last digit of the original number\n    num = num \/\/ 10\n\n# printing the reversed digits\nprint(reverse)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to print the digits of a given integer in reverse order.\n\n### Input:\n123\n\n### Output:\n\"\"\"\nPython script to print the digits of a given integer in reverse order\n\"\"\"\n\nnum = int(input('Enter an integer: '))\n\n# Initializing the variable to hold the reversed digits \nreverse = 0\n\nwhile (num > 0):\n    # Extracting the last digit\n    remainder = num % 10\n\n    # Multiplying the reverse variable by 10 and adding the remainder\n    reverse = (reverse * 10) + remainder\n\n    # Removing the last digit of the original number\n    num = num \/\/ 10\n\n# printing the reversed digits\nprint(reverse)","tok_input_length":166,"tok_output_length":121,"system_prompt":"","index":10785}
{"question":"What is the purpose of Python decorators?","input":"","expected_output":"The purpose of Python decorators is to modify a function's behavior without having to change the actual function's code. Decorators are functions, or objects that respond to a function call, that are applied to other functions. They can be used to modify existing functions by wrapping them in a layer of additional logic. For example, a decorator function might be used to add debug code to print out a function's arguments, or to make sure that a function is only called with the correct number and type of arguments. Decorators can also be used to cache the results of a function so that it does not need to be recalculated each time it is called.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the purpose of Python decorators?\n\n### Input:\n\n\n### Output:\nThe purpose of Python decorators is to modify a function's behavior without having to change the actual function's code. Decorators are functions, or objects that respond to a function call, that are applied to other functions. They can be used to modify existing functions by wrapping them in a layer of additional logic. For example, a decorator function might be used to add debug code to print out a function's arguments, or to make sure that a function is only called with the correct number and type of arguments. Decorators can also be used to cache the results of a function so that it does not need to be recalculated each time it is called.","tok_input_length":166,"tok_output_length":131,"system_prompt":"","index":1437}
{"question":"Write a Python script that will take an array of numbers and output the distinct elements.","input":"[1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]","expected_output":"my_list = [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]\nnew_list = []\n\nfor item in my_list:\n if item not in new_list:\n new_list.append(item)\n\nprint(new_list)\n# Output: [1, 3, 4, 5, 6, 7, 8, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that will take an array of numbers and output the distinct elements.\n\n### Input:\n[1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]\n\n### Output:\nmy_list = [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]\nnew_list = []\n\nfor item in my_list:\n if item not in new_list:\n new_list.append(item)\n\nprint(new_list)\n# Output: [1, 3, 4, 5, 6, 7, 8, 9]","tok_input_length":167,"tok_output_length":90,"system_prompt":"","index":769}
{"question":"Create an AWS Lambda function in Python that sends an automated SMS message when a new user signup is detected.","input":"Phone Number = 3233334444, Message = \"Thank you for signing up for our service\"","expected_output":"import boto3\n\ndef lambda_handler(event, context):\n    phone_number = event[\"Phone Number\"]\n    message = event[\"Message\"]\n\n    # Create an SNS client\n    sns = boto3.client(\"sns\")\n\n    # Publish a simple message to the specified SNS topic\n    response = sns.publish(\n        PhoneNumber=phone_number,\n        Message=message\n    )\n\n    # Response\n    return {\n        'statusCode': 200,\n        'body': response\n    }","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AWS Lambda function in Python that sends an automated SMS message when a new user signup is detected.\n\n### Input:\nPhone Number = 3233334444, Message = \"Thank you for signing up for our service\"\n\n### Output:\nimport boto3\n\ndef lambda_handler(event, context):\n    phone_number = event[\"Phone Number\"]\n    message = event[\"Message\"]\n\n    # Create an SNS client\n    sns = boto3.client(\"sns\")\n\n    # Publish a simple message to the specified SNS topic\n    response = sns.publish(\n        PhoneNumber=phone_number,\n        Message=message\n    )\n\n    # Response\n    return {\n        'statusCode': 200,\n        'body': response\n    }","tok_input_length":167,"tok_output_length":98,"system_prompt":"","index":1160}
{"question":"Write a Python program to store and querying user data.","input":"user_data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n    \n}","expected_output":"import json\n\nuser_data = {\"Name\": \"John\", \"Age\": 25, \"City\": \"New York\"}\n\ndef store_user_data(data):\n    with open('user_data.json', 'w') as f:\n        json.dump(data, f)\n\ndef get_user_data():\n    with open('user_data.json') as f:\n        return json.load(f)\n\n# store data in JSON file\nstore_user_data(user_data)\n\n# get data\ndata = get_user_data()\nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to store and querying user data.\n\n### Input:\nuser_data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n    \n}\n\n### Output:\nimport json\n\nuser_data = {\"Name\": \"John\", \"Age\": 25, \"City\": \"New York\"}\n\ndef store_user_data(data):\n    with open('user_data.json', 'w') as f:\n        json.dump(data, f)\n\ndef get_user_data():\n    with open('user_data.json') as f:\n        return json.load(f)\n\n# store data in JSON file\nstore_user_data(user_data)\n\n# get data\ndata = get_user_data()\nprint(data)","tok_input_length":167,"tok_output_length":101,"system_prompt":"","index":217}
{"question":"Create a Python program that encodes a given passage using the Caesar Cipher algorithm.","input":"plaintext = \"This is a secret message.\"\ncaesar_key = 0","expected_output":"def caesar_cipher(plaintext, caesar_key):\n    ciphertext = \"\"\n\n    for char in plaintext:\n        if char.isalpha():\n            ascii_char = ord(char) - caesar_key\n            if ascii_char < 97:\n                ascii_char += 26\n            ciphertext += chr(ascii_char)\n        else:\n            ciphertext += char\n\n    return ciphertext\n\nplaintext = \"This is a secret message.\"\ncaesar_key = 0\n\nencoded_message = caesar_cipher(plaintext, caesar_key)\nprint(encoded_message)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that encodes a given passage using the Caesar Cipher algorithm.\n\n### Input:\nplaintext = \"This is a secret message.\"\ncaesar_key = 0\n\n### Output:\ndef caesar_cipher(plaintext, caesar_key):\n    ciphertext = \"\"\n\n    for char in plaintext:\n        if char.isalpha():\n            ascii_char = ord(char) - caesar_key\n            if ascii_char < 97:\n                ascii_char += 26\n            ciphertext += chr(ascii_char)\n        else:\n            ciphertext += char\n\n    return ciphertext\n\nplaintext = \"This is a secret message.\"\ncaesar_key = 0\n\nencoded_message = caesar_cipher(plaintext, caesar_key)\nprint(encoded_message)","tok_input_length":167,"tok_output_length":108,"system_prompt":"","index":13818}
{"question":"Build an AI model in Python that can accurately predict the future stock prices of a company.","input":"The stock's historical closing prices for the past month","expected_output":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n#load the historical data\ndata = pd.read_csv('stock-data.csv')\n\n#prepare the feature and target variables\nX = data.iloc[:, :-1]\ny = data['Close']\n\n#fit the linear regression model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n#make predictions\nX_test = 'Input the stock's historical closing prices for the future month here'\npredictions = model.predict(X_test)\n\n#display the predictions\nprint(predictions)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an AI model in Python that can accurately predict the future stock prices of a company.\n\n### Input:\nThe stock's historical closing prices for the past month\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n#load the historical data\ndata = pd.read_csv('stock-data.csv')\n\n#prepare the feature and target variables\nX = data.iloc[:, :-1]\ny = data['Close']\n\n#fit the linear regression model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n#make predictions\nX_test = 'Input the stock's historical closing prices for the future month here'\npredictions = model.predict(X_test)\n\n#display the predictions\nprint(predictions)","tok_input_length":167,"tok_output_length":111,"system_prompt":"","index":15948}
{"question":"Create a K Nearest Neighbors classifier using scikit-learn in Python.","input":"Not applicable","expected_output":"#import packages\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# Create a KNearestNeighbors classifier\nknn = KNeighborsClassifier(n_neighbors=5)\n\n# Train the classifier using fit\nX = np.array([[1,2,3], [2,3,4],[4,5,6]])\ny = np.array([1,0,1])\nknn.fit(X, y)\n\n# Use the trained classifier to make predictions\nknn.predict([[1,2,2],[2,2,2]])\n# Output: array([1, 0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a K Nearest Neighbors classifier using scikit-learn in Python.\n\n### Input:\nNot applicable\n\n### Output:\n#import packages\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# Create a KNearestNeighbors classifier\nknn = KNeighborsClassifier(n_neighbors=5)\n\n# Train the classifier using fit\nX = np.array([[1,2,3], [2,3,4],[4,5,6]])\ny = np.array([1,0,1])\nknn.fit(X, y)\n\n# Use the trained classifier to make predictions\nknn.predict([[1,2,2],[2,2,2]])\n# Output: array([1, 0])","tok_input_length":167,"tok_output_length":121,"system_prompt":"","index":17726}
{"question":"Create a machine learning program in Python for binary classification.","input":"Not applicable","expected_output":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\n# Read dataset\nX = np.loadtxt('.\/data.txt', delimiter=',')\ny = np.loadtxt('.\/labels.txt')\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\n# Test the model\nscore = classifier.score(X_test, y_test)\nprint(\"Model accuracy:\", score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning program in Python for binary classification.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\n# Read dataset\nX = np.loadtxt('.\/data.txt', delimiter=',')\ny = np.loadtxt('.\/labels.txt')\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\n# Test the model\nscore = classifier.score(X_test, y_test)\nprint(\"Model accuracy:\", score)","tok_input_length":167,"tok_output_length":126,"system_prompt":"","index":14961}
{"question":"Generate the following output in Python","input":"Given a list [1,2,3,4,5] generate the following:\n[[1], [2], [3], [4], [5], [1, 2], [2, 3], [3, 4], [4, 5], [1,2, 3], [2, 3, 4], [3, 4, 5]]","expected_output":"def generate(lst):\n    res = []\n    for i in range(1, len(lst) + 1):\n        for j in range(len(lst) - i + 1):\n            res.append(lst[j: j + i])\n    return res","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate the following output in Python\n\n### Input:\nGiven a list [1,2,3,4,5] generate the following:\n[[1], [2], [3], [4], [5], [1, 2], [2, 3], [3, 4], [4, 5], [1,2, 3], [2, 3, 4], [3, 4, 5]]\n\n### Output:\ndef generate(lst):\n    res = []\n    for i in range(1, len(lst) + 1):\n        for j in range(len(lst) - i + 1):\n            res.append(lst[j: j + i])\n    return res","tok_input_length":168,"tok_output_length":51,"system_prompt":"","index":8752}
{"question":"Create a Python program to compare two lists and find their common elements.","input":"list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]","expected_output":"def compare_lists(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ncommon_elements = compare_lists(list1, list2)\nprint(common_elements)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compare two lists and find their common elements.\n\n### Input:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\n### Output:\ndef compare_lists(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ncommon_elements = compare_lists(list1, list2)\nprint(common_elements)","tok_input_length":168,"tok_output_length":91,"system_prompt":"","index":17735}
{"question":"Create a Python program for sentiment analysis. The program should read a given text, classify the overall sentiment as positive, neutral, or negative, and display the result.","input":"Text:\nThe food was delicious but the service was slow.","expected_output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nnltk.download('vader_lexicon')\n\ntext = 'The food was delicious but the service was slow.'\nsid = SentimentIntensityAnalyzer()\nss = sid.polarity_scores(text)\n\nif ss['compound'] >= 0.5:\n print('Positive sentiment')\nelif ss['compound'] <= -0.5:\n print('Negative sentiment')\nelse:\n print('Neutral sentiment')\n\nOutput:\nNegative sentiment","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for sentiment analysis. The program should read a given text, classify the overall sentiment as positive, neutral, or negative, and display the result.\n\n### Input:\nText:\nThe food was delicious but the service was slow.\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nnltk.download('vader_lexicon')\n\ntext = 'The food was delicious but the service was slow.'\nsid = SentimentIntensityAnalyzer()\nss = sid.polarity_scores(text)\n\nif ss['compound'] >= 0.5:\n print('Positive sentiment')\nelif ss['compound'] <= -0.5:\n print('Negative sentiment')\nelse:\n print('Neutral sentiment')\n\nOutput:\nNegative sentiment","tok_input_length":168,"tok_output_length":96,"system_prompt":"","index":2031}
{"question":"Create a function in Python that takes a list of numbers as an input and sorts them in ascending order.","input":"[5, 1, 3, 9, 4, 2]","expected_output":"def sortAscending(arr):\n    \n    # loop through the array\n    for i in range(len(arr)): \n        # find the minimum value in the array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # swap the found minimum element with the first element       \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n  \n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list of numbers as an input and sorts them in ascending order.\n\n### Input:\n[5, 1, 3, 9, 4, 2]\n\n### Output:\ndef sortAscending(arr):\n    \n    # loop through the array\n    for i in range(len(arr)): \n        # find the minimum value in the array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # swap the found minimum element with the first element       \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n  \n    return arr","tok_input_length":168,"tok_output_length":102,"system_prompt":"","index":1660}
{"question":"Design and write a Python program to generate a random strong password with at least 5 of the following characters: upper-case letters, lower case letters, numbers, and symbols.","input":"","expected_output":"\"\"\"\nGenerate a random strong password with at least 5 of the following characters: upper-case letters, lower case letters, numbers, and symbols\n\"\"\"\n\nimport random\nimport string\n\ndef generate_password():\n    characters = list(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation)\n    num_chars = 5\n    password = random.choices(characters, k=num_chars)\n    password = ''.join(password)\n    return password\n\nif __name__ == '__main__':\n    print(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and write a Python program to generate a random strong password with at least 5 of the following characters: upper-case letters, lower case letters, numbers, and symbols.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a random strong password with at least 5 of the following characters: upper-case letters, lower case letters, numbers, and symbols\n\"\"\"\n\nimport random\nimport string\n\ndef generate_password():\n    characters = list(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation)\n    num_chars = 5\n    password = random.choices(characters, k=num_chars)\n    password = ''.join(password)\n    return password\n\nif __name__ == '__main__':\n    print(generate_password())","tok_input_length":168,"tok_output_length":106,"system_prompt":"","index":7966}
{"question":"Construct a web crawler in Python to retrieve the URL of all the articles posted on a given page.","input":"URL: https:\/\/www.example.com\/","expected_output":"\"\"\"\nConstruct a web crawler in Python to retrieve the URL of all the articles posted on a given page\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_urls(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, \"lxml\")\n    articles = set()\n    for article in soup.find_all('a', attrs={'class':'article-link'}):\n        articles.add(article['href'])\n    return articles\n\nif __name__ == '__main__':\n    url = 'https:\/\/www.example.com\/'\n    print(get_urls(url))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a web crawler in Python to retrieve the URL of all the articles posted on a given page.\n\n### Input:\nURL: https:\/\/www.example.com\/\n\n### Output:\n\"\"\"\nConstruct a web crawler in Python to retrieve the URL of all the articles posted on a given page\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_urls(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, \"lxml\")\n    articles = set()\n    for article in soup.find_all('a', attrs={'class':'article-link'}):\n        articles.add(article['href'])\n    return articles\n\nif __name__ == '__main__':\n    url = 'https:\/\/www.example.com\/'\n    print(get_urls(url))","tok_input_length":168,"tok_output_length":113,"system_prompt":"","index":2318}
{"question":"Generate a Python 3 program to find out the highest common factor of two numbers.","input":"60 and 80","expected_output":"def find_hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    for i in range(1,smaller + 1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n              \n    return hcf \n      \nx = 60\ny = 80\n\nhcf = find_hcf(x, y) \nprint(\"The Highest Common Factor of\", x,\"and\", y,\"is\", hcf)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python 3 program to find out the highest common factor of two numbers.\n\n### Input:\n60 and 80\n\n### Output:\ndef find_hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    for i in range(1,smaller + 1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n              \n    return hcf \n      \nx = 60\ny = 80\n\nhcf = find_hcf(x, y) \nprint(\"The Highest Common Factor of\", x,\"and\", y,\"is\", hcf)","tok_input_length":168,"tok_output_length":119,"system_prompt":"","index":9698}
{"question":"Generate a Python program that compares two binary trees to check if they are similar.","input":"","expected_output":"class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that compares two binary trees to check if they are similar.\n\n### Input:\n\n\n### Output:\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)","tok_input_length":168,"tok_output_length":125,"system_prompt":"","index":67}
{"question":"Implement the quicksort algorithm in Python.","input":"","expected_output":"def quicksort(numbers):\n    '''\n    This function implements the quicksort algorithm to sort a given array of numbers.\n    \n    Args:\n        numbers (list): the array of numbers to be sorted\n    \n    Returns:\n        list: the sorted array\n    '''\n    if len(numbers) == 0:\n        return []\n\n    # pivot will be the middle element of the list\n    pivot = numbers[0]\n    left = [x for x in numbers[1:] if x < pivot]\n    right = [x for x in numbers[1:] if x >= pivot]\n\n    return quicksort(left) + [pivot] + quicksort(right)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the quicksort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef quicksort(numbers):\n    '''\n    This function implements the quicksort algorithm to sort a given array of numbers.\n    \n    Args:\n        numbers (list): the array of numbers to be sorted\n    \n    Returns:\n        list: the sorted array\n    '''\n    if len(numbers) == 0:\n        return []\n\n    # pivot will be the middle element of the list\n    pivot = numbers[0]\n    left = [x for x in numbers[1:] if x < pivot]\n    right = [x for x in numbers[1:] if x >= pivot]\n\n    return quicksort(left) + [pivot] + quicksort(right)","tok_input_length":168,"tok_output_length":133,"system_prompt":"","index":12721}
{"question":"Write a Python program to optimize a set of points in a 3-dimensional plane.","input":"points = [[10, 12, 13], [1, 8, 9], [3, 5, 7]]","expected_output":"import scipy.optimize as opt\n\ndef objective(x):\n return sum([x[i]**2 for i in range(len(x))])\n\ndef constraint1(x):\n return 16 - x[0]**2 - x[1]**2 - x[2]**2\n\ncons = [{'type': 'ineq','fun': constraint1}]\n\nx = [0, 0, 0]\n\nsolution = opt.minimize(objective, x, constraints=cons)\n\nprint(solution)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a set of points in a 3-dimensional plane.\n\n### Input:\npoints = [[10, 12, 13], [1, 8, 9], [3, 5, 7]]\n\n### Output:\nimport scipy.optimize as opt\n\ndef objective(x):\n return sum([x[i]**2 for i in range(len(x))])\n\ndef constraint1(x):\n return 16 - x[0]**2 - x[1]**2 - x[2]**2\n\ncons = [{'type': 'ineq','fun': constraint1}]\n\nx = [0, 0, 0]\n\nsolution = opt.minimize(objective, x, constraints=cons)\n\nprint(solution)","tok_input_length":169,"tok_output_length":96,"system_prompt":"","index":9338}
{"question":"Create a Python program for predicting the stock market trend.","input":"Historical Stock Prices:\n[50, 55, 53, 57, 52, 49, 54]","expected_output":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndata = np.array([[50], [55], [53], [57], [52], [49], [54]]).reshape(-1, 1)\n\nmodel = LinearRegression()\nmodel.fit(data[:-1], data[1:])\n\npredicted_value = model.predict([[54]])\n\nprint(\"The trend of stock price next day:\", predicted_value[0][0])\n\n# Output: The trend of stock price next day: 53.428571429","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for predicting the stock market trend.\n\n### Input:\nHistorical Stock Prices:\n[50, 55, 53, 57, 52, 49, 54]\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndata = np.array([[50], [55], [53], [57], [52], [49], [54]]).reshape(-1, 1)\n\nmodel = LinearRegression()\nmodel.fit(data[:-1], data[1:])\n\npredicted_value = model.predict([[54]])\n\nprint(\"The trend of stock price next day:\", predicted_value[0][0])\n\n# Output: The trend of stock price next day: 53.428571429","tok_input_length":169,"tok_output_length":105,"system_prompt":"","index":17984}
{"question":"Using Python, create a script that finds the longest common prefix in a given array of strings.","input":"[\"ABCDE\", \"ABCD\", \"ABCXYZ\", \"ABCDEFG\"]","expected_output":"def longest_common_prefix(st):\n    if len(st) == 0: return ''\n \n    first_word = st[0]\n    prefix = ''\n    for i in range(len(first_word)):\n        for w in range(1, len(st)):\n            if i >= len(st[w]) or st[w][i] != first_word[i]:\n                return prefix\n        prefix += first_word[i]\n        \n    return prefix\n \nwords = [\"ABCDE\", \"ABCD\", \"ABCXYZ\", \"ABCDEFG\"]\nprint(longest_common_prefix(words))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a script that finds the longest common prefix in a given array of strings.\n\n### Input:\n[\"ABCDE\", \"ABCD\", \"ABCXYZ\", \"ABCDEFG\"]\n\n### Output:\ndef longest_common_prefix(st):\n    if len(st) == 0: return ''\n \n    first_word = st[0]\n    prefix = ''\n    for i in range(len(first_word)):\n        for w in range(1, len(st)):\n            if i >= len(st[w]) or st[w][i] != first_word[i]:\n                return prefix\n        prefix += first_word[i]\n        \n    return prefix\n \nwords = [\"ABCDE\", \"ABCD\", \"ABCXYZ\", \"ABCDEFG\"]\nprint(longest_common_prefix(words))","tok_input_length":169,"tok_output_length":109,"system_prompt":"","index":15778}
{"question":"Design a python program to delete a specified index element from a given list.","input":"[2, 3, 5, 8]","expected_output":"# Defining a function to delete an element from the list \ndef delete_element(List, index): \n     \n    # List is passed by reference and it won't work without passing reference \n    del List[index] \n     \n    # Printing the list aftter the deletion \n    print(\"The new list: \", List) \n     \n# Driver code \nList = [2, 3, 5, 8] \nindex = int(input(\"Enter the index of the element to be deleted: \")) \n     \n# Function calling \ndelete_element(List, index)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to delete a specified index element from a given list.\n\n### Input:\n[2, 3, 5, 8]\n\n### Output:\n# Defining a function to delete an element from the list \ndef delete_element(List, index): \n     \n    # List is passed by reference and it won't work without passing reference \n    del List[index] \n     \n    # Printing the list aftter the deletion \n    print(\"The new list: \", List) \n     \n# Driver code \nList = [2, 3, 5, 8] \nindex = int(input(\"Enter the index of the element to be deleted: \")) \n     \n# Function calling \ndelete_element(List, index)","tok_input_length":169,"tok_output_length":115,"system_prompt":"","index":7697}
{"question":"Write a Python program to use the MusicBrainz API to find the biographic information of a given musician.","input":"","expected_output":"import requests\n\ndef get_biography(artist):\n    base_url = \"https:\/\/musicbrainz.org\/ws\/2\/artist\/\"\n    artist_name = artist.replace(\" \", \"%20\")  # Format URL parameter\n    mbz_url = base_url + artist_name\n    params = \"?fmt=json&inc=url-rels+release-groups\"  # Include biographical info\n    url = mbz_url + params\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(\"Error in response.\")\n        return None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to use the MusicBrainz API to find the biographic information of a given musician.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef get_biography(artist):\n    base_url = \"https:\/\/musicbrainz.org\/ws\/2\/artist\/\"\n    artist_name = artist.replace(\" \", \"%20\")  # Format URL parameter\n    mbz_url = base_url + artist_name\n    params = \"?fmt=json&inc=url-rels+release-groups\"  # Include biographical info\n    url = mbz_url + params\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(\"Error in response.\")\n        return None","tok_input_length":169,"tok_output_length":120,"system_prompt":"","index":5157}
{"question":"Develop a script in Python to check if a number is divisible by 9 or not.","input":"","expected_output":"def isDivisibleBy9(num):\n    # Base case \n    if(num == 0 or num == 9): \n        return True\n   \n    if(num < 9): \n        return False\n  \n    # Recursive case\n    return isDivisibleBy9(sum(map(int,str(num)))) \n\nif __name__ == '__main__':\n    num = int(input('Enter a number: '))\n    if isDivisibleBy9(num):\n        print('Yes, {} is divisible by 9.'.format(num))\n    else:\n        print('No, {} is not divisible by 9.'.format(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a script in Python to check if a number is divisible by 9 or not.\n\n### Input:\n\n\n### Output:\ndef isDivisibleBy9(num):\n    # Base case \n    if(num == 0 or num == 9): \n        return True\n   \n    if(num < 9): \n        return False\n  \n    # Recursive case\n    return isDivisibleBy9(sum(map(int,str(num)))) \n\nif __name__ == '__main__':\n    num = int(input('Enter a number: '))\n    if isDivisibleBy9(num):\n        print('Yes, {} is divisible by 9.'.format(num))\n    else:\n        print('No, {} is not divisible by 9.'.format(num))","tok_input_length":169,"tok_output_length":124,"system_prompt":"","index":11489}
{"question":"Train a model to classify spam emails using Python.","input":"","expected_output":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading dataset\ndf = pd.read_csv(\"spam_classification.csv\")\n\n# splitting dataset\nX = df[\"Message\"]\ny = df[\"Label\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# creating a model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# evaluating the model\nscore = model.score(X_test, y_test)\nprint(\"Model score: {}\".format(score))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a model to classify spam emails using Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading dataset\ndf = pd.read_csv(\"spam_classification.csv\")\n\n# splitting dataset\nX = df[\"Message\"]\ny = df[\"Label\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# creating a model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# evaluating the model\nscore = model.score(X_test, y_test)\nprint(\"Model score: {}\".format(score))","tok_input_length":169,"tok_output_length":132,"system_prompt":"","index":699}
{"question":"Create a Python script that sorts a list of dictionaries in ascending order based on a specific key value.","input":"list_of_dicts = [{'name':'John','age':32}, {'name':'Doe','age':22}, {'name': 'Jane','age':44}]","expected_output":"def sort_list_of_dicts_asc(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda dict: dict[key])\n\nsorted_list_of_dicts = sort_list_of_dicts_asc(list_of_dicts, 'age')\nprint(sorted_list_of_dicts) # prints [{'name': 'Doe', 'age': 22}, {'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 44}]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that sorts a list of dictionaries in ascending order based on a specific key value.\n\n### Input:\nlist_of_dicts = [{'name':'John','age':32}, {'name':'Doe','age':22}, {'name': 'Jane','age':44}]\n\n### Output:\ndef sort_list_of_dicts_asc(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda dict: dict[key])\n\nsorted_list_of_dicts = sort_list_of_dicts_asc(list_of_dicts, 'age')\nprint(sorted_list_of_dicts) # prints [{'name': 'Doe', 'age': 22}, {'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 44}]","tok_input_length":170,"tok_output_length":89,"system_prompt":"","index":13529}
{"question":"Design a Python class to represent a football team. The class should contain the ability to add player names to the team and to calculate the average age and the highest scorer of the team.","input":"Not applicable","expected_output":"class FootballTeam:\n def __init__(self):\n self.players = []\n\n def add_player(self, player):\n self.players.append(player)\n\n def average_age(self):\n total_age = 0\n for player in self.players:\n total_age += player.age\n return total_age \/ len(self.players)\n\n def highest_scorer(self):\n highest_scorer = self.players[0]\n for player in self.players:\n if player.score > highest_scorer.score:\n highest_scorer = player\n return highest_scorer","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a football team. The class should contain the ability to add player names to the team and to calculate the average age and the highest scorer of the team.\n\n### Input:\nNot applicable\n\n### Output:\nclass FootballTeam:\n def __init__(self):\n self.players = []\n\n def add_player(self, player):\n self.players.append(player)\n\n def average_age(self):\n total_age = 0\n for player in self.players:\n total_age += player.age\n return total_age \/ len(self.players)\n\n def highest_scorer(self):\n highest_scorer = self.players[0]\n for player in self.players:\n if player.score > highest_scorer.score:\n highest_scorer = player\n return highest_scorer","tok_input_length":170,"tok_output_length":103,"system_prompt":"","index":16086}
{"question":"It's been a long day! Can you develop a python program that will print the lyrics of the song \"Tubthumping\" to the console?","input":"","expected_output":"def print_lyrics():\n    lyrics = [\"We'll be singing when we're winning\",\"We'll be singing \\\nI get knocked down, but I get up again\",\"You're never gonna keep me down\\\n\",\"I get knocked down, but I get up again\",\"You're never gonna keep me down\\\n\",\"I get knocked down, but I get up again\",\"You're never gonna keep me down\\\n\",\"We'll be singing when we're winning\",\"We'll be singing.\"]\n    for line in lyrics:\n        print(line)\n\nprint_lyrics()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIt's been a long day! Can you develop a python program that will print the lyrics of the song \"Tubthumping\" to the console?\n\n### Input:\n\n\n### Output:\ndef print_lyrics():\n    lyrics = [\"We'll be singing when we're winning\",\"We'll be singing \\\nI get knocked down, but I get up again\",\"You're never gonna keep me down\\\n\",\"I get knocked down, but I get up again\",\"You're never gonna keep me down\\\n\",\"I get knocked down, but I get up again\",\"You're never gonna keep me down\\\n\",\"We'll be singing when we're winning\",\"We'll be singing.\"]\n    for line in lyrics:\n        print(line)\n\nprint_lyrics()","tok_input_length":170,"tok_output_length":112,"system_prompt":"","index":6609}
{"question":"Develop a C++ code that creates a string array with 3 elements and sorts it in alphabetical order.","input":"","expected_output":"#include <algorithm> \n#include <iostream> \n#include <string> \n\nint main() \n{ \n    \/\/ String array \n    std::string arr[] = { \"Python\", \"Java\", \"C++\" }; \n  \n    int n = sizeof(arr) \/ sizeof(arr[0]); \n  \n    \/\/ Sort the string array \n    std::sort(arr, arr + n); \n  \n    \/\/ Print the sorted string array \n    for (int i = 0; i < n; i++) \n        std::cout << arr[i] << \" \"; \n    return 0; \n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a C++ code that creates a string array with 3 elements and sorts it in alphabetical order.\n\n### Input:\n\n\n### Output:\n#include <algorithm> \n#include <iostream> \n#include <string> \n\nint main() \n{ \n    \/\/ String array \n    std::string arr[] = { \"Python\", \"Java\", \"C++\" }; \n  \n    int n = sizeof(arr) \/ sizeof(arr[0]); \n  \n    \/\/ Sort the string array \n    std::sort(arr, arr + n); \n  \n    \/\/ Print the sorted string array \n    for (int i = 0; i < n; i++) \n        std::cout << arr[i] << \" \"; \n    return 0; \n}","tok_input_length":170,"tok_output_length":122,"system_prompt":"","index":3044}
{"question":"Write a Python script to extract the top trending topics from a given Twitter page.","input":"","expected_output":"import tweepy\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n\napi = tweepy.API(auth)\n\n# get trending topics for given twitter page\ndef getTrendingTopics(username):\n    topics = []\n    tweets = api.user_timeline(screen_name=username, count=100)\n    for tweet in tweets:\n        for hashtag in tweet.entities.get('hashtags'):\n            topics.append(hashtag['text'])\n    return sorted(set(topics))\n\nusername = input('Enter twitter username: ')\ntrendingTopics = getTrendingTopics(username)\nprint(trendingTopics)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to extract the top trending topics from a given Twitter page.\n\n### Input:\n\n\n### Output:\nimport tweepy\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n\napi = tweepy.API(auth)\n\n# get trending topics for given twitter page\ndef getTrendingTopics(username):\n    topics = []\n    tweets = api.user_timeline(screen_name=username, count=100)\n    for tweet in tweets:\n        for hashtag in tweet.entities.get('hashtags'):\n            topics.append(hashtag['text'])\n    return sorted(set(topics))\n\nusername = input('Enter twitter username: ')\ntrendingTopics = getTrendingTopics(username)\nprint(trendingTopics)","tok_input_length":170,"tok_output_length":127,"system_prompt":"","index":11721}
{"question":"Create an automated web crawler using Python.","input":"Not applicable","expected_output":"import requests \nfrom bs4 import BeautifulSoup\n  \ndef crawl(url): \n    page = requests.get(url) \n    soup = BeautifulSoup(page.text, 'html.parser') \n  \n    # retrieve all of the anchor tags\n    # We are going to find all links out of the page\n    tags = soup('a')\n    for tag in tags:  \n        link = tag.get('href', None) \n        if link != None: \n            print(link) \n            \n# Driver code \nif __name__ == \"__main__\": \n    URL = \"http:\/\/example.com\"   # type your address instead of example.com\n    crawl(URL)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an automated web crawler using Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup\n  \ndef crawl(url): \n    page = requests.get(url) \n    soup = BeautifulSoup(page.text, 'html.parser') \n  \n    # retrieve all of the anchor tags\n    # We are going to find all links out of the page\n    tags = soup('a')\n    for tag in tags:  \n        link = tag.get('href', None) \n        if link != None: \n            print(link) \n            \n# Driver code \nif __name__ == \"__main__\": \n    URL = \"http:\/\/example.com\"   # type your address instead of example.com\n    crawl(URL)","tok_input_length":170,"tok_output_length":132,"system_prompt":"","index":4487}
{"question":"Generate Python code for a linear regression model. The model should take two numerical inputs, x and y, and be able to predict the numerical output that best fits the given data.","input":"x: [1, 2, 3]\ny: [3, 6, 9]","expected_output":"import numpy as np\n\nx = np.array([1, 2, 3])\ny = np.array([3, 6, 9])\n\n# Create the design matrix\nX = np.vstack([np.ones(len(x)), x]).T\n\n# Calculate the weights\nw = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n\n# Predicted output\ny_pred = X.dot(w)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code for a linear regression model. The model should take two numerical inputs, x and y, and be able to predict the numerical output that best fits the given data.\n\n### Input:\nx: [1, 2, 3]\ny: [3, 6, 9]\n\n### Output:\nimport numpy as np\n\nx = np.array([1, 2, 3])\ny = np.array([3, 6, 9])\n\n# Create the design matrix\nX = np.vstack([np.ones(len(x)), x]).T\n\n# Calculate the weights\nw = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n\n# Predicted output\ny_pred = X.dot(w)","tok_input_length":171,"tok_output_length":86,"system_prompt":"","index":12445}
{"question":"Rewrite the given code block using OOP concepts in Python.","input":"num1 = 0\nnum2 = 0\n\ndef add():\n  return num1 + num2\n\ndef subtract():\n  return num1 - num2","expected_output":"class MathOperations:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def add(self):\n        return self.num1 + self.num2\n    \n    def subtract(self):\n        return self.num1 - self.num2\n\nnum1 = 0\nnum2 = 0\nmath_operation = MathOperations(num1, num2)\nprint(math_operation.add())\nprint(math_operation.subtract())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the given code block using OOP concepts in Python.\n\n### Input:\nnum1 = 0\nnum2 = 0\n\ndef add():\n  return num1 + num2\n\ndef subtract():\n  return num1 - num2\n\n### Output:\nclass MathOperations:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def add(self):\n        return self.num1 + self.num2\n    \n    def subtract(self):\n        return self.num1 - self.num2\n\nnum1 = 0\nnum2 = 0\nmath_operation = MathOperations(num1, num2)\nprint(math_operation.add())\nprint(math_operation.subtract())","tok_input_length":171,"tok_output_length":97,"system_prompt":"","index":4527}
{"question":"Create a Python class for a student which contains attributes for name, age, and gender, and methods for getting the student details and calculating the average age of all students.","input":"Not Applicable","expected_output":"class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def get_details(self):\n        print('Name:', self.name)\n        print('Age:', self.age)\n        print('Gender:', self.gender)\n\n    @staticmethod\n    def get_avg_age(students):\n        total_age = 0\n        for student in students:\n            total_age += student.age\n        return total_age \/ len(students)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a student which contains attributes for name, age, and gender, and methods for getting the student details and calculating the average age of all students.\n\n### Input:\nNot Applicable\n\n### Output:\nclass Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def get_details(self):\n        print('Name:', self.name)\n        print('Age:', self.age)\n        print('Gender:', self.gender)\n\n    @staticmethod\n    def get_avg_age(students):\n        total_age = 0\n        for student in students:\n            total_age += student.age\n        return total_age \/ len(students)","tok_input_length":171,"tok_output_length":106,"system_prompt":"","index":9218}
{"question":"Create an algorithm in Python to sort an array of integers.","input":"The array to be sorted: [2, 1, 6, 5, 8]","expected_output":"def quicksort(array):\n  if len(array) <= 1:\n    return array\n  \n  pivot = array[len(array) \/\/ 2]\n  left = [x for x in array if x < pivot]\n  middle = [x for x in array if x == pivot]\n  right = [x for x in array if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n# test\narray = [2, 1, 6, 5, 8]\nprint(quicksort(array))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to sort an array of integers.\n\n### Input:\nThe array to be sorted: [2, 1, 6, 5, 8]\n\n### Output:\ndef quicksort(array):\n  if len(array) <= 1:\n    return array\n  \n  pivot = array[len(array) \/\/ 2]\n  left = [x for x in array if x < pivot]\n  middle = [x for x in array if x == pivot]\n  right = [x for x in array if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n# test\narray = [2, 1, 6, 5, 8]\nprint(quicksort(array))","tok_input_length":171,"tok_output_length":111,"system_prompt":"","index":13510}
{"question":"Write a natural language processing algorithm (in Python) to classify a given sentence as positive, negative, or neutral sentiment.","input":"Not applicable","expected_output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n  \ndef sentiment_calculator(text):\n    sid = SentimentIntensityAnalyzer()\n    sentiment_scores = sid.polarity_scores(text)\n    if sentiment_scores['compound'] >= 0.5:\n        sentiment = 'positive'\n    elif -0.5 < sentiment_scores['compound'] < 0.5:\n        sentiment = 'neutral'\n    else:\n        sentiment = 'negative'\n    return sentiment\n  \nsentence = 'This is an amazing experience!'\nsentiment_calculator(sentence)\n# Output: 'positive'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a natural language processing algorithm (in Python) to classify a given sentence as positive, negative, or neutral sentiment.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n  \ndef sentiment_calculator(text):\n    sid = SentimentIntensityAnalyzer()\n    sentiment_scores = sid.polarity_scores(text)\n    if sentiment_scores['compound'] >= 0.5:\n        sentiment = 'positive'\n    elif -0.5 < sentiment_scores['compound'] < 0.5:\n        sentiment = 'neutral'\n    else:\n        sentiment = 'negative'\n    return sentiment\n  \nsentence = 'This is an amazing experience!'\nsentiment_calculator(sentence)\n# Output: 'positive'","tok_input_length":171,"tok_output_length":117,"system_prompt":"","index":1028}
{"question":"Program a web crawler in Python to find all URLs on a particular webpage.","input":"Page URL: https:\/\/www.example.com","expected_output":"import requests \nfrom bs4 import BeautifulSoup \n  \ndef crawl(url): \n    r = requests.get(url) \n    html_doc = r.text\n    soup = BeautifulSoup(html_doc, 'html.parser') \n  \n    # find all links on web page \n    links = soup.find_all('a') \n  \n    # filter the link sending with http \n    for link in links: \n        if 'http' in link.get('href'): \n            print(link.get('href')) \n  \n# Driver code \nif __name__ == '__main__': \n    crawl(\"https:\/\/www.example.com\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a web crawler in Python to find all URLs on a particular webpage.\n\n### Input:\nPage URL: https:\/\/www.example.com\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n  \ndef crawl(url): \n    r = requests.get(url) \n    html_doc = r.text\n    soup = BeautifulSoup(html_doc, 'html.parser') \n  \n    # find all links on web page \n    links = soup.find_all('a') \n  \n    # filter the link sending with http \n    for link in links: \n        if 'http' in link.get('href'): \n            print(link.get('href')) \n  \n# Driver code \nif __name__ == '__main__': \n    crawl(\"https:\/\/www.example.com\")","tok_input_length":171,"tok_output_length":120,"system_prompt":"","index":13335}
{"question":"Create a Python class to represent a circle having radius, color and area as its data members.","input":"","expected_output":"class Circle:\n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n        self.area = 3.14 * (radius**2)\n\n    def get_radius(self):\n        return self.radius\n    \n    def get_color(self):\n        return self.color\n    \n    def get_area(self):\n        return self.area\n\nif __name__ == '__main__':\n    c = Circle(4, 'blue')\n    print(\"Radius of circle:\", c.get_radius())\n    print(\"Color of circle:\", c.get_color())\n    print(\"Area of circle:\", c.get_area())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a circle having radius, color and area as its data members.\n\n### Input:\n\n\n### Output:\nclass Circle:\n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n        self.area = 3.14 * (radius**2)\n\n    def get_radius(self):\n        return self.radius\n    \n    def get_color(self):\n        return self.color\n    \n    def get_area(self):\n        return self.area\n\nif __name__ == '__main__':\n    c = Circle(4, 'blue')\n    print(\"Radius of circle:\", c.get_radius())\n    print(\"Color of circle:\", c.get_color())\n    print(\"Area of circle:\", c.get_area())","tok_input_length":171,"tok_output_length":125,"system_prompt":"","index":6476}
{"question":"Compare and contrast the features of the two languages, JavaScript and Python.","input":"","expected_output":"There are several key differences between JavaScript and Python. \n\nJavaScript is primarily a client-side scripting language, while Python is predominantly a server-side scripting language. JavaScript is an interpreted language which means that it does not need to be compiled before running, whereas Python needs to be compiled before it can run. JavaScript is a loosely typed language and allows for variables to have different data types, whereas Python is a strongly typed language and variables have to be given a specific data type. JavaScript can be used to create dynamic webpages with interactive content, while Python is optimized to work with packages and modules, making it a better choice for complex tasks and data analysis.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare and contrast the features of the two languages, JavaScript and Python.\n\n### Input:\n\n\n### Output:\nThere are several key differences between JavaScript and Python. \n\nJavaScript is primarily a client-side scripting language, while Python is predominantly a server-side scripting language. JavaScript is an interpreted language which means that it does not need to be compiled before running, whereas Python needs to be compiled before it can run. JavaScript is a loosely typed language and allows for variables to have different data types, whereas Python is a strongly typed language and variables have to be given a specific data type. JavaScript can be used to create dynamic webpages with interactive content, while Python is optimized to work with packages and modules, making it a better choice for complex tasks and data analysis.","tok_input_length":171,"tok_output_length":130,"system_prompt":"","index":13981}
{"question":"Design a Python class that represents a car.","input":"","expected_output":"class Car:\n    def __init__(self, make, model, year, color, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n        \n    def get_make(self):\n        return self.make\n    \n    def get_model(self):\n        return self.model\n    \n    def get_year(self):\n        return self.year\n    \n    def get_color(self):\n        return self.color\n    \n    def get_mileage(self):\n        return self.mileage\n    \n    def set_mileage(self, new_mileage):\n        self.mileage = new_mileage","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class that represents a car.\n\n### Input:\n\n\n### Output:\nclass Car:\n    def __init__(self, make, model, year, color, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n        \n    def get_make(self):\n        return self.make\n    \n    def get_model(self):\n        return self.model\n    \n    def get_year(self):\n        return self.year\n    \n    def get_color(self):\n        return self.color\n    \n    def get_mileage(self):\n        return self.mileage\n    \n    def set_mileage(self, new_mileage):\n        self.mileage = new_mileage","tok_input_length":171,"tok_output_length":135,"system_prompt":"","index":4948}
{"question":"Modify a basic Python algorithm to increase the speed of the program.","input":"list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","expected_output":"def faster_sum(arr):\n total = 0\n # looping over the array and adding the elements\n # to the variable total\n for i in range(0, len(arr)):\n total += arr[i]\n return total\n\nlist_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# using the faster_sum() function\nresult = faster_sum(list_of_numbers)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a basic Python algorithm to increase the speed of the program.\n\n### Input:\nlist_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef faster_sum(arr):\n total = 0\n # looping over the array and adding the elements\n # to the variable total\n for i in range(0, len(arr)):\n total += arr[i]\n return total\n\nlist_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# using the faster_sum() function\nresult = faster_sum(list_of_numbers)\nprint(result)","tok_input_length":172,"tok_output_length":98,"system_prompt":"","index":2448}
{"question":"Create a custom sorting algorithm in Python that sorts a list of integers from highest to lowest.","input":"int_list = [8, 5, 9, 3, 4, 6]","expected_output":"def custom_sort(int_list):\n  for i in range(len(int_list)): \n    for j in range(i+1, len(int_list)): \n        if int_list[i] < int_list[j]: \n            int_list[i], int_list[j] = int_list[j], int_list[i] \n  return int_list\n\nint_list = [8, 5, 9, 3, 4, 6]\n\nsorted_list = custom_sort(int_list) \nprint(\"Sorted list: \", sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a custom sorting algorithm in Python that sorts a list of integers from highest to lowest.\n\n### Input:\nint_list = [8, 5, 9, 3, 4, 6]\n\n### Output:\ndef custom_sort(int_list):\n  for i in range(len(int_list)): \n    for j in range(i+1, len(int_list)): \n        if int_list[i] < int_list[j]: \n            int_list[i], int_list[j] = int_list[j], int_list[i] \n  return int_list\n\nint_list = [8, 5, 9, 3, 4, 6]\n\nsorted_list = custom_sort(int_list) \nprint(\"Sorted list: \", sorted_list)","tok_input_length":172,"tok_output_length":106,"system_prompt":"","index":16364}
{"question":"Create an algorithm in Python to check if two words are a sudoku valid pair.","input":"word1 = \u201cready\u201d, word2 = \u201csteady\u201d","expected_output":"def is_sudoku_valid_pair(word1, word2):\n    is_valid = True\n\n    for i in range(len (word1)):\n        if word1[i] == word2[i]:\n            is_valid = False\n            break \n\n    for i in range (len(word1)):\n        for j in range(len(word2)):\n            if word1[i] == word2[j]:\n                is_valid = False\n                break\n\n    return is_valid \n\nword1 = \u201cready\u201d\nword2 = \u201csteady\u201d\n\nprint(is_sudoku_valid_pair(word1, word2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to check if two words are a sudoku valid pair.\n\n### Input:\nword1 = \u201cready\u201d, word2 = \u201csteady\u201d\n\n### Output:\ndef is_sudoku_valid_pair(word1, word2):\n    is_valid = True\n\n    for i in range(len (word1)):\n        if word1[i] == word2[i]:\n            is_valid = False\n            break \n\n    for i in range (len(word1)):\n        for j in range(len(word2)):\n            if word1[i] == word2[j]:\n                is_valid = False\n                break\n\n    return is_valid \n\nword1 = \u201cready\u201d\nword2 = \u201csteady\u201d\n\nprint(is_sudoku_valid_pair(word1, word2))","tok_input_length":172,"tok_output_length":117,"system_prompt":"","index":13535}
{"question":"Develop a Python program for searching within a large text document.","input":"A text document containing over 1000 words","expected_output":"def search_document(doc, keyword):\n    # ensure that keyword is case insensitive\n    keyword = keyword.casefold()\n\n    # open the document\n    with open(doc, 'r') as f:\n        # read the document line by line\n        for line in f.readlines():\n            # lowercase the line\n            line = line.casefold() \n            # if the keyword is found in the line\n            if keyword in line:\n                # print the line\n                print(line)\n\n# an example document\ndoc = \"the_odyssey.txt\"\nkeyword = \"odyssey\"\nsearch_document(doc, keyword)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program for searching within a large text document.\n\n### Input:\nA text document containing over 1000 words\n\n### Output:\ndef search_document(doc, keyword):\n    # ensure that keyword is case insensitive\n    keyword = keyword.casefold()\n\n    # open the document\n    with open(doc, 'r') as f:\n        # read the document line by line\n        for line in f.readlines():\n            # lowercase the line\n            line = line.casefold() \n            # if the keyword is found in the line\n            if keyword in line:\n                # print the line\n                print(line)\n\n# an example document\ndoc = \"the_odyssey.txt\"\nkeyword = \"odyssey\"\nsearch_document(doc, keyword)","tok_input_length":172,"tok_output_length":123,"system_prompt":"","index":8789}
{"question":"Write a dialogue system in Python to respond to customer queries related to a product.","input":"","expected_output":"import random\n\ndef respond_to_query(query):\n    if query == 'What is the price?':\n        return 'The price of our product is $30.'\n    elif query == 'Where can I buy it?':\n        return 'You can buy it from our online store or from select retailers.'\n    elif query == 'How do I use it?':\n        return 'Follow the instructions in the user manual.'\n    else:\n        responses = ['I am sorry, I do not understand your question.',\n                     'Can you be more specific?',\n                     'Please ask a specific question about the product.']\n        return random.choice(responses)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a dialogue system in Python to respond to customer queries related to a product.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef respond_to_query(query):\n    if query == 'What is the price?':\n        return 'The price of our product is $30.'\n    elif query == 'Where can I buy it?':\n        return 'You can buy it from our online store or from select retailers.'\n    elif query == 'How do I use it?':\n        return 'Follow the instructions in the user manual.'\n    else:\n        responses = ['I am sorry, I do not understand your question.',\n                     'Can you be more specific?',\n                     'Please ask a specific question about the product.']\n        return random.choice(responses)","tok_input_length":172,"tok_output_length":129,"system_prompt":"","index":3264}
{"question":"Write a Python program to sort a list of dictionaries by a given key.","input":"list_of_dicts = [\n{'name': 'John', 'age': 25},\n{'name': 'Adam', 'age': 30},\n{'name': 'Sarah', 'age': 28}\n]\n\nsort_by_key = 'age'","expected_output":"def sort_dicts_by_key(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda k: k[key])\n\nsorted_dicts = sort_dicts_by_key(list_of_dicts, sort_by_key)\n\n# Output:\n[\n{'name': 'John', 'age': 25},\n{'name': 'Sarah', 'age': 28},\n{'name': 'Adam', 'age': 30}\n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of dictionaries by a given key.\n\n### Input:\nlist_of_dicts = [\n{'name': 'John', 'age': 25},\n{'name': 'Adam', 'age': 30},\n{'name': 'Sarah', 'age': 28}\n]\n\nsort_by_key = 'age'\n\n### Output:\ndef sort_dicts_by_key(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda k: k[key])\n\nsorted_dicts = sort_dicts_by_key(list_of_dicts, sort_by_key)\n\n# Output:\n[\n{'name': 'John', 'age': 25},\n{'name': 'Sarah', 'age': 28},\n{'name': 'Adam', 'age': 30}\n]","tok_input_length":173,"tok_output_length":82,"system_prompt":"","index":9805}
{"question":"Write a Python program to do a brute force search for a pair of elements which sum to a given target value.","input":"[1, 3, 4, 5, 6, 7], 8","expected_output":"# brute force search algorithm\ndef brute_force_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tfor j in range(len(arr)):\n\t\t\tif arr[i] + arr[j] == target:\n\t\t\t\treturn arr[i], arr[j]\n\treturn None\n\n# test the algorithm\ntarget = 8\nlst = [1, 3, 4, 5, 6, 7]\nprint(brute_force_search(lst, target))\n\nOutput:\npair = (3, 5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to do a brute force search for a pair of elements which sum to a given target value.\n\n### Input:\n[1, 3, 4, 5, 6, 7], 8\n\n### Output:\n# brute force search algorithm\ndef brute_force_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tfor j in range(len(arr)):\n\t\t\tif arr[i] + arr[j] == target:\n\t\t\t\treturn arr[i], arr[j]\n\treturn None\n\n# test the algorithm\ntarget = 8\nlst = [1, 3, 4, 5, 6, 7]\nprint(brute_force_search(lst, target))\n\nOutput:\npair = (3, 5)","tok_input_length":173,"tok_output_length":102,"system_prompt":"","index":13902}
{"question":"Create a Python program to generate an array of all possible unique combinations of 3 elements from a given array.","input":"[1, 2, 3, 4]","expected_output":"def combinations(arr):\n sol = []\n \n for i in range(len(arr)):\n for j in range(len(arr)):\n for k in range(len(arr)):\n if i != j and j != k and k != i:\n sol.append([arr[i], arr[j], arr[k]])\n \n return sol\n\nprint(combinations([1, 2, 3, 4])) # Outputs [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate an array of all possible unique combinations of 3 elements from a given array.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef combinations(arr):\n sol = []\n \n for i in range(len(arr)):\n for j in range(len(arr)):\n for k in range(len(arr)):\n if i != j and j != k and k != i:\n sol.append([arr[i], arr[j], arr[k]])\n \n return sol\n\nprint(combinations([1, 2, 3, 4])) # Outputs [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]","tok_input_length":173,"tok_output_length":112,"system_prompt":"","index":10303}
{"question":"Create a Python script that fetches the top 10 posts from Reddit using the PRAW package","input":"Input a subreddit: news","expected_output":"# Fetch the top 10 posts from reddit\nimport praw\n\n# Reddit API credentials\nclient_id = 'YOUR_CLIENT_ID'\nclient_secret = 'YOUR_CLIENT_SECRET'\nuser_agent = 'YOUR_USER_AGENT'\n\n# Initialize the reddit client\nreddit = praw.Reddit(\n client_id=client_id,\n client_secret=client_secret,\n user_agent=user_agent\n)\n\nsubreddit = input('Input a subreddit: ')\n\n# Fetch the top 10 posts from reddit\nsubmissions = reddit.subreddit(subreddit).top('day', limit=10)\nfor submission in submissions:\n print(submission.title)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that fetches the top 10 posts from Reddit using the PRAW package\n\n### Input:\nInput a subreddit: news\n\n### Output:\n# Fetch the top 10 posts from reddit\nimport praw\n\n# Reddit API credentials\nclient_id = 'YOUR_CLIENT_ID'\nclient_secret = 'YOUR_CLIENT_SECRET'\nuser_agent = 'YOUR_USER_AGENT'\n\n# Initialize the reddit client\nreddit = praw.Reddit(\n client_id=client_id,\n client_secret=client_secret,\n user_agent=user_agent\n)\n\nsubreddit = input('Input a subreddit: ')\n\n# Fetch the top 10 posts from reddit\nsubmissions = reddit.subreddit(subreddit).top('day', limit=10)\nfor submission in submissions:\n print(submission.title)","tok_input_length":173,"tok_output_length":120,"system_prompt":"","index":6269}
{"question":"Write a Python program to print out the grade of a student based on the given marks","input":"60","expected_output":"def get_grade(marks):\n    if marks >= 90:\n        grade = \"A+\"\n    elif marks >= 80 and marks < 90:\n        grade = \"A\"\n    elif marks >= 70 and marks < 80:\n        grade = \"B+\"\n    elif marks >= 60 and marks < 70:\n        grade = \"B\"\n    elif marks >= 50 and marks < 60:\n        grade = \"C+\"\n    else:\n        grade = \"F\"\n    \n    print(\"Grade: %s\" %grade)\n\nmarks = 60\nget_grade(marks)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the grade of a student based on the given marks\n\n### Input:\n60\n\n### Output:\ndef get_grade(marks):\n    if marks >= 90:\n        grade = \"A+\"\n    elif marks >= 80 and marks < 90:\n        grade = \"A\"\n    elif marks >= 70 and marks < 80:\n        grade = \"B+\"\n    elif marks >= 60 and marks < 70:\n        grade = \"B\"\n    elif marks >= 50 and marks < 60:\n        grade = \"C+\"\n    else:\n        grade = \"F\"\n    \n    print(\"Grade: %s\" %grade)\n\nmarks = 60\nget_grade(marks)","tok_input_length":173,"tok_output_length":126,"system_prompt":"","index":14453}
{"question":"Build a logistic regression model in Python to classify emails as spam or not spam.","input":"","expected_output":"import pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Read the data \ndata = pd.read_csv('data.csv')\n\n# Create feature matrix \nX = data[['text', 'subject']]\n\n# Create target vector \ny = data['label']\n\n# Split the data into training and testing\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Fit the model \nlogistic = LogisticRegression()\nlogistic.fit(X_train, y_train)\n\n# Make predictions \ny_pred = logistic.predict(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a logistic regression model in Python to classify emails as spam or not spam.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Read the data \ndata = pd.read_csv('data.csv')\n\n# Create feature matrix \nX = data[['text', 'subject']]\n\n# Create target vector \ny = data['label']\n\n# Split the data into training and testing\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Fit the model \nlogistic = LogisticRegression()\nlogistic.fit(X_train, y_train)\n\n# Make predictions \ny_pred = logistic.predict(X_test)","tok_input_length":173,"tok_output_length":130,"system_prompt":"","index":4075}
{"question":"Develop a Python program to flatten a n level nested dictionary into a single list of key-value pairs.","input":"a nested dictionary\n{\n    'level1': {\n        'level2_1': {\n            'level3_1': 'value1'\n        },\n        'level2_2': {\n            'level3_2': 'value2'\n        }\n    }\n}","expected_output":"def flatten_dict(nested_dict, flat_dict={}, prefix=''):\n    for key, value in nested_dict.items():\n        key_prefix = prefix + key + '.' if prefix else key\n\n        if isinstance(value, dict):\n            flatten_dict(value, flat_dict, key_prefix)\n        else:\n            flat_dict[key_prefix] = value\n\n    return flat_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to flatten a n level nested dictionary into a single list of key-value pairs.\n\n### Input:\na nested dictionary\n{\n    'level1': {\n        'level2_1': {\n            'level3_1': 'value1'\n        },\n        'level2_2': {\n            'level3_2': 'value2'\n        }\n    }\n}\n\n### Output:\ndef flatten_dict(nested_dict, flat_dict={}, prefix=''):\n    for key, value in nested_dict.items():\n        key_prefix = prefix + key + '.' if prefix else key\n\n        if isinstance(value, dict):\n            flatten_dict(value, flat_dict, key_prefix)\n        else:\n            flat_dict[key_prefix] = value\n\n    return flat_dict","tok_input_length":174,"tok_output_length":71,"system_prompt":"","index":9745}
{"question":"Write a Python program to remove duplicates from a list of strings. The program should maintain the order of the strings in the list.","input":"['abc', 'def', 'abc', 'ghi', 'ghi', 'ghi', 'xyz']","expected_output":"def remove_duplicates(list_strings):\n  # Create an empty list to store unique strings\n  unique_strings = []\n\n  # Iterate over the list\n  for string in list_strings:\n    # Append string to unique_strings if it is not already present\n    if string not in unique_strings:\n      unique_strings.append(string)\n  return unique_strings\n\nlist_strings = ['abc', 'def', 'abc', 'ghi', 'ghi', 'ghi', 'xyz']\nprint(remove_duplicates(list_strings))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove duplicates from a list of strings. The program should maintain the order of the strings in the list.\n\n### Input:\n['abc', 'def', 'abc', 'ghi', 'ghi', 'ghi', 'xyz']\n\n### Output:\ndef remove_duplicates(list_strings):\n  # Create an empty list to store unique strings\n  unique_strings = []\n\n  # Iterate over the list\n  for string in list_strings:\n    # Append string to unique_strings if it is not already present\n    if string not in unique_strings:\n      unique_strings.append(string)\n  return unique_strings\n\nlist_strings = ['abc', 'def', 'abc', 'ghi', 'ghi', 'ghi', 'xyz']\nprint(remove_duplicates(list_strings))","tok_input_length":174,"tok_output_length":100,"system_prompt":"","index":6136}
{"question":"Generate a Python class for representing a shopping cart. This class should include a constructor to initialize cart items, methods for adding and removing items, and a method for calculating the total price.","input":"Not applicable","expected_output":"class ShoppingCart:\n def __init__(self, items):\n self.items = items\n \n def add_item(self, item):\n self.items.append(item)\n \n def remove_item(self, item):\n self.items.remove(item)\n \n def get_total_price(self):\n total_price = 0\n for item in self.items:\n total_price += item.price\n return total_price\n \n# Usage\ncart = ShoppingCart([item1, item2, item3])\ncart.add_item(item4)\ncart.remove_item(item3)\ntotal_price = cart.get_total_price()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class for representing a shopping cart. This class should include a constructor to initialize cart items, methods for adding and removing items, and a method for calculating the total price.\n\n### Input:\nNot applicable\n\n### Output:\nclass ShoppingCart:\n def __init__(self, items):\n self.items = items\n \n def add_item(self, item):\n self.items.append(item)\n \n def remove_item(self, item):\n self.items.remove(item)\n \n def get_total_price(self):\n total_price = 0\n for item in self.items:\n total_price += item.price\n return total_price\n \n# Usage\ncart = ShoppingCart([item1, item2, item3])\ncart.add_item(item4)\ncart.remove_item(item3)\ntotal_price = cart.get_total_price()","tok_input_length":174,"tok_output_length":107,"system_prompt":"","index":4960}
{"question":"Deploy a Python function to AWS Lambda that sends an SMS with Twilio when invoked.","input":"Twilio account SID, Auth token, Twilio from number, Twilio to number","expected_output":"import json\nfrom twilio.rest import Client\n\ndef lambda_handler(event, context):\n    account_sid = event['AccountSID']\n    auth_token = event['AuthToken']\n    from_number = event['FromNumber']\n    to_number = event['ToNumber']\n    message_body = event['MessageBody']\n\n    client = Client(account_sid, auth_token)\n    client.messages.create(\n        body=message_body,\n        from_=from_number,\n        to=to_number\n    )\n\n    return json.dumps({\n        \"message\": \"Successfully sent sms\"\n    })","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDeploy a Python function to AWS Lambda that sends an SMS with Twilio when invoked.\n\n### Input:\nTwilio account SID, Auth token, Twilio from number, Twilio to number\n\n### Output:\nimport json\nfrom twilio.rest import Client\n\ndef lambda_handler(event, context):\n    account_sid = event['AccountSID']\n    auth_token = event['AuthToken']\n    from_number = event['FromNumber']\n    to_number = event['ToNumber']\n    message_body = event['MessageBody']\n\n    client = Client(account_sid, auth_token)\n    client.messages.create(\n        body=message_body,\n        from_=from_number,\n        to=to_number\n    )\n\n    return json.dumps({\n        \"message\": \"Successfully sent sms\"\n    })","tok_input_length":174,"tok_output_length":112,"system_prompt":"","index":5330}
{"question":"Compose a Python program to train a neural network using a given dataset.","input":"The dataset contains 10,000 examples and 5 features.","expected_output":"import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define the model\nmodel = Sequential()\nmodel.add(Dense(5, activation='relu', input_dim=5))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# load the data\nX = np.loadtxt('data.txt', delimiter=',')\n\n# fit the model with input data\nmodel.fit(X, y, epochs=50)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to train a neural network using a given dataset.\n\n### Input:\nThe dataset contains 10,000 examples and 5 features.\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define the model\nmodel = Sequential()\nmodel.add(Dense(5, activation='relu', input_dim=5))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# load the data\nX = np.loadtxt('data.txt', delimiter=',')\n\n# fit the model with input data\nmodel.fit(X, y, epochs=50)","tok_input_length":174,"tok_output_length":120,"system_prompt":"","index":12799}
{"question":"Create a Python class for a Rectangle that has two sides, and methods for area and perimeter.","input":"","expected_output":"\"\"\"\nCreate a Python class for a Rectangle that has two sides, and methods for area and perimeter\n\"\"\"\n\nclass Rectangle:\n    def __init__(self, side1, side2):\n        self.side1 = side1\n        self.side2 = side2\n        \n    def area(self):\n        return self.side1 * self.side2\n    \n    def perimeter(self):\n        return 2*self.side1 + 2*self.side2\n\nif __name__ == '__main__':\n    r = Rectangle(3, 4)\n    print(\"Area: {}\".format(r.area()))\n    print(\"Perimeter: {}\".format(r.perimeter()))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a Rectangle that has two sides, and methods for area and perimeter.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a Python class for a Rectangle that has two sides, and methods for area and perimeter\n\"\"\"\n\nclass Rectangle:\n    def __init__(self, side1, side2):\n        self.side1 = side1\n        self.side2 = side2\n        \n    def area(self):\n        return self.side1 * self.side2\n    \n    def perimeter(self):\n        return 2*self.side1 + 2*self.side2\n\nif __name__ == '__main__':\n    r = Rectangle(3, 4)\n    print(\"Area: {}\".format(r.area()))\n    print(\"Perimeter: {}\".format(r.perimeter()))","tok_input_length":174,"tok_output_length":128,"system_prompt":"","index":16540}
{"question":"Write a Python program to simulate a dice game.","input":"","expected_output":"import random \n\ndef roll_dice(): \n  # generate random number from 1 to 6 \n  dice = random.randint(1, 6) \n  return dice \n\n# take input from the user \nroll_again = \"yes\"\n\nwhile roll_again == \"yes\" or roll_again == \"y\": \n  print(\"Rolling the dices...\") \n  print(\"The values are....\") \n\n  # get two random values \n  dice1 = roll_dice() \n  dice2 = roll_dice() \n\n  print(dice1) \n  print(dice2) \n\n  roll_again = input(\"Roll the dices again?[y\/n]\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate a dice game.\n\n### Input:\n\n\n### Output:\nimport random \n\ndef roll_dice(): \n  # generate random number from 1 to 6 \n  dice = random.randint(1, 6) \n  return dice \n\n# take input from the user \nroll_again = \"yes\"\n\nwhile roll_again == \"yes\" or roll_again == \"y\": \n  print(\"Rolling the dices...\") \n  print(\"The values are....\") \n\n  # get two random values \n  dice1 = roll_dice() \n  dice2 = roll_dice() \n\n  print(dice1) \n  print(dice2) \n\n  roll_again = input(\"Roll the dices again?[y\/n]\")","tok_input_length":174,"tok_output_length":137,"system_prompt":"","index":11550}
{"question":"Generate a Python program that will take two lists of integers as input and return a new list with the pairwise sums of the two inputs.","input":"List 1: 1,2,3,4\nList 2: 4,5,6,7","expected_output":"def pairwise_sum(l1, l2):\n    result = []\n    for x, y in zip(l1, l2):\n        result.append(x + y)\n    return result\n\n#Example Usage\nlist_1 = [1,2,3,4]\nlist_2 = [4,5,6,7]\n\nsums = pairwise_sum(list_1, list_2)\nprint(sums) # [5,7,9,11]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that will take two lists of integers as input and return a new list with the pairwise sums of the two inputs.\n\n### Input:\nList 1: 1,2,3,4\nList 2: 4,5,6,7\n\n### Output:\ndef pairwise_sum(l1, l2):\n    result = []\n    for x, y in zip(l1, l2):\n        result.append(x + y)\n    return result\n\n#Example Usage\nlist_1 = [1,2,3,4]\nlist_2 = [4,5,6,7]\n\nsums = pairwise_sum(list_1, list_2)\nprint(sums) # [5,7,9,11]","tok_input_length":175,"tok_output_length":95,"system_prompt":"","index":16302}
{"question":"Write a python program to parse a given input string and extract the URLs present in the string.","input":"The links mentioned in the article are: https:\/\/www.example.com\/ and http:\/\/www.example.com\/mypage","expected_output":"import re\n \ndef extract_urls(input_str): \n    urls = re.findall('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', input_str) \n    return urls\n \ninput_str = \"The links mentioned in the article are: https:\/\/www.example.com\/ and http:\/\/www.example.com\/mypage\"\nprint(extract_urls(input_str))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to parse a given input string and extract the URLs present in the string.\n\n### Input:\nThe links mentioned in the article are: https:\/\/www.example.com\/ and http:\/\/www.example.com\/mypage\n\n### Output:\nimport re\n \ndef extract_urls(input_str): \n    urls = re.findall('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', input_str) \n    return urls\n \ninput_str = \"The links mentioned in the article are: https:\/\/www.example.com\/ and http:\/\/www.example.com\/mypage\"\nprint(extract_urls(input_str))","tok_input_length":175,"tok_output_length":105,"system_prompt":"","index":16720}
{"question":"Create a Python script to generate a report of top 5 companies by total revenue.","input":"List of current companies with their respective revenue and profit information","expected_output":"import pandas as pd\n\n# Read the input data\ndf = pd.read_csv('company_data.csv')\n\n# Select the top 5 companies by total revenue\ntop_5 = df.sort_values(by='revenue', ascending=False).head(5)\n\n# Generate the report\nprint(\"Top 5 Companies by Total Revenue\")\nprint(\"-------------------------------\")\nfor index, row in top_5.iterrows():\n print(\"Company name: {}, Total Revenue: {:.2f}, Total Profit: {:.2f}\".format(\n row['name'], row['revenue'], row['profit']\n ))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a report of top 5 companies by total revenue.\n\n### Input:\nList of current companies with their respective revenue and profit information\n\n### Output:\nimport pandas as pd\n\n# Read the input data\ndf = pd.read_csv('company_data.csv')\n\n# Select the top 5 companies by total revenue\ntop_5 = df.sort_values(by='revenue', ascending=False).head(5)\n\n# Generate the report\nprint(\"Top 5 Companies by Total Revenue\")\nprint(\"-------------------------------\")\nfor index, row in top_5.iterrows():\n print(\"Company name: {}, Total Revenue: {:.2f}, Total Profit: {:.2f}\".format(\n row['name'], row['revenue'], row['profit']\n ))","tok_input_length":175,"tok_output_length":119,"system_prompt":"","index":3105}
{"question":"Generate an algorithm in Python to detect whether an input is an anagram of a given string.","input":"input = 'cat'","expected_output":"\"\"\"\nGenerate an algorithm in Python to detect whether an input is an \nanagram of a given string.\n\"\"\"\n\ndef is_anagram(input_string, original_string):\n    # Sort both the strings\n    input_string = sorted(input_string)\n    original_string = sorted(original_string)\n\n    # Compare each character\n    for i in range(len(input_string)):\n        if input_string[i] != original_string[i]:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    input_string = 'cat'\n    original_string = 'tac'\n    print(is_anagram(input_string, original_string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python to detect whether an input is an anagram of a given string.\n\n### Input:\ninput = 'cat'\n\n### Output:\n\"\"\"\nGenerate an algorithm in Python to detect whether an input is an \nanagram of a given string.\n\"\"\"\n\ndef is_anagram(input_string, original_string):\n    # Sort both the strings\n    input_string = sorted(input_string)\n    original_string = sorted(original_string)\n\n    # Compare each character\n    for i in range(len(input_string)):\n        if input_string[i] != original_string[i]:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    input_string = 'cat'\n    original_string = 'tac'\n    print(is_anagram(input_string, original_string))","tok_input_length":175,"tok_output_length":124,"system_prompt":"","index":10043}
{"question":"Create a Python program to find the binary representation of a given positive integer.","input":"42","expected_output":"def find_binary_representation(num):\n    # base case \n    if num == 0: \n        return 0\n  \n    # stores the binary representation\n    bin_rep = \"\"  \n  \n    # to store the remainder \n    rem = 0\n  \n    while (num != 0): \n        # calculate remainder\n        rem = num % 2\n        bin_rep += str(rem)\n        num \/\/= 2\n  \n    # reverse the string and return it\n    bin_rep = bin_rep[::-1]\n    return bin_rep\n\n\n# Main program\nnum = 42\nbinary_rep = find_binary_representation(num)\nprint(binary_rep)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the binary representation of a given positive integer.\n\n### Input:\n42\n\n### Output:\ndef find_binary_representation(num):\n    # base case \n    if num == 0: \n        return 0\n  \n    # stores the binary representation\n    bin_rep = \"\"  \n  \n    # to store the remainder \n    rem = 0\n  \n    while (num != 0): \n        # calculate remainder\n        rem = num % 2\n        bin_rep += str(rem)\n        num \/\/= 2\n  \n    # reverse the string and return it\n    bin_rep = bin_rep[::-1]\n    return bin_rep\n\n\n# Main program\nnum = 42\nbinary_rep = find_binary_representation(num)\nprint(binary_rep)","tok_input_length":175,"tok_output_length":131,"system_prompt":"","index":4017}
{"question":"Create an artificial neural network in Python to identify handwritten digits.","input":"","expected_output":"import numpy as np\n\n# Create a neural network with an input layer with 784 nodes,\n# a hidden layer with 64 nodes, and an output layer with 10 nodes\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.InputLayer(input_shape=(784,)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=5)  \n\n# Test the model \nmodel.evaluate(X_test, y_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an artificial neural network in Python to identify handwritten digits.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# Create a neural network with an input layer with 784 nodes,\n# a hidden layer with 64 nodes, and an output layer with 10 nodes\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.InputLayer(input_shape=(784,)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=5)  \n\n# Test the model \nmodel.evaluate(X_test, y_test)","tok_input_length":175,"tok_output_length":136,"system_prompt":"","index":17479}
{"question":"Write a Python program to calculate the price of a stock after a certain number of days given the current price, the stock's daily volatility, and a random daily price variation.","input":"Current Price: $100\nDaily Volatility: 10%\nNumber of Days: 5","expected_output":"import random\n \ndef calculate_price(current_price, volatility, days):\n    price_list = [current_price]\n    for i in range(days):\n        price_variation = random.uniform(-volatility\/2, volatility\/2)\n        current_price += price_variation\n        price_list.append(current_price)\n    return price_list[-1]\n\ncurrent_price = 100 \nvolatility = 10 \ndays = 5\n \nprint(calculate_price(current_price, volatility, days))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the price of a stock after a certain number of days given the current price, the stock's daily volatility, and a random daily price variation.\n\n### Input:\nCurrent Price: $100\nDaily Volatility: 10%\nNumber of Days: 5\n\n### Output:\nimport random\n \ndef calculate_price(current_price, volatility, days):\n    price_list = [current_price]\n    for i in range(days):\n        price_variation = random.uniform(-volatility\/2, volatility\/2)\n        current_price += price_variation\n        price_list.append(current_price)\n    return price_list[-1]\n\ncurrent_price = 100 \nvolatility = 10 \ndays = 5\n \nprint(calculate_price(current_price, volatility, days))","tok_input_length":176,"tok_output_length":94,"system_prompt":"","index":13934}
{"question":"Optimize the following Python program to find the given number in a list.","input":"A list = [2, 4, 9, 8, 10]\nNumber = 8","expected_output":"def find_number(lst, num):\n  for i, v in enumerate(lst):\n    if v == num:\n      return i\n  \n  return -1\n\nlist_of_numbers = [2, 4, 9, 8, 10]\nnumber_to_find = 8\n\n# Find the given number in the list\nindex = find_number(list_of_numbers, number_to_find)\nif index != -1:\n  print(f'Number {number_to_find} found at index {index}.')\nelse:\n  print('Number not found.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python program to find the given number in a list.\n\n### Input:\nA list = [2, 4, 9, 8, 10]\nNumber = 8\n\n### Output:\ndef find_number(lst, num):\n  for i, v in enumerate(lst):\n    if v == num:\n      return i\n  \n  return -1\n\nlist_of_numbers = [2, 4, 9, 8, 10]\nnumber_to_find = 8\n\n# Find the given number in the list\nindex = find_number(list_of_numbers, number_to_find)\nif index != -1:\n  print(f'Number {number_to_find} found at index {index}.')\nelse:\n  print('Number not found.')","tok_input_length":176,"tok_output_length":111,"system_prompt":"","index":2962}
{"question":"Create a Python script to find the Fibonacci series which is a sequence of numbers where every number is the addition of the previous two numbers.","input":"n = 10","expected_output":"def fibonacci(n): \n    if n == 0: return 0\n    if n == 1 or n == 2: return 1\n\n    fib_n_2 = 1\n    fib_n_1 = 1\n    fib_n = 0\n\n    for i in range(3, n + 1): \n        fib_n = fib_n_1 + fib_n_2\n        fib_n_2 = fib_n_1  \n        fib_n_1 = fib_n \n    return fib_n \n\nprint(fibonacci(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to find the Fibonacci series which is a sequence of numbers where every number is the addition of the previous two numbers.\n\n### Input:\nn = 10\n\n### Output:\ndef fibonacci(n): \n    if n == 0: return 0\n    if n == 1 or n == 2: return 1\n\n    fib_n_2 = 1\n    fib_n_1 = 1\n    fib_n = 0\n\n    for i in range(3, n + 1): \n        fib_n = fib_n_1 + fib_n_2\n        fib_n_2 = fib_n_1  \n        fib_n_1 = fib_n \n    return fib_n \n\nprint(fibonacci(n))","tok_input_length":176,"tok_output_length":117,"system_prompt":"","index":2693}
{"question":"Write a tweetbot Python script that daily acts as an alarm clock and sends tweets at a given time.","input":"Not applicable","expected_output":"import tweepy\nfrom datetime import datetime\n\n# Authentication\nauth = tweepy.OAuthHandler(\"CONSUMER KEY\",\n \"CONSUMER SECRET\")\nauth.set_access_token(\"ACCESS TOKEN KEY\",\n \"ACCESS TOKEN SECRET\")\n\n# Connect to the API\napi = tweepy.API(auth)\n\n# Set the time (in hours) for the tweet\ntime = 17\n\n# Tweet message\nmessage = \"It's time to wake up!\"\n\n# Set an infinite loop\nwhile True:\n # Get the current time\n now = datetime.now()\n if now.hour == time:\n # Tweet the message\n api.update_status(message)\n break","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a tweetbot Python script that daily acts as an alarm clock and sends tweets at a given time.\n\n### Input:\nNot applicable\n\n### Output:\nimport tweepy\nfrom datetime import datetime\n\n# Authentication\nauth = tweepy.OAuthHandler(\"CONSUMER KEY\",\n \"CONSUMER SECRET\")\nauth.set_access_token(\"ACCESS TOKEN KEY\",\n \"ACCESS TOKEN SECRET\")\n\n# Connect to the API\napi = tweepy.API(auth)\n\n# Set the time (in hours) for the tweet\ntime = 17\n\n# Tweet message\nmessage = \"It's time to wake up!\"\n\n# Set an infinite loop\nwhile True:\n # Get the current time\n now = datetime.now()\n if now.hour == time:\n # Tweet the message\n api.update_status(message)\n break","tok_input_length":176,"tok_output_length":125,"system_prompt":"","index":3033}
{"question":"Create an algorithm in Python that approximates pi upto given accuracy.","input":"Accuracy: 2 decimal points","expected_output":"# function to approximate pi\ndef approximate_pi(accuracy):\n pi = 0 \n iteration = 0\n # set precision point\n precision = 10 ** -accuracy\n while True:\n  pi += (4 \/ (2 * iteration + 1)) * ((-1) ** iteration) \n  # terminates if the difference in pi is less than given accuracy\n  if abs((pi - 3.14) > precision):\n   break\n  iteration += 1\n \n return round(pi, accuracy)\n \n # example\naccuracy = 2\nprint(approximate_pi(accuracy))\n\n# Output: 3.14","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that approximates pi upto given accuracy.\n\n### Input:\nAccuracy: 2 decimal points\n\n### Output:\n# function to approximate pi\ndef approximate_pi(accuracy):\n pi = 0 \n iteration = 0\n # set precision point\n precision = 10 ** -accuracy\n while True:\n  pi += (4 \/ (2 * iteration + 1)) * ((-1) ** iteration) \n  # terminates if the difference in pi is less than given accuracy\n  if abs((pi - 3.14) > precision):\n   break\n  iteration += 1\n \n return round(pi, accuracy)\n \n # example\naccuracy = 2\nprint(approximate_pi(accuracy))\n\n# Output: 3.14","tok_input_length":176,"tok_output_length":129,"system_prompt":"","index":16607}
{"question":"Write a Python program to demonstrate inheritance between two classes.","input":"","expected_output":"class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def show_info(self):\n        print(\"Name of Person is: \", self.name)\n        print(\"Age of Person is: \", self.age)\n    \nclass Employee(Person):\n    def __init__(self, name, age, emp_id):\n        super().__init__(name, age)\n        self.emp_id = emp_id\n    \n    def show_info(self):\n        super().show_info()\n        print(\"ID of Employee is: \", self.emp_id)\n \nemp = Employee(\"John Doe\", 30, \"E1001\")\nemp.show_info()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to demonstrate inheritance between two classes.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def show_info(self):\n        print(\"Name of Person is: \", self.name)\n        print(\"Age of Person is: \", self.age)\n    \nclass Employee(Person):\n    def __init__(self, name, age, emp_id):\n        super().__init__(name, age)\n        self.emp_id = emp_id\n    \n    def show_info(self):\n        super().show_info()\n        print(\"ID of Employee is: \", self.emp_id)\n \nemp = Employee(\"John Doe\", 30, \"E1001\")\nemp.show_info()","tok_input_length":176,"tok_output_length":138,"system_prompt":"","index":16838}
{"question":"Design an algorithm in Python to rearrange the elements in an array such that no two elements appear next to each other whose absolute difference is equal to 1.","input":"[1, 4, 5, 2, 9, 0]","expected_output":"def modifiedArrangement(arr):\n    arr.sort() \n    result = [] \n\n    for i in range(len(arr)) : \n        result.append((arr[i]+1) - 1) \n        result.append(arr[i]) \n\n    return result \n\narr = [1, 4, 5, 2, 9, 0]\n# modified Arrangement \nresult = modifiedArrangement(arr) \n\n# Print the result \nprint(\"Modified arrangement : \" + str(result))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to rearrange the elements in an array such that no two elements appear next to each other whose absolute difference is equal to 1.\n\n### Input:\n[1, 4, 5, 2, 9, 0]\n\n### Output:\ndef modifiedArrangement(arr):\n    arr.sort() \n    result = [] \n\n    for i in range(len(arr)) : \n        result.append((arr[i]+1) - 1) \n        result.append(arr[i]) \n\n    return result \n\narr = [1, 4, 5, 2, 9, 0]\n# modified Arrangement \nresult = modifiedArrangement(arr) \n\n# Print the result \nprint(\"Modified arrangement : \" + str(result))","tok_input_length":177,"tok_output_length":100,"system_prompt":"","index":7344}
{"question":"Create a Python program to identify most frequent value","input":"Identify the most frequent element in the array [1, 2, 2, 3, 3, 3, 4].","expected_output":"def identify_most_frequent_value(arr):\n    counts = {}\n\n    # count the occurrence of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # find the most frequent element\n    max_freq = 0\n    max_freq_num = 0\n    for num in counts:\n        if counts[num] > max_freq:\n            max_freq_num = num\n            max_freq = counts[num]\n\n    return max_freq_num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to identify most frequent value\n\n### Input:\nIdentify the most frequent element in the array [1, 2, 2, 3, 3, 3, 4].\n\n### Output:\ndef identify_most_frequent_value(arr):\n    counts = {}\n\n    # count the occurrence of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # find the most frequent element\n    max_freq = 0\n    max_freq_num = 0\n    for num in counts:\n        if counts[num] > max_freq:\n            max_freq_num = num\n            max_freq = counts[num]\n\n    return max_freq_num","tok_input_length":177,"tok_output_length":110,"system_prompt":"","index":15447}
{"question":"Create a function in Python that multiplies two numbers without using the \u2018*\u2019 operator.","input":"x = 4\ny = 5","expected_output":"def multiply_without_operator(x, y):\n # Handle cases when either of the numbers is 0\n if x == 0 or y == 0:\n return 0\n \n # Initialize a result variable to 0 \n res = 0\n \n # Loop through y number of times and add x to res\n for i in range(abs(y)):\n res += abs(x)\n \n # Handle negative inputs\n if x < 0 and y < 0:\n return res\n elif x < 0 or y < 0:\n return -res\n \n # Case when both inputs are positive\n else:\n return res","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that multiplies two numbers without using the \u2018*\u2019 operator.\n\n### Input:\nx = 4\ny = 5\n\n### Output:\ndef multiply_without_operator(x, y):\n # Handle cases when either of the numbers is 0\n if x == 0 or y == 0:\n return 0\n \n # Initialize a result variable to 0 \n res = 0\n \n # Loop through y number of times and add x to res\n for i in range(abs(y)):\n res += abs(x)\n \n # Handle negative inputs\n if x < 0 and y < 0:\n return res\n elif x < 0 or y < 0:\n return -res\n \n # Case when both inputs are positive\n else:\n return res","tok_input_length":177,"tok_output_length":122,"system_prompt":"","index":7378}
{"question":"Create a program in Python that detects the largest palindrome within a given phrase.","input":"\"Quick brown fox\"","expected_output":"def find_largest_palindrome(phrase):\n    palindromes = []\n    for word in phrase.split(): # split phrase into words\n        for i in range(len(word)): # iterate through each letter\n            for j in range(len(word)-i+1): # build each possible substring\n                s = word[i:i+j]\n                if s == s[::-1] and len(s) > 1: # check if is a palindrome\n                    palindromes.append(s)\n    return max(palindromes, key=len) # return longest palindrome\n\nfind_largest_palindrome(\"Quick brown fox\") # oo","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that detects the largest palindrome within a given phrase.\n\n### Input:\n\"Quick brown fox\"\n\n### Output:\ndef find_largest_palindrome(phrase):\n    palindromes = []\n    for word in phrase.split(): # split phrase into words\n        for i in range(len(word)): # iterate through each letter\n            for j in range(len(word)-i+1): # build each possible substring\n                s = word[i:i+j]\n                if s == s[::-1] and len(s) > 1: # check if is a palindrome\n                    palindromes.append(s)\n    return max(palindromes, key=len) # return longest palindrome\n\nfind_largest_palindrome(\"Quick brown fox\") # oo","tok_input_length":177,"tok_output_length":130,"system_prompt":"","index":6698}
{"question":"Design a Python program to classify an email as spam or not.","input":"No input","expected_output":"import nltk\nimport re\n\ndef classify_email(email):\n    email_words = re.findall(\"[a-zA-Z0-9]+\", email)\n    frequency = nltk.FreqDist(email_words)\n    common_words = frequency.most_common(30)\n\n    spam_words = [\"buy\", \"free\", \"unlimited\", \"cash\", \"click\", \"amazing\"]\n    is_spam = False\n\n    for word in common_words:\n        if word in spam_words:\n            is_spam = True\n \n    if is_spam:\n        print(\"This email is classified as SPAM.\")\n    else:\n        print(\"This email is classified as NOT SPAM.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to classify an email as spam or not.\n\n### Input:\nNo input\n\n### Output:\nimport nltk\nimport re\n\ndef classify_email(email):\n    email_words = re.findall(\"[a-zA-Z0-9]+\", email)\n    frequency = nltk.FreqDist(email_words)\n    common_words = frequency.most_common(30)\n\n    spam_words = [\"buy\", \"free\", \"unlimited\", \"cash\", \"click\", \"amazing\"]\n    is_spam = False\n\n    for word in common_words:\n        if word in spam_words:\n            is_spam = True\n \n    if is_spam:\n        print(\"This email is classified as SPAM.\")\n    else:\n        print(\"This email is classified as NOT SPAM.\")","tok_input_length":177,"tok_output_length":134,"system_prompt":"","index":9464}
{"question":"Create an object-oriented calculator program with Python.","input":"","expected_output":"class Calculator:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        return a \/ b\n    \n\ncalc = Calculator()\n\n# Example operations\nnum1 = 10\nnum2 = 2\n\nadd_result = calc.add(num1, num2)\nsubtract_result = calc.subtract(num1, num2)\nmultiply_result = calc.multiply(num1, num2)\ndivide_result = calc.divide(num1, num2)\n\nprint(add_result, subtract_result, multiply_result, divide_result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented calculator program with Python.\n\n### Input:\n\n\n### Output:\nclass Calculator:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        return a \/ b\n    \n\ncalc = Calculator()\n\n# Example operations\nnum1 = 10\nnum2 = 2\n\nadd_result = calc.add(num1, num2)\nsubtract_result = calc.subtract(num1, num2)\nmultiply_result = calc.multiply(num1, num2)\ndivide_result = calc.divide(num1, num2)\n\nprint(add_result, subtract_result, multiply_result, divide_result)","tok_input_length":177,"tok_output_length":141,"system_prompt":"","index":10415}
{"question":"Design a Python 3 program that takes as input from the user two comma-separated lists of integers and then finds the union of the two lists.","input":"list1 = [1,2,3,4], list2 = [6,5,4,3]","expected_output":"list1 = [1,2,3,4]\nlist2 = [6,5,4,3]\n\ndef findUnion(list1, list2):\n unionList = list1\n for item in list2:\n  if item not in unionList:\n   unionList.append(item)\n return unionList\n\nunion = findUnion(list1, list2)\nprint(union) # prints [1, 2, 3, 4, 6, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python 3 program that takes as input from the user two comma-separated lists of integers and then finds the union of the two lists.\n\n### Input:\nlist1 = [1,2,3,4], list2 = [6,5,4,3]\n\n### Output:\nlist1 = [1,2,3,4]\nlist2 = [6,5,4,3]\n\ndef findUnion(list1, list2):\n unionList = list1\n for item in list2:\n  if item not in unionList:\n   unionList.append(item)\n return unionList\n\nunion = findUnion(list1, list2)\nprint(union) # prints [1, 2, 3, 4, 6, 5]","tok_input_length":178,"tok_output_length":98,"system_prompt":"","index":10520}
{"question":"Write a function in python using Numpy to perform linear interpolation on a given dataset.","input":"you only have the following given dataset\nx=[1,2,3]\ny=[2,4,6]","expected_output":"import numpy as np\n\ndef linear_interpolation(x, y):\n    '''Linear interpolation on given dataset.'''\n    points = list(zip(x, y))\n    x_new, y_new = zip(*[(x_i, np.interp(x_i, x, y)) for x_i in np.arange(1,max(x))])\n    points_new = list(zip(x_new, y_new))\n    return points + points_new\n\nx=[1,2,3]\ny=[2,4,6]\n\nprint(linear_interpolation(x, y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in python using Numpy to perform linear interpolation on a given dataset.\n\n### Input:\nyou only have the following given dataset\nx=[1,2,3]\ny=[2,4,6]\n\n### Output:\nimport numpy as np\n\ndef linear_interpolation(x, y):\n    '''Linear interpolation on given dataset.'''\n    points = list(zip(x, y))\n    x_new, y_new = zip(*[(x_i, np.interp(x_i, x, y)) for x_i in np.arange(1,max(x))])\n    points_new = list(zip(x_new, y_new))\n    return points + points_new\n\nx=[1,2,3]\ny=[2,4,6]\n\nprint(linear_interpolation(x, y))","tok_input_length":178,"tok_output_length":110,"system_prompt":"","index":7297}
{"question":"Analyze a given Python list containing only numbers and classify it as either containing only even numbers, only odd numbers or both.","input":"[2, 4, 5, 7]","expected_output":"def classifyList(list):\n \teven = True\n \todd = True\n \tfor num in list:\n \t\tif (num % 2 == 0):\n             odd = False\n \t\telse:\n            even = False\n \tif (even):\n \t\tprint(\"list contains only even numbers\")\n \tif (odd):\n \t\tprint(\"list contains only odd numbers\")\n \tif (odd == False and even == False):\n        print(\"list contains both even and odd numbers\")\n \t\nlist = [2,4,5,7]\nclassifyList(list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze a given Python list containing only numbers and classify it as either containing only even numbers, only odd numbers or both.\n\n### Input:\n[2, 4, 5, 7]\n\n### Output:\ndef classifyList(list):\n \teven = True\n \todd = True\n \tfor num in list:\n \t\tif (num % 2 == 0):\n             odd = False\n \t\telse:\n            even = False\n \tif (even):\n \t\tprint(\"list contains only even numbers\")\n \tif (odd):\n \t\tprint(\"list contains only odd numbers\")\n \tif (odd == False and even == False):\n        print(\"list contains both even and odd numbers\")\n \t\nlist = [2,4,5,7]\nclassifyList(list)","tok_input_length":178,"tok_output_length":114,"system_prompt":"","index":12687}
{"question":"Modify the provided python code to find the length of a given list.","input":"my_list = [1, 2, 3, 4, 5]","expected_output":"my_list = [1, 2, 3, 4, 5]\n\n# Function to find the length of a given list\ndef find_length(my_list):\n  # Variable to store the length of the list\n  length = 0\n  \n  # Loop through the list and increment length by 1 for every element in the list\n  for element in my_list:\n    length += 1\n  \n  # return the length of the list\n  return length\n\n# Call the function \nprint(\"Length of the list is:\", find_length(my_list)) # 5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the provided python code to find the length of a given list.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5]\n\n### Output:\nmy_list = [1, 2, 3, 4, 5]\n\n# Function to find the length of a given list\ndef find_length(my_list):\n  # Variable to store the length of the list\n  length = 0\n  \n  # Loop through the list and increment length by 1 for every element in the list\n  for element in my_list:\n    length += 1\n  \n  # return the length of the list\n  return length\n\n# Call the function \nprint(\"Length of the list is:\", find_length(my_list)) # 5","tok_input_length":178,"tok_output_length":119,"system_prompt":"","index":18199}
{"question":"Construct a decision tree classifier in Python, to classify an animal based on body characteristics.","input":"Not applicable","expected_output":"from sklearn import tree\n\n# features (characteristicsof animals)\n# 0 for false, 1 for true\nfeatures = [[1, 0], [1, 1], [0, 1], [0, 0]]\n\n# labels of features (types of animals)\nlabels = [0, 0, 1, 1]\n\n# decision tree classifier\nclf = tree.DecisionTreeClassifier()\n\n# train the classifier with the data\nclf = clf.fit(features, labels)\n\n# test a prediction\nprediction = clf.predict([[1, 0]])\n\n# print the result\nprint(prediction) # [0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a decision tree classifier in Python, to classify an animal based on body characteristics.\n\n### Input:\nNot applicable\n\n### Output:\nfrom sklearn import tree\n\n# features (characteristicsof animals)\n# 0 for false, 1 for true\nfeatures = [[1, 0], [1, 1], [0, 1], [0, 0]]\n\n# labels of features (types of animals)\nlabels = [0, 0, 1, 1]\n\n# decision tree classifier\nclf = tree.DecisionTreeClassifier()\n\n# train the classifier with the data\nclf = clf.fit(features, labels)\n\n# test a prediction\nprediction = clf.predict([[1, 0]])\n\n# print the result\nprint(prediction) # [0]","tok_input_length":178,"tok_output_length":131,"system_prompt":"","index":17916}
{"question":"Design a neural network in python to recognize handwritten digits","input":"","expected_output":"import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in python to recognize handwritten digits\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)","tok_input_length":178,"tok_output_length":140,"system_prompt":"","index":12914}
{"question":"Create a Python script that uses the provided API to create a pandas.DataFrame object with the weather data for a specified city.","input":"API endpoint: https:\/\/api.openweathermap.org\/data\/2.5\/weather?q=London&units=metric&appid=YOUR_API_KEY","expected_output":"import pandas as pd\nimport requests\n\nurl = 'https:\/\/api.openweathermap.org\/data\/2.5\/weather?q=London&units=metric&appid=YOUR_API_KEY'\ndata = requests.get(url).json()\n\nweather_data = {\n 'city': data['name'],\n 'temperature': data['main']['temp'],\n 'humidity': data['main']['humidity'],\n 'description': data['weather'][0]['description']\n}\n\nweather_df = pd.DataFrame(weather_data, index=[0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that uses the provided API to create a pandas.DataFrame object with the weather data for a specified city.\n\n### Input:\nAPI endpoint: https:\/\/api.openweathermap.org\/data\/2.5\/weather?q=London&units=metric&appid=YOUR_API_KEY\n\n### Output:\nimport pandas as pd\nimport requests\n\nurl = 'https:\/\/api.openweathermap.org\/data\/2.5\/weather?q=London&units=metric&appid=YOUR_API_KEY'\ndata = requests.get(url).json()\n\nweather_data = {\n 'city': data['name'],\n 'temperature': data['main']['temp'],\n 'humidity': data['main']['humidity'],\n 'description': data['weather'][0]['description']\n}\n\nweather_df = pd.DataFrame(weather_data, index=[0])","tok_input_length":179,"tok_output_length":99,"system_prompt":"","index":14538}
{"question":"Create a Python program, which takes two strings as input, and returns true if one string is an anagram of the other and false otherwise.","input":"s1 = \"test\"\ns2 = \"ttes\"","expected_output":"def isAnagram(s1, s2): \n    # Sort both strings  \n    s1 = sorted(s1) \n    s2 = sorted(s2)\n    # Compare sorted strings \n    if( s1 == s2): \n        return True \n    else: \n        return False \ns1 = \"test\"\ns2 = \"ttes\"\nif (isAnagram(s1, s2)): \n    print (\"The strings are anagrams.\")\nelse: \n    print (\"The strings aren't anagrams.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program, which takes two strings as input, and returns true if one string is an anagram of the other and false otherwise.\n\n### Input:\ns1 = \"test\"\ns2 = \"ttes\"\n\n### Output:\ndef isAnagram(s1, s2): \n    # Sort both strings  \n    s1 = sorted(s1) \n    s2 = sorted(s2)\n    # Compare sorted strings \n    if( s1 == s2): \n        return True \n    else: \n        return False \ns1 = \"test\"\ns2 = \"ttes\"\nif (isAnagram(s1, s2)): \n    print (\"The strings are anagrams.\")\nelse: \n    print (\"The strings aren't anagrams.\")","tok_input_length":179,"tok_output_length":110,"system_prompt":"","index":14128}
{"question":"Come up with an optimal algorithm in Python to sort an array of integers.","input":"[3, 8, 10, 1, 7, 4]","expected_output":"def sort_array(arr):\n    # Bubble Sort Algorithm\n    n = len(arr)\n    \n    for i in range(n-1):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    \n    return arr\n\n# Example Usage\ninput_array = [3,8,10,1,7,4]\nprint(sort_array(input_array)) # Output: [1, 3, 4, 7, 8, 10]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with an optimal algorithm in Python to sort an array of integers.\n\n### Input:\n[3, 8, 10, 1, 7, 4]\n\n### Output:\ndef sort_array(arr):\n    # Bubble Sort Algorithm\n    n = len(arr)\n    \n    for i in range(n-1):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    \n    return arr\n\n# Example Usage\ninput_array = [3,8,10,1,7,4]\nprint(sort_array(input_array)) # Output: [1, 3, 4, 7, 8, 10]","tok_input_length":179,"tok_output_length":119,"system_prompt":"","index":10579}
{"question":"Create a web scraper in Python to extract the number of views, likes, and dislikes from YouTube videos.","input":"Not applicable","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.youtube.com\/watch?v=YAOm5YBT-Tk'\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nlikes = int(soup.find(\"button\", attrs={\"title\":\"I like this\"}).span.text)\ndislikes = int(soup.find(\"button\", attrs={\"title\":\"I dislike this\"}).span.text)\nviews = int(soup.find(\"span\", attrs={\"class\":\"view-count\"}).text.strip())\n\nprint('Likes: {}, Dislikes: {}, Views: {}'.format(likes, dislikes, views))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract the number of views, likes, and dislikes from YouTube videos.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.youtube.com\/watch?v=YAOm5YBT-Tk'\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nlikes = int(soup.find(\"button\", attrs={\"title\":\"I like this\"}).span.text)\ndislikes = int(soup.find(\"button\", attrs={\"title\":\"I dislike this\"}).span.text)\nviews = int(soup.find(\"span\", attrs={\"class\":\"view-count\"}).text.strip())\n\nprint('Likes: {}, Dislikes: {}, Views: {}'.format(likes, dislikes, views))","tok_input_length":179,"tok_output_length":128,"system_prompt":"","index":5906}
{"question":"Create a class in Python that represents a two-dimensional vector.","input":"Not applicable","expected_output":"class Vector2D:\n def __init__(self, x = 0, y = 0):\n  self.x = x\n  self.y = y\n\ndef __str__(self):\n return '<' + str(self.x) + ', ' + str(self.y) + '>'\n\ndef add(self, other):\n return Vector2D(self.x + other.x, self.y + other.y)\n\ndef __add__(self, other):\n return self.add(other)\n\n# testing\nv1 = Vector2D(3, 4)\nv2 = Vector2D(1, 2)\nprint(v1 + v2)\n\n# Output: <4, 6>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that represents a two-dimensional vector.\n\n### Input:\nNot applicable\n\n### Output:\nclass Vector2D:\n def __init__(self, x = 0, y = 0):\n  self.x = x\n  self.y = y\n\ndef __str__(self):\n return '<' + str(self.x) + ', ' + str(self.y) + '>'\n\ndef add(self, other):\n return Vector2D(self.x + other.x, self.y + other.y)\n\ndef __add__(self, other):\n return self.add(other)\n\n# testing\nv1 = Vector2D(3, 4)\nv2 = Vector2D(1, 2)\nprint(v1 + v2)\n\n# Output: <4, 6>","tok_input_length":179,"tok_output_length":137,"system_prompt":"","index":5415}
{"question":"Generate an optimized version of a given Python script that reduces its runtime.","input":"A sample Python script - \ndef sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if data[i] > data[j]:\n                t = data[i]\n                data[i] = data[j]\n                data[j] = t","expected_output":"def sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        min_index = i\n        for j in range(i + 1, n):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an optimized version of a given Python script that reduces its runtime.\n\n### Input:\nA sample Python script - \ndef sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if data[i] > data[j]:\n                t = data[i]\n                data[i] = data[j]\n                data[j] = t\n\n### Output:\ndef sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        min_index = i\n        for j in range(i + 1, n):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]","tok_input_length":180,"tok_output_length":71,"system_prompt":"","index":18268}
{"question":"Create a machine learning application using Python and the scikit-learn library. The application should include a step for training a Logistic Regression model and predicting the output for a given input.","input":"X_train, y_train = datasets.load_wine(return_X_y=True)","expected_output":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, linear_model\n\n# Loading the dataset\nX_train, y_train = datasets.load_wine(return_X_y=True)\n\n# Creating a Logistic Regression model\nlogreg = linear_model.LogisticRegression()\n\n# Training the model\nlogreg.fit(X_train, y_train)\n\n# Making predictions\npredictions = logreg.predict(X_test) \n\n# Evaluating the model\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, predictions))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning application using Python and the scikit-learn library. The application should include a step for training a Logistic Regression model and predicting the output for a given input.\n\n### Input:\nX_train, y_train = datasets.load_wine(return_X_y=True)\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, linear_model\n\n# Loading the dataset\nX_train, y_train = datasets.load_wine(return_X_y=True)\n\n# Creating a Logistic Regression model\nlogreg = linear_model.LogisticRegression()\n\n# Training the model\nlogreg.fit(X_train, y_train)\n\n# Making predictions\npredictions = logreg.predict(X_test) \n\n# Evaluating the model\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, predictions))","tok_input_length":180,"tok_output_length":102,"system_prompt":"","index":17922}
{"question":"Generate a Python class that uses Bubble Sort to sort a list of numbers.","input":"[4, 3, 6, 2, 8, 1, 5]","expected_output":"class BubbleSort:\n    def __init__(self, arr):\n        self.arr = arr\n    \n    def sort(self):\n        for num in range(len(self.arr)-1,0,-1):\n            for i in range(num):\n                if self.arr[i] > self.arr[i+1]:\n                    self.arr[i], self.arr[i+1] = self.arr[i+1], self.arr[i]\n        return self.arr\n\narr = [4,3,6,2,8,1,5]\nsorted_arr = BubbleSort(arr).sort()\nprint(sorted_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class that uses Bubble Sort to sort a list of numbers.\n\n### Input:\n[4, 3, 6, 2, 8, 1, 5]\n\n### Output:\nclass BubbleSort:\n    def __init__(self, arr):\n        self.arr = arr\n    \n    def sort(self):\n        for num in range(len(self.arr)-1,0,-1):\n            for i in range(num):\n                if self.arr[i] > self.arr[i+1]:\n                    self.arr[i], self.arr[i+1] = self.arr[i+1], self.arr[i]\n        return self.arr\n\narr = [4,3,6,2,8,1,5]\nsorted_arr = BubbleSort(arr).sort()\nprint(sorted_arr)","tok_input_length":180,"tok_output_length":117,"system_prompt":"","index":2498}
{"question":"Write a function in Python to generate a space-delimited matrix of m rows and n columns.","input":"m = 3\nn = 5","expected_output":"def generate_matrix(m, n):\n    matrix = \"\"\n    # generate the matrix row by row\n    for i in range(m):\n        row = \"\"\n        # generate a single row with n columns\n        for j in range(n):\n            row += str(random.randint(-100, 100)) + \" \"\n        matrix += row + \"\\n\"\n    return matrix\n\nmatrix = generate_matrix(3, 5)\nprint(matrix)\n# 23 12 -72 -35 47\n# -6 67 42 -54 95\n# 93 13 75 -9 -63","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to generate a space-delimited matrix of m rows and n columns.\n\n### Input:\nm = 3\nn = 5\n\n### Output:\ndef generate_matrix(m, n):\n    matrix = \"\"\n    # generate the matrix row by row\n    for i in range(m):\n        row = \"\"\n        # generate a single row with n columns\n        for j in range(n):\n            row += str(random.randint(-100, 100)) + \" \"\n        matrix += row + \"\\n\"\n    return matrix\n\nmatrix = generate_matrix(3, 5)\nprint(matrix)\n# 23 12 -72 -35 47\n# -6 67 42 -54 95\n# 93 13 75 -9 -63","tok_input_length":180,"tok_output_length":124,"system_prompt":"","index":1124}
{"question":"Create a Python class that processes text according to some simple rules and counts the frequency of words in the text.","input":"","expected_output":"class TextProcessor:\n  def __init__(self):\n    self.frequency_map = {}\n\n  def process_text(self, text):\n    clean_text = self._preprocess_text(text)\n    word_list = clean_text.split()\n    self._count_frequencies(word_list)\n\n  def _preprocess_text(self, text):\n    # Strip punctuation, convert to lower case, etc.\n    return text.strip().lower()\n\n  def _count_frequencies(self, word_list):\n    for word in word_list:\n      if word in self.frequency_map:\n        self.frequency_map[word] += 1\n      else:\n        self.frequency_map[word] = 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that processes text according to some simple rules and counts the frequency of words in the text.\n\n### Input:\n\n\n### Output:\nclass TextProcessor:\n  def __init__(self):\n    self.frequency_map = {}\n\n  def process_text(self, text):\n    clean_text = self._preprocess_text(text)\n    word_list = clean_text.split()\n    self._count_frequencies(word_list)\n\n  def _preprocess_text(self, text):\n    # Strip punctuation, convert to lower case, etc.\n    return text.strip().lower()\n\n  def _count_frequencies(self, word_list):\n    for word in word_list:\n      if word in self.frequency_map:\n        self.frequency_map[word] += 1\n      else:\n        self.frequency_map[word] = 1","tok_input_length":180,"tok_output_length":131,"system_prompt":"","index":5445}
{"question":"Create a machine learning algorithm in Python to classify flowers by their petal size.","input":"","expected_output":"from sklearn.svm import SVC\nfrom sklearn.datasets import load_iris\n\n# Load the iris dataset \niris = load_iris()\n \n# Create the X (features) and y (target) arrays\nX = iris.data\ny = iris.target\n\n# Split the dataset into test and train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n \n# Train the SVC classifier\nsvm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)\n\n# Create predictions \npredictions = svm_model_linear.predict(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning algorithm in Python to classify flowers by their petal size.\n\n### Input:\n\n\n### Output:\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import load_iris\n\n# Load the iris dataset \niris = load_iris()\n \n# Create the X (features) and y (target) arrays\nX = iris.data\ny = iris.target\n\n# Split the dataset into test and train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n \n# Train the SVC classifier\nsvm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)\n\n# Create predictions \npredictions = svm_model_linear.predict(X_test)","tok_input_length":180,"tok_output_length":137,"system_prompt":"","index":12359}
{"question":"Create a Python program to store prices for grocery items in a dictionary and write a function to calculate the total cost of the items.","input":"groceries = {'apple': 3.99, 'banana': 2.99, 'milk': 5.99, 'bread': 3.50}","expected_output":"groceries = {'apple': 3.99, 'banana': 2.99, 'milk': 5.99, 'bread': 3.50}\n\ndef total_cost(groceries):\n  total = 0.0\n  for key in groceries:\n    total += groceries[key]\n  return total\n\ntotal_cost = total_cost(groceries)\nprint(f'The total cost of all groceries is ${total_cost}.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to store prices for grocery items in a dictionary and write a function to calculate the total cost of the items.\n\n### Input:\ngroceries = {'apple': 3.99, 'banana': 2.99, 'milk': 5.99, 'bread': 3.50}\n\n### Output:\ngroceries = {'apple': 3.99, 'banana': 2.99, 'milk': 5.99, 'bread': 3.50}\n\ndef total_cost(groceries):\n  total = 0.0\n  for key in groceries:\n    total += groceries[key]\n  return total\n\ntotal_cost = total_cost(groceries)\nprint(f'The total cost of all groceries is ${total_cost}.')","tok_input_length":181,"tok_output_length":92,"system_prompt":"","index":8116}
{"question":"Write a Python program to automate adding products to an e-commerce website's database.","input":"Products:\n\nName: iPhone 11 Pro\nPrice: 949\n\nName: AirPods Pro\nPrice: 249","expected_output":"import sqlite3\n\n# Establish the connection\nconn = sqlite3.connect(\"ecommerce_database.db\")\nc = conn.cursor()\n\n# Create the table\nc.execute('''CREATE TABLE IF NOT EXISTS products (\n    name TEXT,\n    price INTEGER\n)''')\n\n# Insert data into table\nproducts = [\n    (\"iPhone 11 Pro\", 949),\n    (\"AirPods Pro\", 249)\n]\n\nc.executemany('INSERT INTO products VALUES (?, ?)', products)\n\n# Commit changes\nconn.commit()\n\n# Close the connection\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to automate adding products to an e-commerce website's database.\n\n### Input:\nProducts:\n\nName: iPhone 11 Pro\nPrice: 949\n\nName: AirPods Pro\nPrice: 249\n\n### Output:\nimport sqlite3\n\n# Establish the connection\nconn = sqlite3.connect(\"ecommerce_database.db\")\nc = conn.cursor()\n\n# Create the table\nc.execute('''CREATE TABLE IF NOT EXISTS products (\n    name TEXT,\n    price INTEGER\n)''')\n\n# Insert data into table\nproducts = [\n    (\"iPhone 11 Pro\", 949),\n    (\"AirPods Pro\", 249)\n]\n\nc.executemany('INSERT INTO products VALUES (?, ?)', products)\n\n# Commit changes\nconn.commit()\n\n# Close the connection\nconn.close()","tok_input_length":181,"tok_output_length":112,"system_prompt":"","index":7614}
{"question":"Optimize the following Python function to merge two lists.","input":"a = [1,3,5]\nb = [2,4,6]","expected_output":"def merge_lists(a, b):\n  merged_list = []\n  a_pos = 0\n  b_pos = 0\n  \n  while a_pos < len(a) and b_pos < len(b):\n    if a[a_pos] < b[b_pos]:\n      merged_list.append(a[a_pos])\n      a_pos += 1\n    else:\n      merged_list.append(b[b_pos])\n      b_pos += 1\n\n  return merged_list + a[a_pos:] + b[b_pos:]\n\na = [1,3,5]\nb = [2,4,6]\nprint(merge_lists(a,b))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python function to merge two lists.\n\n### Input:\na = [1,3,5]\nb = [2,4,6]\n\n### Output:\ndef merge_lists(a, b):\n  merged_list = []\n  a_pos = 0\n  b_pos = 0\n  \n  while a_pos < len(a) and b_pos < len(b):\n    if a[a_pos] < b[b_pos]:\n      merged_list.append(a[a_pos])\n      a_pos += 1\n    else:\n      merged_list.append(b[b_pos])\n      b_pos += 1\n\n  return merged_list + a[a_pos:] + b[b_pos:]\n\na = [1,3,5]\nb = [2,4,6]\nprint(merge_lists(a,b))","tok_input_length":181,"tok_output_length":125,"system_prompt":"","index":2061}
{"question":"Create a class in Python to perform basic arithmetic operations such as addition, subtraction, multiplication and division.","input":"","expected_output":"class Arithmetic:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def addition(self):\n        return self.a + self.b\n\n    def subtraction(self):\n        return self.a - self.b\n\n    def multiplication(self):\n        return self.a * self.b\n\n    def division(self):\n        return self.a \/ self.b\n\na = Arithmetic(2, 4)\nprint(a.addition()) # Output: 6\nprint(a.subtraction()) # Output: -2\nprint(a.multiplication()) # Output: 8\nprint(a.division()) # Output: 0.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to perform basic arithmetic operations such as addition, subtraction, multiplication and division.\n\n### Input:\n\n\n### Output:\nclass Arithmetic:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def addition(self):\n        return self.a + self.b\n\n    def subtraction(self):\n        return self.a - self.b\n\n    def multiplication(self):\n        return self.a * self.b\n\n    def division(self):\n        return self.a \/ self.b\n\na = Arithmetic(2, 4)\nprint(a.addition()) # Output: 6\nprint(a.subtraction()) # Output: -2\nprint(a.multiplication()) # Output: 8\nprint(a.division()) # Output: 0.5","tok_input_length":181,"tok_output_length":134,"system_prompt":"","index":5482}
{"question":"Find all possible substrings in a given string.","input":"my_string = \"Python\"","expected_output":"def find_substrings(string):\n    substrings = []\n    length = len(string) \n    for i in range(length): \n        for j in range(i + 1, length + 1): \n            substrings.append(string[i: j]) \n    return substrings\n\nsubstrings = find_substrings(my_string)\nprint (substrings) # ['P', 'Py', 'Pyth', 'Pytho', 'Python', 'y', 'yt', 'yth', 'ythe', 'yhon', 't', 'th', 'tho', 'thon', 'h', 'ho', 'hon', 'o', 'on', 'n']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind all possible substrings in a given string.\n\n### Input:\nmy_string = \"Python\"\n\n### Output:\ndef find_substrings(string):\n    substrings = []\n    length = len(string) \n    for i in range(length): \n        for j in range(i + 1, length + 1): \n            substrings.append(string[i: j]) \n    return substrings\n\nsubstrings = find_substrings(my_string)\nprint (substrings) # ['P', 'Py', 'Pyth', 'Pytho', 'Python', 'y', 'yt', 'yth', 'ythe', 'yhon', 't', 'th', 'tho', 'thon', 'h', 'ho', 'hon', 'o', 'on', 'n']","tok_input_length":181,"tok_output_length":138,"system_prompt":"","index":11946}
{"question":"Write a Python program to calculate the total cost of a meal given the components and the quantity for each component.","input":"Quantity = {'burger': 2, 'fries': 3, 'soda': 2}; Prices = {'burger': 5, 'fries': 2, 'soda': 1}","expected_output":"def calculateCost(quantity, prices):\n    cost = 0\n    for item in quantity:\n        cost += quantity[item] * prices[item]\n    return cost\n\nquantity = {'burger': 2, 'fries': 3, 'soda': 2}\nprices = {'burger': 5, 'fries': 2, 'soda': 1}\n\nresult = calculateCost(quantity, prices)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total cost of a meal given the components and the quantity for each component.\n\n### Input:\nQuantity = {'burger': 2, 'fries': 3, 'soda': 2}; Prices = {'burger': 5, 'fries': 2, 'soda': 1}\n\n### Output:\ndef calculateCost(quantity, prices):\n    cost = 0\n    for item in quantity:\n        cost += quantity[item] * prices[item]\n    return cost\n\nquantity = {'burger': 2, 'fries': 3, 'soda': 2}\nprices = {'burger': 5, 'fries': 2, 'soda': 1}\n\nresult = calculateCost(quantity, prices)\nprint(result)","tok_input_length":182,"tok_output_length":89,"system_prompt":"","index":16744}
{"question":"Write a Python program to extract and sort the words in the text field of a given HTML page.","input":"<html>\n <head>\n ...\n <\/head>\n <body>\n The quick brown fox jumps over the lazy dog\n <\/body>\n<\/html>","expected_output":"import re\n\n#read HTML as a string\nhtml_string = '<html> <head> ... <\/head> <body>The quick brown fox jumps over the lazy dog <\/body> <\/html>'\n\n#extract the text area from the page\ntext = re.findall(r'<body>(.*?)<\/body>', html_string, flags=re.DOTALL)[0]\n\n#split the text into an array of words\nwords = text.split()\n\n#sort the array of words\nwords.sort()\n\n#print the sorted words\nprint(words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract and sort the words in the text field of a given HTML page.\n\n### Input:\n<html>\n <head>\n ...\n <\/head>\n <body>\n The quick brown fox jumps over the lazy dog\n <\/body>\n<\/html>\n\n### Output:\nimport re\n\n#read HTML as a string\nhtml_string = '<html> <head> ... <\/head> <body>The quick brown fox jumps over the lazy dog <\/body> <\/html>'\n\n#extract the text area from the page\ntext = re.findall(r'<body>(.*?)<\/body>', html_string, flags=re.DOTALL)[0]\n\n#split the text into an array of words\nwords = text.split()\n\n#sort the array of words\nwords.sort()\n\n#print the sorted words\nprint(words)","tok_input_length":182,"tok_output_length":107,"system_prompt":"","index":15016}
{"question":"Generate a Python program to print the common elements from two sorted lists.","input":"list1=[1,3,5,7]\nlist2=[2,3,6,7]","expected_output":"def print_common_elements(list1, list2):\n    result = [] \n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            i += 1\n        elif list2[j] < list1[i]: \n            j += 1\n        else: \n            result.append(list1[i])\n            i += 1\n            j += 1\n      \n    for i in range(len(result)):\n        print(result[i],end=\" \")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print the common elements from two sorted lists.\n\n### Input:\nlist1=[1,3,5,7]\nlist2=[2,3,6,7]\n\n### Output:\ndef print_common_elements(list1, list2):\n    result = [] \n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            i += 1\n        elif list2[j] < list1[i]: \n            j += 1\n        else: \n            result.append(list1[i])\n            i += 1\n            j += 1\n      \n    for i in range(len(result)):\n        print(result[i],end=\" \")","tok_input_length":182,"tok_output_length":119,"system_prompt":"","index":1270}
{"question":"Create a Python program that accepts periods of time from the user and calculates the total amount of time in minutes.","input":"3 hours, 4 minutes","expected_output":"def calculate_total_time(text):\n    total_time = 0\n    # Split the text into its individual components\n    components = text.split(\", \")\n    \n    # Calculate the amount of time in minutes for each component\n    for component in components:\n        if \"hour\" in component:\n            num = float(component.split(\" \")[0])\n            total_time += (num * 60)\n        elif \"minute\" in component:\n            num = float(component.split(\" \")[0])\n            total_time += num\n    return total_time\n\ntotal_time = calculate_total_time(\"3 hours, 4 minutes\")\nprint(total_time)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that accepts periods of time from the user and calculates the total amount of time in minutes.\n\n### Input:\n3 hours, 4 minutes\n\n### Output:\ndef calculate_total_time(text):\n    total_time = 0\n    # Split the text into its individual components\n    components = text.split(\", \")\n    \n    # Calculate the amount of time in minutes for each component\n    for component in components:\n        if \"hour\" in component:\n            num = float(component.split(\" \")[0])\n            total_time += (num * 60)\n        elif \"minute\" in component:\n            num = float(component.split(\" \")[0])\n            total_time += num\n    return total_time\n\ntotal_time = calculate_total_time(\"3 hours, 4 minutes\")\nprint(total_time)","tok_input_length":182,"tok_output_length":126,"system_prompt":"","index":6177}
{"question":"Write an algorithm in Python to identify anagrams in a given list of words.","input":"Not applicable","expected_output":"def is_anagram(word1, word2):\n # split words into list of characters\n letters1 = list(word1)\n letters2 = list(word2)\n\n # sort lists\n letters1.sort()\n letters2.sort()\n\n # check if the sorted lists are equal\n return letters1 == letters2\n\n# main program\nwords = [ 'army', 'mary', 'cat', 'act', 'rat', 'tar' ]\n\nfor i in range(len(words)):\n for j in range(i + 1, len(words)):\n if is_anagram(words[i], words[j]):\n print('%s is an anagram of %s' % (words[i], words[j]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to identify anagrams in a given list of words.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_anagram(word1, word2):\n # split words into list of characters\n letters1 = list(word1)\n letters2 = list(word2)\n\n # sort lists\n letters1.sort()\n letters2.sort()\n\n # check if the sorted lists are equal\n return letters1 == letters2\n\n# main program\nwords = [ 'army', 'mary', 'cat', 'act', 'rat', 'tar' ]\n\nfor i in range(len(words)):\n for j in range(i + 1, len(words)):\n if is_anagram(words[i], words[j]):\n print('%s is an anagram of %s' % (words[i], words[j]))","tok_input_length":182,"tok_output_length":136,"system_prompt":"","index":17100}
{"question":"Create a Python script to parse a JSON string from a web request. The script should parse the string and print key-value pairs for each item in the JSON.","input":"{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"John Doe\",\n            \"age\": 28\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Jane Doe\",\n            \"age\": 23\n        }\n    ]\n}","expected_output":"import json\n \n# parse json file\ndata = json.loads(<input>)\n \n# print key-value pairs for each item in json string\nfor item in data['data']:\n    print('ID:', item['id'])\n    print('Name:', item['name'])\n    print('Age:', item['age'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to parse a JSON string from a web request. The script should parse the string and print key-value pairs for each item in the JSON.\n\n### Input:\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"John Doe\",\n            \"age\": 28\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Jane Doe\",\n            \"age\": 23\n        }\n    ]\n}\n\n### Output:\nimport json\n \n# parse json file\ndata = json.loads(<input>)\n \n# print key-value pairs for each item in json string\nfor item in data['data']:\n    print('ID:', item['id'])\n    print('Name:', item['name'])\n    print('Age:', item['age'])","tok_input_length":183,"tok_output_length":63,"system_prompt":"","index":15437}
{"question":"Generate a function to send emails using Python. The parameters of the function should be the recipient address, the subject of the email, and the body of the email.","input":"recipient_address = 'example@example.com'\nsubject = 'Hello World'\nbody = 'This is a test email'","expected_output":"def send_email(recipient_address, subject, body):\n import smtplib\n from email.message import EmailMessage\n \n message = EmailMessage()\n message['From'] = 'example@example.com'\n message['To'] = recipient_address\n message['Subject'] = subject\n message.set_content(body)\n \n with smtplib.SMTP('smtp.gmail.com', 587) as smtp:\n smtp.ehlo()\n smtp.starttls()\n smtp.login('example@example.com', 'yourpassword')\n smtp.send_message(message)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function to send emails using Python. The parameters of the function should be the recipient address, the subject of the email, and the body of the email.\n\n### Input:\nrecipient_address = 'example@example.com'\nsubject = 'Hello World'\nbody = 'This is a test email'\n\n### Output:\ndef send_email(recipient_address, subject, body):\n import smtplib\n from email.message import EmailMessage\n \n message = EmailMessage()\n message['From'] = 'example@example.com'\n message['To'] = recipient_address\n message['Subject'] = subject\n message.set_content(body)\n \n with smtplib.SMTP('smtp.gmail.com', 587) as smtp:\n smtp.ehlo()\n smtp.starttls()\n smtp.login('example@example.com', 'yourpassword')\n smtp.send_message(message)","tok_input_length":183,"tok_output_length":100,"system_prompt":"","index":7422}
{"question":"Write a Python function to find the maximum profit when given a list of stock prices per day.","input":"stock_prices = [7, 1, 5, 3, 6, 4]","expected_output":"def max_profit(stock_prices):\n    max_profit = 0\n    for i in range(len(stock_prices) - 1):\n        for j in range(i + 1, len(stock_prices)):\n            if stock_prices[j] - stock_prices[i] > max_profit:\n                max_profit = stock_prices[j] - stock_prices[i]\n    return max_profit\n\nif __name__ == \"__main__\":\n    stock_prices = [7, 1, 5, 3, 6, 4]\n    result = max_profit(stock_prices)\n    print(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the maximum profit when given a list of stock prices per day.\n\n### Input:\nstock_prices = [7, 1, 5, 3, 6, 4]\n\n### Output:\ndef max_profit(stock_prices):\n    max_profit = 0\n    for i in range(len(stock_prices) - 1):\n        for j in range(i + 1, len(stock_prices)):\n            if stock_prices[j] - stock_prices[i] > max_profit:\n                max_profit = stock_prices[j] - stock_prices[i]\n    return max_profit\n\nif __name__ == \"__main__\":\n    stock_prices = [7, 1, 5, 3, 6, 4]\n    result = max_profit(stock_prices)\n    print(result)","tok_input_length":183,"tok_output_length":116,"system_prompt":"","index":9316}
{"question":"Create a class in Python representing a basketball player with data attributes for field goals attempted, field goals made, and free throws made.","input":"Not applicable","expected_output":"class Player:\n  def __init__(self):\n      self.fga = 0 \n      self.fgm = 0\n      self.ftm = 0\n      \n  def set_fga(self, fga):\n      self.fga = fga\n  \n  def get_fga(self):\n      return self.fga\n  \n  def set_fgm(self, fgm):\n      self.fgm = fgm\n      \n  def get_fgm(self):\n      return self.fgm\n  \n  def set_ftm(self, ftm):\n      self.ftm = ftm\n      \n  def get_ftm(self):\n      return self.ftm","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python representing a basketball player with data attributes for field goals attempted, field goals made, and free throws made.\n\n### Input:\nNot applicable\n\n### Output:\nclass Player:\n  def __init__(self):\n      self.fga = 0 \n      self.fgm = 0\n      self.ftm = 0\n      \n  def set_fga(self, fga):\n      self.fga = fga\n  \n  def get_fga(self):\n      return self.fga\n  \n  def set_fgm(self, fgm):\n      self.fgm = fgm\n      \n  def get_fgm(self):\n      return self.fgm\n  \n  def set_ftm(self, ftm):\n      self.ftm = ftm\n      \n  def get_ftm(self):\n      return self.ftm","tok_input_length":183,"tok_output_length":127,"system_prompt":"","index":17841}
{"question":"Create a web service in Python that can save blog posts to a database.","input":"Not applicable","expected_output":"import sqlite3\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('\/save', methods=['POST'])\ndef save():\n    # Extract request data\n    title = request.json['title']\n    content = request.json['content']\n\n    # Connect to database\n    conn = sqlite3.connect('blog.db')\n    c = conn.cursor()\n\n    # Save blog post to database\n    c.execute(\n        'INSERT INTO blog_posts(title, content) VALUES(?, ?)',\n        (title, content)\n    )\n    conn.commit()\n    conn.close()\n\n    return 'Blog post saved successfully!'\n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web service in Python that can save blog posts to a database.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('\/save', methods=['POST'])\ndef save():\n    # Extract request data\n    title = request.json['title']\n    content = request.json['content']\n\n    # Connect to database\n    conn = sqlite3.connect('blog.db')\n    c = conn.cursor()\n\n    # Save blog post to database\n    c.execute(\n        'INSERT INTO blog_posts(title, content) VALUES(?, ?)',\n        (title, content)\n    )\n    conn.commit()\n    conn.close()\n\n    return 'Blog post saved successfully!'\n\nif __name__ == '__main__':\n    app.run(debug=True)","tok_input_length":183,"tok_output_length":138,"system_prompt":"","index":1226}
{"question":"Write a Python program to create a Caesar cipher.","input":"","expected_output":"def encrypt(plain_text, shift): \n cipher_text = \"\" \n for char in plain_text: \n     if char.isalpha(): \n         char_code = ord(char) \n         char_code += shift \n         if char.isupper():\n             if char_code > ord('Z'): \n                 char_code -= 26 \n             elif char_code < ord('A'): \n                 char_code += 26 \n         elif char.islower(): \n             if char_code > ord('z'): \n                 char_code -= 26 \n             elif char_code < ord('a'): \n                 char_code += 26 \n         cipher_text += chr(char_code) \n     else: \n         cipher_text += char\n return cipher_text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a Caesar cipher.\n\n### Input:\n\n\n### Output:\ndef encrypt(plain_text, shift): \n cipher_text = \"\" \n for char in plain_text: \n     if char.isalpha(): \n         char_code = ord(char) \n         char_code += shift \n         if char.isupper():\n             if char_code > ord('Z'): \n                 char_code -= 26 \n             elif char_code < ord('A'): \n                 char_code += 26 \n         elif char.islower(): \n             if char_code > ord('z'): \n                 char_code -= 26 \n             elif char_code < ord('a'): \n                 char_code += 26 \n         cipher_text += chr(char_code) \n     else: \n         cipher_text += char\n return cipher_text","tok_input_length":183,"tok_output_length":146,"system_prompt":"","index":11933}
{"question":"Create a Python program for visualizing a given dataset using matplotlib.","input":"x = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]","expected_output":"import matplotlib.pyplot as plt \n\nx = [1, 2, 3, 4, 5] \ny = [1, 4, 9, 16, 25] \n  \n# plotting the points  \nplt.plot(x, y) \n\n# naming the x axis \nplt.xlabel('x - axis') \n# naming the y axis \nplt.ylabel('y - axis') \n  \n# giving a title to my graph \nplt.title('My first graph!') \n  \n# function to show the plot \nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for visualizing a given dataset using matplotlib.\n\n### Input:\nx = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\n\n### Output:\nimport matplotlib.pyplot as plt \n\nx = [1, 2, 3, 4, 5] \ny = [1, 4, 9, 16, 25] \n  \n# plotting the points  \nplt.plot(x, y) \n\n# naming the x axis \nplt.xlabel('x - axis') \n# naming the y axis \nplt.ylabel('y - axis') \n  \n# giving a title to my graph \nplt.title('My first graph!') \n  \n# function to show the plot \nplt.show()","tok_input_length":184,"tok_output_length":110,"system_prompt":"","index":14009}
{"question":"Write a script in Python to sort a dictionary by value.","input":"Input dictionary: {'name': 'John', 'age': 26, 'salary': 3000}","expected_output":"# Function to sort dictionary by value\ndef sort_dict(d): \n    # Create a list of tuples\n    # sorted by index 1 i.e. value field \n    l = [(k, d[k]) for k in sorted(d, key = d.get, reverse = True)] \n      \n    # Create a dictionary from the list  \n    # of tuples for sorted value \n    od = OrderedDict(l) \n  \n    return od \n\n# Sample Dictionary\nd = {'name':'John', 'age':26, 'salary':3000}\n\n# Calling sort_dict function\nprint(sort_dict(d))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python to sort a dictionary by value.\n\n### Input:\nInput dictionary: {'name': 'John', 'age': 26, 'salary': 3000}\n\n### Output:\n# Function to sort dictionary by value\ndef sort_dict(d): \n    # Create a list of tuples\n    # sorted by index 1 i.e. value field \n    l = [(k, d[k]) for k in sorted(d, key = d.get, reverse = True)] \n      \n    # Create a dictionary from the list  \n    # of tuples for sorted value \n    od = OrderedDict(l) \n  \n    return od \n\n# Sample Dictionary\nd = {'name':'John', 'age':26, 'salary':3000}\n\n# Calling sort_dict function\nprint(sort_dict(d))","tok_input_length":184,"tok_output_length":123,"system_prompt":"","index":2906}
{"question":"Write a Python program to predict the age of a person based on the amount of education in years they have had.","input":"educationYears = 15","expected_output":"#import libraries \nimport pandas as pd\nimport numpy as np\n\n#create dataframe\ndata = {'educationYears': [15]}\ndf = pd.DataFrame(data)\n\n#create label encoder\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\n#fit data to model\nfrom sklearn.linear_model import LogisticRegression\nle.fit(df['educationYears'])\nX = df['educationYears'].values\nX = le.transform(X)\nX = X.reshape(-1, 1)\n    \n#predict age\nmodel = LogisticRegression()\nmodel.fit(X, y)\ny_pred = model.predict([[15]])\n\n#print result\nprint(\"Age:\", y_pred)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to predict the age of a person based on the amount of education in years they have had.\n\n### Input:\neducationYears = 15\n\n### Output:\n#import libraries \nimport pandas as pd\nimport numpy as np\n\n#create dataframe\ndata = {'educationYears': [15]}\ndf = pd.DataFrame(data)\n\n#create label encoder\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\n#fit data to model\nfrom sklearn.linear_model import LogisticRegression\nle.fit(df['educationYears'])\nX = df['educationYears'].values\nX = le.transform(X)\nX = X.reshape(-1, 1)\n    \n#predict age\nmodel = LogisticRegression()\nmodel.fit(X, y)\ny_pred = model.predict([[15]])\n\n#print result\nprint(\"Age:\", y_pred)","tok_input_length":184,"tok_output_length":128,"system_prompt":"","index":10673}
{"question":"Develop an automated self-checkout system in Python.","input":"A list of items to be purchased, along with their prices","expected_output":"#Define item list\nitems = [('apple', 1.59),('banana', 0.99),('bread', 3.02),('soup', 1.79)]\n\n#Initialize total amount\ntotal_amount = 0\n\n#Loop through each item and add its price to the total\nfor item in items:\n    total_amount += item[1]\n    print(item[0] + ' added to total amount.')\n\n#Add tax to the total\ntax_rate = 0.055\ntotal_amount += (tax_rate * total_amount)\n\n#Print the final total\nprint('Total amount due: $' + str(total_amount))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an automated self-checkout system in Python.\n\n### Input:\nA list of items to be purchased, along with their prices\n\n### Output:\n#Define item list\nitems = [('apple', 1.59),('banana', 0.99),('bread', 3.02),('soup', 1.79)]\n\n#Initialize total amount\ntotal_amount = 0\n\n#Loop through each item and add its price to the total\nfor item in items:\n    total_amount += item[1]\n    print(item[0] + ' added to total amount.')\n\n#Add tax to the total\ntax_rate = 0.055\ntotal_amount += (tax_rate * total_amount)\n\n#Print the final total\nprint('Total amount due: $' + str(total_amount))","tok_input_length":184,"tok_output_length":134,"system_prompt":"","index":11597}
{"question":"Construct a tree data structure in Python to represent a given binary search tree.","input":"","expected_output":"class Node(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef construct_tree(vals):\n    root = Node(vals[0])\n    for val in vals[1:]:\n        node = Node(val)\n        tmp_node = root\n        while True:\n            if node.val > tmp_node.val:\n                if tmp_node.right is None:\n                    tmp_node.right = node\n                    break\n                else:\n                    tmp_node = tmp_node.right\n            else:\n                if tmp_node.left is None:\n                    tmp_node.left = node\n                    break\n                else:\n                    tmp_node = tmp_node.left\n    return root","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a tree data structure in Python to represent a given binary search tree.\n\n### Input:\n\n\n### Output:\nclass Node(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef construct_tree(vals):\n    root = Node(vals[0])\n    for val in vals[1:]:\n        node = Node(val)\n        tmp_node = root\n        while True:\n            if node.val > tmp_node.val:\n                if tmp_node.right is None:\n                    tmp_node.right = node\n                    break\n                else:\n                    tmp_node = tmp_node.right\n            else:\n                if tmp_node.left is None:\n                    tmp_node.left = node\n                    break\n                else:\n                    tmp_node = tmp_node.left\n    return root","tok_input_length":184,"tok_output_length":142,"system_prompt":"","index":2323}
{"question":"Write a Python program to filter a list of sentences based on a given list of keywords.","input":"Sentences: [\"This is an example sentence.\", \"The quick brown fox jumped over the lazy dog.\", \"A computer can be a powerful tool.\"]\nKeywords: [\"example\", \"computer\", \"power\"]","expected_output":"sentences = [\"This is an example sentence.\", \"The quick brown fox jumped over the lazy dog.\", \"A computer can be a powerful tool.\"]\nkeywords = [\"example\", \"computer\", \"power\"]\n\nfiltered_sentences = []\n\nfor sentence in sentences:\n words = sentence.split()\n for word in words:\n  if word in keywords:\n   filtered_sentences.append(sentence)\n   break\n\nprint(filtered_sentences)\n# Output: [\"This is an example sentence.\", \"A computer can be a powerful tool.\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter a list of sentences based on a given list of keywords.\n\n### Input:\nSentences: [\"This is an example sentence.\", \"The quick brown fox jumped over the lazy dog.\", \"A computer can be a powerful tool.\"]\nKeywords: [\"example\", \"computer\", \"power\"]\n\n### Output:\nsentences = [\"This is an example sentence.\", \"The quick brown fox jumped over the lazy dog.\", \"A computer can be a powerful tool.\"]\nkeywords = [\"example\", \"computer\", \"power\"]\n\nfiltered_sentences = []\n\nfor sentence in sentences:\n words = sentence.split()\n for word in words:\n  if word in keywords:\n   filtered_sentences.append(sentence)\n   break\n\nprint(filtered_sentences)\n# Output: [\"This is an example sentence.\", \"A computer can be a powerful tool.\"]","tok_input_length":185,"tok_output_length":99,"system_prompt":"","index":9979}
{"question":"Generate an algorithm in Python for finding the maximum number of positive numbers in the last 5 elements of an array.","input":"array: [-3, 9, 2, 10, -5, 4, 3]","expected_output":"# array of numbers \narr = [-3, 9, 2, 10, -5, 4, 3]\n\n# Counting the number of positive elements\ncount = 0\n\n# Iterating through the last 5 elements of the array\nfor i in range(len(arr)-5, len(arr)):\n\n    # Check if the current element is positive\n    if arr[i] > 0:\n        count += 1\n\nprint(\"The maximum number of positive numbers in the last 5 elements is:\", count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python for finding the maximum number of positive numbers in the last 5 elements of an array.\n\n### Input:\narray: [-3, 9, 2, 10, -5, 4, 3]\n\n### Output:\n# array of numbers \narr = [-3, 9, 2, 10, -5, 4, 3]\n\n# Counting the number of positive elements\ncount = 0\n\n# Iterating through the last 5 elements of the array\nfor i in range(len(arr)-5, len(arr)):\n\n    # Check if the current element is positive\n    if arr[i] > 0:\n        count += 1\n\nprint(\"The maximum number of positive numbers in the last 5 elements is:\", count)","tok_input_length":185,"tok_output_length":112,"system_prompt":"","index":17486}
{"question":"Create a machine learning model in Python to predict the direction a stock price will go (up or down), given the previous day's closing and opening prices.","input":"Not applicable","expected_output":"# import necessary libraries\nimport pandas as pd\nimport numpy as np\n\n# create the feature and target vectors\nfeature_vector = np.array([stock_closing_price, stock_opening_price])\ntarget_vector = np.array(stock_price_direction)\n\n# initialize the model\nmodel = LinearRegression()\n\n# fit the model\nmodel.fit(feature_vector, target_vector)\n\n# prediction\nprediction = model.predict([[41.50, 41.75]])\n\n# classify the prediction\nif prediction > 0:\n print('The stock price is expected to go up.')\nelse:\n print('The stock price is expected to go down.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict the direction a stock price will go (up or down), given the previous day's closing and opening prices.\n\n### Input:\nNot applicable\n\n### Output:\n# import necessary libraries\nimport pandas as pd\nimport numpy as np\n\n# create the feature and target vectors\nfeature_vector = np.array([stock_closing_price, stock_opening_price])\ntarget_vector = np.array(stock_price_direction)\n\n# initialize the model\nmodel = LinearRegression()\n\n# fit the model\nmodel.fit(feature_vector, target_vector)\n\n# prediction\nprediction = model.predict([[41.50, 41.75]])\n\n# classify the prediction\nif prediction > 0:\n print('The stock price is expected to go up.')\nelse:\n print('The stock price is expected to go down.')","tok_input_length":185,"tok_output_length":124,"system_prompt":"","index":16467}
{"question":"Create a Python program to prompt for a number and check whether the number is a prime number.","input":"Prompted number: 7","expected_output":"num = int(input(\"Please enter a number: \"))\n\n# Check if num is a prime number\n\ndef is_prime(n):\n    \n    # Check if n is greater than 1\n    if n > 1: \n       # Check for factors \n       for i in range(2,n): \n          if (n % i) == 0: \n              return False # n is not prime\n       else:\n           return True # n is prime\n    \n    else:\n       return False\n\nif is_prime(num): \n   print(num, \"is a prime number\")\nelse: \n   print(num, \"is not a prime number\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to prompt for a number and check whether the number is a prime number.\n\n### Input:\nPrompted number: 7\n\n### Output:\nnum = int(input(\"Please enter a number: \"))\n\n# Check if num is a prime number\n\ndef is_prime(n):\n    \n    # Check if n is greater than 1\n    if n > 1: \n       # Check for factors \n       for i in range(2,n): \n          if (n % i) == 0: \n              return False # n is not prime\n       else:\n           return True # n is prime\n    \n    else:\n       return False\n\nif is_prime(num): \n   print(num, \"is a prime number\")\nelse: \n   print(num, \"is not a prime number\")","tok_input_length":185,"tok_output_length":132,"system_prompt":"","index":4463}
{"question":"Develop an algorithm in Python to cluster a given set of documents.","input":"Set of documents (in text format)","expected_output":"import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Convert documents to tf-idf matrix\nvectorizer = TfidfVectorizer(stop_words=\"english\")\ndocuments = [doc1, doc2, ...]\nmatrix = vectorizer.fit_transform(documents)\n\n# K-means Clustering\nkmeans = KMeans(n_clusters=2, random_state=0).fit(matrix)\nlabels = kmeans.labels_\n\n# Cluster documents\nclusters = {}\nfor i in range(len(documents)):\n  label = labels[i]\n  if label not in clusters:\n    clusters[label] = []\n  clusters[label].append(documents[i])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to cluster a given set of documents.\n\n### Input:\nSet of documents (in text format)\n\n### Output:\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Convert documents to tf-idf matrix\nvectorizer = TfidfVectorizer(stop_words=\"english\")\ndocuments = [doc1, doc2, ...]\nmatrix = vectorizer.fit_transform(documents)\n\n# K-means Clustering\nkmeans = KMeans(n_clusters=2, random_state=0).fit(matrix)\nlabels = kmeans.labels_\n\n# Cluster documents\nclusters = {}\nfor i in range(len(documents)):\n  label = labels[i]\n  if label not in clusters:\n    clusters[label] = []\n  clusters[label].append(documents[i])","tok_input_length":185,"tok_output_length":137,"system_prompt":"","index":8839}
{"question":"Create a Python class to process credit card payments.","input":"","expected_output":"class CreditCardProcessor:\n    def __init__(self):\n        self.cards = {}\n        self.payments = {}\n        \n    def add_card(self, card_number, card_holder_name):\n        self.cards[card_number] = card_holder_name\n        \n    def process_payment(self, card_number, amount):\n        if card_number not in self.cards:\n            raise ValueError(f'{card_number} is not a valid card number.')\n        if amount < 0:\n            raise ValueError('Payment cannot be negative.')\n        \n        self.payments[card_number] = amount\n        print(f'Payment of {amount} processed for {self.cards[card_number]}')\n        \n    def get_total_payments(self):\n        return sum(self.payments.values())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to process credit card payments.\n\n### Input:\n\n\n### Output:\nclass CreditCardProcessor:\n    def __init__(self):\n        self.cards = {}\n        self.payments = {}\n        \n    def add_card(self, card_number, card_holder_name):\n        self.cards[card_number] = card_holder_name\n        \n    def process_payment(self, card_number, amount):\n        if card_number not in self.cards:\n            raise ValueError(f'{card_number} is not a valid card number.')\n        if amount < 0:\n            raise ValueError('Payment cannot be negative.')\n        \n        self.payments[card_number] = amount\n        print(f'Payment of {amount} processed for {self.cards[card_number]}')\n        \n    def get_total_payments(self):\n        return sum(self.payments.values())","tok_input_length":185,"tok_output_length":148,"system_prompt":"","index":9583}
{"question":"Create a sorting algorithm in Python to sort a given array in ascending order.","input":"[9, 8, 7, 6, 5, 4, 3, 2, 1]","expected_output":"def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) \/\/ 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([9, 8, 7, 6, 5, 4, 3, 2, 1]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python to sort a given array in ascending order.\n\n### Input:\n[9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n### Output:\ndef quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) \/\/ 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([9, 8, 7, 6, 5, 4, 3, 2, 1]))","tok_input_length":186,"tok_output_length":117,"system_prompt":"","index":9803}
{"question":"Create a function in Python that parses a string and returns a dictionary with the key-value pairs.","input":"string = \"key1=value1,key2=value2,key3=value3\"","expected_output":"def parseStringToDict(string): \n    # Split string into key-value pairs\n    pairs = string.split(',')\n    \n    # Create an empty dict for storing the key-value pairs\n    values = {} \n    \n    # Iterate over the key-value pairs\n    for pair in pairs: \n        key, value = pair.split('=')\n        values[key] = value\n    \n    # Return the dictionary\n    return values\n\n# Example usage\nmapping = parseStringToDict(string)\n# Output: {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that parses a string and returns a dictionary with the key-value pairs.\n\n### Input:\nstring = \"key1=value1,key2=value2,key3=value3\"\n\n### Output:\ndef parseStringToDict(string): \n    # Split string into key-value pairs\n    pairs = string.split(',')\n    \n    # Create an empty dict for storing the key-value pairs\n    values = {} \n    \n    # Iterate over the key-value pairs\n    for pair in pairs: \n        key, value = pair.split('=')\n        values[key] = value\n    \n    # Return the dictionary\n    return values\n\n# Example usage\nmapping = parseStringToDict(string)\n# Output: {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}","tok_input_length":186,"tok_output_length":124,"system_prompt":"","index":3018}
{"question":"Create a Python program that converts an array into a linked list.","input":"[1, 2, 3, 4]","expected_output":"class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to convert array to linked list\ndef arrayToLinkedList(arr):\n    head = Node(arr[0])\n    currentNode = head\n    for i in range(1, len(arr)):\n        newNode = Node(arr[i])\n        currentNode.next = newNode\n        currentNode = newNode\n        \n    return head\n\n# Tester code\narr = [1, 2, 3, 4]\nhead = arrayToLinkedList(arr)\n\n# Print linked list\nwhile head:\n    print(head.data, end=\" \")\n    head = head.next","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that converts an array into a linked list.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to convert array to linked list\ndef arrayToLinkedList(arr):\n    head = Node(arr[0])\n    currentNode = head\n    for i in range(1, len(arr)):\n        newNode = Node(arr[i])\n        currentNode.next = newNode\n        currentNode = newNode\n        \n    return head\n\n# Tester code\narr = [1, 2, 3, 4]\nhead = arrayToLinkedList(arr)\n\n# Print linked list\nwhile head:\n    print(head.data, end=\" \")\n    head = head.next","tok_input_length":186,"tok_output_length":134,"system_prompt":"","index":17649}
{"question":"Design a system architecture using microservices that performs sentiment analysis on tweets.","input":"Not applicable","expected_output":"The system architecture will use two microservices, one service for fetching the tweet and another for performing sentiment analysis on each tweet. The first service will periodically fetch tweets from Twitter using the Twitter API and store them in a database. The second service will then read from the database and analyze the tweets using Natural Language Processing (NLP) techniques to determine the sentiment of each tweet. Finally, a web UI service will be used to display the results of the sentiment analysis.\n\nThe system architecture could use any language for the microservices, but Python is recommended due to its ease of use for NLP tasks. Additionally, for the database, a NoSQL database like MongoDB is recommended due to its scalability and flexibility.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a system architecture using microservices that performs sentiment analysis on tweets.\n\n### Input:\nNot applicable\n\n### Output:\nThe system architecture will use two microservices, one service for fetching the tweet and another for performing sentiment analysis on each tweet. The first service will periodically fetch tweets from Twitter using the Twitter API and store them in a database. The second service will then read from the database and analyze the tweets using Natural Language Processing (NLP) techniques to determine the sentiment of each tweet. Finally, a web UI service will be used to display the results of the sentiment analysis.\n\nThe system architecture could use any language for the microservices, but Python is recommended due to its ease of use for NLP tasks. Additionally, for the database, a NoSQL database like MongoDB is recommended due to its scalability and flexibility.","tok_input_length":186,"tok_output_length":142,"system_prompt":"","index":2709}
{"question":"Create a server in Python that uses TCP to transmit messages between two clients.","input":"","expected_output":"import socket\nimport threading\n\n# Create a network socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind socket to port\nserver_address = ('127.0.0.1', 10000)\ns.bind(server_address)\n\n# Wait for incoming connection\ns.listen()\n\n# Thread for handling incoming connection\ndef client_thread(conn):\n    while True:\n        data = conn.recv(4096)\n        conn.send(data)\n\n# Main thread loop\nwhile True:\n    conn, addr = s.accept()\n    print(\"Connected to:\", addr)\n\n    # Start the client thread for handling incoming connection\n    thread = threading.Thread(target=client_thread, args=(conn,))\n    thread.start()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a server in Python that uses TCP to transmit messages between two clients.\n\n### Input:\n\n\n### Output:\nimport socket\nimport threading\n\n# Create a network socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind socket to port\nserver_address = ('127.0.0.1', 10000)\ns.bind(server_address)\n\n# Wait for incoming connection\ns.listen()\n\n# Thread for handling incoming connection\ndef client_thread(conn):\n    while True:\n        data = conn.recv(4096)\n        conn.send(data)\n\n# Main thread loop\nwhile True:\n    conn, addr = s.accept()\n    print(\"Connected to:\", addr)\n\n    # Start the client thread for handling incoming connection\n    thread = threading.Thread(target=client_thread, args=(conn,))\n    thread.start()","tok_input_length":186,"tok_output_length":144,"system_prompt":"","index":16141}
{"question":"Generate Python code to get all unique items in a nested dictionary.","input":"dict1 = {\n    \"key1\": [1,2],\n    \"key2\": [2,3],\n    \"key3\": {\n        \"key4\": [3,4]\n    }\n}","expected_output":"def get_all_keys(input_dict):\n    keys = set()\n    if isinstance(input_dict, dict):\n        keys.update(input_dict.keys())\n        for v in input_dict.values():\n            keys.update(get_all_keys(v))\n    return keys\n\ndict1 = {\n    \"key1\": [1,2],\n    \"key2\": [2,3],\n    \"key3\": {\n        \"key4\": [3,4]\n    }\n}\n\nunique_items = get_all_keys(dict1)\nprint(unique_items)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to get all unique items in a nested dictionary.\n\n### Input:\ndict1 = {\n    \"key1\": [1,2],\n    \"key2\": [2,3],\n    \"key3\": {\n        \"key4\": [3,4]\n    }\n}\n\n### Output:\ndef get_all_keys(input_dict):\n    keys = set()\n    if isinstance(input_dict, dict):\n        keys.update(input_dict.keys())\n        for v in input_dict.values():\n            keys.update(get_all_keys(v))\n    return keys\n\ndict1 = {\n    \"key1\": [1,2],\n    \"key2\": [2,3],\n    \"key3\": {\n        \"key4\": [3,4]\n    }\n}\n\nunique_items = get_all_keys(dict1)\nprint(unique_items)","tok_input_length":187,"tok_output_length":104,"system_prompt":"","index":2776}
{"question":"Write a Python program to find the greatest overlapping of two interval lists.","input":"[[1,4], [7, 10], [3, 5]] and [[2,5], [6,9]]","expected_output":"def overlap(intervals1, intervals2):\n    max_overlap = 0\n    for i in range(len(intervals1)):\n        for j in range(len(intervals2)):\n            overlap = min(intervals1[i][1], intervals2[j][1]) - max(intervals1[i][0], intervals2[j][0]) \n            max_overlap = max(max_overlap, overlap)\n    return max_overlap\n\nresult = overlap([[1,4], [7, 10], [3, 5]], [[2,5], [6,9]])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the greatest overlapping of two interval lists.\n\n### Input:\n[[1,4], [7, 10], [3, 5]] and [[2,5], [6,9]]\n\n### Output:\ndef overlap(intervals1, intervals2):\n    max_overlap = 0\n    for i in range(len(intervals1)):\n        for j in range(len(intervals2)):\n            overlap = min(intervals1[i][1], intervals2[j][1]) - max(intervals1[i][0], intervals2[j][0]) \n            max_overlap = max(max_overlap, overlap)\n    return max_overlap\n\nresult = overlap([[1,4], [7, 10], [3, 5]], [[2,5], [6,9]])\nprint(result)","tok_input_length":187,"tok_output_length":118,"system_prompt":"","index":16618}
{"question":"Create an algorithm in Python which sorts an array of numbers using the quicksort algorithm.","input":"[42,56,2,67,23,10,14,7]","expected_output":"def quickSort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) \/\/ 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quickSort(left) + middle + quickSort(right)\n\nunsorted_list = [42, 56, 2, 67, 23, 10, 14, 7]\nsorted_list = quickSort(unsorted_list)\n\nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python which sorts an array of numbers using the quicksort algorithm.\n\n### Input:\n[42,56,2,67,23,10,14,7]\n\n### Output:\ndef quickSort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) \/\/ 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quickSort(left) + middle + quickSort(right)\n\nunsorted_list = [42, 56, 2, 67, 23, 10, 14, 7]\nsorted_list = quickSort(unsorted_list)\n\nprint(sorted_list)","tok_input_length":187,"tok_output_length":126,"system_prompt":"","index":3562}
{"question":"Write a function in Python that makes an API call to get the top ten trending tweets for a given hashtag.","input":"#machinelearning","expected_output":"import tweepy\n\n# Authentication keys\nconsumer_key = 'xxxxxxxxxxxxxxxxxxxxx'\nconsumer_secret = 'xxxxxxxxxxxxxxxxxxxxx'\naccess_token = 'xxxxxxxxxxxxxxxxxxxxx'\naccess_token_secret = 'xxxxxxxxxxxxxxxxxxxxx'\n\n# Authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Initialization of the API\napi = tweepy.API(auth)\n\n# Get the top 10 trending tweets\ntrending_tweets = api.search(q=\"#machinelearning\", lang=\"en\", rpp=10, tweet_mode='extended')\n\nfor tweet in trending_tweets: \n    print(tweet.full_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that makes an API call to get the top ten trending tweets for a given hashtag.\n\n### Input:\n#machinelearning\n\n### Output:\nimport tweepy\n\n# Authentication keys\nconsumer_key = 'xxxxxxxxxxxxxxxxxxxxx'\nconsumer_secret = 'xxxxxxxxxxxxxxxxxxxxx'\naccess_token = 'xxxxxxxxxxxxxxxxxxxxx'\naccess_token_secret = 'xxxxxxxxxxxxxxxxxxxxx'\n\n# Authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Initialization of the API\napi = tweepy.API(auth)\n\n# Get the top 10 trending tweets\ntrending_tweets = api.search(q=\"#machinelearning\", lang=\"en\", rpp=10, tweet_mode='extended')\n\nfor tweet in trending_tweets: \n    print(tweet.full_text)","tok_input_length":187,"tok_output_length":134,"system_prompt":"","index":17670}
{"question":"Generate a Python program to retrieve the top N most commonly used words in a text document","input":"No Input","expected_output":"import collections\n\ndef get_top_words(text, n):\n    \"\"\" \n    Function to retrieve the top N most used words in a given text document.\n\n    Args:\n        text (str): The text document\n        n (int): Number of words to extract\n\n    Returns:\n        The top n most used words as a list of strings.\n    \"\"\"\n    # Tokenize the text\n    tokens = tokenize(text) \n    \n    # Count the number of times each token appears in the text\n    token_count = collections.Counter(tokens).most_common(n)\n    # Extract the words from token_count\n    top_words = [word for word, _ in token_count]\n\n    return top_words","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to retrieve the top N most commonly used words in a text document\n\n### Input:\nNo Input\n\n### Output:\nimport collections\n\ndef get_top_words(text, n):\n    \"\"\" \n    Function to retrieve the top N most used words in a given text document.\n\n    Args:\n        text (str): The text document\n        n (int): Number of words to extract\n\n    Returns:\n        The top n most used words as a list of strings.\n    \"\"\"\n    # Tokenize the text\n    tokens = tokenize(text) \n    \n    # Count the number of times each token appears in the text\n    token_count = collections.Counter(tokens).most_common(n)\n    # Extract the words from token_count\n    top_words = [word for word, _ in token_count]\n\n    return top_words","tok_input_length":187,"tok_output_length":139,"system_prompt":"","index":15810}
{"question":"Implement a function in Python that takes a Huffman tree and drop all its leaf nodes.","input":"(1)\n      \/      \\\n    (2)      (3)\n    \/ \\      \/ \\\n  (4) (5)  (6) (7)","expected_output":"def dropLeafNodes(head): \n    \n    # If node is not None and doesn't have any children \n    if head and not head.left and not head.right: \n        return None\n  \n    # Don't change anything if head is None \n    if not head: \n        return None\n  \n    # Recursively call dropLeafNodes on left and right subtrees\n    head.left = dropLeafNodes(head.left) \n    head.right = dropLeafNodes(head.right) \n  \n    # Return head of the modified tree\n    return head","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes a Huffman tree and drop all its leaf nodes.\n\n### Input:\n(1)\n      \/      \\\n    (2)      (3)\n    \/ \\      \/ \\\n  (4) (5)  (6) (7)\n\n### Output:\ndef dropLeafNodes(head): \n    \n    # If node is not None and doesn't have any children \n    if head and not head.left and not head.right: \n        return None\n  \n    # Don't change anything if head is None \n    if not head: \n        return None\n  \n    # Recursively call dropLeafNodes on left and right subtrees\n    head.left = dropLeafNodes(head.left) \n    head.right = dropLeafNodes(head.right) \n  \n    # Return head of the modified tree\n    return head","tok_input_length":188,"tok_output_length":109,"system_prompt":"","index":115}
{"question":"Create a robot using Python and the MyRobotLab library that performs a specific task.","input":"Task: Move the robot's arm to a point at (x = 10, y = 20)","expected_output":"from org.myrobotlab.service import Arduino\nfrom org.myrobotlab.service import Servo\n\n# Create serial connection to Arduino\narduino = Arduino(\"Arduino1\", \"COM6\") # COM6 is the serial port\n\n# Connect servos to arduino \nbaseServo = Servo(arduino, \"baseServo\")\narmServo = Servo(arduino, \"armServo\")\n\n# Move servos\nbaseServo.moveTo(90)\narmServo.moveTo(180)\n\n# Move to a specific point\nbaseServo.moveTo(10)\narmServo.moveTo(20)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a robot using Python and the MyRobotLab library that performs a specific task.\n\n### Input:\nTask: Move the robot's arm to a point at (x = 10, y = 20)\n\n### Output:\nfrom org.myrobotlab.service import Arduino\nfrom org.myrobotlab.service import Servo\n\n# Create serial connection to Arduino\narduino = Arduino(\"Arduino1\", \"COM6\") # COM6 is the serial port\n\n# Connect servos to arduino \nbaseServo = Servo(arduino, \"baseServo\")\narmServo = Servo(arduino, \"armServo\")\n\n# Move servos\nbaseServo.moveTo(90)\narmServo.moveTo(180)\n\n# Move to a specific point\nbaseServo.moveTo(10)\narmServo.moveTo(20)","tok_input_length":188,"tok_output_length":122,"system_prompt":"","index":10710}
{"question":"Generate a machine learning model in Python that can predict the price of a given stock.","input":"Historical stock prices of Apple (AAPL)","expected_output":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Load the dataset\ndata = pd.read_csv('AAPL_data.csv')\nX = data[['Open','High','Low','Close','Volume']]\ny = data['Adj Close']\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Create and fit the linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\npredictions = model.predict(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model in Python that can predict the price of a given stock.\n\n### Input:\nHistorical stock prices of Apple (AAPL)\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Load the dataset\ndata = pd.read_csv('AAPL_data.csv')\nX = data[['Open','High','Low','Close','Volume']]\ny = data['Adj Close']\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Create and fit the linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\npredictions = model.predict(X_test)","tok_input_length":188,"tok_output_length":134,"system_prompt":"","index":15611}
{"question":"Optimize a program that uses a Web Scraper to fetch data from a website.","input":"Not applicable","expected_output":"# Import Python modules\nimport os\nimport lxml\nimport requests\nimport html5lib\n\n# Retrieve the HTML\nurl = 'https:\/\/www.example.com\/'\nr = requests.get(url)\nhtml_doc = r.text\n\n# Parse the HTML\ntree = lxml.html.fromstring(html_doc)\nlinks = tree.xpath('\/\/a\/@href')\n\n# Fetch the data from each link\ndata = []\nfor link in links:\n try:\n r = requests.get(link)\n data.append(r.text)\n except:\n pass\n \n# Store data in a file\nfile_name = os.path.join('data', 'data.txt')\nwith open(file_name, 'w') as f:\n f.write('\\n'.join(data))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a program that uses a Web Scraper to fetch data from a website.\n\n### Input:\nNot applicable\n\n### Output:\n# Import Python modules\nimport os\nimport lxml\nimport requests\nimport html5lib\n\n# Retrieve the HTML\nurl = 'https:\/\/www.example.com\/'\nr = requests.get(url)\nhtml_doc = r.text\n\n# Parse the HTML\ntree = lxml.html.fromstring(html_doc)\nlinks = tree.xpath('\/\/a\/@href')\n\n# Fetch the data from each link\ndata = []\nfor link in links:\n try:\n r = requests.get(link)\n data.append(r.text)\n except:\n pass\n \n# Store data in a file\nfile_name = os.path.join('data', 'data.txt')\nwith open(file_name, 'w') as f:\n f.write('\\n'.join(data))","tok_input_length":188,"tok_output_length":141,"system_prompt":"","index":6377}
{"question":"Develop a method for converting an introduction letter from PDF to HTML, using Python.","input":"","expected_output":"import pdfminer \n\ndef convert_pdf_to_html(pdf_file):\n    content = \"\"\n    # to convert pdf document to html\n    with open(pdf_file, \"rb\") as file:\n        pdf = pdfminer.pdfdocument.PDFDocument(file)\n        rsrcmgr = pdfminer.pdfinterp.PDFResourceManager()\n        laparams = pdfminer.pdflayout.LAParams()\n        device = pdfminer.converter.HTMLConverter(rsrcmgr, laparams=laparams)\n        interpreter = pdfminer.pdfinterp.PDFPageInterpreter(rsrcmgr, device)\n        for page in pdfminer.pdfpage.PDFPage.create_pages(pdf):\n            interpreter.process_page(page)\n            content += device.get_result()\n\n    return content","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a method for converting an introduction letter from PDF to HTML, using Python.\n\n### Input:\n\n\n### Output:\nimport pdfminer \n\ndef convert_pdf_to_html(pdf_file):\n    content = \"\"\n    # to convert pdf document to html\n    with open(pdf_file, \"rb\") as file:\n        pdf = pdfminer.pdfdocument.PDFDocument(file)\n        rsrcmgr = pdfminer.pdfinterp.PDFResourceManager()\n        laparams = pdfminer.pdflayout.LAParams()\n        device = pdfminer.converter.HTMLConverter(rsrcmgr, laparams=laparams)\n        interpreter = pdfminer.pdfinterp.PDFPageInterpreter(rsrcmgr, device)\n        for page in pdfminer.pdfpage.PDFPage.create_pages(pdf):\n            interpreter.process_page(page)\n            content += device.get_result()\n\n    return content","tok_input_length":188,"tok_output_length":145,"system_prompt":"","index":15263}
{"question":"Given a pandas dataframe of salaries, write a python program that takes the dataframe and filters out employees whose salary is below mean salary of the whole dataset.","input":"import pandas as pd\n\nsalaries = pd.DataFrame({\n    'name': ['John','Cathy','Michael','Steve', 'Tina','Paul','Brunette'],\n    'salary': [25000, 74000 , 80000, 150000, 71000, 59000, 64000]\n}, columns=['name', 'salary'])","expected_output":"import pandas as pd\n\n# calculate the mean salary\nmean_salary = salaries['salary'].mean()\n\n# filter out employees whose salary is below the mean\nfiltered_salaries = salaries[salaries['salary'] >= mean_salary]\n\n# print the filtered data\nprint(filtered_salaries)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a pandas dataframe of salaries, write a python program that takes the dataframe and filters out employees whose salary is below mean salary of the whole dataset.\n\n### Input:\nimport pandas as pd\n\nsalaries = pd.DataFrame({\n    'name': ['John','Cathy','Michael','Steve', 'Tina','Paul','Brunette'],\n    'salary': [25000, 74000 , 80000, 150000, 71000, 59000, 64000]\n}, columns=['name', 'salary'])\n\n### Output:\nimport pandas as pd\n\n# calculate the mean salary\nmean_salary = salaries['salary'].mean()\n\n# filter out employees whose salary is below the mean\nfiltered_salaries = salaries[salaries['salary'] >= mean_salary]\n\n# print the filtered data\nprint(filtered_salaries)","tok_input_length":189,"tok_output_length":58,"system_prompt":"","index":13842}
{"question":"Write a Python program that takes a list of numbers as an argument and prints the count of all even and odd numbers.","input":"[2, 9, 4, 8, 0, 7, 1]","expected_output":"def countNumbers(nums):\n evenCount = 0\n oddCount = 0\n \n for num in nums:\n if num % 2 == 0:\n evenCount += 1\n else:\n oddCount += 1\n \n return (evenCount, oddCount)\n\nnums = [2, 9, 4, 8, 0, 7, 1]\nevenCount, oddCount = countNumbers(nums)\n\nprint(\"Even numbers:\", evenCount)\nprint(\"Odd numbers:\", oddCount) \n# Even numbers: 4\n# Odd numbers: 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list of numbers as an argument and prints the count of all even and odd numbers.\n\n### Input:\n[2, 9, 4, 8, 0, 7, 1]\n\n### Output:\ndef countNumbers(nums):\n evenCount = 0\n oddCount = 0\n \n for num in nums:\n if num % 2 == 0:\n evenCount += 1\n else:\n oddCount += 1\n \n return (evenCount, oddCount)\n\nnums = [2, 9, 4, 8, 0, 7, 1]\nevenCount, oddCount = countNumbers(nums)\n\nprint(\"Even numbers:\", evenCount)\nprint(\"Odd numbers:\", oddCount) \n# Even numbers: 4\n# Odd numbers: 3","tok_input_length":189,"tok_output_length":117,"system_prompt":"","index":14309}
{"question":"Create a web scraper in Python to extract all article titles, publication dates, and authors from a given web page.","input":"URL: https:\/\/www.example.com\/news","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\n# define url\nurl = \"https:\/\/www.example.com\/news\"\n\n# send GET request to the specified url\npage = requests.get(url)\n\n# create BeautifulSoup object for parsing\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# extract all article titles, publication dates, and authors\nitems = soup.find_all('article')\nfor item in items:\n    title = item.find('h2').text\n    pub_date = item.find('time').text\n    author = item.find('span').text\n    print(title + ' | ' + pub_date + ' | ' + author)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract all article titles, publication dates, and authors from a given web page.\n\n### Input:\nURL: https:\/\/www.example.com\/news\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# define url\nurl = \"https:\/\/www.example.com\/news\"\n\n# send GET request to the specified url\npage = requests.get(url)\n\n# create BeautifulSoup object for parsing\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# extract all article titles, publication dates, and authors\nitems = soup.find_all('article')\nfor item in items:\n    title = item.find('h2').text\n    pub_date = item.find('time').text\n    author = item.find('span').text\n    print(title + ' | ' + pub_date + ' | ' + author)","tok_input_length":189,"tok_output_length":130,"system_prompt":"","index":2564}
{"question":"Create a function in Python which takes two strings and checks if they are anagrams.","input":"\"apple\", \"leapp\"","expected_output":"def is_anagram(string1, string2): \n    # Remove white spaces from strings \n    string1 = string1.replace(\" \", \"\") \n    string2 = string2.replace(\" \", \"\") \n  \n    # If strings have different length, \n    # then they are not anagrams \n    if len(string1) != len(string2): \n        return False\n  \n    # Sort both strings \n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # Compare sorted strings \n    for i in range(0, len(string1)): \n        if string1[i] != string2[i]: \n            return False \n  \n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes two strings and checks if they are anagrams.\n\n### Input:\n\"apple\", \"leapp\"\n\n### Output:\ndef is_anagram(string1, string2): \n    # Remove white spaces from strings \n    string1 = string1.replace(\" \", \"\") \n    string2 = string2.replace(\" \", \"\") \n  \n    # If strings have different length, \n    # then they are not anagrams \n    if len(string1) != len(string2): \n        return False\n  \n    # Sort both strings \n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # Compare sorted strings \n    for i in range(0, len(string1)): \n        if string1[i] != string2[i]: \n            return False \n  \n    return True","tok_input_length":189,"tok_output_length":138,"system_prompt":"","index":3593}
{"question":"Develop a chatbot with natural language understanding capabilities using Python and Dialogflow.","input":"Not applicable","expected_output":"import dialogflow\n\n# Define the project ID and session ID\nPROJECT_ID = '<my project id>'\nSESSION_ID = '<my session id>\n\n# Initialize the Dialogflow session\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path(PROJECT_ID, SESSION_ID)\n\n# Get the input from the user\ninput_message = input('Your message: ')\n\n# Define the query\nquery_input = dialogflow.types.QueryInput(text=dialogflow.types.TextInput(text=input_message))\n\n# Send the query to Dialogflow\nresponse = session_client.detect_intent(session=session, query_input=query_input)\n\n# Get the the response from Dialogflow\nprint('Bot: ' + response.query_result.fulfillment_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a chatbot with natural language understanding capabilities using Python and Dialogflow.\n\n### Input:\nNot applicable\n\n### Output:\nimport dialogflow\n\n# Define the project ID and session ID\nPROJECT_ID = '<my project id>'\nSESSION_ID = '<my session id>\n\n# Initialize the Dialogflow session\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path(PROJECT_ID, SESSION_ID)\n\n# Get the input from the user\ninput_message = input('Your message: ')\n\n# Define the query\nquery_input = dialogflow.types.QueryInput(text=dialogflow.types.TextInput(text=input_message))\n\n# Send the query to Dialogflow\nresponse = session_client.detect_intent(session=session, query_input=query_input)\n\n# Get the the response from Dialogflow\nprint('Bot: ' + response.query_result.fulfillment_text)","tok_input_length":189,"tok_output_length":144,"system_prompt":"","index":10555}
{"question":"Design a class for a generic linked list in Python.","input":"","expected_output":"class LinkedList:\n    \n    def __init__(self):\n        self.head = None\n        self.tail = None\n    \n    def append(self, data):\n        node = Node(data)\n        if self.tail is not None:\n            self.tail.next = node\n            self.tail = node\n        else:\n            self.head = node\n            self.tail = node\n    \n    def sort(self):\n        if self.head is None:\n            return\n        current_node = self.head\n        while current_node.next is not None:\n            next_node = current_node.next\n            if next_node.data < current_node.data:\n                temp = current_node.data\n                current_node.data = next_node.data\n                next_node.data = temp\n            current_node = next_node","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class for a generic linked list in Python.\n\n### Input:\n\n\n### Output:\nclass LinkedList:\n    \n    def __init__(self):\n        self.head = None\n        self.tail = None\n    \n    def append(self, data):\n        node = Node(data)\n        if self.tail is not None:\n            self.tail.next = node\n            self.tail = node\n        else:\n            self.head = node\n            self.tail = node\n    \n    def sort(self):\n        if self.head is None:\n            return\n        current_node = self.head\n        while current_node.next is not None:\n            next_node = current_node.next\n            if next_node.data < current_node.data:\n                temp = current_node.data\n                current_node.data = next_node.data\n                next_node.data = temp\n            current_node = next_node","tok_input_length":189,"tok_output_length":151,"system_prompt":"","index":13645}
{"question":"Generate a code in Python to find the maximum sum subarray of size k.","input":"arr = [1, 4, 2, 10, 2, 3, 1, 0, 20]\nk = 4","expected_output":"def maxSubArraySum(arr, k): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n - k + 1): \n        window_sum = sum(arr[i : k + i]) \n        max_sum = max(max_sum, window_sum) \n  \n    return max_sum\n  \n  \narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(maxSubArraySum(arr, k))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code in Python to find the maximum sum subarray of size k.\n\n### Input:\narr = [1, 4, 2, 10, 2, 3, 1, 0, 20]\nk = 4\n\n### Output:\ndef maxSubArraySum(arr, k): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n - k + 1): \n        window_sum = sum(arr[i : k + i]) \n        max_sum = max(max_sum, window_sum) \n  \n    return max_sum\n  \n  \narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(maxSubArraySum(arr, k))","tok_input_length":190,"tok_output_length":113,"system_prompt":"","index":15525}
{"question":"Create an algorithm in Python to find the longest increasing subsequence from a given set of numbers.","input":"[1, 10, 4, 2, 6, 12, 15]","expected_output":"def longest_increasing_subsequence(arr):\n n = len(arr)\n dp = [1] * n\n for i in range(1, n):\n max_length_so_far = 0\n for j in range(i):\n if arr[j] < arr[i]:\n max_length_so_far = max(max_length_so_far, dp[j])\n dp[i] = max_length_so_far + 1\n return max(dp)\n\narr = [1, 10, 4, 2, 6, 12, 15]\nresult = longest_increasing_subsequence(arr)\nprint(result)\n# Output: 5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the longest increasing subsequence from a given set of numbers.\n\n### Input:\n[1, 10, 4, 2, 6, 12, 15]\n\n### Output:\ndef longest_increasing_subsequence(arr):\n n = len(arr)\n dp = [1] * n\n for i in range(1, n):\n max_length_so_far = 0\n for j in range(i):\n if arr[j] < arr[i]:\n max_length_so_far = max(max_length_so_far, dp[j])\n dp[i] = max_length_so_far + 1\n return max(dp)\n\narr = [1, 10, 4, 2, 6, 12, 15]\nresult = longest_increasing_subsequence(arr)\nprint(result)\n# Output: 5","tok_input_length":190,"tok_output_length":123,"system_prompt":"","index":15943}
{"question":"Evaluate a basic machine learning model for predicting house prices using the provided dataset. The model should be written in Python using the scikit-learn library.","input":"housing.csv","expected_output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# read the dataset\ndata = pd.read_csv('housing.csv')\n\n# split the data\nX = data.drop('price', axis=1)\ny = data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nscore = model.score(X_test, y_test)\nprint(\"Model Score:\", score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEvaluate a basic machine learning model for predicting house prices using the provided dataset. The model should be written in Python using the scikit-learn library.\n\n### Input:\nhousing.csv\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# read the dataset\ndata = pd.read_csv('housing.csv')\n\n# split the data\nX = data.drop('price', axis=1)\ny = data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nscore = model.score(X_test, y_test)\nprint(\"Model Score:\", score)","tok_input_length":190,"tok_output_length":130,"system_prompt":"","index":2161}
{"question":"Create a web page with a form that takes in two inputs and displays the result of the addition of the two numbers.","input":"","expected_output":"<html>\n<head>\n    <title>Python Form Demo<\/title>\n<\/head>\n<body>\n    <form method=\"post\" action=\"\/add\">\n        <input type=\"text\" name=\"num1\">\n        <input type=\"text\" name=\"num2\">\n        <input type=\"submit\" value=\"Calculate\">\n    <\/form>\n<\/body>\n<\/html>\n\n@app.route('\/add', methods=['POST'])\ndef add():\n    num1 = int(request.form['num1'])\n    num2 = int(request.form['num2'])\n    result = num1 + num2\n    return \"The result of {} + {} is {}\".format(num1, num2, result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web page with a form that takes in two inputs and displays the result of the addition of the two numbers.\n\n### Input:\n\n\n### Output:\n<html>\n<head>\n    <title>Python Form Demo<\/title>\n<\/head>\n<body>\n    <form method=\"post\" action=\"\/add\">\n        <input type=\"text\" name=\"num1\">\n        <input type=\"text\" name=\"num2\">\n        <input type=\"submit\" value=\"Calculate\">\n    <\/form>\n<\/body>\n<\/html>\n\n@app.route('\/add', methods=['POST'])\ndef add():\n    num1 = int(request.form['num1'])\n    num2 = int(request.form['num2'])\n    result = num1 + num2\n    return \"The result of {} + {} is {}\".format(num1, num2, result)","tok_input_length":190,"tok_output_length":139,"system_prompt":"","index":3700}
{"question":"Generate a minimal working example to demonstrate the traversal of a tree data structure using Python.","input":"","expected_output":"# A simple Tree class \nclass Tree(object): \n    def __init__(self, data): \n        self.data = data  # root node \n        self.children = []  # empty list to store the children \n  \n# Function to print the tree pre-order \ndef traverse(tree): \n    print(tree.data) \n  \n    # recursively traverse the Tree\n    for value in tree.children: \n        traverse(value) \n  \n# Create Tree \ntree = Tree('A') \ntree.children.append(Tree('B')) \ntree.children.append(Tree('C')) \ntree.children[0].children.append(Tree('D')) \ntree.children[0].children.append(Tree('E')) \n\n# Traverse the Tree \ntraverse(tree)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a minimal working example to demonstrate the traversal of a tree data structure using Python.\n\n### Input:\n\n\n### Output:\n# A simple Tree class \nclass Tree(object): \n    def __init__(self, data): \n        self.data = data  # root node \n        self.children = []  # empty list to store the children \n  \n# Function to print the tree pre-order \ndef traverse(tree): \n    print(tree.data) \n  \n    # recursively traverse the Tree\n    for value in tree.children: \n        traverse(value) \n  \n# Create Tree \ntree = Tree('A') \ntree.children.append(Tree('B')) \ntree.children.append(Tree('C')) \ntree.children[0].children.append(Tree('D')) \ntree.children[0].children.append(Tree('E')) \n\n# Traverse the Tree \ntraverse(tree)","tok_input_length":190,"tok_output_length":146,"system_prompt":"","index":3823}
{"question":"Write a Python program to classify the given data using logistic regression.","input":"\".\/data.csv\"\n\nx1, x2, y\n1, 2, 0\n2, 3, 0\n4, 5, 1\n5, 4, 1","expected_output":"import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\n\n# load the data\ndata = pd.read_csv('data.csv')\n\n# create the training and test set\nX = data[['x1', 'x2']]\ny = data['y']\n\n# train the model\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\n# make predictions\npreds = model.predict(X)\n\n# check accuracy\naccuracy = model.score(X, y)\nprint('accuracy', accuracy) \n# output: accuracy 1.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the given data using logistic regression.\n\n### Input:\n\".\/data.csv\"\n\nx1, x2, y\n1, 2, 0\n2, 3, 0\n4, 5, 1\n5, 4, 1\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\n\n# load the data\ndata = pd.read_csv('data.csv')\n\n# create the training and test set\nX = data[['x1', 'x2']]\ny = data['y']\n\n# train the model\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\n# make predictions\npreds = model.predict(X)\n\n# check accuracy\naccuracy = model.score(X, y)\nprint('accuracy', accuracy) \n# output: accuracy 1.0","tok_input_length":191,"tok_output_length":107,"system_prompt":"","index":9845}
{"question":"Write a Python program to find the most common words in a given list of texts.","input":"[\n    \"This is a test.\",\n    \"This is another test.\",\n    \"This is a different test.\"\n]","expected_output":"import collections \n\ntexts = [\n    \"This is a test.\",\n    \"This is another test.\",\n    \"This is a different test.\"\n]\n\n# split the text into words\nwords = []\nfor text in texts:\n    words.extend(text.split())\n\n# count the frequencies of each word\nword_freq = collections.Counter(words)\n\n# get the most common words\nmost_common_words = word_freq.most_common(3)\n\nfor word, count in most_common_words:\n    print('{}: {}'.format(word, count))\n\n#Output:\n#This: 3\n#is: 3\n#a: 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the most common words in a given list of texts.\n\n### Input:\n[\n    \"This is a test.\",\n    \"This is another test.\",\n    \"This is a different test.\"\n]\n\n### Output:\nimport collections \n\ntexts = [\n    \"This is a test.\",\n    \"This is another test.\",\n    \"This is a different test.\"\n]\n\n# split the text into words\nwords = []\nfor text in texts:\n    words.extend(text.split())\n\n# count the frequencies of each word\nword_freq = collections.Counter(words)\n\n# get the most common words\nmost_common_words = word_freq.most_common(3)\n\nfor word, count in most_common_words:\n    print('{}: {}'.format(word, count))\n\n#Output:\n#This: 3\n#is: 3\n#a: 2","tok_input_length":191,"tok_output_length":123,"system_prompt":"","index":9162}
{"question":"Explain what the following Python code does.","input":"start, end = 0, 5\n[i**2 for i in range(start, end)]","expected_output":"The code creates a list of the squares of numbers from 0 to 5, inclusive. It does this by using a list comprehension and the range() function. The range() function takes in two parameters, the starting point (start) and the ending point (end). In this case, the starting point is 0 and the ending point is 5, meaning the list will include the numbers 0, 1, 2, 3, 4 and 5. The list comprehension then takes each of these numbers and squares them, giving us the list [0, 1, 4, 9, 16, 25].","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain what the following Python code does.\n\n### Input:\nstart, end = 0, 5\n[i**2 for i in range(start, end)]\n\n### Output:\nThe code creates a list of the squares of numbers from 0 to 5, inclusive. It does this by using a list comprehension and the range() function. The range() function takes in two parameters, the starting point (start) and the ending point (end). In this case, the starting point is 0 and the ending point is 5, meaning the list will include the numbers 0, 1, 2, 3, 4 and 5. The list comprehension then takes each of these numbers and squares them, giving us the list [0, 1, 4, 9, 16, 25].","tok_input_length":191,"tok_output_length":134,"system_prompt":"","index":15149}
{"question":"Build a python program to classify sentiment of a given sentence.","input":"\"I am feeling really good today!\"","expected_output":"import nltk\n\ndef classify_sentiment(sentence):\n    # Tokenize the sentence\n    tokens = nltk.word_tokenize(sentence)\n \n    # Tag the tokens\n    tagged_tokens = nltk.pos_tag(tokens)\n \n    # Define our sentiment classifier\n    sentiment_classifier = nltk.NaiveBayesClassifier.train([('positive', 'Positive'), ('negative', 'Negative'), ('neutral', 'Neutral')])\n \n    # Classify the sentiment of the sentence\n    sentiment = sentiment_classifier.classify(dict(tagged_tokens))\n \n    return sentiment\n \nsentence = 'I am feeling really good today!'\nclassified_sentiment = classify_sentiment(sentence)\n \nprint(\"The sentiment of the sentence '{}' is: {}\".format(sentence, classified_sentiment))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a python program to classify sentiment of a given sentence.\n\n### Input:\n\"I am feeling really good today!\"\n\n### Output:\nimport nltk\n\ndef classify_sentiment(sentence):\n    # Tokenize the sentence\n    tokens = nltk.word_tokenize(sentence)\n \n    # Tag the tokens\n    tagged_tokens = nltk.pos_tag(tokens)\n \n    # Define our sentiment classifier\n    sentiment_classifier = nltk.NaiveBayesClassifier.train([('positive', 'Positive'), ('negative', 'Negative'), ('neutral', 'Neutral')])\n \n    # Classify the sentiment of the sentence\n    sentiment = sentiment_classifier.classify(dict(tagged_tokens))\n \n    return sentiment\n \nsentence = 'I am feeling really good today!'\nclassified_sentiment = classify_sentiment(sentence)\n \nprint(\"The sentiment of the sentence '{}' is: {}\".format(sentence, classified_sentiment))","tok_input_length":191,"tok_output_length":145,"system_prompt":"","index":7544}
{"question":"Create an environment in Python to demonstrate the effects of an unbalanced dataset.","input":"","expected_output":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Creating a dataset\nX = np.random.uniform(-1,1,100)\nY = np.random.uniform(-1,1,100)\n# Class labels\ny = np.zeros(100)\n# Adding some noise\ny[X>0] = 1\ny[X<0] = 0\n\n# Normal dataset\nplt.scatter(X, Y, c=y)\nplt.show()\n\n# Unbalanced dataset\n# Reducing the number of 0s\ny[X<0] = np.random.choice(np.arange(0,2), int(0.50*len(y[X<0])), replace=False)\nplt.scatter(X, Y, c=y)\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an environment in Python to demonstrate the effects of an unbalanced dataset.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Creating a dataset\nX = np.random.uniform(-1,1,100)\nY = np.random.uniform(-1,1,100)\n# Class labels\ny = np.zeros(100)\n# Adding some noise\ny[X>0] = 1\ny[X<0] = 0\n\n# Normal dataset\nplt.scatter(X, Y, c=y)\nplt.show()\n\n# Unbalanced dataset\n# Reducing the number of 0s\ny[X<0] = np.random.choice(np.arange(0,2), int(0.50*len(y[X<0])), replace=False)\nplt.scatter(X, Y, c=y)\nplt.show()","tok_input_length":191,"tok_output_length":149,"system_prompt":"","index":6241}
{"question":"Using given data, generate random user reviews and ratings for a movie in Python.","input":"data = [{\n  \"movie_name\": \"Inception\"\n  \"movie_id\": \"213121\",\n  \"users\": [\"Alice\", \"Bob\", \"John\"]\n}];","expected_output":"reviews = {\n  \"Alice\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and I thought it was great!\"\n  },\n  \"Bob\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and it was just okay.\"\n  },\n  \"John\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I didn't enjoy 'Inception' as much as some others.\"\n  }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing given data, generate random user reviews and ratings for a movie in Python.\n\n### Input:\ndata = [{\n  \"movie_name\": \"Inception\"\n  \"movie_id\": \"213121\",\n  \"users\": [\"Alice\", \"Bob\", \"John\"]\n}];\n\n### Output:\nreviews = {\n  \"Alice\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and I thought it was great!\"\n  },\n  \"Bob\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and it was just okay.\"\n  },\n  \"John\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I didn't enjoy 'Inception' as much as some others.\"\n  }\n}","tok_input_length":192,"tok_output_length":113,"system_prompt":"","index":17387}
{"question":"Create a web crawler in Python that visits pages from a given list of URLs and extracts hyperlinks contained in each page","input":"URL1: https:\/\/www.example1.com\nURL2: https:\/\/www.example2.com","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\n# The list of URLs\nurls = [\n    'https:\/\/www.example1.com',\n    'https:\/\/www.example2.com'\n]\n\n# Iterate through each URL\nfor url in urls:\n    # Connect to the URL\n    response = requests.get(url)\n\n    # Parse HTML and save to BeautifulSoup object\u00b6\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract all the hyperlinks\n    links = soup.find_all('a')\n\n    # Print out the link\n    for link in links:\n        print(link['href'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python that visits pages from a given list of URLs and extracts hyperlinks contained in each page\n\n### Input:\nURL1: https:\/\/www.example1.com\nURL2: https:\/\/www.example2.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# The list of URLs\nurls = [\n    'https:\/\/www.example1.com',\n    'https:\/\/www.example2.com'\n]\n\n# Iterate through each URL\nfor url in urls:\n    # Connect to the URL\n    response = requests.get(url)\n\n    # Parse HTML and save to BeautifulSoup object\u00b6\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract all the hyperlinks\n    links = soup.find_all('a')\n\n    # Print out the link\n    for link in links:\n        print(link['href'])","tok_input_length":192,"tok_output_length":121,"system_prompt":"","index":8866}
{"question":"Create a basic Machine Learning model in Python to predict the probability of click-throughs for an ad based on user data.","input":"Not applicable","expected_output":"#load Libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n#load Data\ndata = pd.read_csv('user_data.csv')\n\n#split Data\nX = data[['age', 'gender', 'interest']]\ny = data['click']\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n#train Model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(x_train, y_train)\n\n#evaluate Model\nfrom sklearn.metrics import accuracy_score\n\ny_pred = model.predict(x_test)\nprint('Accuracy: ', accuracy_score(y_test, y_pred))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Machine Learning model in Python to predict the probability of click-throughs for an ad based on user data.\n\n### Input:\nNot applicable\n\n### Output:\n#load Libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n#load Data\ndata = pd.read_csv('user_data.csv')\n\n#split Data\nX = data[['age', 'gender', 'interest']]\ny = data['click']\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n#train Model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(x_train, y_train)\n\n#evaluate Model\nfrom sklearn.metrics import accuracy_score\n\ny_pred = model.predict(x_test)\nprint('Accuracy: ', accuracy_score(y_test, y_pred))","tok_input_length":192,"tok_output_length":138,"system_prompt":"","index":7890}
{"question":"Design and write a Python script to generate Fibonacci numbers up to n=10000.","input":"Not applicable","expected_output":"def generate_fibonacci(n):  \n    #first two Fibonacci numbers  \n    a = 0\n    b = 1\n    #check if the number of terms is valid  \n    if n <=0:  \n        print(\"Please enter a positive integer\")  \n    elif n == 1:  \n        print(\"Fibonacci sequence upto\",n,\":\")  \n        print(a)  \n    else:  \n        print(\"Fibonacci sequence:\")  \n        for i in range(0,n):  \n            print(a)  \n            c = a + b  \n            #update values  \n            a = b  \n            b = c  \n# Driver function  \ngenerate_fibonacci(10000)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and write a Python script to generate Fibonacci numbers up to n=10000.\n\n### Input:\nNot applicable\n\n### Output:\ndef generate_fibonacci(n):  \n    #first two Fibonacci numbers  \n    a = 0\n    b = 1\n    #check if the number of terms is valid  \n    if n <=0:  \n        print(\"Please enter a positive integer\")  \n    elif n == 1:  \n        print(\"Fibonacci sequence upto\",n,\":\")  \n        print(a)  \n    else:  \n        print(\"Fibonacci sequence:\")  \n        for i in range(0,n):  \n            print(a)  \n            c = a + b  \n            #update values  \n            a = b  \n            b = c  \n# Driver function  \ngenerate_fibonacci(10000)","tok_input_length":192,"tok_output_length":145,"system_prompt":"","index":1105}
{"question":"Develop a python program to add two matrices of the same size.","input":"X = [[2, 3, 4], \n     [6, 7, 8], \n     [10, 11, 12]]\n\nY = [[4, 5, 6], \n     [8, 9, 10], \n     [12, 13, 14]]","expected_output":"def add_matrices(X, Y):\n    result = [[0 for col in range(len(X[0]))] for row in range(len(X))] # Create a matrix of all 0s\n    for i in range(len(X)):\n        for j in range(len(X[0])):\n            result[i][j] = X[i][j] + Y[i][j]\n    return result \n\nprint(add_matrices(X, Y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to add two matrices of the same size.\n\n### Input:\nX = [[2, 3, 4], \n     [6, 7, 8], \n     [10, 11, 12]]\n\nY = [[4, 5, 6], \n     [8, 9, 10], \n     [12, 13, 14]]\n\n### Output:\ndef add_matrices(X, Y):\n    result = [[0 for col in range(len(X[0]))] for row in range(len(X))] # Create a matrix of all 0s\n    for i in range(len(X)):\n        for j in range(len(X[0])):\n            result[i][j] = X[i][j] + Y[i][j]\n    return result \n\nprint(add_matrices(X, Y))","tok_input_length":193,"tok_output_length":87,"system_prompt":"","index":17362}
{"question":"Generate a code in Python to merge two given sorted lists into a new sorted list.","input":"list1 = [1,5,8,9,11] \nlist2 = [2,3,7,10]","expected_output":"def merging_lists(list1, list2):\n    # Merge two sorted lists\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    # Add any leftover items from the original lists\n    merged_list.extend(list1[i:])\n    merged_list.extend(list2[j:])\n \n    return merged_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code in Python to merge two given sorted lists into a new sorted list.\n\n### Input:\nlist1 = [1,5,8,9,11] \nlist2 = [2,3,7,10]\n\n### Output:\ndef merging_lists(list1, list2):\n    # Merge two sorted lists\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    # Add any leftover items from the original lists\n    merged_list.extend(list1[i:])\n    merged_list.extend(list2[j:])\n \n    return merged_list","tok_input_length":193,"tok_output_length":122,"system_prompt":"","index":3365}
{"question":"Generate a python program to display the largest and smallest elements in a given array","input":"[2, 3, 8, 5, 10, 6]","expected_output":"def display_min_max(arr):\n    # initializing max and min element\n    max_element = arr[0]\n    min_element = arr[0]\n\n    # traverse through the array elements\n    for x in arr:\n        if (x > max_element):\n            max_element = x\n        if (x < min_element):\n            min_element = x\n\n    # display max and min element\n    print(\"The largest element is\", max_element)\n    print(\"The smallest element is\", min_element)\n\n# Driver code\narr = [2, 3, 8, 5, 10, 6]\ndisplay_min_max(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to display the largest and smallest elements in a given array\n\n### Input:\n[2, 3, 8, 5, 10, 6]\n\n### Output:\ndef display_min_max(arr):\n    # initializing max and min element\n    max_element = arr[0]\n    min_element = arr[0]\n\n    # traverse through the array elements\n    for x in arr:\n        if (x > max_element):\n            max_element = x\n        if (x < min_element):\n            min_element = x\n\n    # display max and min element\n    print(\"The largest element is\", max_element)\n    print(\"The smallest element is\", min_element)\n\n# Driver code\narr = [2, 3, 8, 5, 10, 6]\ndisplay_min_max(arr)","tok_input_length":193,"tok_output_length":132,"system_prompt":"","index":5035}
{"question":"Create an AI algorithm in Python that will predict the stock price of a given stock for the next day.","input":"Not applicable","expected_output":"import pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVR\nimport matplotlib.pyplot as plt\n\n# Load the data\ndf = pd.read_csv('stock-data.csv')\n\n# Preprocess the data\nX = np.array(df.index).reshape(-1, 1)\ny = df['price']\n\n# Use SVR to create a model\nclf = SVR(kernel='rbf')\nclf.fit(X, y)\n\n# Make prediction using the model\nx_pre = np.array([len(X) + 1])\nx_pre = x_pre.reshape(-1, 1)\nprediction = clf.predict(x_pre)\n\nprint(\"Predicted stock price: {}\".format(prediction[0]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI algorithm in Python that will predict the stock price of a given stock for the next day.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVR\nimport matplotlib.pyplot as plt\n\n# Load the data\ndf = pd.read_csv('stock-data.csv')\n\n# Preprocess the data\nX = np.array(df.index).reshape(-1, 1)\ny = df['price']\n\n# Use SVR to create a model\nclf = SVR(kernel='rbf')\nclf.fit(X, y)\n\n# Make prediction using the model\nx_pre = np.array([len(X) + 1])\nx_pre = x_pre.reshape(-1, 1)\nprediction = clf.predict(x_pre)\n\nprint(\"Predicted stock price: {}\".format(prediction[0]))","tok_input_length":193,"tok_output_length":142,"system_prompt":"","index":17758}
{"question":"Implement a Python function to generate the Fibonacci sequence of a given length.","input":"6","expected_output":"def generate_fibonacci(length):\n    # Initialize\n    n1, n2 = 0, 1\n\n    # Check if length is valid\n    if length <= 0:\n        print('Invalid length. Positive numbers only.')\n    elif length == 1:\n        print(n1)\n    else:\n        print(n1, n2, end=' ')\n    \n    # Generate sequence\n    for i in range(2, length):\n        n3 = n1 + n2\n        print(n3, end=' ')\n        n1 = n2\n        n2 = n3\n\n# Show output\ngenerate_fibonacci(6)\n# Output: 0 1 1 2 3 5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to generate the Fibonacci sequence of a given length.\n\n### Input:\n6\n\n### Output:\ndef generate_fibonacci(length):\n    # Initialize\n    n1, n2 = 0, 1\n\n    # Check if length is valid\n    if length <= 0:\n        print('Invalid length. Positive numbers only.')\n    elif length == 1:\n        print(n1)\n    else:\n        print(n1, n2, end=' ')\n    \n    # Generate sequence\n    for i in range(2, length):\n        n3 = n1 + n2\n        print(n3, end=' ')\n        n1 = n2\n        n2 = n3\n\n# Show output\ngenerate_fibonacci(6)\n# Output: 0 1 1 2 3 5","tok_input_length":193,"tok_output_length":150,"system_prompt":"","index":644}
{"question":"Design a python program to generate a binary tree","input":"","expected_output":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.root is None:\n            self.root = new_node\n        else:\n            current = self.root\n            while current is not None:\n                if data < current.data:\n                    if current.left is None:\n                        current.left = new_node\n                        break\n                    else:\n                        current = current.left\n                elif data > current.data:\n                    if current.right is None:\n                        current.right = new_node\n                        break\n                    else:\n                        current = current.right","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to generate a binary tree\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.root is None:\n            self.root = new_node\n        else:\n            current = self.root\n            while current is not None:\n                if data < current.data:\n                    if current.left is None:\n                        current.left = new_node\n                        break\n                    else:\n                        current = current.left\n                elif data > current.data:\n                    if current.right is None:\n                        current.right = new_node\n                        break\n                    else:\n                        current = current.right","tok_input_length":193,"tok_output_length":156,"system_prompt":"","index":12385}
{"question":"Write a Python program to compute the average salary of people over a given range of numbers from the dataset 'salary.csv'.","input":"salary.csv:\nname, salary\nJohn, 1000\nSara, 2000\nAlice, 3000","expected_output":"import csv\n\ndef get_average_salary(filename):\n  total = 0\n  count = 0\n\n  with open(filename, 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    next(csvreader) # skip header\n\n    # loop through the CSV rows\n    for row in csvreader:\n      total += int(row[1])\n      count += 1\n  \n  return total\/count\n\naverage_salary = get_average_salary('salary.csv')\nprint('Average Salary: ', average_salary)\n\n# Output: \n# Average Salary: 2000.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the average salary of people over a given range of numbers from the dataset 'salary.csv'.\n\n### Input:\nsalary.csv:\nname, salary\nJohn, 1000\nSara, 2000\nAlice, 3000\n\n### Output:\nimport csv\n\ndef get_average_salary(filename):\n  total = 0\n  count = 0\n\n  with open(filename, 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    next(csvreader) # skip header\n\n    # loop through the CSV rows\n    for row in csvreader:\n      total += int(row[1])\n      count += 1\n  \n  return total\/count\n\naverage_salary = get_average_salary('salary.csv')\nprint('Average Salary: ', average_salary)\n\n# Output: \n# Average Salary: 2000.0","tok_input_length":194,"tok_output_length":117,"system_prompt":"","index":444}
{"question":"Write a Python program to generate a HTML table according to given data.","input":"data = [['Name', 'Age'], ['John', 20], ['Jane', 30], ['Tom', 40]]","expected_output":"def generate_table(data):\n table = '<table>'\n for row in data:\n table += '<tr>'\n for cell in row:\n table += '<td>{}<\/td>'.format(cell)\n table += '<\/tr>'\n table += '<\/table>'\n\n return table\n\nprint(generate_table(data))\n# Output\n<table><tr><td>Name<\/td><td>Age<\/td><\/tr><tr><td>John<\/td><td>20<\/td><\/tr><tr><td>Jane<\/td><td>30<\/td><\/tr><tr><td>Tom<\/td><td>40<\/td><\/tr><\/table>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a HTML table according to given data.\n\n### Input:\ndata = [['Name', 'Age'], ['John', 20], ['Jane', 30], ['Tom', 40]]\n\n### Output:\ndef generate_table(data):\n table = '<table>'\n for row in data:\n table += '<tr>'\n for cell in row:\n table += '<td>{}<\/td>'.format(cell)\n table += '<\/tr>'\n table += '<\/table>'\n\n return table\n\nprint(generate_table(data))\n# Output\n<table><tr><td>Name<\/td><td>Age<\/td><\/tr><tr><td>John<\/td><td>20<\/td><\/tr><tr><td>Jane<\/td><td>30<\/td><\/tr><tr><td>Tom<\/td><td>40<\/td><\/tr><\/table>","tok_input_length":194,"tok_output_length":127,"system_prompt":"","index":9343}
{"question":"Write an algorithm in Python for generating a list that contains all substrings of a given string in alphabetical order.","input":"String: \"hello\"","expected_output":"def all_substrings(string):\n# Create empty list to store all substrings \nsubstrings = []\n\n# Find all possible substrings using two nested loops \nfor i in range(len(string)):\n for j in range(i, len(string)):\n  substring = string[i : j + 1]\n  substrings.append(substring)\n\n# Sort the list and return\nsubstrings.sort()\nreturn substrings\n\n# Test\nprint(all_substrings('hello'))\n# Output: ['h', 'he', 'hel', 'hell', 'hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python for generating a list that contains all substrings of a given string in alphabetical order.\n\n### Input:\nString: \"hello\"\n\n### Output:\ndef all_substrings(string):\n# Create empty list to store all substrings \nsubstrings = []\n\n# Find all possible substrings using two nested loops \nfor i in range(len(string)):\n for j in range(i, len(string)):\n  substring = string[i : j + 1]\n  substrings.append(substring)\n\n# Sort the list and return\nsubstrings.sort()\nreturn substrings\n\n# Test\nprint(all_substrings('hello'))\n# Output: ['h', 'he', 'hel', 'hell', 'hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o']","tok_input_length":194,"tok_output_length":140,"system_prompt":"","index":4187}
{"question":"Write a Python function to find the most Frequent words in a given list of words.","input":"","expected_output":"def find_frequent_words(words):\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    \n    max_word_count = 0\n    frequent_words = []\n    for word, count in word_counts.items():\n        if count > max_word_count:\n            frequent_words = [word]\n            max_word_count = count\n        elif count == max_word_count:\n            frequent_words.append(word)\n            \n    return frequent_words\n\nwords = [\"cat\", \"dog\", \"cat\", \"bird\", \"cat\"]\nfrequent_words = find_frequent_words(words)\nprint(\"Most frequent words: \", frequent_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the most Frequent words in a given list of words.\n\n### Input:\n\n\n### Output:\ndef find_frequent_words(words):\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    \n    max_word_count = 0\n    frequent_words = []\n    for word, count in word_counts.items():\n        if count > max_word_count:\n            frequent_words = [word]\n            max_word_count = count\n        elif count == max_word_count:\n            frequent_words.append(word)\n            \n    return frequent_words\n\nwords = [\"cat\", \"dog\", \"cat\", \"bird\", \"cat\"]\nfrequent_words = find_frequent_words(words)\nprint(\"Most frequent words: \", frequent_words)","tok_input_length":194,"tok_output_length":149,"system_prompt":"","index":14663}
{"question":"Create a Python class that models a 3D vector.","input":"","expected_output":"class Vector3D:\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def add(self, vector):\n        x = self.x + vector.x\n        y = self.y + vector.y\n        z = self.z + vector.z\n        return Vector3D(x,y,z)\n\n    def subtract(self, vector):\n        x = self.x - vector.x\n        y = self.y - vector.y\n        z = self.z - vector.z\n        return Vector3D(x,y,z)\n\n    def magnitude(self):\n        return (self.x**2 + self.y**2+.self.z**2)**0.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that models a 3D vector.\n\n### Input:\n\n\n### Output:\nclass Vector3D:\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def add(self, vector):\n        x = self.x + vector.x\n        y = self.y + vector.y\n        z = self.z + vector.z\n        return Vector3D(x,y,z)\n\n    def subtract(self, vector):\n        x = self.x - vector.x\n        y = self.y - vector.y\n        z = self.z - vector.z\n        return Vector3D(x,y,z)\n\n    def magnitude(self):\n        return (self.x**2 + self.y**2+.self.z**2)**0.5","tok_input_length":194,"tok_output_length":155,"system_prompt":"","index":14873}
{"question":"Generate a correct Python program to calculate the linear regression line of a dataset","input":"x_data: [1, 2, 3, 4, 5]\ny_data: [2, 4, 5, 4, 5]","expected_output":"import numpy as np \n\ndef linear_reg(x_data, y_data):\n\n    x_mean = np.mean(x_data)\n    y_mean = np.mean(y_data)\n\n    numerator = 0\n    denominator = 0\n    for i in range(len(x_data)):\n        numerator += (x_data[i] - x_mean) * (y_data[i] - y_mean)\n        denominator += (x_data[i] - x_mean) ** 2\n\n    slope = numerator\/denominator\n    intercept = y_mean - (slope * x_mean)\n    return slope, intercept","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct Python program to calculate the linear regression line of a dataset\n\n### Input:\nx_data: [1, 2, 3, 4, 5]\ny_data: [2, 4, 5, 4, 5]\n\n### Output:\nimport numpy as np \n\ndef linear_reg(x_data, y_data):\n\n    x_mean = np.mean(x_data)\n    y_mean = np.mean(y_data)\n\n    numerator = 0\n    denominator = 0\n    for i in range(len(x_data)):\n        numerator += (x_data[i] - x_mean) * (y_data[i] - y_mean)\n        denominator += (x_data[i] - x_mean) ** 2\n\n    slope = numerator\/denominator\n    intercept = y_mean - (slope * x_mean)\n    return slope, intercept","tok_input_length":195,"tok_output_length":117,"system_prompt":"","index":11169}
{"question":"Create a program in Python to generate a Random Password of length 8 characters, which contains at least one of each character type (lowercase, uppercase, digits, special characters).","input":"Not applicable","expected_output":"import string\nimport random\n\n# length of password\nlength = 8\n\n# special characters\nspecial_characters = \"!#$%&'()*+,-.\/:;<=>?@[\\]^_`{|}~\"\n\n# generating password\npassword = random.choice(string.ascii_lowercase)\npassword += random.choice(string.ascii_uppercase)\npassword += random.choice(string.digits)\npassword += random.choice(special_characters)\n\nfor i in range(length):\n   password += random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters)\n\npassword  = ''.join(random.sample(password,len(password)))\n\nprint (\"Password is: \", password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to generate a Random Password of length 8 characters, which contains at least one of each character type (lowercase, uppercase, digits, special characters).\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\n# length of password\nlength = 8\n\n# special characters\nspecial_characters = \"!#$%&'()*+,-.\/:;<=>?@[\\]^_`{|}~\"\n\n# generating password\npassword = random.choice(string.ascii_lowercase)\npassword += random.choice(string.ascii_uppercase)\npassword += random.choice(string.digits)\npassword += random.choice(special_characters)\n\nfor i in range(length):\n   password += random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters)\n\npassword  = ''.join(random.sample(password,len(password)))\n\nprint (\"Password is: \", password)","tok_input_length":195,"tok_output_length":129,"system_prompt":"","index":411}
{"question":"Create a machine learning model using Python and scikit-learn to classify text into four categories: positive, negative, neutral, and mixed.","input":"Not applicable","expected_output":"import numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import ComplementNB\n\ncategory_map = {\n 0: 'positive',\n 1: 'negative',\n 2: 'neutral',\n 3: 'mixed'\n}\n\n# get text data\ntext_data = \/\/...\n\n# extract features from text data\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(text_data)\n\n# create and train model\nmodel = ComplementNB()\nmodel.fit(features, labels)\n\n# make predictions\npredictions = model.predict(features)\n\n# map predictions to category labels\nprediction_labels = [category_map[i] for i in predictions]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model using Python and scikit-learn to classify text into four categories: positive, negative, neutral, and mixed.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import ComplementNB\n\ncategory_map = {\n 0: 'positive',\n 1: 'negative',\n 2: 'neutral',\n 3: 'mixed'\n}\n\n# get text data\ntext_data = \/\/...\n\n# extract features from text data\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(text_data)\n\n# create and train model\nmodel = ComplementNB()\nmodel.fit(features, labels)\n\n# make predictions\npredictions = model.predict(features)\n\n# map predictions to category labels\nprediction_labels = [category_map[i] for i in predictions]","tok_input_length":195,"tok_output_length":137,"system_prompt":"","index":6000}
{"question":"Generate an HTML content in Python which contains a text input field, submit button and a paragraph to display the results.","input":"","expected_output":"<!DOCTYPE html>\n<html>\n<head>\n    <title>Input Form<\/title>\n    <script>\n        function handleFormResult() {\n            let inputField = document.getElementById('input_field');\n            let resultField = document.getElementById('result_field');\n            resultField.innerText = inputField.value;\n        }\n    <\/script>\n<\/head>\n<body>\n    <h1>Enter Your Data Below:<\/h1>\n    <form>\n        <input type=\"text\" id=\"input_field\" \/>\n        <input type=\"submit\" onclick=\"handleFormResult()\" \/>\n    <\/form>\n    <h1>Result:<\/h1>\n    <p id=\"result_field\"><\/p>\n<\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an HTML content in Python which contains a text input field, submit button and a paragraph to display the results.\n\n### Input:\n\n\n### Output:\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Input Form<\/title>\n    <script>\n        function handleFormResult() {\n            let inputField = document.getElementById('input_field');\n            let resultField = document.getElementById('result_field');\n            resultField.innerText = inputField.value;\n        }\n    <\/script>\n<\/head>\n<body>\n    <h1>Enter Your Data Below:<\/h1>\n    <form>\n        <input type=\"text\" id=\"input_field\" \/>\n        <input type=\"submit\" onclick=\"handleFormResult()\" \/>\n    <\/form>\n    <h1>Result:<\/h1>\n    <p id=\"result_field\"><\/p>\n<\/body>\n<\/html>","tok_input_length":195,"tok_output_length":145,"system_prompt":"","index":7070}
{"question":"Create a Python program to optimize web pages for SEO.","input":"Not applicable","expected_output":"import re\nimport requests\n\ndef optimize_webpage(url):\n    r = requests.get(url, timeout=5)\n    content = r.text\n    content = content.lower()\n    title = re.search('<title>(.*)<\/title>', content)\n    title_text = title.group(1).strip()\n    content = content.replace(title_text, title_text.lower())\n    keywords = re.findall('<meta name=\"keywords\" content=\"(.*)\">', content)\n    for word in keywords:\n        if word.strip():\n            content = content.replace(word, word.lower())\n\n    description = re.findall('<meta name=\"description\" content=\"(.*)\">', content)\n    for desc in description:\n        if desc.strip():\n            content = content.replace(desc, desc.lower())\n    return content","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to optimize web pages for SEO.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\nimport requests\n\ndef optimize_webpage(url):\n    r = requests.get(url, timeout=5)\n    content = r.text\n    content = content.lower()\n    title = re.search('<title>(.*)<\/title>', content)\n    title_text = title.group(1).strip()\n    content = content.replace(title_text, title_text.lower())\n    keywords = re.findall('<meta name=\"keywords\" content=\"(.*)\">', content)\n    for word in keywords:\n        if word.strip():\n            content = content.replace(word, word.lower())\n\n    description = re.findall('<meta name=\"description\" content=\"(.*)\">', content)\n    for desc in description:\n        if desc.strip():\n            content = content.replace(desc, desc.lower())\n    return content","tok_input_length":195,"tok_output_length":154,"system_prompt":"","index":12579}
{"question":"Create a Python program to spread tasks into a timeline based on the given data.","input":"tasks = [{\"name\":\"Task 1\",\"duration\":1},\n         {\"name\":\"Task 2\",\"duration\":2},\n         {\"name\":\"Task 3\",\"duration\":3}]","expected_output":"timeline = []\n\n# Sort tasks in ascending order of duration\ntasks.sort(key=lambda x: x[\"duration\"])\n\n# Move tasks to timeline\nstart_time = 0\nfor task in tasks:\n    timeline.append({\"name\": task[\"name\"],\n                     \"start_time\": start_time,\n                     \"end_time\": start_time + task[\"duration\"]})\n    start_time = start_time + task[\"duration\"]\n\n# Print the timeline\nfor task in timeline:\n    print(\"{}: [{},{}]\".format(task[\"name\"], task[\"start_time\"], task[\"end_time\"]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to spread tasks into a timeline based on the given data.\n\n### Input:\ntasks = [{\"name\":\"Task 1\",\"duration\":1},\n         {\"name\":\"Task 2\",\"duration\":2},\n         {\"name\":\"Task 3\",\"duration\":3}]\n\n### Output:\ntimeline = []\n\n# Sort tasks in ascending order of duration\ntasks.sort(key=lambda x: x[\"duration\"])\n\n# Move tasks to timeline\nstart_time = 0\nfor task in tasks:\n    timeline.append({\"name\": task[\"name\"],\n                     \"start_time\": start_time,\n                     \"end_time\": start_time + task[\"duration\"]})\n    start_time = start_time + task[\"duration\"]\n\n# Print the timeline\nfor task in timeline:\n    print(\"{}: [{},{}]\".format(task[\"name\"], task[\"start_time\"], task[\"end_time\"]))","tok_input_length":196,"tok_output_length":115,"system_prompt":"","index":15535}
{"question":"Construct an AI algorithm to identify the sentiment of a given set of comments in Python.","input":"comments = [\"I love the product!\",\n            \"I'm not a fan of this product\"]","expected_output":"import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsid_obj = SentimentIntensityAnalyzer() \n\nfor comment in comments:\n    sentiment_dict = sid_obj.polarity_scores(comment)\n    print(comment, sentiment_dict)\n    \n    \n# Output\nI love the product! {'neg': 0.0, 'neu': 0.424, 'pos': 0.576, 'compound': 0.6369}\nI'm not a fan of this product {'neg': 0.396, 'neu': 0.604, 'pos': 0.0, 'compound': -0.5574}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an AI algorithm to identify the sentiment of a given set of comments in Python.\n\n### Input:\ncomments = [\"I love the product!\",\n            \"I'm not a fan of this product\"]\n\n### Output:\nimport nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsid_obj = SentimentIntensityAnalyzer() \n\nfor comment in comments:\n    sentiment_dict = sid_obj.polarity_scores(comment)\n    print(comment, sentiment_dict)\n    \n    \n# Output\nI love the product! {'neg': 0.0, 'neu': 0.424, 'pos': 0.576, 'compound': 0.6369}\nI'm not a fan of this product {'neg': 0.396, 'neu': 0.604, 'pos': 0.0, 'compound': -0.5574}","tok_input_length":196,"tok_output_length":133,"system_prompt":"","index":15650}
{"question":"Create a classification program using Python to classify the given dataset.","input":"Data set containing details about various cars like car name, color, and price.","expected_output":"#Import libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n#Load dataset\ndata = pd.read_csv('cars.csv')\n\n#Split data\nX = data.iloc[:, 0:2]\ny = data.iloc[:, 2]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n#Build the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n#Test the model\naccuracy = model.score(X_test, y_test)\n\n#Print accuracy\nprint(\"Accuracy:\", accuracy*100, \"%\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a classification program using Python to classify the given dataset.\n\n### Input:\nData set containing details about various cars like car name, color, and price.\n\n### Output:\n#Import libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n#Load dataset\ndata = pd.read_csv('cars.csv')\n\n#Split data\nX = data.iloc[:, 0:2]\ny = data.iloc[:, 2]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n#Build the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n#Test the model\naccuracy = model.score(X_test, y_test)\n\n#Print accuracy\nprint(\"Accuracy:\", accuracy*100, \"%\")","tok_input_length":196,"tok_output_length":141,"system_prompt":"","index":16019}
{"question":"Develop a classification model in Python to predict the color of a flower when existing data is used.","input":"","expected_output":"from sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load the dataset\niris = load_iris()\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=0)\n\n# Fit the decision tree model to the training data\nclf = DecisionTreeClassifier(random_state=0).fit(X_train, y_train) \n \n# Make predictions on the test data\ny_pred = clf.predict(X_test) \n\n# Calculate accuracy \nacc = accuracy_score(y_test, y_pred)\nprint(acc)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a classification model in Python to predict the color of a flower when existing data is used.\n\n### Input:\n\n\n### Output:\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load the dataset\niris = load_iris()\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=0)\n\n# Fit the decision tree model to the training data\nclf = DecisionTreeClassifier(random_state=0).fit(X_train, y_train) \n \n# Make predictions on the test data\ny_pred = clf.predict(X_test) \n\n# Calculate accuracy \nacc = accuracy_score(y_test, y_pred)\nprint(acc)","tok_input_length":196,"tok_output_length":150,"system_prompt":"","index":10599}
{"question":"Create a Python program to print a formatted table of grades for a given set of students.","input":"Students = [\n    {\n    'name': \"John\",\n    'grade': 92\n    },\n    {\n    'name': \"Alice\",\n    'grade': 95\n    },\n    {\n    'name': \"Bob\",\n    'grade': 87\n    }\n]","expected_output":"def print_grade_table(students):\n    max_name_length = max(len(student['name']) for student in students)\n    line_template = \"{{name:<{max_name_length}}}   {{grade}}\".format(max_name_length=max_name_length)\n    header = line_template.format(name='Name', grade='Grade')\n    sep = '-' * len(header)\n    print(header)\n    print(sep)\n    for student in students:\n        print(line_template.format(**student))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print a formatted table of grades for a given set of students.\n\n### Input:\nStudents = [\n    {\n    'name': \"John\",\n    'grade': 92\n    },\n    {\n    'name': \"Alice\",\n    'grade': 95\n    },\n    {\n    'name': \"Bob\",\n    'grade': 87\n    }\n]\n\n### Output:\ndef print_grade_table(students):\n    max_name_length = max(len(student['name']) for student in students)\n    line_template = \"{{name:<{max_name_length}}}   {{grade}}\".format(max_name_length=max_name_length)\n    header = line_template.format(name='Name', grade='Grade')\n    sep = '-' * len(header)\n    print(header)\n    print(sep)\n    for student in students:\n        print(line_template.format(**student))","tok_input_length":197,"tok_output_length":94,"system_prompt":"","index":423}
{"question":"Create a Python program for predicting the stock price of a company given the past 5 days of its stock price history.","input":"Stock Price History:\n[17.4, 17.3, 17.5, 17.2, 17.3]","expected_output":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n#Define and reshape the data\nstock_price = np.array([17.4, 17.3, 17.5, 17.2, 17.3]).reshape(-1, 1)\n\n#Train the model\nmodel = LinearRegression()\nmodel.fit(stock_price[:4], stock_price[1:])\n\n#Predict the next day's price\npredicted_price = model.predict([stock_price[4]])\nprint(f'Predicted price is: {predicted_price[0][0]}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for predicting the stock price of a company given the past 5 days of its stock price history.\n\n### Input:\nStock Price History:\n[17.4, 17.3, 17.5, 17.2, 17.3]\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n#Define and reshape the data\nstock_price = np.array([17.4, 17.3, 17.5, 17.2, 17.3]).reshape(-1, 1)\n\n#Train the model\nmodel = LinearRegression()\nmodel.fit(stock_price[:4], stock_price[1:])\n\n#Predict the next day's price\npredicted_price = model.predict([stock_price[4]])\nprint(f'Predicted price is: {predicted_price[0][0]}')","tok_input_length":197,"tok_output_length":117,"system_prompt":"","index":17252}
{"question":"Create a python program that sorts a roster of students by their grade.","input":"A roster of 10 students with their name and grade given as [('name', grade), ('name', grade),..]","expected_output":"def sort_by_grade(roster):\n    sorted_roster = sorted(roster, key=lambda x: x[1])\n    return sorted_roster\n\nif __name__ == \"__main__\":\n    roster = [(\"Person 1\", 75), (\"Person 2\", 82), (\"Person 3\", 95), (\"Person 4\", 76),\n              (\"Person 5\", 65), (\"Person 6\", 70), (\"Person 7\", 82), (\"Person 8\", 93),\n              (\"Person 9\", 68), (\"Person 10\",80)]\n    print(sort_by_grade(roster))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that sorts a roster of students by their grade.\n\n### Input:\nA roster of 10 students with their name and grade given as [('name', grade), ('name', grade),..]\n\n### Output:\ndef sort_by_grade(roster):\n    sorted_roster = sorted(roster, key=lambda x: x[1])\n    return sorted_roster\n\nif __name__ == \"__main__\":\n    roster = [(\"Person 1\", 75), (\"Person 2\", 82), (\"Person 3\", 95), (\"Person 4\", 76),\n              (\"Person 5\", 65), (\"Person 6\", 70), (\"Person 7\", 82), (\"Person 8\", 93),\n              (\"Person 9\", 68), (\"Person 10\",80)]\n    print(sort_by_grade(roster))","tok_input_length":197,"tok_output_length":131,"system_prompt":"","index":1642}
{"question":"Create a Python program to classify a given sentence according to its sentiment (positive, negative, or neutral).","input":"The interface is very intuitive and user-friendly.","expected_output":"import nltk\nimport sklearn\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\nsentence = 'The interface is very intuitive and user-friendly.'\n\n# Tokenize the sentence\ntokens = nltk.word_tokenize(sentence)\n\n# Get the features from the tokens\ncount_vect = CountVectorizer()\nword_count = count_vect.fit_transform(tokens)\n\n# Create a Multinomial Naive Bayes classifier\nclf = MultinomialNB().fit(word_count, ['positive'])\n\n# Predict the sentiment of the sentence\nprediction = clf.predict(word_count)\n\n# Print the result\nprint(f'The sentiment of the sentence is {prediction[0]}.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to classify a given sentence according to its sentiment (positive, negative, or neutral).\n\n### Input:\nThe interface is very intuitive and user-friendly.\n\n### Output:\nimport nltk\nimport sklearn\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\nsentence = 'The interface is very intuitive and user-friendly.'\n\n# Tokenize the sentence\ntokens = nltk.word_tokenize(sentence)\n\n# Get the features from the tokens\ncount_vect = CountVectorizer()\nword_count = count_vect.fit_transform(tokens)\n\n# Create a Multinomial Naive Bayes classifier\nclf = MultinomialNB().fit(word_count, ['positive'])\n\n# Predict the sentiment of the sentence\nprediction = clf.predict(word_count)\n\n# Print the result\nprint(f'The sentiment of the sentence is {prediction[0]}.')","tok_input_length":197,"tok_output_length":140,"system_prompt":"","index":5649}
{"question":"Generate a Python script to shuffle a list of numbers.","input":"[1,2,3,4,5]","expected_output":"import random\n\ndef shuffle_list(numbers): \n    # Create a copy of the list to avoid mutating the original list\n    shuffled_list = list(numbers)\n    # Iterate over the list\n    for i in range(len(shuffled_list)):\n        # Generate a random index for the current position\n        rand_index = random.randint(0, len(shuffled_list)-1)\n        # Swap the two elements\n        shuffled_list[i], shuffled_list[rand_index] = shuffled_list[rand_index], shuffled_list[i]\n    \n    return shuffled_list\n\nexample_list = [1,2,3,4,5]\nprint(shuffle_list(example_list)) # Output: [3, 2, 5, 1, 4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to shuffle a list of numbers.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\nimport random\n\ndef shuffle_list(numbers): \n    # Create a copy of the list to avoid mutating the original list\n    shuffled_list = list(numbers)\n    # Iterate over the list\n    for i in range(len(shuffled_list)):\n        # Generate a random index for the current position\n        rand_index = random.randint(0, len(shuffled_list)-1)\n        # Swap the two elements\n        shuffled_list[i], shuffled_list[rand_index] = shuffled_list[rand_index], shuffled_list[i]\n    \n    return shuffled_list\n\nexample_list = [1,2,3,4,5]\nprint(shuffle_list(example_list)) # Output: [3, 2, 5, 1, 4]","tok_input_length":197,"tok_output_length":148,"system_prompt":"","index":18416}
{"question":"Generate a Python class to represent a deck of cards in a card game.","input":"","expected_output":"class Deck:\n    \n    #constructor\n    def __init__(self):\n        self.cards = []\n\n    #function to create a deck of playing cards\n    def create_deck(self):\n        suits = [\"C\", \"S\", \"H\", \"D\"]\n        ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n\n        for suit in suits:\n            for rank in ranks:\n                card = (rank, suit)\n                self.cards.append(card)\n\n     #function to draw a card from the deck\n    def draw_card(self):\n        if self.cards:\n            return self.cards.pop()\n        else:\n            return None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to represent a deck of cards in a card game.\n\n### Input:\n\n\n### Output:\nclass Deck:\n    \n    #constructor\n    def __init__(self):\n        self.cards = []\n\n    #function to create a deck of playing cards\n    def create_deck(self):\n        suits = [\"C\", \"S\", \"H\", \"D\"]\n        ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n\n        for suit in suits:\n            for rank in ranks:\n                card = (rank, suit)\n                self.cards.append(card)\n\n     #function to draw a card from the deck\n    def draw_card(self):\n        if self.cards:\n            return self.cards.pop()\n        else:\n            return None","tok_input_length":197,"tok_output_length":155,"system_prompt":"","index":7880}
{"question":"Optimize the following function in Python to improve its efficiency.","input":"def Fibonacci(n): \n    var1, var2 = 0, 1\n    while var1 < n:\n        print(var1, end=' ') \n        var1, var2 = var2, var1 + var2","expected_output":"def Fibonacci(n): \n    var1, var2 = 0, 1\n    while var1 < n:\n        print(var1, end=' ') \n        var1, var2 = var2, var1 + var2\n    return\n\ndef FibonacciFast(n): \n    result = []\n    var1, var2 = 0, 1\n    while var1 < n:\n        result.append(var1)\n        var1, var2 = var2, var1 + var2\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following function in Python to improve its efficiency.\n\n### Input:\ndef Fibonacci(n): \n    var1, var2 = 0, 1\n    while var1 < n:\n        print(var1, end=' ') \n        var1, var2 = var2, var1 + var2\n\n### Output:\ndef Fibonacci(n): \n    var1, var2 = 0, 1\n    while var1 < n:\n        print(var1, end=' ') \n        var1, var2 = var2, var1 + var2\n    return\n\ndef FibonacciFast(n): \n    result = []\n    var1, var2 = 0, 1\n    while var1 < n:\n        result.append(var1)\n        var1, var2 = var2, var1 + var2\n    return result","tok_input_length":198,"tok_output_length":109,"system_prompt":"","index":15973}
{"question":"Write a Python function to implement an algorithm.","input":"Algorithm: Given an array of positive and negative numbers, find the largest subarray with sum less than or equal to 0.","expected_output":"def largestSubarray(arr):\n    max_len = 0\n    curr_sum = 0\n    max_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n            end = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n        if max_sum <= 0:\n            curr_len = end - start + 1\n            if curr_len > max_len:\n                max_len = curr_len\n    return max_len","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to implement an algorithm.\n\n### Input:\nAlgorithm: Given an array of positive and negative numbers, find the largest subarray with sum less than or equal to 0.\n\n### Output:\ndef largestSubarray(arr):\n    max_len = 0\n    curr_sum = 0\n    max_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n            end = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n        if max_sum <= 0:\n            curr_len = end - start + 1\n            if curr_len > max_len:\n                max_len = curr_len\n    return max_len","tok_input_length":198,"tok_output_length":136,"system_prompt":"","index":16233}
{"question":"Create a Python script that evaluates an expression using a stack-based algorithm.","input":"Expression: 5+3*4","expected_output":"def eval_expr(expr):\n stack = []\n tokens = expr.split()\n \n for token in tokens:\n if token == '+':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n1 + n2)\n elif token == '-':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n2 - n1)\n elif token == '*':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n1 * n2)\n elif token == '\/':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n2 \/ n1)\n else:\n stack.append(int(token))\n \n return stack[0]\n\nprint(eval_expr('5 + 3 * 4')) # 17","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that evaluates an expression using a stack-based algorithm.\n\n### Input:\nExpression: 5+3*4\n\n### Output:\ndef eval_expr(expr):\n stack = []\n tokens = expr.split()\n \n for token in tokens:\n if token == '+':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n1 + n2)\n elif token == '-':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n2 - n1)\n elif token == '*':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n1 * n2)\n elif token == '\/':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n2 \/ n1)\n else:\n stack.append(int(token))\n \n return stack[0]\n\nprint(eval_expr('5 + 3 * 4')) # 17","tok_input_length":198,"tok_output_length":148,"system_prompt":"","index":16632}
{"question":"Create a web scraper that extracts specific data from a given website.","input":"","expected_output":"The web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored.\n\nFor example, to extract the URL from a list of webpages, the following code snippet can be used:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the web page\nwebpage = requests.get(\"<url_of_webpage>\")\n\n# Parse the web page\nsoup = BeautifulSoup(webpage.content, 'html.parser')\n\n# Find all 'a' tags\nlinks = soup.find_all('a')\n\n# Extract the URLs in the 'href' attribute\nfor link in links:\n    print(link.get('href'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper that extracts specific data from a given website.\n\n### Input:\n\n\n### Output:\nThe web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored.\n\nFor example, to extract the URL from a list of webpages, the following code snippet can be used:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the web page\nwebpage = requests.get(\"<url_of_webpage>\")\n\n# Parse the web page\nsoup = BeautifulSoup(webpage.content, 'html.parser')\n\n# Find all 'a' tags\nlinks = soup.find_all('a')\n\n# Extract the URLs in the 'href' attribute\nfor link in links:\n    print(link.get('href'))","tok_input_length":198,"tok_output_length":158,"system_prompt":"","index":220}
{"question":"Write a Python program to calculate a value from a given sequence of numbers. The program should calculate the sum of the sequence elements and return the sum of the squares of the odd numbers from the sequence.","input":"sequence = [2, 4, 5, 6, 7]","expected_output":"def calc_sum(sequence):\n sum = 0\n for num in sequence:\n sum += num\n return sum\n\ndef calc_sum_squares(sequence):\n sum = 0\n for num in sequence:\n  if num % 2 == 1:\n   sum += num * num\n return sum\n\nsequence = [2, 4, 5, 6, 7]\ntotal_sum = calc_sum(sequence)\nsum_squares = calc_sum_squares(sequence)\n\nprint(\"Total sum:\", total_sum)\nprint(\"Sum of squares of odd numbers:\", sum_squares)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate a value from a given sequence of numbers. The program should calculate the sum of the sequence elements and return the sum of the squares of the odd numbers from the sequence.\n\n### Input:\nsequence = [2, 4, 5, 6, 7]\n\n### Output:\ndef calc_sum(sequence):\n sum = 0\n for num in sequence:\n sum += num\n return sum\n\ndef calc_sum_squares(sequence):\n sum = 0\n for num in sequence:\n  if num % 2 == 1:\n   sum += num * num\n return sum\n\nsequence = [2, 4, 5, 6, 7]\ntotal_sum = calc_sum(sequence)\nsum_squares = calc_sum_squares(sequence)\n\nprint(\"Total sum:\", total_sum)\nprint(\"Sum of squares of odd numbers:\", sum_squares)","tok_input_length":199,"tok_output_length":115,"system_prompt":"","index":3130}
{"question":"Design a Python program to sort a list of integers in descending order","input":"Input_list = [1, 6, 2, 4, 5, 3]","expected_output":"Input_list = [1, 6, 2, 4, 5, 3] \n\n# Using Bubble Sort to sort the list \ndef sort_list_descending(Input_list): \n    for i in range(0, len(Input_list)-1): \n        for j in range(0, len(Input_list)-i-1): \n            if Input_list[j] < Input_list[j+1]:\n                Input_list[j], Input_list[j+1]  = Input_list[j+1], Input_list[j] \n    return Input_list   \n  \n# Print the sorted list  \nsorted_list = sort_list_descending(Input_list) \nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to sort a list of integers in descending order\n\n### Input:\nInput_list = [1, 6, 2, 4, 5, 3]\n\n### Output:\nInput_list = [1, 6, 2, 4, 5, 3] \n\n# Using Bubble Sort to sort the list \ndef sort_list_descending(Input_list): \n    for i in range(0, len(Input_list)-1): \n        for j in range(0, len(Input_list)-i-1): \n            if Input_list[j] < Input_list[j+1]:\n                Input_list[j], Input_list[j+1]  = Input_list[j+1], Input_list[j] \n    return Input_list   \n  \n# Print the sorted list  \nsorted_list = sort_list_descending(Input_list) \nprint(sorted_list)","tok_input_length":199,"tok_output_length":137,"system_prompt":"","index":15079}
{"question":"Create a Python script to classify a given set of tweets based on whether or not they contain hate speech.","input":"Not applicable","expected_output":"# import necessary packages\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in data\ndata = pd.read_csv('tweets.csv')\n\n# transform data into feature vector\nvect = CountVectorizer()\nX = vect.fit_transform(data.tweet)\n\n# define target\ny = data.label\n\n# train model\nmodel = MultinomialNB()\nmodel.fit(X,y)\n\n# classify new tweets\nnew_tweets = [\"You are so stupid\", \"I totally hate you\"]\nX_new = vect.transform(new_tweets)\ny_pred = model.predict(X_new)\nprint(y_pred)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to classify a given set of tweets based on whether or not they contain hate speech.\n\n### Input:\nNot applicable\n\n### Output:\n# import necessary packages\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in data\ndata = pd.read_csv('tweets.csv')\n\n# transform data into feature vector\nvect = CountVectorizer()\nX = vect.fit_transform(data.tweet)\n\n# define target\ny = data.label\n\n# train model\nmodel = MultinomialNB()\nmodel.fit(X,y)\n\n# classify new tweets\nnew_tweets = [\"You are so stupid\", \"I totally hate you\"]\nX_new = vect.transform(new_tweets)\ny_pred = model.predict(X_new)\nprint(y_pred)","tok_input_length":199,"tok_output_length":148,"system_prompt":"","index":17935}
{"question":"Develop a machine learning model in Python to detect the presence of pneumonia in chest X-rays.","input":"","expected_output":"from tensorflow.keras import layers\nfrom tensorflow.keras import models\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 1)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(2, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop',metrics=['accuracy'])\nmodel.fit(...)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python to detect the presence of pneumonia in chest X-rays.\n\n### Input:\n\n\n### Output:\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import models\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 1)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(2, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop',metrics=['accuracy'])\nmodel.fit(...)","tok_input_length":199,"tok_output_length":154,"system_prompt":"","index":17511}
{"question":"Write a Python program to implement K-Means clustering. The program should take two mandatory arguments, k and data, where k is the number of clusters and data is a 2D array containing the data points.","input":"k = 3\ndata = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]","expected_output":"import numpy as np\nfrom sklearn.cluster import KMeans\n\ndef kmeans(k, data):\n    kmeans = KMeans(k)\n    kmeans.fit(data)\n    return kmeans.labels_\n\nk = 3\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\ncluster_labels = kmeans(k, data)\nprint(cluster_labels)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement K-Means clustering. The program should take two mandatory arguments, k and data, where k is the number of clusters and data is a 2D array containing the data points.\n\n### Input:\nk = 3\ndata = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n\n### Output:\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\ndef kmeans(k, data):\n    kmeans = KMeans(k)\n    kmeans.fit(data)\n    return kmeans.labels_\n\nk = 3\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\ncluster_labels = kmeans(k, data)\nprint(cluster_labels)","tok_input_length":200,"tok_output_length":92,"system_prompt":"","index":6608}
{"question":"Implement a sorting algorithm in Python for an array of 10 numbers.","input":"[4, 2, 9, 6, 1, 7, 10, 5, 8, 3]","expected_output":"def sort(arr):\n #loop over the array and compare every item \n for i in range(len(arr)):\n  minIdx = i\n  # Compare with each element after current item\n  for j in range(i + 1, len(arr)):\n  if arr[j] < arr[minIdx]:\n   minIdx = j\n  # Swap the found minimum element with current minimum \n  arr[i], arr[minIdx] = arr[minIdx], arr[i]\n\n return arr\n\nprint(sort([4, 2, 9, 6, 1, 7, 10, 5, 8, 3]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm in Python for an array of 10 numbers.\n\n### Input:\n[4, 2, 9, 6, 1, 7, 10, 5, 8, 3]\n\n### Output:\ndef sort(arr):\n #loop over the array and compare every item \n for i in range(len(arr)):\n  minIdx = i\n  # Compare with each element after current item\n  for j in range(i + 1, len(arr)):\n  if arr[j] < arr[minIdx]:\n   minIdx = j\n  # Swap the found minimum element with current minimum \n  arr[i], arr[minIdx] = arr[minIdx], arr[i]\n\n return arr\n\nprint(sort([4, 2, 9, 6, 1, 7, 10, 5, 8, 3]))","tok_input_length":200,"tok_output_length":129,"system_prompt":"","index":16018}
{"question":"Develop a Python program to find and print all the sublists in a given list.","input":"[1, 2, 3, 4]","expected_output":"def find_sublists(my_list):\n # Initialize result \n res = [[]]  \n # Consider each element of the original list  \n for elements in my_list: \n  # Initialize temp \n  temp = []  \n  \n  # Store current element in temp \n  temp.append(elements) \n  \n  # For every element in the result, add the \n  # current element - temp \n  for r in res: \n   new_r = r + temp \n   res.append(new_r) \n   \n  # Print the result \n  for r in res: \n   print(r)          \n\n# Driver code \nmy_list = [1, 2, 3, 4] \n\nfind_sublists(my_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to find and print all the sublists in a given list.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef find_sublists(my_list):\n # Initialize result \n res = [[]]  \n # Consider each element of the original list  \n for elements in my_list: \n  # Initialize temp \n  temp = []  \n  \n  # Store current element in temp \n  temp.append(elements) \n  \n  # For every element in the result, add the \n  # current element - temp \n  for r in res: \n   new_r = r + temp \n   res.append(new_r) \n   \n  # Print the result \n  for r in res: \n   print(r)          \n\n# Driver code \nmy_list = [1, 2, 3, 4] \n\nfind_sublists(my_list)","tok_input_length":200,"tok_output_length":144,"system_prompt":"","index":2632}
{"question":"Using Machine Learning algorithms, build a Python program that will classify a given set of hand-written digits.","input":"Not applicable","expected_output":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm, datasets\n\n#import data\ndigits = datasets.load_digits()\n\n#split data into training and testing sets\nX_train = digits.data[:-10]\ny_train = digits.target[:-10]\nX_test = digits.data[-10:]\ny_test = digits.target[-10:]\n\n#train model\nclf = svm.SVC(gamma = 0.001, C = 100)\nclf.fit(X_train, y_train)\n\n#evaluate model\nscore = clf.score(X_test, y_test)\n\n#predict classes\ny_pred = clf.predict(X_test)\n\n#visualize results\nplt.imsave(\"prediction.png\", digits.images[-10])\n\nprint(score)\nprint(y_pred)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Machine Learning algorithms, build a Python program that will classify a given set of hand-written digits.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm, datasets\n\n#import data\ndigits = datasets.load_digits()\n\n#split data into training and testing sets\nX_train = digits.data[:-10]\ny_train = digits.target[:-10]\nX_test = digits.data[-10:]\ny_test = digits.target[-10:]\n\n#train model\nclf = svm.SVC(gamma = 0.001, C = 100)\nclf.fit(X_train, y_train)\n\n#evaluate model\nscore = clf.score(X_test, y_test)\n\n#predict classes\ny_pred = clf.predict(X_test)\n\n#visualize results\nplt.imsave(\"prediction.png\", digits.images[-10])\n\nprint(score)\nprint(y_pred)","tok_input_length":200,"tok_output_length":150,"system_prompt":"","index":13970}
{"question":"Create an algorithm to detect plagiarism in text using natural language processing in Python.","input":"Not applicable","expected_output":"import nltk\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Function to tokenize text into words\ndef tokenize_text(text):\n tokens = nltk.word_tokenize(text)\n return tokens\n\n# Create TF-IDF vectorizer\nvectorizer = TfidfVectorizer(tokenizer=tokenize_text)\n\n# Calculate cosine similarity score between two texts\ndef calculate_similarity(text1, text2):\n vector = vectorizer.fit_transform([text1, text2])\n return ((vector * vector.T).A)[0,1]\n\n# Detect plagiarism based on similarity score\ndef detect_plagiarism(text1, text2, similarity_threshold=0.8):\n similarity_score = calculate_similarity(text1, text2)\n \n if similarity_score > similarity_threshold:\n return True\n else:\n return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to detect plagiarism in text using natural language processing in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Function to tokenize text into words\ndef tokenize_text(text):\n tokens = nltk.word_tokenize(text)\n return tokens\n\n# Create TF-IDF vectorizer\nvectorizer = TfidfVectorizer(tokenizer=tokenize_text)\n\n# Calculate cosine similarity score between two texts\ndef calculate_similarity(text1, text2):\n vector = vectorizer.fit_transform([text1, text2])\n return ((vector * vector.T).A)[0,1]\n\n# Detect plagiarism based on similarity score\ndef detect_plagiarism(text1, text2, similarity_threshold=0.8):\n similarity_score = calculate_similarity(text1, text2)\n \n if similarity_score > similarity_threshold:\n return True\n else:\n return False","tok_input_length":200,"tok_output_length":155,"system_prompt":"","index":5315}
{"question":"Develop a Python script to calculate the cosine similarity between two word vectors.","input":"[0.5, 0.2, 0.7, 0.8]\n[0.9, 0.6, 0.1, 0.2]","expected_output":"import numpy as np \n  \na = np.array([0.5, 0.2, 0.7, 0.8]) \nb = np.array([0.9, 0.6, 0.1, 0.2]) \n  \ndef cos_sim(a, b): \n    dot_product = np.dot(a, b) \n    norm_a = np.linalg.norm(a) \n    norm_b = np.linalg.norm(b) \n    return dot_product \/ (norm_a * norm_b) \n  \nresult = cos_sim(a, b) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to calculate the cosine similarity between two word vectors.\n\n### Input:\n[0.5, 0.2, 0.7, 0.8]\n[0.9, 0.6, 0.1, 0.2]\n\n### Output:\nimport numpy as np \n  \na = np.array([0.5, 0.2, 0.7, 0.8]) \nb = np.array([0.9, 0.6, 0.1, 0.2]) \n  \ndef cos_sim(a, b): \n    dot_product = np.dot(a, b) \n    norm_a = np.linalg.norm(a) \n    norm_b = np.linalg.norm(b) \n    return dot_product \/ (norm_a * norm_b) \n  \nresult = cos_sim(a, b) \nprint(result)","tok_input_length":201,"tok_output_length":120,"system_prompt":"","index":7004}
{"question":"Create a Python algorithm to demonstrate a most efficient way to find the minimum index of a given number in an array.","input":"arr = [3,4,1,5,2]\nnum = 5","expected_output":"arr = [3,4,1,5,2]\n\n# Function to find the minimum index \ndef minIndex(arr, num): \n    minIndex = -1\n    min_val = float('inf') \n  \n    # Find the minimum index \n    for j in range(0, len(arr)):  \n        if num == arr[j] and min_val > j: \n            min_val = j \n            minIndex = min_val  \n  \n    return minIndex \n\n# Driver Code \nnum = 5\nprint(minIndex(arr, num)) # Output: 3 (i.e. minimum index of 5 is 3 in array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to demonstrate a most efficient way to find the minimum index of a given number in an array.\n\n### Input:\narr = [3,4,1,5,2]\nnum = 5\n\n### Output:\narr = [3,4,1,5,2]\n\n# Function to find the minimum index \ndef minIndex(arr, num): \n    minIndex = -1\n    min_val = float('inf') \n  \n    # Find the minimum index \n    for j in range(0, len(arr)):  \n        if num == arr[j] and min_val > j: \n            min_val = j \n            minIndex = min_val  \n  \n    return minIndex \n\n# Driver Code \nnum = 5\nprint(minIndex(arr, num)) # Output: 3 (i.e. minimum index of 5 is 3 in array)","tok_input_length":201,"tok_output_length":133,"system_prompt":"","index":13769}
{"question":"Develop an algorithm in Python for reversing a given linked list.","input":"Linked List: 3 -> 5 -> 7 -> 8","expected_output":"def reverseLinkedList(head):\n    curr = head \n    prev = None\n    while (curr != None): \n        temp = curr.next\n        curr.next = prev \n        prev = curr \n        curr = temp\n    head = prev\n    return head\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Create a Linked list \nhead1 = Node(3)\nhead1.next = Node(5)\nhead1.next.next = Node(7)\nhead1.next.next.next = Node(8)\n\nhead1 = reverseLinkedList(head1)\n\ntemp = head1\nwhile(temp != None):\n    print temp.data,\n    temp = temp.next","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python for reversing a given linked list.\n\n### Input:\nLinked List: 3 -> 5 -> 7 -> 8\n\n### Output:\ndef reverseLinkedList(head):\n    curr = head \n    prev = None\n    while (curr != None): \n        temp = curr.next\n        curr.next = prev \n        prev = curr \n        curr = temp\n    head = prev\n    return head\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Create a Linked list \nhead1 = Node(3)\nhead1.next = Node(5)\nhead1.next.next = Node(7)\nhead1.next.next.next = Node(8)\n\nhead1 = reverseLinkedList(head1)\n\ntemp = head1\nwhile(temp != None):\n    print temp.data,\n    temp = temp.next","tok_input_length":201,"tok_output_length":147,"system_prompt":"","index":13587}
{"question":"Create a program in Python to scrape all pages of a website and extract all URLs and titles.","input":"","expected_output":"import requests\nimport re\nfrom bs4 import BeautifulSoup\n\ndef scrape_all_pages(url):\n    urls = []\n    titles = []\n    \n    while url:\n        response = requests.get(url)\n        html = response.text\n        soup = BeautifulSoup(html, 'html.parser')\n        for link in soup.find_all('a'):\n            if link.has_attr('href'):\n                absolute_url = link['href']\n                if re.match('^http', absolute_url):\n                    urls.append(absolute_url)\n                    titles.append(link.string)\n        url = soup.find('a', rel=\"next\")\n        if url:\n            url = url['href']\n    return urls, titles\n\nif __name__ == '__main__':\n    print(scrape_all_pages('https:\/\/www.example.com\/'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to scrape all pages of a website and extract all URLs and titles.\n\n### Input:\n\n\n### Output:\nimport requests\nimport re\nfrom bs4 import BeautifulSoup\n\ndef scrape_all_pages(url):\n    urls = []\n    titles = []\n    \n    while url:\n        response = requests.get(url)\n        html = response.text\n        soup = BeautifulSoup(html, 'html.parser')\n        for link in soup.find_all('a'):\n            if link.has_attr('href'):\n                absolute_url = link['href']\n                if re.match('^http', absolute_url):\n                    urls.append(absolute_url)\n                    titles.append(link.string)\n        url = soup.find('a', rel=\"next\")\n        if url:\n            url = url['href']\n    return urls, titles\n\nif __name__ == '__main__':\n    print(scrape_all_pages('https:\/\/www.example.com\/'))","tok_input_length":201,"tok_output_length":155,"system_prompt":"","index":14844}
{"question":"Write a Python program that implements a dataset augmentation technique to increase the size of a given dataset.","input":"Sample Dataset (Python nested lists):\n\n[\n    [1,1,1],\n    [2,2,2],\n    [3,3,3],\n    [4,4,4]\n]","expected_output":"import random\n\nsample_dataset = [\n    [1,1,1],\n    [2,2,2],\n    [3,3,3],\n    [4,4,4]\n]\n\ndef data_augmentation(dataset):\n augmented_dataset = []\n for data in dataset:\n augmented_row = list(data)\n augmented_row.append(random.randint(-1,1))\n augmented_dataset.append(augmented_row)\n return augmented_dataset\n\naugmented_dataset = data_augmentation(sample_dataset)\n\nprint('Sample dataset:')\nprint(sample_dataset)\nprint('Augmented dataset:')\nprint(augmented_dataset)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that implements a dataset augmentation technique to increase the size of a given dataset.\n\n### Input:\nSample Dataset (Python nested lists):\n\n[\n    [1,1,1],\n    [2,2,2],\n    [3,3,3],\n    [4,4,4]\n]\n\n### Output:\nimport random\n\nsample_dataset = [\n    [1,1,1],\n    [2,2,2],\n    [3,3,3],\n    [4,4,4]\n]\n\ndef data_augmentation(dataset):\n augmented_dataset = []\n for data in dataset:\n augmented_row = list(data)\n augmented_row.append(random.randint(-1,1))\n augmented_dataset.append(augmented_row)\n return augmented_dataset\n\naugmented_dataset = data_augmentation(sample_dataset)\n\nprint('Sample dataset:')\nprint(sample_dataset)\nprint('Augmented dataset:')\nprint(augmented_dataset)","tok_input_length":202,"tok_output_length":115,"system_prompt":"","index":15456}
{"question":"Design a python program to print out the maximum and minimum numbers in a given list.","input":"list = [5, 2, 8, 9, 3, 6, 1]","expected_output":"# Find Maximum and Minimum using python \ndef maxMin(list):\n    max = list[0]\n    min = list[0]\n    for i in range(len(list)): \n        if list[i] > max: \n            max = list[i] \n        if list[i] < min: \n            min = list[i] \n    return max, min \n  \n# Main Program \nlist = [5, 2, 8, 9, 3, 6, 1] \nmaximum, minimum = maxMin(list) \n  \nprint(\"Maximum number is: {}\".format(maximum)) \nprint(\"Minimum number is: {}\".format(minimum))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to print out the maximum and minimum numbers in a given list.\n\n### Input:\nlist = [5, 2, 8, 9, 3, 6, 1]\n\n### Output:\n# Find Maximum and Minimum using python \ndef maxMin(list):\n    max = list[0]\n    min = list[0]\n    for i in range(len(list)): \n        if list[i] > max: \n            max = list[i] \n        if list[i] < min: \n            min = list[i] \n    return max, min \n  \n# Main Program \nlist = [5, 2, 8, 9, 3, 6, 1] \nmaximum, minimum = maxMin(list) \n  \nprint(\"Maximum number is: {}\".format(maximum)) \nprint(\"Minimum number is: {}\".format(minimum))","tok_input_length":202,"tok_output_length":135,"system_prompt":"","index":3967}
{"question":"Build a classifier in Python using scikit-learn that identifies the type of flower (iris) provided with features such as petal length and width.","input":"","expected_output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = pd.read_csv('iris.csv')\n\n# Define X and y\nX = data.drop('species', axis=1)\ny = data['species']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Build the decision tree classifier\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Evaluate the classifier\nscore = classifier.score(X_test, y_test)\nprint('Classifier accuracy: ', score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a classifier in Python using scikit-learn that identifies the type of flower (iris) provided with features such as petal length and width.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = pd.read_csv('iris.csv')\n\n# Define X and y\nX = data.drop('species', axis=1)\ny = data['species']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Build the decision tree classifier\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Evaluate the classifier\nscore = classifier.score(X_test, y_test)\nprint('Classifier accuracy: ', score)","tok_input_length":202,"tok_output_length":145,"system_prompt":"","index":3012}
{"question":"Generate a Python function that takes two three-dimensional vectors as parameters and computes the magnitude of the cross product.","input":"Not applicable","expected_output":"def cross_product_magnitude(vector_a, vector_b):\n \"\"\" Calculate the magnitude of the cross product of two 3D vectors \"\"\"\n vector_a_x, vector_a_y, vector_a_z = vector_a\n vector_b_x, vector_b_y, vector_b_z = vector_b\n \n # Calculate the cross product\n cross_x = vector_a_y * vector_b_z - vector_a_z * vector_b_y\n cross_y = vector_a_z * vector_b_x - vector_a_x * vector_b_z\n cross_z = vector_a_x * vector_b_y - vector_a_y * vector_b_x\n \n # Calculate the magnitude\n magnitude = math.sqrt(cross_x ** 2 + cross_y ** 2 + cross_z ** 2)\n \n return magnitude","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes two three-dimensional vectors as parameters and computes the magnitude of the cross product.\n\n### Input:\nNot applicable\n\n### Output:\ndef cross_product_magnitude(vector_a, vector_b):\n \"\"\" Calculate the magnitude of the cross product of two 3D vectors \"\"\"\n vector_a_x, vector_a_y, vector_a_z = vector_a\n vector_b_x, vector_b_y, vector_b_z = vector_b\n \n # Calculate the cross product\n cross_x = vector_a_y * vector_b_z - vector_a_z * vector_b_y\n cross_y = vector_a_z * vector_b_x - vector_a_x * vector_b_z\n cross_z = vector_a_x * vector_b_y - vector_a_y * vector_b_x\n \n # Calculate the magnitude\n magnitude = math.sqrt(cross_x ** 2 + cross_y ** 2 + cross_z ** 2)\n \n return magnitude","tok_input_length":202,"tok_output_length":151,"system_prompt":"","index":13784}
{"question":"Design a script in Python to scrape photos and captions from a given website.","input":"","expected_output":"\"\"\"\nScript to scrape photos and captions from a given website\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML source code\nurl = 'https:\/\/example.com\/webpage'\nreq = requests.get(url)\nhtml = req.text\n\n# Parse HTML source and extract photo and caption\nsoup = BeautifulSoup(html, features='lxml')\nimage_divs = soup.find_all('div', {'class': 'image-gallery__image'})\n\nfor image_div in image_divs:\n    figure = image_div.find('figure')\n    src = figure.find('img')['src']\n    caption = figure.find('figcaption')\n    print('Photo: ', src)\n    if caption:\n        print('Caption: ', caption.text)\n    else:\n        print('No caption')\n    print('\\n')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a script in Python to scrape photos and captions from a given website.\n\n### Input:\n\n\n### Output:\n\"\"\"\nScript to scrape photos and captions from a given website\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML source code\nurl = 'https:\/\/example.com\/webpage'\nreq = requests.get(url)\nhtml = req.text\n\n# Parse HTML source and extract photo and caption\nsoup = BeautifulSoup(html, features='lxml')\nimage_divs = soup.find_all('div', {'class': 'image-gallery__image'})\n\nfor image_div in image_divs:\n    figure = image_div.find('figure')\n    src = figure.find('img')['src']\n    caption = figure.find('figcaption')\n    print('Photo: ', src)\n    if caption:\n        print('Caption: ', caption.text)\n    else:\n        print('No caption')\n    print('\\n')","tok_input_length":202,"tok_output_length":160,"system_prompt":"","index":522}
{"question":"Implement a decision tree classifier in Python using the scikit-learn library to predict whether a person will purchase an item (1) or not (0).","input":"A dataset of features including age, gender, and job type of a person.","expected_output":"from sklearn.tree import DecisionTreeClassifier\nimport pandas as pd\n\n# Read in the data\ndata = pd.read_csv('data.csv')\n\n# Split the data into target (purchase or not) and features\nX = data.iloc[:, 0:-1]\ny = data.iloc[:,-1]\n\n# Create the decision tree classifier\nclf = DecisionTreeClassifier(criterion='entropy')\n\n# Train the classifier\nclf.fit(X, y)\n\n# Make predictions on test data\ny_pred = clf.predict(X)\n\n# Calculate the accuracy of the predictions\nfrom sklearn import metrics\nprint('Accuracy: ', metrics.accuracy_score(y, y_pred))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision tree classifier in Python using the scikit-learn library to predict whether a person will purchase an item (1) or not (0).\n\n### Input:\nA dataset of features including age, gender, and job type of a person.\n\n### Output:\nfrom sklearn.tree import DecisionTreeClassifier\nimport pandas as pd\n\n# Read in the data\ndata = pd.read_csv('data.csv')\n\n# Split the data into target (purchase or not) and features\nX = data.iloc[:, 0:-1]\ny = data.iloc[:,-1]\n\n# Create the decision tree classifier\nclf = DecisionTreeClassifier(criterion='entropy')\n\n# Train the classifier\nclf.fit(X, y)\n\n# Make predictions on test data\ny_pred = clf.predict(X)\n\n# Calculate the accuracy of the predictions\nfrom sklearn import metrics\nprint('Accuracy: ', metrics.accuracy_score(y, y_pred))","tok_input_length":203,"tok_output_length":129,"system_prompt":"","index":12106}
{"question":"Create a Python script that parses the contents of a website and stores the data in a SQLite database.","input":"Example website URL: https:\/\/example.com\/","expected_output":"import sqlite3\nimport requests\nfrom bs4 import BeautifulSoup\n\n# create sqlite3 DB\nconn = sqlite3.connect('example.db')\ncur = conn.cursor()\n\ncur.execute('CREATE TABLE IF NOT EXISTS ExampleTable (title TEXT, url TEXT)')\n\n# get website page contents\nurl = 'https:\/\/example.com\/'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# parse data\nlinks = soup.find_all('a')\nfor link in links:\n title = link.string\n url = link['href']\n\n# insert data into DB\ncur.execute('INSERT INTO ExampleTable VALUES (?, ?)', (title, url))\n\nconn.commit()\nconn.close()\n\nprint('Data successfully stored in example.db')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that parses the contents of a website and stores the data in a SQLite database.\n\n### Input:\nExample website URL: https:\/\/example.com\/\n\n### Output:\nimport sqlite3\nimport requests\nfrom bs4 import BeautifulSoup\n\n# create sqlite3 DB\nconn = sqlite3.connect('example.db')\ncur = conn.cursor()\n\ncur.execute('CREATE TABLE IF NOT EXISTS ExampleTable (title TEXT, url TEXT)')\n\n# get website page contents\nurl = 'https:\/\/example.com\/'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# parse data\nlinks = soup.find_all('a')\nfor link in links:\n title = link.string\n url = link['href']\n\n# insert data into DB\ncur.execute('INSERT INTO ExampleTable VALUES (?, ?)', (title, url))\n\nconn.commit()\nconn.close()\n\nprint('Data successfully stored in example.db')","tok_input_length":203,"tok_output_length":147,"system_prompt":"","index":10128}
{"question":"Write a Python code to perform a cross-validation on a KNN classifier","input":"","expected_output":"import numpy as np\nfrom sklearn.model_selection import KFold\n \n# Define the 5 fold cross-validation\nkfold = KFold(n_splits=5, shuffle=True, random_state=1)\n \n# Generate the k-folds\nsplits = kfold.split(X)\n \nfor train_idx, val_idx in splits:\n    # Generate training and validation sets\n    X_train, y_train = X[train_idx], y[train_idx]\n    X_val, y_val = X[val_idx], y[val_idx]\n \n    # Initialize the model\n    model = KNeighborsClassifier()\n \n    # Fit the model on the training set\n    model.fit(X_train, y_train)\n    \n    # Score the model on the validation set\n    score = model.score(X_val, y_val)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to perform a cross-validation on a KNN classifier\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.model_selection import KFold\n \n# Define the 5 fold cross-validation\nkfold = KFold(n_splits=5, shuffle=True, random_state=1)\n \n# Generate the k-folds\nsplits = kfold.split(X)\n \nfor train_idx, val_idx in splits:\n    # Generate training and validation sets\n    X_train, y_train = X[train_idx], y[train_idx]\n    X_val, y_val = X[val_idx], y[val_idx]\n \n    # Initialize the model\n    model = KNeighborsClassifier()\n \n    # Fit the model on the training set\n    model.fit(X_train, y_train)\n    \n    # Score the model on the validation set\n    score = model.score(X_val, y_val)","tok_input_length":203,"tok_output_length":161,"system_prompt":"","index":9951}
{"question":"Write a Python program that calculates the total amount of a particular item in a list.","input":"list = [{ \"item\": \"apple\", \"quantity\": 5, \"price\": 2 }, \n        { \"item\": \"bread\", \"quantity\": 2, \"price\": 3 }]","expected_output":"def total_amount(lst): \n \n    # Initializing total \n    total = 0\n \n    # Iterate through each dictionary \n    # and calculate total  \n    for dic in lst: \n        total += (dic['quantity'] * dic['price']) \n \n    # Returning total \n    return total \n \n# Driver Code \nlst = [{ \"item\": \"apple\", \"quantity\": 5, \"price\": 2 }, \n        { \"item\": \"bread\", \"quantity\": 2, \"price\": 3 }] \nprint(\"Total Amount :\", total_amount(lst))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that calculates the total amount of a particular item in a list.\n\n### Input:\nlist = [{ \"item\": \"apple\", \"quantity\": 5, \"price\": 2 }, \n        { \"item\": \"bread\", \"quantity\": 2, \"price\": 3 }]\n\n### Output:\ndef total_amount(lst): \n \n    # Initializing total \n    total = 0\n \n    # Iterate through each dictionary \n    # and calculate total  \n    for dic in lst: \n        total += (dic['quantity'] * dic['price']) \n \n    # Returning total \n    return total \n \n# Driver Code \nlst = [{ \"item\": \"apple\", \"quantity\": 5, \"price\": 2 }, \n        { \"item\": \"bread\", \"quantity\": 2, \"price\": 3 }] \nprint(\"Total Amount :\", total_amount(lst))","tok_input_length":204,"tok_output_length":117,"system_prompt":"","index":15138}
{"question":"Create a Twitter bot using Python that automatically retweets posts based on the user's profile.","input":"A user's profile consists of their interests, hobbies and topics they like to talk about.","expected_output":"import tweepy\nimport time\n\nconsumer_key = 'your consumer key'\nconsumer_secret = 'your consumer secret'\n\naccess_token = 'your access token'\naccess_token_secret = 'your access token secret'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ninterests = ['computers', 'cricket', 'movies'] # interests of the user\n\nwhile True:\n for interest in interests:\n  search = '#' + interest\n  tweets = api.search(search)\n  for tweet in tweets:\n   api.retweet(tweet.id)\n  time.sleep(30) # sleep for 30 seconds","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Twitter bot using Python that automatically retweets posts based on the user's profile.\n\n### Input:\nA user's profile consists of their interests, hobbies and topics they like to talk about.\n\n### Output:\nimport tweepy\nimport time\n\nconsumer_key = 'your consumer key'\nconsumer_secret = 'your consumer secret'\n\naccess_token = 'your access token'\naccess_token_secret = 'your access token secret'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ninterests = ['computers', 'cricket', 'movies'] # interests of the user\n\nwhile True:\n for interest in interests:\n  search = '#' + interest\n  tweets = api.search(search)\n  for tweet in tweets:\n   api.retweet(tweet.id)\n  time.sleep(30) # sleep for 30 seconds","tok_input_length":204,"tok_output_length":141,"system_prompt":"","index":12545}
{"question":"Generate a program in Python to convert a given temperature from Celsius to Fahrenheit and vice-versa.","input":"Given temperature 28 Celsius","expected_output":"# Function to convert temperature from Celsius to Fahrenheit\ndef cToF(celsius):\n   return celsius * 9\/5 + 32\n\n# Function to convert temperature from Fahrenheit to Celsius\ndef fToC(fahrenheit):\n   return (fahrenheit - 32) * 5\/9\n\n# Main code\n# Get input from user\ntemperature = 28\nscale = 'C'\n\n# Convert the temperature to the target scale\nif scale == 'C':\n    output = cToF(temperature)\n    outputScale = 'F'\nelse:\n    output = fToC(temperature)\n    outputScale = 'C'\n    \n# Print the result\nprint(f'{temperature} {scale} is {output} {outputScale}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to convert a given temperature from Celsius to Fahrenheit and vice-versa.\n\n### Input:\nGiven temperature 28 Celsius\n\n### Output:\n# Function to convert temperature from Celsius to Fahrenheit\ndef cToF(celsius):\n   return celsius * 9\/5 + 32\n\n# Function to convert temperature from Fahrenheit to Celsius\ndef fToC(fahrenheit):\n   return (fahrenheit - 32) * 5\/9\n\n# Main code\n# Get input from user\ntemperature = 28\nscale = 'C'\n\n# Convert the temperature to the target scale\nif scale == 'C':\n    output = cToF(temperature)\n    outputScale = 'F'\nelse:\n    output = fToC(temperature)\n    outputScale = 'C'\n    \n# Print the result\nprint(f'{temperature} {scale} is {output} {outputScale}')","tok_input_length":204,"tok_output_length":152,"system_prompt":"","index":12196}
{"question":"Implement a strategy pattern in Python to manage different behaviors for different objects.","input":"Not applicable","expected_output":"class Strategy:\n    \"\"\"The Strategy Pattern class\"\"\"\n\n    def __init__(self, func=None):\n        if func:\n            self.execute = func\n\n    def execute(self):\n        \"\"\"The default method that prints 'Hello world!'\"\"\"\n        print(\"Hello world!\")\n\n# Replace by other strategies\ndef execute_replacement1():\n    print(\"Hola mundo!\")\n\ndef execute_replacement2():\n    print(\"Mere saath kaam kar!\")\n\n# Instantiate the strategy\ns1 = Strategy()\n# Execute the strategy\ns1.execute()\n\n# Create replacement strategy 1\ns2 = Strategy(execute_replacement1)\n# Execute the strategy\ns2.execute()\n\n# Create replacement strategy 2\ns3 = Strategy(execute_replacement2)\n# Execute the strategy\ns3.execute()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a strategy pattern in Python to manage different behaviors for different objects.\n\n### Input:\nNot applicable\n\n### Output:\nclass Strategy:\n    \"\"\"The Strategy Pattern class\"\"\"\n\n    def __init__(self, func=None):\n        if func:\n            self.execute = func\n\n    def execute(self):\n        \"\"\"The default method that prints 'Hello world!'\"\"\"\n        print(\"Hello world!\")\n\n# Replace by other strategies\ndef execute_replacement1():\n    print(\"Hola mundo!\")\n\ndef execute_replacement2():\n    print(\"Mere saath kaam kar!\")\n\n# Instantiate the strategy\ns1 = Strategy()\n# Execute the strategy\ns1.execute()\n\n# Create replacement strategy 1\ns2 = Strategy(execute_replacement1)\n# Execute the strategy\ns2.execute()\n\n# Create replacement strategy 2\ns3 = Strategy(execute_replacement2)\n# Execute the strategy\ns3.execute()","tok_input_length":204,"tok_output_length":160,"system_prompt":"","index":1228}
{"question":"Write a Python program which takes a list as input, finds 3 elements in the list which sum closest to 0 and prints their indices.","input":"[-1, 12, -7, 3, 5, 2, -23]","expected_output":"def find_3sum_closest_to_0(nums):\n min_sum = float('inf')\n min_indices = ()\n for i, num_1 in enumerate(nums):\n for j, num_2 in enumerate(nums[i+1:]):\n for k, num_3 in enumerate(nums[j+i+2:]):\n current_sum = num_1 + num_2 + num_3\n if abs(current_sum) < abs(min_sum):\n min_sum = current_sum\n min_indices = (i, j+i+1, k+j+i+2)\n \n print(min_indices)\n    \nfind_3sum_closest_to_0(nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program which takes a list as input, finds 3 elements in the list which sum closest to 0 and prints their indices.\n\n### Input:\n[-1, 12, -7, 3, 5, 2, -23]\n\n### Output:\ndef find_3sum_closest_to_0(nums):\n min_sum = float('inf')\n min_indices = ()\n for i, num_1 in enumerate(nums):\n for j, num_2 in enumerate(nums[i+1:]):\n for k, num_3 in enumerate(nums[j+i+2:]):\n current_sum = num_1 + num_2 + num_3\n if abs(current_sum) < abs(min_sum):\n min_sum = current_sum\n min_indices = (i, j+i+1, k+j+i+2)\n \n print(min_indices)\n    \nfind_3sum_closest_to_0(nums)","tok_input_length":205,"tok_output_length":128,"system_prompt":"","index":5264}
{"question":"Create a python program to find x-intercept of a quadratic equation ax2 + bx + c = 0.","input":"a = 1, b = 4, c = -5","expected_output":"import math\n\ndef quadratic_x_intercept(a, b, c):\n  discriminant = b**2 - 4*a*c\n  if discriminant >= 0:\n    x1_intercept = (-b+math.sqrt(discriminant))\/(2*a)\n    x2_intercept = (-b-math.sqrt(discriminant))\/(2*a)\n    return x1_intercept, x2_intercept\n  else:\n    return 'No real solutions exist!'\n\na = 1\nb = 4\nc = -5\n\nintercepts = quadratic_x_intercept(a, b, c)\nprint(intercepts)\n# Output (2.0, -2.5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to find x-intercept of a quadratic equation ax2 + bx + c = 0.\n\n### Input:\na = 1, b = 4, c = -5\n\n### Output:\nimport math\n\ndef quadratic_x_intercept(a, b, c):\n  discriminant = b**2 - 4*a*c\n  if discriminant >= 0:\n    x1_intercept = (-b+math.sqrt(discriminant))\/(2*a)\n    x2_intercept = (-b-math.sqrt(discriminant))\/(2*a)\n    return x1_intercept, x2_intercept\n  else:\n    return 'No real solutions exist!'\n\na = 1\nb = 4\nc = -5\n\nintercepts = quadratic_x_intercept(a, b, c)\nprint(intercepts)\n# Output (2.0, -2.5)","tok_input_length":205,"tok_output_length":140,"system_prompt":"","index":4545}
{"question":"Refactor a given Python program to reduce its run time.","input":"A Python program that prints the first 20 prime numbers.","expected_output":"import math\n\ndef is_prime(num):\n    \"\"\"Function to check for prime number\"\"\"\n    if num == 1:\n        return False\n\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef get_first_prime_numbers(limit):\n    \"\"\"Function to get the first limit prime numbers\"\"\"\n    num = 2\n    count = 0\n    prime_numbers = []\n\n    while count < limit:\n        if is_prime(num):\n            prime_numbers.append(num)\n            count += 1\n        num += 1\n\n    return prime_numbers\n\n\n# Get the first 20 prime numbers\nlimit = 20\nprint(get_first_prime_numbers(limit))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor a given Python program to reduce its run time.\n\n### Input:\nA Python program that prints the first 20 prime numbers.\n\n### Output:\nimport math\n\ndef is_prime(num):\n    \"\"\"Function to check for prime number\"\"\"\n    if num == 1:\n        return False\n\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef get_first_prime_numbers(limit):\n    \"\"\"Function to get the first limit prime numbers\"\"\"\n    num = 2\n    count = 0\n    prime_numbers = []\n\n    while count < limit:\n        if is_prime(num):\n            prime_numbers.append(num)\n            count += 1\n        num += 1\n\n    return prime_numbers\n\n\n# Get the first 20 prime numbers\nlimit = 20\nprint(get_first_prime_numbers(limit))","tok_input_length":205,"tok_output_length":154,"system_prompt":"","index":6440}
{"question":"Write a Python program that finds the most frequent letter in a string.","input":"\"foo bar baz foo\"","expected_output":"def most_frequent_letter(str): \n  \n    # break string into characters\n    letters = list(str)\n  \n    # store max freq count\n    max_freq = 0\n  \n    # store character with max_freq\n    max_char = ''\n  \n    # iterate over each letter in the string\n    for letter in letters: \n      \n        # calculate frequency of this particular letter\n        freq = letters.count(letter) \n      \n        # compare and update variables\n        if(freq > max_freq): \n            max_freq = freq\n            max_char = letter\n\n    print(\"Most frequent character: \" + max_char + \" with frequency of: \" + str(max_freq)) \n  \n# test for input string\nstr = \"foo bar baz foo\"\n\nmost_frequent_letter(str)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that finds the most frequent letter in a string.\n\n### Input:\n\"foo bar baz foo\"\n\n### Output:\ndef most_frequent_letter(str): \n  \n    # break string into characters\n    letters = list(str)\n  \n    # store max freq count\n    max_freq = 0\n  \n    # store character with max_freq\n    max_char = ''\n  \n    # iterate over each letter in the string\n    for letter in letters: \n      \n        # calculate frequency of this particular letter\n        freq = letters.count(letter) \n      \n        # compare and update variables\n        if(freq > max_freq): \n            max_freq = freq\n            max_char = letter\n\n    print(\"Most frequent character: \" + max_char + \" with frequency of: \" + str(max_freq)) \n  \n# test for input string\nstr = \"foo bar baz foo\"\n\nmost_frequent_letter(str)","tok_input_length":205,"tok_output_length":158,"system_prompt":"","index":17216}
{"question":"Edit the following Python code to optimize the performance of a function that takes a list of numbers as input and prints the maximum and minimum values.","input":"The input should include a sample piece of Python code for testing and optimizing purposes:\n\ndef print_min_max(numbers):\n    max_num = 0\n    min_num = 0\n    for n in numbers:\n        if n > max_num:\n            max_num = n;\n        if n < min_num:\n            min_num = n;\n    print(\"Max: {0}, Min: {1}\".format(max_num, min_num))","expected_output":"def print_min_max(numbers):\n max_num = min_num = numbers[0]\n for n in numbers[1:]:\n     max_num = max(max_num, n)\n     min_num = min(min_num, n)\n print(\"Max: {0}, Min: {1}\".format(max_num, min_num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to optimize the performance of a function that takes a list of numbers as input and prints the maximum and minimum values.\n\n### Input:\nThe input should include a sample piece of Python code for testing and optimizing purposes:\n\ndef print_min_max(numbers):\n    max_num = 0\n    min_num = 0\n    for n in numbers:\n        if n > max_num:\n            max_num = n;\n        if n < min_num:\n            min_num = n;\n    print(\"Max: {0}, Min: {1}\".format(max_num, min_num))\n\n### Output:\ndef print_min_max(numbers):\n max_num = min_num = numbers[0]\n for n in numbers[1:]:\n     max_num = max(max_num, n)\n     min_num = min(min_num, n)\n print(\"Max: {0}, Min: {1}\".format(max_num, min_num))","tok_input_length":206,"tok_output_length":63,"system_prompt":"","index":16858}
{"question":"Write a Python program to scrape the table at the following URL and extract the planets information (name, mass, and distance from the sun).","input":"URL: https:\/\/en.wikipedia.org\/wiki\/List_of_gravitationally_rounded_objects_of_the_Solar_System","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_gravitationally_rounded_objects_of_the_Solar_System')\nsoup = BeautifulSoup(page.content, 'lxml')\n\nplanets_table = soup.find('table', class_='wikitable sortable')\n\nplanets = []\nfor row in planets_table.find_all('tr'):\n if row.find('th'):\n continue\n cells = row.find_all('td')\n planets.append({\n 'name': cells[0].text,\n 'mass': cells[2].text,\n 'distance_from_sun': cells[5].text\n })\n\nprint(planets)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to scrape the table at the following URL and extract the planets information (name, mass, and distance from the sun).\n\n### Input:\nURL: https:\/\/en.wikipedia.org\/wiki\/List_of_gravitationally_rounded_objects_of_the_Solar_System\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_gravitationally_rounded_objects_of_the_Solar_System')\nsoup = BeautifulSoup(page.content, 'lxml')\n\nplanets_table = soup.find('table', class_='wikitable sortable')\n\nplanets = []\nfor row in planets_table.find_all('tr'):\n if row.find('th'):\n continue\n cells = row.find_all('td')\n planets.append({\n 'name': cells[0].text,\n 'mass': cells[2].text,\n 'distance_from_sun': cells[5].text\n })\n\nprint(planets)","tok_input_length":206,"tok_output_length":128,"system_prompt":"","index":384}
{"question":"Compute the area of a triangle given its three points in Python.","input":"Point1(1, 4) Point2(5, 4) Point3(3, 2)","expected_output":"def triangle_area(Point1, Point2, Point3):\n    #Calculate the area of the triangle\n    x1, y1 = Point1\n    x2, y2 = Point2\n    x3, y3 = Point3\n    area = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))\/2)\n\n    return area\n\nPoint1 = (1, 4)\nPoint2 = (5, 4)\nPoint3 = (3, 2)\n\narea = triangle_area(Point1, Point2, Point3)\nprint(f\"Area of the triangle: {area}units\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the area of a triangle given its three points in Python.\n\n### Input:\nPoint1(1, 4) Point2(5, 4) Point3(3, 2)\n\n### Output:\ndef triangle_area(Point1, Point2, Point3):\n    #Calculate the area of the triangle\n    x1, y1 = Point1\n    x2, y2 = Point2\n    x3, y3 = Point3\n    area = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))\/2)\n\n    return area\n\nPoint1 = (1, 4)\nPoint2 = (5, 4)\nPoint3 = (3, 2)\n\narea = triangle_area(Point1, Point2, Point3)\nprint(f\"Area of the triangle: {area}units\")","tok_input_length":206,"tok_output_length":142,"system_prompt":"","index":6718}
{"question":"Create a machine learning model using the Scikit Learn Python library for predicting an output given an input.","input":"A sample dataset which contains values of Input and Output.","expected_output":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# Read in sample data\ndf = pd.read_csv('sample_dataset.csv')\n\n# Split the data into train and test datasets\nX_train, X_test, y_train, y_test = train_test_split(df[['input']], df[['output']], test_size=0.2)\n\n# Create the model\nmodel = LinearRegression()\n\n# Train the model using the training data\nmodel.fit(X_train, y_train)\n\n# Use the model to predict output for the test data\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint(\"Model accuracy:\",score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model using the Scikit Learn Python library for predicting an output given an input.\n\n### Input:\nA sample dataset which contains values of Input and Output.\n\n### Output:\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# Read in sample data\ndf = pd.read_csv('sample_dataset.csv')\n\n# Split the data into train and test datasets\nX_train, X_test, y_train, y_test = train_test_split(df[['input']], df[['output']], test_size=0.2)\n\n# Create the model\nmodel = LinearRegression()\n\n# Train the model using the training data\nmodel.fit(X_train, y_train)\n\n# Use the model to predict output for the test data\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint(\"Model accuracy:\",score)","tok_input_length":206,"tok_output_length":148,"system_prompt":"","index":3146}
{"question":"Write a python script that reads a text document and prints the 10 most frequently used words","input":"","expected_output":"# Read the file\nwith open('text.txt') as f:\n    # Get all the words from the file\n    words = f.read().split()\n\n# Count the frequency of each word\nword_frequencies = {}\nfor word in words:\n    if word not in word_frequencies:\n        word_frequencies[word] = 1\n    else:\n        word_frequencies[word] += 1\n\n# Sort the words based on their frequencies\nsorted_words = sorted(word_frequencies.items(), key = lambda wf: wf[1], reverse=True)\n\n# Print the 10 most frequently used words\nprint('10 most frequent words: ', end = '')\nfor i in range(10):\n    print(sorted_words[i][0] + (\",\" if i != 9 else \".\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that reads a text document and prints the 10 most frequently used words\n\n### Input:\n\n\n### Output:\n# Read the file\nwith open('text.txt') as f:\n    # Get all the words from the file\n    words = f.read().split()\n\n# Count the frequency of each word\nword_frequencies = {}\nfor word in words:\n    if word not in word_frequencies:\n        word_frequencies[word] = 1\n    else:\n        word_frequencies[word] += 1\n\n# Sort the words based on their frequencies\nsorted_words = sorted(word_frequencies.items(), key = lambda wf: wf[1], reverse=True)\n\n# Print the 10 most frequently used words\nprint('10 most frequent words: ', end = '')\nfor i in range(10):\n    print(sorted_words[i][0] + (\",\" if i != 9 else \".\"))","tok_input_length":206,"tok_output_length":160,"system_prompt":"","index":2847}
{"question":"Develop an AI chatbot program in Python.","input":"","expected_output":"import re \nimport random \n\n# Define AI responses \nresponses = {\n  \"Hi\": [\"Hello there!\", \"Howdy!\", \"Hi \ud83d\udc4b\"], \n  \"How are you\": [\"I'm doing great!\", \"Doing well!\", \"Never better \ud83e\udd29\"],\n  \"Bye\": [\"Goodbye!\", \"See you later!\", \"Bye bye\"] \n}\n\n# AI function \ndef chatbot(user_query):\n  response = \"Sorry, I don't understand \ud83e\udd14\"\n\n  # Removing punctuation signs \n  user_query = re.sub('[^a-zA-Z]', ' ', user_query)\n\n  # tokenize user_query & convert to lowercase \n  user_query = user_query.lower().split()\n\n  for word in user_query: \n    if word in responses:\n      response = random.choice(responses[word])\n\n  return response","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI chatbot program in Python.\n\n### Input:\n\n\n### Output:\nimport re \nimport random \n\n# Define AI responses \nresponses = {\n  \"Hi\": [\"Hello there!\", \"Howdy!\", \"Hi \ud83d\udc4b\"], \n  \"How are you\": [\"I'm doing great!\", \"Doing well!\", \"Never better \ud83e\udd29\"],\n  \"Bye\": [\"Goodbye!\", \"See you later!\", \"Bye bye\"] \n}\n\n# AI function \ndef chatbot(user_query):\n  response = \"Sorry, I don't understand \ud83e\udd14\"\n\n  # Removing punctuation signs \n  user_query = re.sub('[^a-zA-Z]', ' ', user_query)\n\n  # tokenize user_query & convert to lowercase \n  user_query = user_query.lower().split()\n\n  for word in user_query: \n    if word in responses:\n      response = random.choice(responses[word])\n\n  return response","tok_input_length":206,"tok_output_length":170,"system_prompt":"","index":8216}
{"question":"Optimize a Python program which takes a list of integers as input and returns the sum. The program should perform the operation as quickly as possible.","input":"[1, 2, 3, 4, 5]","expected_output":"def sum(lst):\n result = 0\n for i in lst:\n result += i\n return result\n\ninputList = [1, 2, 3, 4, 5]\nprint(\"The sum of the list is: {}\".format(sum(inputList)))\n\n# Optimized variant\ndef sum_optimized(lst):\n result = 0\n lst_len= len(lst)\n i = 0\n while(i < lst_len):\n result += lst[i]\n i += 1\n return result\n\ninputList = [1, 2, 3, 4, 5]\nprint(\"The sum of the list is: {}\".format(sum_optimized(inputList)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program which takes a list of integers as input and returns the sum. The program should perform the operation as quickly as possible.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef sum(lst):\n result = 0\n for i in lst:\n result += i\n return result\n\ninputList = [1, 2, 3, 4, 5]\nprint(\"The sum of the list is: {}\".format(sum(inputList)))\n\n# Optimized variant\ndef sum_optimized(lst):\n result = 0\n lst_len= len(lst)\n i = 0\n while(i < lst_len):\n result += lst[i]\n i += 1\n return result\n\ninputList = [1, 2, 3, 4, 5]\nprint(\"The sum of the list is: {}\".format(sum_optimized(inputList)))","tok_input_length":207,"tok_output_length":136,"system_prompt":"","index":14683}
{"question":"Create a python program to find the length of the longest common subsequence","input":"x = 'abcde'\ny = 'acefgh'","expected_output":"def lcs(x,y): \n    m = len(x) \n    n = len(y) \t\n  \n    L = [[0]*(n+1) for i in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    return L[m][n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to find the length of the longest common subsequence\n\n### Input:\nx = 'abcde'\ny = 'acefgh'\n\n### Output:\ndef lcs(x,y): \n    m = len(x) \n    n = len(y) \t\n  \n    L = [[0]*(n+1) for i in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    return L[m][n]","tok_input_length":207,"tok_output_length":152,"system_prompt":"","index":18162}
{"question":"Create a function in Python that sorts a list of integers in O(nlog(n)) time complexity.","input":"","expected_output":"def sortList(arr):\n    if len(arr) == 0:\n        return []\n    mid = len(arr) \/\/ 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = sortList(left)\n    right = sortList(right)\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    leftIndex = 0\n    rightIndex = 0\n\n    while leftIndex < len(left) and rightIndex < len(right):\n        if left[leftIndex] < right[rightIndex]:\n            result.append(left[leftIndex])\n            leftIndex += 1\n        else:\n            result.append(right[rightIndex])\n            rightIndex += 1\n\n    result += left[leftIndex:]\n    result += right[rightIndex:]\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that sorts a list of integers in O(nlog(n)) time complexity.\n\n### Input:\n\n\n### Output:\ndef sortList(arr):\n    if len(arr) == 0:\n        return []\n    mid = len(arr) \/\/ 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = sortList(left)\n    right = sortList(right)\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    leftIndex = 0\n    rightIndex = 0\n\n    while leftIndex < len(left) and rightIndex < len(right):\n        if left[leftIndex] < right[rightIndex]:\n            result.append(left[leftIndex])\n            leftIndex += 1\n        else:\n            result.append(right[rightIndex])\n            rightIndex += 1\n\n    result += left[leftIndex:]\n    result += right[rightIndex:]\n    return result","tok_input_length":207,"tok_output_length":160,"system_prompt":"","index":2090}
{"question":"Write a python program to calculate the longest increasing subsequence of an array.","input":"","expected_output":"def longest_increasing_subsequence(arr): \n    n = len(arr) \n  \n    # Declare the list (array) for LIS and \n    # initialize LIS values for all indexes \n    lis = [1]*n \n  \n    # Compute optimized LIS values in bottom up manner \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    # Initialize maximum to 0 to get the maximum of all \n    # LIS \n    maximum = 0\n  \n    # Pick maximum of all LIS values \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the longest increasing subsequence of an array.\n\n### Input:\n\n\n### Output:\ndef longest_increasing_subsequence(arr): \n    n = len(arr) \n  \n    # Declare the list (array) for LIS and \n    # initialize LIS values for all indexes \n    lis = [1]*n \n  \n    # Compute optimized LIS values in bottom up manner \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    # Initialize maximum to 0 to get the maximum of all \n    # LIS \n    maximum = 0\n  \n    # Pick maximum of all LIS values \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum","tok_input_length":207,"tok_output_length":165,"system_prompt":"","index":4873}
{"question":"Write a python program that sorts the list using insertion sort algorithm.","input":"unsorted_list = [10, 2, 6, 8, 5, 4, 9, 7, 3, 1]","expected_output":"def insertion_sort(input_list):\n    # creating a copy of input list so that the original list is not modified\n    sorted_list = input_list.copy()\n    # Iterating through input list and inserting elements in the right place in the sorted list\n    for i in range(1, len(sorted_list)):\n        j = i-1\n        key = sorted_list[i] \n        while sorted_list[j] > key and j >= 0:\n            sorted_list[j+1] = sorted_list[j]\n            j -= 1\n        sorted_list[j+1] = key\n\n    return sorted_list\n\nsorted_list = insertion_sort(unsorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that sorts the list using insertion sort algorithm.\n\n### Input:\nunsorted_list = [10, 2, 6, 8, 5, 4, 9, 7, 3, 1]\n\n### Output:\ndef insertion_sort(input_list):\n    # creating a copy of input list so that the original list is not modified\n    sorted_list = input_list.copy()\n    # Iterating through input list and inserting elements in the right place in the sorted list\n    for i in range(1, len(sorted_list)):\n        j = i-1\n        key = sorted_list[i] \n        while sorted_list[j] > key and j >= 0:\n            sorted_list[j+1] = sorted_list[j]\n            j -= 1\n        sorted_list[j+1] = key\n\n    return sorted_list\n\nsorted_list = insertion_sort(unsorted_list)","tok_input_length":208,"tok_output_length":134,"system_prompt":"","index":710}
{"question":"Develop a functional web spider in Python that can crawl the web and collect articles from a given topic related to technology.","input":"Not applicable","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef web_spider(max_pages):\n page = 1\n while page <= max_pages:\n # Make request to target page\n source_code = requests.get('http:\/\/example.com\/tech\/page' + str(page))\n plain_text = source_code.text\n soup = BeautifulSoup(plain_text, 'html.parser')\n # Get data from html page\n for link in soup.find_all('a', {'class': 'articles-list-item__title'}):\n href = link.get('href')\n title = link.string\n # print the link, title, page number\n print(href)\n print(title)\n # increment the page number\n page += 1\n\n# Main function\nif __name__ == '__main__':\n web_spider(2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a functional web spider in Python that can crawl the web and collect articles from a given topic related to technology.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef web_spider(max_pages):\n page = 1\n while page <= max_pages:\n # Make request to target page\n source_code = requests.get('http:\/\/example.com\/tech\/page' + str(page))\n plain_text = source_code.text\n soup = BeautifulSoup(plain_text, 'html.parser')\n # Get data from html page\n for link in soup.find_all('a', {'class': 'articles-list-item__title'}):\n href = link.get('href')\n title = link.string\n # print the link, title, page number\n print(href)\n print(title)\n # increment the page number\n page += 1\n\n# Main function\nif __name__ == '__main__':\n web_spider(2)","tok_input_length":208,"tok_output_length":155,"system_prompt":"","index":8030}
{"question":"Design a function to print the Pascal's triangle in Python.","input":"rows = 6","expected_output":"def print_pascal_triangle(rows):\n    \"\"\"Print the Pascal's triangle.\"\"\"\n    for line in range(1, rows + 1):\n        # Print the leading spaces\n        for _ in range(rows - line):\n            print(end=\"  \")\n        # Print the numbers in the current row\n        for i in range(line):\n            print(binomial_coefficient(line-1, i), end=\"  \")\n        # Go to the new line\n        print()\n\ndef binomial_coefficient(n, k):\n    \"\"\"Calculate the binomial coefficient of n, k\"\"\"\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) \/ i\n    return result\n\n# Output\nprint_pascal_triangle(rows)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to print the Pascal's triangle in Python.\n\n### Input:\nrows = 6\n\n### Output:\ndef print_pascal_triangle(rows):\n    \"\"\"Print the Pascal's triangle.\"\"\"\n    for line in range(1, rows + 1):\n        # Print the leading spaces\n        for _ in range(rows - line):\n            print(end=\"  \")\n        # Print the numbers in the current row\n        for i in range(line):\n            print(binomial_coefficient(line-1, i), end=\"  \")\n        # Go to the new line\n        print()\n\ndef binomial_coefficient(n, k):\n    \"\"\"Calculate the binomial coefficient of n, k\"\"\"\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) \/ i\n    return result\n\n# Output\nprint_pascal_triangle(rows)","tok_input_length":208,"tok_output_length":164,"system_prompt":"","index":11972}
{"question":"Create a Python program to classify the digits in a dataset","input":"Features: [0.25, 0.33, 0.46, 0.83, 0.14]\nLabels: [0, 0, 1, 1, 0]","expected_output":"import numpy as np \nfrom sklearn.svm import SVC \n\nfeatures = np.array([[0.25, 0.33, 0.46, 0.83, 0.14]]) \nlabels = np.array([0, 0, 1, 1, 0]) \nclf = SVC() \nclf.fit(features, labels) \n\n# predicting the class of the following data \ntest_data = np.array([[0.36, 0.22, 0.91, 0.81, 0.12]]) \nresult = clf.predict(test_data) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to classify the digits in a dataset\n\n### Input:\nFeatures: [0.25, 0.33, 0.46, 0.83, 0.14]\nLabels: [0, 0, 1, 1, 0]\n\n### Output:\nimport numpy as np \nfrom sklearn.svm import SVC \n\nfeatures = np.array([[0.25, 0.33, 0.46, 0.83, 0.14]]) \nlabels = np.array([0, 0, 1, 1, 0]) \nclf = SVC() \nclf.fit(features, labels) \n\n# predicting the class of the following data \ntest_data = np.array([[0.36, 0.22, 0.91, 0.81, 0.12]]) \nresult = clf.predict(test_data) \nprint(result)","tok_input_length":209,"tok_output_length":126,"system_prompt":"","index":3383}
{"question":"Develop a program to find the maximum sum subarray of size k in an array in Python.","input":"[1, 2, 3, 4, 5], 3","expected_output":"def max_sum_subarray(arr, k): \n    maxSum = float(\"-inf\") \n    windowSum = 0\n    windowStart = 0\n  \n    for windowEnd in range(len(arr)): \n        windowSum += arr[windowEnd] \n  \n        if windowEnd >= k - 1: \n            maxSum = max(maxSum, windowSum) \n            windowSum -= arr[windowStart] \n            windowStart += 1\n  \n    return maxSum\n\narr = [1, 2, 3, 4, 5] \nk = 3\n\nmax_sum = max_sum_subarray(arr, k) \nprint(\"Maximum Sum: \" + str(max_sum))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to find the maximum sum subarray of size k in an array in Python.\n\n### Input:\n[1, 2, 3, 4, 5], 3\n\n### Output:\ndef max_sum_subarray(arr, k): \n    maxSum = float(\"-inf\") \n    windowSum = 0\n    windowStart = 0\n  \n    for windowEnd in range(len(arr)): \n        windowSum += arr[windowEnd] \n  \n        if windowEnd >= k - 1: \n            maxSum = max(maxSum, windowSum) \n            windowSum -= arr[windowStart] \n            windowStart += 1\n  \n    return maxSum\n\narr = [1, 2, 3, 4, 5] \nk = 3\n\nmax_sum = max_sum_subarray(arr, k) \nprint(\"Maximum Sum: \" + str(max_sum))","tok_input_length":209,"tok_output_length":145,"system_prompt":"","index":11437}
{"question":"Write a web scraper in Python to retrieve data about a list of products and prices from an online store.","input":"List of 10 products","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nproducts = ['Product 1', 'Product 2', 'Product 3', 'Product 4', 'Product 5', 'Product 6', 'Product 7', 'Product 8', 'Product 9', 'Product 10']\n\nfor product in products:\n url = f'http:\/\/www.example.com\/{product}'\n response = requests.get(url)\n html = response.content\n soup = BeautifulSoup(html, 'html.parser')\n \n # retrieve product and price\n title_element = soup.find('h1', {'class': 'title'})\n title = title_element.text\n price_element = soup.find('span', {'class': 'price'})\n price = price_element.text\n \n print(title + ' - ' + price)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraper in Python to retrieve data about a list of products and prices from an online store.\n\n### Input:\nList of 10 products\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nproducts = ['Product 1', 'Product 2', 'Product 3', 'Product 4', 'Product 5', 'Product 6', 'Product 7', 'Product 8', 'Product 9', 'Product 10']\n\nfor product in products:\n url = f'http:\/\/www.example.com\/{product}'\n response = requests.get(url)\n html = response.content\n soup = BeautifulSoup(html, 'html.parser')\n \n # retrieve product and price\n title_element = soup.find('h1', {'class': 'title'})\n title = title_element.text\n price_element = soup.find('span', {'class': 'price'})\n price = price_element.text\n \n print(title + ' - ' + price)","tok_input_length":209,"tok_output_length":155,"system_prompt":"","index":7562}
{"question":"Develop an AI program in Python which can play the game tic-tac-toe.","input":"","expected_output":"def tic_tac_toe():\n    game_board = [[0,0,0],\n                  [0,0,0],\n                  [0,0,0]]\n    player_1 = True\n    while not game_over():\n        move = get_ai_move()\n        if player_1:\n            game_board[move[0]][move[1]] = 1\n            player_1 = False\n        else:\n            game_board[move[0]][move[1]] = -1\n            player_1 = True\n\ndef get_ai_move():\n    # Use AI algorithms to find the best move\n    best_move = 0\n    # Return the best move\n    return best_move\n\ndef game_over():\n    # Game is over if there's a winner or a tie\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI program in Python which can play the game tic-tac-toe.\n\n### Input:\n\n\n### Output:\ndef tic_tac_toe():\n    game_board = [[0,0,0],\n                  [0,0,0],\n                  [0,0,0]]\n    player_1 = True\n    while not game_over():\n        move = get_ai_move()\n        if player_1:\n            game_board[move[0]][move[1]] = 1\n            player_1 = False\n        else:\n            game_board[move[0]][move[1]] = -1\n            player_1 = True\n\ndef get_ai_move():\n    # Use AI algorithms to find the best move\n    best_move = 0\n    # Return the best move\n    return best_move\n\ndef game_over():\n    # Game is over if there's a winner or a tie\n    return False","tok_input_length":209,"tok_output_length":165,"system_prompt":"","index":1318}
{"question":"Create a web application in Python and Flask to display information about books.","input":"books = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]","expected_output":"from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n books = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]\n return render_template('index.html', books=books)\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Python and Flask to display information about books.\n\n### Input:\nbooks = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]\n\n### Output:\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n books = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]\n return render_template('index.html', books=books)\n\nif __name__ == '__main__':\n app.run(debug=True)","tok_input_length":210,"tok_output_length":107,"system_prompt":"","index":17522}
{"question":"Develop a Python script to generate a report containing the top keywords mentioned in the given document.","input":"Document: The quick brown fox jumped over the lazy dog","expected_output":"import re\n\ntext = \"The quick brown fox jumped over the lazy dog\"\n\n# Extract words from the document\nwords = re.findall(r'\\w+', text)\n\n# Get the frequency of each word\nword_freq = {} \nfor word in words: \n    if word not in word_freq: \n        word_freq[word] = 0\n    word_freq[word] += 1\n\n# Sort words in descending order by frequency\nsorted_word_freq = sorted(word_freq.items(), key = lambda x: x[1], reverse = True) \n  \n# Print the top 10 most frequent words\nprint(\"Top 10 most frequent words:\") \nfor word, freq in sorted_word_freq[:10]: \n    print(word, ' :', freq)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to generate a report containing the top keywords mentioned in the given document.\n\n### Input:\nDocument: The quick brown fox jumped over the lazy dog\n\n### Output:\nimport re\n\ntext = \"The quick brown fox jumped over the lazy dog\"\n\n# Extract words from the document\nwords = re.findall(r'\\w+', text)\n\n# Get the frequency of each word\nword_freq = {} \nfor word in words: \n    if word not in word_freq: \n        word_freq[word] = 0\n    word_freq[word] += 1\n\n# Sort words in descending order by frequency\nsorted_word_freq = sorted(word_freq.items(), key = lambda x: x[1], reverse = True) \n  \n# Print the top 10 most frequent words\nprint(\"Top 10 most frequent words:\") \nfor word, freq in sorted_word_freq[:10]: \n    print(word, ' :', freq)","tok_input_length":210,"tok_output_length":153,"system_prompt":"","index":2010}
{"question":"Create a web crawler to search for the given keywords.","input":"List of keywords: web crawler, python, programming","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Specify a list of keywords\nkeywords = [\"web crawler\", \"python\", \"programming\"]\n\n# Loop through the list of keywords\nfor keyword in keywords:\n    page = requests.get(f\"https:\/\/www.google.com\/search?q={keyword}\")\n\n    # Parse the response using BeautifulSoup\n    soup = BeautifulSoup(page.content, 'html.parser')\n\n    # Search for the given keyword\n    result_div = soup.find_all('div', attrs = {'class': 'g'}) \n\n    # Print the results\n    for item in result_div:\n        title = item.find(\"h3\").text\n        link = item.find(\"a\").get(\"href\")\n\n        print(f\"Title: {title}\")\n        print(f\"Link: {link}\")\n        print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler to search for the given keywords.\n\n### Input:\nList of keywords: web crawler, python, programming\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Specify a list of keywords\nkeywords = [\"web crawler\", \"python\", \"programming\"]\n\n# Loop through the list of keywords\nfor keyword in keywords:\n    page = requests.get(f\"https:\/\/www.google.com\/search?q={keyword}\")\n\n    # Parse the response using BeautifulSoup\n    soup = BeautifulSoup(page.content, 'html.parser')\n\n    # Search for the given keyword\n    result_div = soup.find_all('div', attrs = {'class': 'g'}) \n\n    # Print the results\n    for item in result_div:\n        title = item.find(\"h3\").text\n        link = item.find(\"a\").get(\"href\")\n\n        print(f\"Title: {title}\")\n        print(f\"Link: {link}\")\n        print()","tok_input_length":210,"tok_output_length":161,"system_prompt":"","index":16259}
{"question":"Write a basic distributed scheduling algorithm with Python.","input":"Not applicable","expected_output":"def schedule(jobs):\n # Select the job with the minimum duration\n current_job = min(jobs, key = lambda job: job['duration'])\n jobs.remove(current_job)\n \n # Set up the lower and upper bounds for scheduling\n lower_bound = 0\n upper_bound = current_job['duration']\n \n # Iterate through jobs and assign each job to an appropriate time window\n for job in jobs:\n if job['duration'] + lower_bound <= upper_bound:\n job['time_window'] = [lower_bound, job['duration'] + lower_bound]\n else:\n job['time_window'] = [upper_bound, job['duration'] + upper_bound]\n \n lower_bound = job['time_window'][1]\n upper_bound = lower_bound + current_job['duration']\n \n # Append the current job to the schedule\n jobs.append(current_job)\n return jobs","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a basic distributed scheduling algorithm with Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef schedule(jobs):\n # Select the job with the minimum duration\n current_job = min(jobs, key = lambda job: job['duration'])\n jobs.remove(current_job)\n \n # Set up the lower and upper bounds for scheduling\n lower_bound = 0\n upper_bound = current_job['duration']\n \n # Iterate through jobs and assign each job to an appropriate time window\n for job in jobs:\n if job['duration'] + lower_bound <= upper_bound:\n job['time_window'] = [lower_bound, job['duration'] + lower_bound]\n else:\n job['time_window'] = [upper_bound, job['duration'] + upper_bound]\n \n lower_bound = job['time_window'][1]\n upper_bound = lower_bound + current_job['duration']\n \n # Append the current job to the schedule\n jobs.append(current_job)\n return jobs","tok_input_length":210,"tok_output_length":171,"system_prompt":"","index":17331}
{"question":"Write a Python program to display the all even elements from a given list.","input":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","expected_output":"def display_even_elements(list):\n    \"\"\"Function to display all the even elements from a given list\"\"\"\n    \n    # List to store the even elements\n    even_list = []\n    \n    # Iterate through each element in the list\n    for elem in list:\n        # If even, append it to the list\n        if elem % 2 == 0:\n            even_list.append(elem)\n    \n    # Return the list\n    return even_list\n\n# Given list\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Print the result\nprint(display_even_elements(list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to display the all even elements from a given list.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef display_even_elements(list):\n    \"\"\"Function to display all the even elements from a given list\"\"\"\n    \n    # List to store the even elements\n    even_list = []\n    \n    # Iterate through each element in the list\n    for elem in list:\n        # If even, append it to the list\n        if elem % 2 == 0:\n            even_list.append(elem)\n    \n    # Return the list\n    return even_list\n\n# Given list\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Print the result\nprint(display_even_elements(list))","tok_input_length":211,"tok_output_length":139,"system_prompt":"","index":10244}
{"question":"Create a Python program to generate a random password with at least 8 characters, of which at least one lowercase, one uppercase, one numeric, and one special character.","input":"Not applicable","expected_output":"import string\nimport random\n\ndef generate_password():\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for i in range(8))\n  lowercase = [c for c in password if c.islower()]\n  uppercase = [c for c in password if c.isupper()]\n  digits = [c for c in password if c.isdigit()]\n  special = [c for c in password if c in string.punctuation]\n  if len(lowercase) == 0 or len(uppercase) == 0 or len(digits) == 0 or len(special) == 0:\n    return generate_password()\n  return password\n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random password with at least 8 characters, of which at least one lowercase, one uppercase, one numeric, and one special character.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for i in range(8))\n  lowercase = [c for c in password if c.islower()]\n  uppercase = [c for c in password if c.isupper()]\n  digits = [c for c in password if c.isdigit()]\n  special = [c for c in password if c in string.punctuation]\n  if len(lowercase) == 0 or len(uppercase) == 0 or len(digits) == 0 or len(special) == 0:\n    return generate_password()\n  return password\n\nprint(generate_password())","tok_input_length":211,"tok_output_length":147,"system_prompt":"","index":16307}
{"question":"Create an object-oriented Python program to represent a simple calendar. The program should include the following classes: Calendar, Event, and Date.","input":"Not applicable","expected_output":"class Calendar:\n def __init__(self):\n  self.events = []\n\n def add_event(self, event):\n  self.events.append(event)\n\n def get_events(self, date):\n  return [event for event in self.events if event.date == date]\n\nclass Event:\n def __init__(self, date, title, description):\n  self.date = date\n  self.title = title\n  self.description = description\n\n def __str__(self):\n  return f'{self.title} on {self.date}'\n\nclass Date:\n def __init__(self, year, month, day):\n  self.year = year\n  self.month = month\n  self.day = day\n\n def __str__(self):\n  return f'{self.month}\/{self.day}\/{self.year}'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented Python program to represent a simple calendar. The program should include the following classes: Calendar, Event, and Date.\n\n### Input:\nNot applicable\n\n### Output:\nclass Calendar:\n def __init__(self):\n  self.events = []\n\n def add_event(self, event):\n  self.events.append(event)\n\n def get_events(self, date):\n  return [event for event in self.events if event.date == date]\n\nclass Event:\n def __init__(self, date, title, description):\n  self.date = date\n  self.title = title\n  self.description = description\n\n def __str__(self):\n  return f'{self.title} on {self.date}'\n\nclass Date:\n def __init__(self, year, month, day):\n  self.year = year\n  self.month = month\n  self.day = day\n\n def __str__(self):\n  return f'{self.month}\/{self.day}\/{self.year}'","tok_input_length":211,"tok_output_length":154,"system_prompt":"","index":7564}
{"question":"Create a shell script to automate the installation of Python and the essential Python packages.","input":"Not applicable","expected_output":"#!\/bin\/bash\n\n# Install essential Python packages\nsudo apt-get -y update\nsudo apt-get -y install build-essential checkinstall\nsudo apt-get -y install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev\n\n# Download and install Python\nversion=\"3.8.5\"\nfile=\"Python-$version.tgz\"\nurl=\"https:\/\/www.python.org\/ftp\/python\/$version\/$file\"\n\nwget $url\nsudo tar xzf $file\ncd \"Python-$version\"\nsudo .\/configure\nsudo make install\n\n# Install packages\npip install virtualenv\npip install numpy\npip install pandas\npip install matplotlib\npip install scikit-learn\npip install tensorflow","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a shell script to automate the installation of Python and the essential Python packages.\n\n### Input:\nNot applicable\n\n### Output:\n#!\/bin\/bash\n\n# Install essential Python packages\nsudo apt-get -y update\nsudo apt-get -y install build-essential checkinstall\nsudo apt-get -y install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev\n\n# Download and install Python\nversion=\"3.8.5\"\nfile=\"Python-$version.tgz\"\nurl=\"https:\/\/www.python.org\/ftp\/python\/$version\/$file\"\n\nwget $url\nsudo tar xzf $file\ncd \"Python-$version\"\nsudo .\/configure\nsudo make install\n\n# Install packages\npip install virtualenv\npip install numpy\npip install pandas\npip install matplotlib\npip install scikit-learn\npip install tensorflow","tok_input_length":211,"tok_output_length":165,"system_prompt":"","index":9593}
{"question":"What are the advantages and disadvantages of using an interpreted language like Python?","input":"","expected_output":"Advantages of using a interpreted language like Python:\n\n- It generally runs faster than compiled languages as it just evaluates expressions as they run.\n- It is easier to debug since errors are caught during the interpretation process, rather than during compilation process.\n- It is easier to learn and requires less development time, so it is cheaper to implement.\n- It is a versatile language, supported by many libraries and frameworks, which makes it suitable for many different projects.\n\nDisadvantages of using a interpreted language like Python:\n\n- It tends to be slower than compiled languages as the code must be interpreted each time it is run.\n- Code can be difficult to optimize, resulting in less efficient programs.\n- Interpreted languages are not always suitable for resource-intensive tasks, such as video game development.\n- Interpreted languages can be more vulnerable to security issues.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat are the advantages and disadvantages of using an interpreted language like Python?\n\n### Input:\n\n\n### Output:\nAdvantages of using a interpreted language like Python:\n\n- It generally runs faster than compiled languages as it just evaluates expressions as they run.\n- It is easier to debug since errors are caught during the interpretation process, rather than during compilation process.\n- It is easier to learn and requires less development time, so it is cheaper to implement.\n- It is a versatile language, supported by many libraries and frameworks, which makes it suitable for many different projects.\n\nDisadvantages of using a interpreted language like Python:\n\n- It tends to be slower than compiled languages as the code must be interpreted each time it is run.\n- Code can be difficult to optimize, resulting in less efficient programs.\n- Interpreted languages are not always suitable for resource-intensive tasks, such as video game development.\n- Interpreted languages can be more vulnerable to security issues.","tok_input_length":211,"tok_output_length":170,"system_prompt":"","index":5810}
{"question":"Develop a python code to find out the frequent items from a given list.","input":"list1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]","expected_output":"from collections import Counter\nlist1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]\n\n# Most common items in the list\ndata = Counter(list1) \n  \n# Printing most common items \nprint(data.most_common()) # Output: [(2, 4), (8, 4), (9, 3), (1, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python code to find out the frequent items from a given list.\n\n### Input:\nlist1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]\n\n### Output:\nfrom collections import Counter\nlist1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]\n\n# Most common items in the list\ndata = Counter(list1) \n  \n# Printing most common items \nprint(data.most_common()) # Output: [(2, 4), (8, 4), (9, 3), (1, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]","tok_input_length":212,"tok_output_length":130,"system_prompt":"","index":13165}
{"question":"Design an algorithm in Python that can identify duplicate items in a given array of integers.","input":"[1, 2, 3, 4, 5, 1, 5]","expected_output":"# a function to find duplicate elements\ndef find_duplicate(arr):\n # save the elements in a set\n elements = set()\n \n # loop through the array\n for a in arr:\n # check if the element is already in the set\n if a in elements:\n # if yes, then it is a duplicate\n return a\n \n # if not, then add it to the set\n else:\n elements.add(a)\n \n # if we get here, then there are no duplicates\n return None\n\n# define the array\narr = [1, 2, 3, 4, 5, 1, 5]\n\n# get the duplicate element\nduplicate = find_duplicate(arr)\nprint('Duplicate element:', duplicate)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that can identify duplicate items in a given array of integers.\n\n### Input:\n[1, 2, 3, 4, 5, 1, 5]\n\n### Output:\n# a function to find duplicate elements\ndef find_duplicate(arr):\n # save the elements in a set\n elements = set()\n \n # loop through the array\n for a in arr:\n # check if the element is already in the set\n if a in elements:\n # if yes, then it is a duplicate\n return a\n \n # if not, then add it to the set\n else:\n elements.add(a)\n \n # if we get here, then there are no duplicates\n return None\n\n# define the array\narr = [1, 2, 3, 4, 5, 1, 5]\n\n# get the duplicate element\nduplicate = find_duplicate(arr)\nprint('Duplicate element:', duplicate)","tok_input_length":212,"tok_output_length":147,"system_prompt":"","index":11882}
{"question":"Generate a python program which finds the most frequent word in a sentence.","input":"This is a sentence with many words.","expected_output":"def freq_word(sentence):\n    words = sentence.split()\n    # make a dictionary to count the occurrance of each word\n    d = {}\n    for word in words:\n        # if the word is already in the dictionary, increment its count\n        if word in d.keys():\n            d[word] += 1\n        # else add the word in the dictionary\n        else:\n            d[word] = 1\n    # set the first most_freq to the first word in the sentence\n    most_freq = words[0]\n    # loop trough the words\n    for word in words:\n        # if we find a word with higher frequency, set most_freq to that word\n        if d[word] > d[most_freq]:\n            most_freq = word\n    return most_freq","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program which finds the most frequent word in a sentence.\n\n### Input:\nThis is a sentence with many words.\n\n### Output:\ndef freq_word(sentence):\n    words = sentence.split()\n    # make a dictionary to count the occurrance of each word\n    d = {}\n    for word in words:\n        # if the word is already in the dictionary, increment its count\n        if word in d.keys():\n            d[word] += 1\n        # else add the word in the dictionary\n        else:\n            d[word] = 1\n    # set the first most_freq to the first word in the sentence\n    most_freq = words[0]\n    # loop trough the words\n    for word in words:\n        # if we find a word with higher frequency, set most_freq to that word\n        if d[word] > d[most_freq]:\n            most_freq = word\n    return most_freq","tok_input_length":212,"tok_output_length":163,"system_prompt":"","index":4753}
{"question":"Create a python\u200a\u2014\u200adjango application that allows user to register and login.","input":"","expected_output":"#!\/usr\/bin\/env python3\n\nimport os\n\nfrom django.contrib.auth.hashers import make_password\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\n# Create your views here.\ndef register(request):\n    if request.method == 'POST':\n        user_name = request.POST['username']\n        password = request.POST['password']\n        confirm_password = request.POST['confirm_password']\n\n        if password != confirm_password:\n            return HttpResponse('Passwords do not match')\n\n        users = User.objects.all()\n        if user_name in users:\n            return HttpResponse('Username already taken')\n\n        # Store hashed password\n        password = make_password(password)\n        user = User.objects.create(username=user_name, password=password)\n        user.save()\n        return render(request, 'user_login.html')\n\n    else:\n        return render(request, 'user_registration.html')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python\u200a\u2014\u200adjango application that allows user to register and login.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python3\n\nimport os\n\nfrom django.contrib.auth.hashers import make_password\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\n# Create your views here.\ndef register(request):\n    if request.method == 'POST':\n        user_name = request.POST['username']\n        password = request.POST['password']\n        confirm_password = request.POST['confirm_password']\n\n        if password != confirm_password:\n            return HttpResponse('Passwords do not match')\n\n        users = User.objects.all()\n        if user_name in users:\n            return HttpResponse('Username already taken')\n\n        # Store hashed password\n        password = make_password(password)\n        user = User.objects.create(username=user_name, password=password)\n        user.save()\n        return render(request, 'user_login.html')\n\n    else:\n        return render(request, 'user_registration.html')","tok_input_length":212,"tok_output_length":169,"system_prompt":"","index":10141}
{"question":"Create an object-oriented program in Python to calculate the total cost of an array of products. The program should include a Product class with fields for name, price, and quantity.","input":"[\n  {name: \"Apple\", price: 1.99, quantity: 2},\n  {name: \"Banana\", price: 0.79, quantity: 5}\n]","expected_output":"class Product:\n def __init__(self, name, price, quantity):\n  self.name = name\n  self.price = price\n  self.quantity = quantity\n\n \ndef calculateTotalCost(products):\n totalCost = 0\n \n for product in products:\n  totalCost += product.price * product.quantity\n \n return totalCost\n \nproducts = [\n Product(\"Apple\", 1.99, 2),\n Product(\"Banana\", 0.79, 5)\n]\n \nprint(calculateTotalCost(products))\n# Output: 11.75","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented program in Python to calculate the total cost of an array of products. The program should include a Product class with fields for name, price, and quantity.\n\n### Input:\n[\n  {name: \"Apple\", price: 1.99, quantity: 2},\n  {name: \"Banana\", price: 0.79, quantity: 5}\n]\n\n### Output:\nclass Product:\n def __init__(self, name, price, quantity):\n  self.name = name\n  self.price = price\n  self.quantity = quantity\n\n \ndef calculateTotalCost(products):\n totalCost = 0\n \n for product in products:\n  totalCost += product.price * product.quantity\n \n return totalCost\n \nproducts = [\n Product(\"Apple\", 1.99, 2),\n Product(\"Banana\", 0.79, 5)\n]\n \nprint(calculateTotalCost(products))\n# Output: 11.75","tok_input_length":213,"tok_output_length":110,"system_prompt":"","index":18351}
{"question":"Design a Python algorithm to find the longest increasing subarray.","input":"arr = [1, 3, -2, 5, 8, -3, 4, 6]","expected_output":"def longest_increasing_subarray(arr): \n\tsize = len(arr) \n\tmax_len = 1\n\t\n\tfor index in range(size): \n\t\tmax_len_ending_here = 1\n\t\tj = index + 1\n\t\t\n\t\twhile j < size: \n\t\t\tif arr[j] > arr[j - 1]: \n\t\t\t\tmax_len_ending_here += 1\n\t\t\tj += 1\n\t\t\t\n\t\tif max_len_ending_here > max_len: \n\t\t\tmax_len = max_len_ending_here \n\n\treturn max_len\n\narr = [1, 3, -2, 5, 8, -3, 4, 6] \nresult = longest_increasing_subarray(arr)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm to find the longest increasing subarray.\n\n### Input:\narr = [1, 3, -2, 5, 8, -3, 4, 6]\n\n### Output:\ndef longest_increasing_subarray(arr): \n\tsize = len(arr) \n\tmax_len = 1\n\t\n\tfor index in range(size): \n\t\tmax_len_ending_here = 1\n\t\tj = index + 1\n\t\t\n\t\twhile j < size: \n\t\t\tif arr[j] > arr[j - 1]: \n\t\t\t\tmax_len_ending_here += 1\n\t\t\tj += 1\n\t\t\t\n\t\tif max_len_ending_here > max_len: \n\t\t\tmax_len = max_len_ending_here \n\n\treturn max_len\n\narr = [1, 3, -2, 5, 8, -3, 4, 6] \nresult = longest_increasing_subarray(arr)\nprint(result)","tok_input_length":213,"tok_output_length":148,"system_prompt":"","index":16714}
{"question":"Develop an AI chatbot that can answer natural language queries about the top 10 most popular programming languages.","input":"What is the most popular programming language?","expected_output":"The most popular programming language is Java. It is the first choice of many companies, developers, and students. It is widely used for developing desktop, web, and mobile applications. Its usage percentage has been steadily increasing since 2017 and other languages such as Python and JavaScript have been slowly catching up. According to the TIOBE index, Java is currently the most popular language in the world, followed by C, Python, and C++. Other major programming languages in the top 10 include JavaScript, C#, Ruby, and Go. Java is used by more than 13 million developers and is the official language of Android development. It is also used widely in many large enterprises and is one of the best choices for developers to learn to stay up-to-date in the field.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI chatbot that can answer natural language queries about the top 10 most popular programming languages.\n\n### Input:\nWhat is the most popular programming language?\n\n### Output:\nThe most popular programming language is Java. It is the first choice of many companies, developers, and students. It is widely used for developing desktop, web, and mobile applications. Its usage percentage has been steadily increasing since 2017 and other languages such as Python and JavaScript have been slowly catching up. According to the TIOBE index, Java is currently the most popular language in the world, followed by C, Python, and C++. Other major programming languages in the top 10 include JavaScript, C#, Ruby, and Go. Java is used by more than 13 million developers and is the official language of Android development. It is also used widely in many large enterprises and is one of the best choices for developers to learn to stay up-to-date in the field.","tok_input_length":213,"tok_output_length":157,"system_prompt":"","index":6591}
{"question":"Implement a Neural Network written in Python using TensorFlow for predicting the local weather.","input":"Not applicable.","expected_output":"import tensorflow as tf\n\n# Build the neural network model\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Input(shape=(24,)),\n  # 8 neurons on the first hidden layer\n  tf.keras.layers.Dense(8, activation='relu'),\n  # 4 neurons on the second hidden layer\n  tf.keras.layers.Dense(4, activation='relu'),\n  # Output layer, which will have 3 neurons since we have 3 classes\n  tf.keras.layers.Dense(3, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))\n\n# Save the model\nmodel.save('weather_predictor_model.h5')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Neural Network written in Python using TensorFlow for predicting the local weather.\n\n### Input:\nNot applicable.\n\n### Output:\nimport tensorflow as tf\n\n# Build the neural network model\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Input(shape=(24,)),\n  # 8 neurons on the first hidden layer\n  tf.keras.layers.Dense(8, activation='relu'),\n  # 4 neurons on the second hidden layer\n  tf.keras.layers.Dense(4, activation='relu'),\n  # Output layer, which will have 3 neurons since we have 3 classes\n  tf.keras.layers.Dense(3, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))\n\n# Save the model\nmodel.save('weather_predictor_model.h5')","tok_input_length":213,"tok_output_length":168,"system_prompt":"","index":16689}
{"question":"Write a python program that takes a list of numbers as input and identifies the minimum, maximum and the mode value.","input":"[1, 2, 3, 4, 5, 5, 6]","expected_output":"def get_min_max_mode(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    count_dict = dict()\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    max_count = 0\n    mode_value = min_val\n    for k, v in count_dict.items():\n        if v > max_count:\n            max_count = v\n            mode_value = k\n    \n    return min_val, max_val, mode_value\n\nprint(get_min_max_mode([1, 2, 3, 4, 5, 5, 6]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes a list of numbers as input and identifies the minimum, maximum and the mode value.\n\n### Input:\n[1, 2, 3, 4, 5, 5, 6]\n\n### Output:\ndef get_min_max_mode(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    count_dict = dict()\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    max_count = 0\n    mode_value = min_val\n    for k, v in count_dict.items():\n        if v > max_count:\n            max_count = v\n            mode_value = k\n    \n    return min_val, max_val, mode_value\n\nprint(get_min_max_mode([1, 2, 3, 4, 5, 5, 6]))","tok_input_length":214,"tok_output_length":143,"system_prompt":"","index":14776}
{"question":"Create a Python function that takes a string of words and returns a list of the most frequent words in the string","input":"Not applicable","expected_output":"def most_frequent_words(s):\n    # Split string into list of words\n    words = s.split(' ')\n    # Create empty dictionary to store word frequencies\n    word_frequencies = {}\n    # Iterate through words in list\n    for word in words:\n        # If word is already in the dictionary, increment its frequency\n        if word in word_frequencies:\n            word_frequencies[word] += 1\n        # Otherwise, set frequency to 1\n        else:\n            word_frequencies[word] = 1\n    # Sort words by frequency\n    sorted_words = sorted(word_frequencies.items(), key=lambda x: x[1], reverse=True)\n    # Return a list of the most frequent words\n    return [item[0] for item in sorted_words]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a string of words and returns a list of the most frequent words in the string\n\n### Input:\nNot applicable\n\n### Output:\ndef most_frequent_words(s):\n    # Split string into list of words\n    words = s.split(' ')\n    # Create empty dictionary to store word frequencies\n    word_frequencies = {}\n    # Iterate through words in list\n    for word in words:\n        # If word is already in the dictionary, increment its frequency\n        if word in word_frequencies:\n            word_frequencies[word] += 1\n        # Otherwise, set frequency to 1\n        else:\n            word_frequencies[word] = 1\n    # Sort words by frequency\n    sorted_words = sorted(word_frequencies.items(), key=lambda x: x[1], reverse=True)\n    # Return a list of the most frequent words\n    return [item[0] for item in sorted_words]","tok_input_length":214,"tok_output_length":161,"system_prompt":"","index":1668}
{"question":"Write a Python class to define a fraction and include methods to add and subtract fractions.","input":"","expected_output":"class Fraction:\n\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}\/{self.denominator}\"\n\n    def __add__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 + num2\n        return Fraction(numerator, denom)\n\n    def __sub__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 - num2\n        return Fraction(numerator, denom)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to define a fraction and include methods to add and subtract fractions.\n\n### Input:\n\n\n### Output:\nclass Fraction:\n\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}\/{self.denominator}\"\n\n    def __add__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 + num2\n        return Fraction(numerator, denom)\n\n    def __sub__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 - num2\n        return Fraction(numerator, denom)","tok_input_length":214,"tok_output_length":170,"system_prompt":"","index":3183}
{"question":"Construct an algorithm in Python to find the length of the longest contiguous subarray of an array with equal number of 0's and 1's.","input":"arr = [1, 0, 0, 1, 0, 1, 1, 0]","expected_output":"def find_longest_subarray_length(arr):\n    s = 0\n    e = 0\n    max_length = 0\n    while e < len(arr):\n        if arr[e] == 1:\n            e += 1\n        else:\n            num_ones = e - s\n            num_zeros = 1\n            while e < len(arr) and arr[e] == 0:\n                num_zeros += 1\n                e += 1\n            if num_ones == num_zeros:\n                max_length = max(max_length, (num_ones + num_zeros))\n            s = e\n    return max_length","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to find the length of the longest contiguous subarray of an array with equal number of 0's and 1's.\n\n### Input:\narr = [1, 0, 0, 1, 0, 1, 1, 0]\n\n### Output:\ndef find_longest_subarray_length(arr):\n    s = 0\n    e = 0\n    max_length = 0\n    while e < len(arr):\n        if arr[e] == 1:\n            e += 1\n        else:\n            num_ones = e - s\n            num_zeros = 1\n            while e < len(arr) and arr[e] == 0:\n                num_zeros += 1\n                e += 1\n            if num_ones == num_zeros:\n                max_length = max(max_length, (num_ones + num_zeros))\n            s = e\n    return max_length","tok_input_length":215,"tok_output_length":132,"system_prompt":"","index":11050}
{"question":"Create a Python function to find the probability of an event using the binomial distribution.","input":"n = 10\np = 0.5\nx = 6","expected_output":"from math import factorial\n\ndef binomial_probability(n, p, x):\n    \"\"\"Find the probability of an event using the binomial distribution.\n\n    Args:\n        n (int): The number of trials.\n        p (float): The probability of success of the event.\n        x (int): The number of successes.\n\n    Returns:\n        float: The probability of x successes in n trials.\n    \"\"\"\n    return factorial(n)\/(factorial(x)*factorial(n-x)) * p**x * (1-p)**(n-x)\n\nif __name__ == '__main__':\n    n = 10\n    p = 0.5\n    x = 6\n    result = binomial_probability(n, p, x)\n    print(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to find the probability of an event using the binomial distribution.\n\n### Input:\nn = 10\np = 0.5\nx = 6\n\n### Output:\nfrom math import factorial\n\ndef binomial_probability(n, p, x):\n    \"\"\"Find the probability of an event using the binomial distribution.\n\n    Args:\n        n (int): The number of trials.\n        p (float): The probability of success of the event.\n        x (int): The number of successes.\n\n    Returns:\n        float: The probability of x successes in n trials.\n    \"\"\"\n    return factorial(n)\/(factorial(x)*factorial(n-x)) * p**x * (1-p)**(n-x)\n\nif __name__ == '__main__':\n    n = 10\n    p = 0.5\n    x = 6\n    result = binomial_probability(n, p, x)\n    print(result)","tok_input_length":215,"tok_output_length":154,"system_prompt":"","index":4869}
{"question":"We have a list of student records with the following format: name, age and marks. Write a Python program to sort the records in descending order based on marks.","input":"records = [\n    [\"Bob\", 30, 80.50], \n    [\"James\", 32, 65.78], \n    [\"Cameron\", 27, 97.89],\n    [\"Grace\", 24, 76.67]\n]","expected_output":"def sortRecords(records):\n    sortedRecords = sorted(records, key = lambda x: x[2], reverse=True)\n    return sortedRecords\n\nrecords = [\n    [\"Bob\", 30, 80.50], \n    [\"James\", 32, 65.78], \n    [\"Cameron\", 27, 97.89],\n    [\"Grace\", 24, 76.67]\n]\n\nsortedRecords = sortRecords(records)\n\nprint(\"Sorted records: \", sortedRecords)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWe have a list of student records with the following format: name, age and marks. Write a Python program to sort the records in descending order based on marks.\n\n### Input:\nrecords = [\n    [\"Bob\", 30, 80.50], \n    [\"James\", 32, 65.78], \n    [\"Cameron\", 27, 97.89],\n    [\"Grace\", 24, 76.67]\n]\n\n### Output:\ndef sortRecords(records):\n    sortedRecords = sorted(records, key = lambda x: x[2], reverse=True)\n    return sortedRecords\n\nrecords = [\n    [\"Bob\", 30, 80.50], \n    [\"James\", 32, 65.78], \n    [\"Cameron\", 27, 97.89],\n    [\"Grace\", 24, 76.67]\n]\n\nsortedRecords = sortRecords(records)\n\nprint(\"Sorted records: \", sortedRecords)","tok_input_length":216,"tok_output_length":101,"system_prompt":"","index":7576}
{"question":"Create an algorithm in Python to calculate the maximum sum of a sub-array of an int array.","input":"Given an array arr = [2, -1, 3, 5, -7, 3].","expected_output":"def max_sum_subarray(arr): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n): \n        sum = arr[i] \n        for j in range(i + 1, n): \n            sum += arr[j] \n            if sum > max_sum: \n                max_sum = sum \n\n    return max_sum \n\n# Test array \narr = [2, -1, 3, 5, -7, 3] \n\n# Function Call \nmax_sum = max_sum_subarray(arr) \n  \n# Printing maximum sum \nprint(\"Maximum sum of the sub-array is\", max_sum) \n\n# Output: Maximum sum of the sub-array is 8","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to calculate the maximum sum of a sub-array of an int array.\n\n### Input:\nGiven an array arr = [2, -1, 3, 5, -7, 3].\n\n### Output:\ndef max_sum_subarray(arr): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n): \n        sum = arr[i] \n        for j in range(i + 1, n): \n            sum += arr[j] \n            if sum > max_sum: \n                max_sum = sum \n\n    return max_sum \n\n# Test array \narr = [2, -1, 3, 5, -7, 3] \n\n# Function Call \nmax_sum = max_sum_subarray(arr) \n  \n# Printing maximum sum \nprint(\"Maximum sum of the sub-array is\", max_sum) \n\n# Output: Maximum sum of the sub-array is 8","tok_input_length":216,"tok_output_length":147,"system_prompt":"","index":911}
{"question":"Program a web crawler in Python to crawl URLs from a given website and follow all external links.","input":"url = https:\/\/www.example.com","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Set the base URL\nurl = \"https:\/\/www.example.com\"\n\n# Keep track of visited URLs\nvisited = set()\n\n# Set of external URLs\nurls_external = set()\n\n# Perform the crawl\ndef crawl():\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    internal_urls = set()\n\n    # Find all links on the page\n    for link in soup.find_all('a'):\n        if url.startswith(url):\n            internal_urls.add(link['href'])\n        else:\n            urls_external.add(link['href'])\n    \n    # Recursively crawl all internal URLs\n    for internal_url in internal_urls:\n        if internal_url not in visited:\n            visited.add(internal_url)\n            crawl(internal_url)\n\ncrawl()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a web crawler in Python to crawl URLs from a given website and follow all external links.\n\n### Input:\nurl = https:\/\/www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Set the base URL\nurl = \"https:\/\/www.example.com\"\n\n# Keep track of visited URLs\nvisited = set()\n\n# Set of external URLs\nurls_external = set()\n\n# Perform the crawl\ndef crawl():\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    internal_urls = set()\n\n    # Find all links on the page\n    for link in soup.find_all('a'):\n        if url.startswith(url):\n            internal_urls.add(link['href'])\n        else:\n            urls_external.add(link['href'])\n    \n    # Recursively crawl all internal URLs\n    for internal_url in internal_urls:\n        if internal_url not in visited:\n            visited.add(internal_url)\n            crawl(internal_url)\n\ncrawl()","tok_input_length":216,"tok_output_length":162,"system_prompt":"","index":3327}
{"question":"Generate a python program to compute the edit distance between two given strings","input":"","expected_output":"def edit_distance(string1, string2):\n    m = len(string1)\n    n = len(string2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], \n                        dp[i-1][j], \n                        dp[i-1][j-1]) \n    return dp[m][n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to compute the edit distance between two given strings\n\n### Input:\n\n\n### Output:\ndef edit_distance(string1, string2):\n    m = len(string1)\n    n = len(string2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], \n                        dp[i-1][j], \n                        dp[i-1][j-1]) \n    return dp[m][n]","tok_input_length":216,"tok_output_length":175,"system_prompt":"","index":17165}
{"question":"Create a Python program to predict whether the next day in a given stock market will have a positive or negative closing.","input":"A dataset containing a series of stock market closing prices, where each row is one day.","expected_output":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load the data and split into train and test sets\ndata = pd.read_csv('stock_data.csv')\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel.fit(X_train, y_train)\n\n# Make a prediction for the test set\ny_pred = model.predict(X_test)\nprint(y_pred)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to predict whether the next day in a given stock market will have a positive or negative closing.\n\n### Input:\nA dataset containing a series of stock market closing prices, where each row is one day.\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load the data and split into train and test sets\ndata = pd.read_csv('stock_data.csv')\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel.fit(X_train, y_train)\n\n# Make a prediction for the test set\ny_pred = model.predict(X_test)\nprint(y_pred)","tok_input_length":217,"tok_output_length":149,"system_prompt":"","index":4384}
{"question":"Create an algorithm in Python to generate the first n elements of the Sierpinski triangle.","input":"n = 6","expected_output":"def sierpinski_triangle(n): \n    # Drawing lines for first row \n    for i in range(2**n): \n        print(' ', end=\" \") \n    \n    # loop for printing n rows \n    for i in range(1, n+1): \n        # bit pattern for first and \n        # last line of each row \n        for j in range(2**(i-1), 2**i): \n            print('1', end=\" \") \n        print() \n        \n        # inner rows have opposite bit pattern \n        if i > 1: \n            for j in range(2**(i-1)+1, 2**i-1):  \n                print('0', end=\" \") \n            print() \n       \nsierpinski_triangle(6)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to generate the first n elements of the Sierpinski triangle.\n\n### Input:\nn = 6\n\n### Output:\ndef sierpinski_triangle(n): \n    # Drawing lines for first row \n    for i in range(2**n): \n        print(' ', end=\" \") \n    \n    # loop for printing n rows \n    for i in range(1, n+1): \n        # bit pattern for first and \n        # last line of each row \n        for j in range(2**(i-1), 2**i): \n            print('1', end=\" \") \n        print() \n        \n        # inner rows have opposite bit pattern \n        if i > 1: \n            for j in range(2**(i-1)+1, 2**i-1):  \n                print('0', end=\" \") \n            print() \n       \nsierpinski_triangle(6)","tok_input_length":217,"tok_output_length":166,"system_prompt":"","index":447}
{"question":"Implement a KNN Algorithm in Python to classify iris datapoints into three categories.","input":"","expected_output":"# import relevant libraries\nimport numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# load the data\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0)\n\n# Initialize the model\nknn_model = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model to train data\nknn_model.fit(X_train, y_train)\n\n# Score the model on test data\nknn_model.score(X_test, y_test)\n\n# Output a prediction \nknn_model.predict([[3, 5, 4, 2]])\n# Output: [1] (This is Iris-versicolor)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a KNN Algorithm in Python to classify iris datapoints into three categories.\n\n### Input:\n\n\n### Output:\n# import relevant libraries\nimport numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# load the data\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0)\n\n# Initialize the model\nknn_model = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model to train data\nknn_model.fit(X_train, y_train)\n\n# Score the model on test data\nknn_model.score(X_test, y_test)\n\n# Output a prediction \nknn_model.predict([[3, 5, 4, 2]])\n# Output: [1] (This is Iris-versicolor)","tok_input_length":217,"tok_output_length":174,"system_prompt":"","index":7201}
{"question":"Write code in Python to filter the elements in a list. The function should take a list as an input and return the filtered list.","input":"list = [14, 15, 16, 16, 19, 20, 20, 21, 19]","expected_output":"def filter_list(my_list): \n    # creating a new list to store the values \n    new_list = [] \n  \n    # looping through all the list elements \n    for i in my_list: \n        # checking condition \n        if i not in new_list: \n            new_list.append(i) \n              \n    # returning new_list which contains unique values \n    return new_list \n  \nlist = [14, 15, 16, 16, 19, 20, 20, 21, 19]\n  \nprint(filter_list(list)) \n\n# output [14, 15, 16, 19, 20, 21]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to filter the elements in a list. The function should take a list as an input and return the filtered list.\n\n### Input:\nlist = [14, 15, 16, 16, 19, 20, 20, 21, 19]\n\n### Output:\ndef filter_list(my_list): \n    # creating a new list to store the values \n    new_list = [] \n  \n    # looping through all the list elements \n    for i in my_list: \n        # checking condition \n        if i not in new_list: \n            new_list.append(i) \n              \n    # returning new_list which contains unique values \n    return new_list \n  \nlist = [14, 15, 16, 16, 19, 20, 20, 21, 19]\n  \nprint(filter_list(list)) \n\n# output [14, 15, 16, 19, 20, 21]","tok_input_length":218,"tok_output_length":135,"system_prompt":"","index":17584}
{"question":"Write a function to parse an http header to a python dictionary.","input":"http_header = 'Accept: application\/json\\nContent-Type: text\/html\\nContent-Length: 15\\n'","expected_output":"\"\"\"\nWrite a function to parse an http header to a python dictionary.\n\"\"\"\n\n# Get the input string\nhttp_header = 'Accept: application\/json\\nContent-Type: text\/html\\nContent-Length: 15\\n'\n\n# Parse the header string to a dictionary\ndef parse_http_header(header):\n    header_dict = {}\n    definition_list = header.split('\\n')\n    for definition in definition_list:\n        # Skip invalid definitions (ex: \"\")\n        if definition == '': \n            continue\n        # Split definition field into key and value\n        (key, value) = definition.split(': ')\n        # Update dictionary\n        header_dict[key] = value\n    return header_dict\n\n# Output the result\nheader_dict = parse_http_header(http_header)\nprint(header_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to parse an http header to a python dictionary.\n\n### Input:\nhttp_header = 'Accept: application\/json\\nContent-Type: text\/html\\nContent-Length: 15\\n'\n\n### Output:\n\"\"\"\nWrite a function to parse an http header to a python dictionary.\n\"\"\"\n\n# Get the input string\nhttp_header = 'Accept: application\/json\\nContent-Type: text\/html\\nContent-Length: 15\\n'\n\n# Parse the header string to a dictionary\ndef parse_http_header(header):\n    header_dict = {}\n    definition_list = header.split('\\n')\n    for definition in definition_list:\n        # Skip invalid definitions (ex: \"\")\n        if definition == '': \n            continue\n        # Split definition field into key and value\n        (key, value) = definition.split(': ')\n        # Update dictionary\n        header_dict[key] = value\n    return header_dict\n\n# Output the result\nheader_dict = parse_http_header(http_header)\nprint(header_dict)","tok_input_length":218,"tok_output_length":156,"system_prompt":"","index":16280}
{"question":"Create a basic Machine Learning model in Python that uses regression to predict a house's sale price given some input features.","input":"Not applicable","expected_output":"import pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n# Read dataset\nhousing = pd.read_csv('housing.csv')\n\n# Define X and y\nX = housing.drop('SalePrice', axis=1)\ny = housing.SalePrice\n\n# Split into training and test sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Fit regression model \nreg = sklearn.linear_model.LinearRegression().fit(X_train, y_train)\n\n# Make predictions\ny_pred = reg.predict(X_test)\n\n# Calculate and print RMSE\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(rmse)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Machine Learning model in Python that uses regression to predict a house's sale price given some input features.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n# Read dataset\nhousing = pd.read_csv('housing.csv')\n\n# Define X and y\nX = housing.drop('SalePrice', axis=1)\ny = housing.SalePrice\n\n# Split into training and test sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Fit regression model \nreg = sklearn.linear_model.LinearRegression().fit(X_train, y_train)\n\n# Make predictions\ny_pred = reg.predict(X_test)\n\n# Calculate and print RMSE\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(rmse)","tok_input_length":218,"tok_output_length":165,"system_prompt":"","index":9210}
{"question":"Come up with a correct function to calculate the length of a linked list in Python","input":"","expected_output":"# Python Program to Calculate the Length of a Linked List \n  \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def lengthLinkedList(self): \n        curr = self.head \n        length = 0 \n          \n        while curr != None: \n            length += 1\n            curr = curr.next\n          \n        return length\n\nif __name__ == '__main__': \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n  \n    llist.head.next = second\n    second.next = third\n  \n    print(\"Length of Linked List: \" + str(llist.lengthLinkedList()))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a correct function to calculate the length of a linked list in Python\n\n### Input:\n\n\n### Output:\n# Python Program to Calculate the Length of a Linked List \n  \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def lengthLinkedList(self): \n        curr = self.head \n        length = 0 \n          \n        while curr != None: \n            length += 1\n            curr = curr.next\n          \n        return length\n\nif __name__ == '__main__': \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n  \n    llist.head.next = second\n    second.next = third\n  \n    print(\"Length of Linked List: \" + str(llist.lengthLinkedList()))","tok_input_length":218,"tok_output_length":174,"system_prompt":"","index":10936}
{"question":"Write a Python program to find the length of the longest consecutive elements sequence in an array.","input":"[1, 9, 3, 10, 4, 20, 2]","expected_output":"def findLengthOfLCIS(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    ans = 1\n    prev = A[0]\n    curr_len = 1\n    for i in range(1, n):\n        if A[i] > prev:\n            curr_len += 1\n        else:\n            ans = max(ans, curr_len)\n            curr_len = 1\n        prev = A[i]\n    return max(ans, curr_len)\n\nif __name__ == '__main__':\n    A = [1, 9, 3, 10, 4, 20, 2]\n    print(\"Length of LCIS is\", findLengthOfLCIS(A))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the length of the longest consecutive elements sequence in an array.\n\n### Input:\n[1, 9, 3, 10, 4, 20, 2]\n\n### Output:\ndef findLengthOfLCIS(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    ans = 1\n    prev = A[0]\n    curr_len = 1\n    for i in range(1, n):\n        if A[i] > prev:\n            curr_len += 1\n        else:\n            ans = max(ans, curr_len)\n            curr_len = 1\n        prev = A[i]\n    return max(ans, curr_len)\n\nif __name__ == '__main__':\n    A = [1, 9, 3, 10, 4, 20, 2]\n    print(\"Length of LCIS is\", findLengthOfLCIS(A))","tok_input_length":219,"tok_output_length":153,"system_prompt":"","index":3117}
{"question":"Create a Python script which takes a string as an input and outputs the longest substring without repeating characters.","input":"Input string = \u201cabcdbcdab\u201d","expected_output":"def longest_substring(string):\n   # Stores the last occurrence of each character\n   last_occurrence = {}\n   result = [0, 1]\n   start_index = 0\n\n   for i, char in enumerate(string):\n       if char in last_occurrence:\n           start_index = max(start_index, last_occurrence[char] + 1)\n       # We can use result to store the longest substring found so far\n       if result[1] - result[0] < i + 1 - start_index:\n           result = [start_index, i + 1]\n       last_occurrence[char] = i\n\n   return string[result[0]:result[1]]\n\ninput_string = \"abcdbcdab\" \n\n# Print the output \nprint(longest_substring(input_string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script which takes a string as an input and outputs the longest substring without repeating characters.\n\n### Input:\nInput string = \u201cabcdbcdab\u201d\n\n### Output:\ndef longest_substring(string):\n   # Stores the last occurrence of each character\n   last_occurrence = {}\n   result = [0, 1]\n   start_index = 0\n\n   for i, char in enumerate(string):\n       if char in last_occurrence:\n           start_index = max(start_index, last_occurrence[char] + 1)\n       # We can use result to store the longest substring found so far\n       if result[1] - result[0] < i + 1 - start_index:\n           result = [start_index, i + 1]\n       last_occurrence[char] = i\n\n   return string[result[0]:result[1]]\n\ninput_string = \"abcdbcdab\" \n\n# Print the output \nprint(longest_substring(input_string))","tok_input_length":219,"tok_output_length":163,"system_prompt":"","index":12049}
{"question":"Create a Python script to check a given string for palindrome.","input":"\"abccb\"","expected_output":"#Function for palindrome check\ndef isPalindrome(string): \n    # Initializing left and right pointer \n    left = 0\n    right = len(string) - 1\n  \n    # run till left and right pointer are same\n    while left < right: \n        # if both characters at left and right pointers are same\n        if string[left] == string[right]:\n            left += 1\n            right -= 1\n  \n        # if the characters are not equal, return False \n        else: \n            return False\n  \n    # if the loop has ended without break, the string is a palindrome \n    return True\n\n#Inputting a string\nstring = 'abccb'\n\n#Check the string for palindrome\nif (isPalindrome(string)): \n    print(\"Input string is palindrome\")\nelse: \n    print(\"Input string is not a palindrome\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to check a given string for palindrome.\n\n### Input:\n\"abccb\"\n\n### Output:\n#Function for palindrome check\ndef isPalindrome(string): \n    # Initializing left and right pointer \n    left = 0\n    right = len(string) - 1\n  \n    # run till left and right pointer are same\n    while left < right: \n        # if both characters at left and right pointers are same\n        if string[left] == string[right]:\n            left += 1\n            right -= 1\n  \n        # if the characters are not equal, return False \n        else: \n            return False\n  \n    # if the loop has ended without break, the string is a palindrome \n    return True\n\n#Inputting a string\nstring = 'abccb'\n\n#Check the string for palindrome\nif (isPalindrome(string)): \n    print(\"Input string is palindrome\")\nelse: \n    print(\"Input string is not a palindrome\")","tok_input_length":219,"tok_output_length":176,"system_prompt":"","index":3945}
{"question":"Generate an AI algorithm in Python to predict tomorrow's Bitcoin price given a dataset of today's prices.","input":"[8882.17, 8889.11, 8890.52, 8892.11, 8895.42, 8893.94, 8899.01]","expected_output":"import numpy as np\nimport pandas as pd\n\ndef bitcoinPricePrediction(data):\n# convert data to numpy array\ndata = np.array(data)\n\n# define the model\nmodel = keras.Sequential([\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(1)])\n\n# compile and train the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.fit(data, epochs=50, verbose=1)\n\n# predict the tomorrow's bitcoin price\nprediction = model.predict(data)[0][0]\n\nreturn prediction","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an AI algorithm in Python to predict tomorrow's Bitcoin price given a dataset of today's prices.\n\n### Input:\n[8882.17, 8889.11, 8890.52, 8892.11, 8895.42, 8893.94, 8899.01]\n\n### Output:\nimport numpy as np\nimport pandas as pd\n\ndef bitcoinPricePrediction(data):\n# convert data to numpy array\ndata = np.array(data)\n\n# define the model\nmodel = keras.Sequential([\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(1)])\n\n# compile and train the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.fit(data, epochs=50, verbose=1)\n\n# predict the tomorrow's bitcoin price\nprediction = model.predict(data)[0][0]\n\nreturn prediction","tok_input_length":220,"tok_output_length":131,"system_prompt":"","index":690}
{"question":"Create a machine learning model for detecting spam emails using Python and scikit-learn.","input":"A dataset of 1000 emails, 500 labeled as spam and 500 as not spam.","expected_output":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data\nemails = pd.read_csv('emails.csv')\nX = emails['text']\ny = emails['label']\n\n# Create a CountVectorizer and fit it to our dataset\nvectorizer = CountVectorizer()\nX_vector = vectorizer.fit_transform(X)\n\n# Initialize our Multinomial Naive Bayes model and fit it to our dataset\nmodel = MultinomialNB().fit(X_vector, y)\n\n# Make predictions based on our model\npredictions = model.predict(X_vector)\n\n# Check the accuracy\naccuracy = np.mean(predictions == y)\nprint('Model accuracy is {}'.format(accuracy))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model for detecting spam emails using Python and scikit-learn.\n\n### Input:\nA dataset of 1000 emails, 500 labeled as spam and 500 as not spam.\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data\nemails = pd.read_csv('emails.csv')\nX = emails['text']\ny = emails['label']\n\n# Create a CountVectorizer and fit it to our dataset\nvectorizer = CountVectorizer()\nX_vector = vectorizer.fit_transform(X)\n\n# Initialize our Multinomial Naive Bayes model and fit it to our dataset\nmodel = MultinomialNB().fit(X_vector, y)\n\n# Make predictions based on our model\npredictions = model.predict(X_vector)\n\n# Check the accuracy\naccuracy = np.mean(predictions == y)\nprint('Model accuracy is {}'.format(accuracy))","tok_input_length":220,"tok_output_length":156,"system_prompt":"","index":16742}
{"question":"Create a basic sentiment analysis model using Python and Scikit-learn.","input":"Not applicable","expected_output":"import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load data\ndata = pd.read_csv('sentiment.csv')\nX = data.text.values\ny = data.target.values\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Vectorize the data\nvectorizer = CountVectorizer(max_features=5000)\nX_train_vectorized = vectorizer.fit_transform(X_train)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized, y_train)\n\n# Evaluate the model\nscores = model.score(vectorizer.transform(X_test), y_test)\nprint('Accuracy:', scores)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic sentiment analysis model using Python and Scikit-learn.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load data\ndata = pd.read_csv('sentiment.csv')\nX = data.text.values\ny = data.target.values\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Vectorize the data\nvectorizer = CountVectorizer(max_features=5000)\nX_train_vectorized = vectorizer.fit_transform(X_train)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized, y_train)\n\n# Evaluate the model\nscores = model.score(vectorizer.transform(X_test), y_test)\nprint('Accuracy:', scores)","tok_input_length":220,"tok_output_length":176,"system_prompt":"","index":8168}
{"question":"Create a class for binary trees in Python","input":"","expected_output":"\"\"\"\nClass for binary trees in Python.\n\"\"\"\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.key = root\n        self.left = None\n        self.right = None\n\n    def insert_left(self, new_node):\n        if self.left is None:\n            self.left = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.left = self.left\n            self.left = t\n\n    def insert_right(self, new_node):\n        if self.right is None:\n            self.right = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.right = self.right\n            self.right = t\n\n    def get_right_child(self):\n        return self.right\n\n    def get_left_child(self):\n        return self.left\n\n    def set_root_val(self, obj):\n        self.key = obj\n\n    def get_root_val(self):\n        return self.key","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class for binary trees in Python\n\n### Input:\n\n\n### Output:\n\"\"\"\nClass for binary trees in Python.\n\"\"\"\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.key = root\n        self.left = None\n        self.right = None\n\n    def insert_left(self, new_node):\n        if self.left is None:\n            self.left = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.left = self.left\n            self.left = t\n\n    def insert_right(self, new_node):\n        if self.right is None:\n            self.right = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.right = self.right\n            self.right = t\n\n    def get_right_child(self):\n        return self.right\n\n    def get_left_child(self):\n        return self.left\n\n    def set_root_val(self, obj):\n        self.key = obj\n\n    def get_root_val(self):\n        return self.key","tok_input_length":220,"tok_output_length":184,"system_prompt":"","index":3941}
{"question":"Write Python code to detect outliers in a given dataset where the values are stored in an array.","input":"dataset = [6, 7, 8, 10, 8, 8, 9, 11, 12, 15]","expected_output":"import numpy as np\n\ndef detect_outliers(data):\n    # calculate summary statistics\n    data_mean, data_std = np.mean(data), np.std(data)\n    \n    # define outliers\n    cut_off = data_std * 3\n    lower, upper = data_mean - cut_off, data_mean + cut_off\n    \n    # identify outliers\n    outliers = [x for x in data if x < lower or x > upper]\n    return outliers\n\ndataset = [6, 7, 8, 10, 8, 8, 9, 11, 12, 15]\noutliers = detect_outliers(dataset) \nprint(outliers)  # [15]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to detect outliers in a given dataset where the values are stored in an array.\n\n### Input:\ndataset = [6, 7, 8, 10, 8, 8, 9, 11, 12, 15]\n\n### Output:\nimport numpy as np\n\ndef detect_outliers(data):\n    # calculate summary statistics\n    data_mean, data_std = np.mean(data), np.std(data)\n    \n    # define outliers\n    cut_off = data_std * 3\n    lower, upper = data_mean - cut_off, data_mean + cut_off\n    \n    # identify outliers\n    outliers = [x for x in data if x < lower or x > upper]\n    return outliers\n\ndataset = [6, 7, 8, 10, 8, 8, 9, 11, 12, 15]\noutliers = detect_outliers(dataset) \nprint(outliers)  # [15]","tok_input_length":221,"tok_output_length":143,"system_prompt":"","index":4567}
{"question":"Write a script in Python for merging two or more sorted arrays.","input":"[5, 7, 11]\n[2, 3, 8]","expected_output":"def merge_arrays(arr1, arr2):\n    merged_array = []\n    \n    # While both arrays have elements\n    while len(arr1) and len(arr2):\n        if arr1[0] < arr2[0]:\n            merged_array.append(arr1.pop(0))\n        else:\n            merged_array.append(arr2.pop(0))\n \n    # If one of the array still has elements\n    while len(arr1):\n        merged_array.append(arr1.pop(0))\n    \n    while len(arr2):\n        merged_array.append(arr2.pop(0))\n    return merged_array\n\narr1 = [5, 7, 11]\narr2 = [2, 3, 8]\n  \nmerged_array = merge_arrays(arr1, arr2)\n \nprint(merged_array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python for merging two or more sorted arrays.\n\n### Input:\n[5, 7, 11]\n[2, 3, 8]\n\n### Output:\ndef merge_arrays(arr1, arr2):\n    merged_array = []\n    \n    # While both arrays have elements\n    while len(arr1) and len(arr2):\n        if arr1[0] < arr2[0]:\n            merged_array.append(arr1.pop(0))\n        else:\n            merged_array.append(arr2.pop(0))\n \n    # If one of the array still has elements\n    while len(arr1):\n        merged_array.append(arr1.pop(0))\n    \n    while len(arr2):\n        merged_array.append(arr2.pop(0))\n    return merged_array\n\narr1 = [5, 7, 11]\narr2 = [2, 3, 8]\n  \nmerged_array = merge_arrays(arr1, arr2)\n \nprint(merged_array)","tok_input_length":221,"tok_output_length":163,"system_prompt":"","index":13409}
{"question":"Write a code for implementing a stack in Python that can handle max of 10 elements.","input":"","expected_output":"\"\"\"\nWrite a code for implementing a stack in python that can handle max of 10 elements\n\"\"\"\n\nclass MyStack:\n    def __init__(self, capacity=10):\n        self.capacity = capacity\n        self.top = 0\n        self.stack = [None]*self.capacity\n\n    def push(self, item):\n        # check the stack is full or not\n        if self.top == self.capacity:\n            raise Exception('Stack is full!')\n        else:\n            self.stack[self.top] = item\n            self.top += 1\n\n    def pop(self):\n        # check the stack is empty or not\n        if self.top == 0:\n            raise Exception('Stack is empty!')\n        else:\n            item = self.stack[self.top-1]\n            self.stack[self.top-1] = None\n            self.top -= 1\n            return item","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code for implementing a stack in Python that can handle max of 10 elements.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite a code for implementing a stack in python that can handle max of 10 elements\n\"\"\"\n\nclass MyStack:\n    def __init__(self, capacity=10):\n        self.capacity = capacity\n        self.top = 0\n        self.stack = [None]*self.capacity\n\n    def push(self, item):\n        # check the stack is full or not\n        if self.top == self.capacity:\n            raise Exception('Stack is full!')\n        else:\n            self.stack[self.top] = item\n            self.top += 1\n\n    def pop(self):\n        # check the stack is empty or not\n        if self.top == 0:\n            raise Exception('Stack is empty!')\n        else:\n            item = self.stack[self.top-1]\n            self.stack[self.top-1] = None\n            self.top -= 1\n            return item","tok_input_length":221,"tok_output_length":176,"system_prompt":"","index":4086}
{"question":"Can you create an algorithm in Python to calculate the sharpe ratio?","input":"A daily return of a stock:\n2.3%, 3.3%, 8.5%, -2.3%, -1.1%, 5.3%, 3.2%, 4.2%, -3.1%, 2.1%","expected_output":"import numpy as np\n\n# Inputting daily returns\nret = np.array([0.023, 0.033, 0.085, -0.023, -0.011, 0.053, 0.032, 0.042, -0.031, 0.021])\n\n# Calculate the average returns\navg_returns = np.mean(ret)\n\n# Survey the volatility of the portfolio\nstd_returns = np.std(ret)\n\n# Calculate the Sharpe Ratio\nSharpe_Ratio = avg_returns \/ std_returns\n\nprint('The Sharpe ratio is ', Sharpe_Ratio)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create an algorithm in Python to calculate the sharpe ratio?\n\n### Input:\nA daily return of a stock:\n2.3%, 3.3%, 8.5%, -2.3%, -1.1%, 5.3%, 3.2%, 4.2%, -3.1%, 2.1%\n\n### Output:\nimport numpy as np\n\n# Inputting daily returns\nret = np.array([0.023, 0.033, 0.085, -0.023, -0.011, 0.053, 0.032, 0.042, -0.031, 0.021])\n\n# Calculate the average returns\navg_returns = np.mean(ret)\n\n# Survey the volatility of the portfolio\nstd_returns = np.std(ret)\n\n# Calculate the Sharpe Ratio\nSharpe_Ratio = avg_returns \/ std_returns\n\nprint('The Sharpe ratio is ', Sharpe_Ratio)","tok_input_length":222,"tok_output_length":125,"system_prompt":"","index":6847}
{"question":"Write a Python program to optimize a cost function using gradient descent.","input":"Cost Function: f(x) = x^2 - 10x + 25","expected_output":"import numpy as np\n\ndef cost_function(x):\n\t\"\"\"\n\tCost function to be optimized\n\t\"\"\"\n\treturn np.square(x) - 10*x + 25\n\ndef gradient_descent(x, lr):\n\t\"\"\"\n\tGradient descent optimization to minimize cost function\n\t\"\"\"\n\td_x = 2*x - 10  # Derivative of cost function\n\tx -= lr * d_x  # Update x value\n\treturn x\n\nif __name__ == '__main__':\n\tx = 5  # Initial value\n\tlr = 0.2  # Learning rate\n\t\n\t# Gradient descent loop\n\tfor _ in range(10):\n\t\tx = gradient_descent(x, lr)\n\t\tcost = cost_function(x)\n\t\t\n\tprint(\"Optimized x = {}, cost = {}\".format(x, cost))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a cost function using gradient descent.\n\n### Input:\nCost Function: f(x) = x^2 - 10x + 25\n\n### Output:\nimport numpy as np\n\ndef cost_function(x):\n\t\"\"\"\n\tCost function to be optimized\n\t\"\"\"\n\treturn np.square(x) - 10*x + 25\n\ndef gradient_descent(x, lr):\n\t\"\"\"\n\tGradient descent optimization to minimize cost function\n\t\"\"\"\n\td_x = 2*x - 10  # Derivative of cost function\n\tx -= lr * d_x  # Update x value\n\treturn x\n\nif __name__ == '__main__':\n\tx = 5  # Initial value\n\tlr = 0.2  # Learning rate\n\t\n\t# Gradient descent loop\n\tfor _ in range(10):\n\t\tx = gradient_descent(x, lr)\n\t\tcost = cost_function(x)\n\t\t\n\tprint(\"Optimized x = {}, cost = {}\".format(x, cost))","tok_input_length":222,"tok_output_length":164,"system_prompt":"","index":8092}
{"question":"Write a Python program to detect and remove loop in a linked list.","input":"","expected_output":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None\n\ndef detect_loop(head):\n  fast_ptr = head\n  slow_ptr = head\n\n  while (slow_ptr and fast_ptr and fast_ptr.next):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next.next\n      if slow_ptr == fast_ptr:\n          return slow_ptr\n\n  return None\n\ndef remove_loop(head, loop_ptr):\n  slow_ptr = head\n  fast_ptr = loop_ptr\n\n  while (slow_ptr != fast_ptr):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next\n\n  prev_slow_ptr = None\n  while (slow_ptr != fast_ptr):\n    prev_slow_ptr = slow_ptr\n    slow_ptr = slow_ptr.next\n    fast_ptr = fast_ptr.next\n\n  prev_slow_ptr.next = None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect and remove loop in a linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None\n\ndef detect_loop(head):\n  fast_ptr = head\n  slow_ptr = head\n\n  while (slow_ptr and fast_ptr and fast_ptr.next):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next.next\n      if slow_ptr == fast_ptr:\n          return slow_ptr\n\n  return None\n\ndef remove_loop(head, loop_ptr):\n  slow_ptr = head\n  fast_ptr = loop_ptr\n\n  while (slow_ptr != fast_ptr):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next\n\n  prev_slow_ptr = None\n  while (slow_ptr != fast_ptr):\n    prev_slow_ptr = slow_ptr\n    slow_ptr = slow_ptr.next\n    fast_ptr = fast_ptr.next\n\n  prev_slow_ptr.next = None","tok_input_length":222,"tok_output_length":181,"system_prompt":"","index":4614}
{"question":"Generate a set of Python functions to take inputs values from a list of objects and output a result. The output for each object should include the object's ID and the calculated results from the given inputs.","input":"[{\"id\": 1, \"inputs\": [1,2,3]}, {\"id\": 2, \"inputs\": [2,3,4]}]","expected_output":"def calculate_result(obj_list):\n result_list = []\n\n for obj in obj_list:\n  result = {}\n  result['id'] = obj['id']\n  result['result'] = sum(obj['inputs'])\n\n result_list.append(result)\n\nreturn result_list\n\nobj_list = [{\"id\": 1, \"inputs\": [1,2,3]}, \n{\"id\": 2, \"inputs\": [2,3,4]}]\n\nprint(calculate_result(obj_list))\n\n# Output: [{'id': 1, 'result': 6}, {'id': 2, 'result': 9}]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a set of Python functions to take inputs values from a list of objects and output a result. The output for each object should include the object's ID and the calculated results from the given inputs.\n\n### Input:\n[{\"id\": 1, \"inputs\": [1,2,3]}, {\"id\": 2, \"inputs\": [2,3,4]}]\n\n### Output:\ndef calculate_result(obj_list):\n result_list = []\n\n for obj in obj_list:\n  result = {}\n  result['id'] = obj['id']\n  result['result'] = sum(obj['inputs'])\n\n result_list.append(result)\n\nreturn result_list\n\nobj_list = [{\"id\": 1, \"inputs\": [1,2,3]}, \n{\"id\": 2, \"inputs\": [2,3,4]}]\n\nprint(calculate_result(obj_list))\n\n# Output: [{'id': 1, 'result': 6}, {'id': 2, 'result': 9}]","tok_input_length":223,"tok_output_length":122,"system_prompt":"","index":340}
{"question":"Write Python code to merge two sorted lists.","input":"Lists A and B contain the elements [2,4,6] and [3,5,7] respectively.","expected_output":"def merge_sorted_lists(listA, listB): \n    merged_list = []\n    ptrA = 0\n    ptrB = 0\n    while ptrA < len(listA) and ptrB < len(listB): \n        if listA[ptrA] <= listB[ptrB]: \n            merged_list.append(listA[ptrA]) \n            ptrA += 1\n        else: \n            merged_list.append(listB[ptrB]) \n            ptrB += 1\n    while ptrA < len(listA): \n        merged_list.append(listA[ptrA]) \n        ptrA += 1\n    while ptrB < len(listB):\n        merged_list.append(listB[ptrB])\n        ptrB += 1\n    return merged_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to merge two sorted lists.\n\n### Input:\nLists A and B contain the elements [2,4,6] and [3,5,7] respectively.\n\n### Output:\ndef merge_sorted_lists(listA, listB): \n    merged_list = []\n    ptrA = 0\n    ptrB = 0\n    while ptrA < len(listA) and ptrB < len(listB): \n        if listA[ptrA] <= listB[ptrB]: \n            merged_list.append(listA[ptrA]) \n            ptrA += 1\n        else: \n            merged_list.append(listB[ptrB]) \n            ptrB += 1\n    while ptrA < len(listA): \n        merged_list.append(listA[ptrA]) \n        ptrA += 1\n    while ptrB < len(listB):\n        merged_list.append(listB[ptrB])\n        ptrB += 1\n    return merged_list","tok_input_length":223,"tok_output_length":163,"system_prompt":"","index":354}
{"question":"Generate code to compare two objects in Python.","input":"","expected_output":"def compare_objects(obj1, obj2):\n    # Compare type\n    if type(obj1) != type(obj2):\n        return False\n    # Compare values\n    if isinstance(obj1, (int, float)):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, str):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, tuple):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, list):\n        if len(obj1) == len(obj2):\n            if all(x == y for x, y in zip(obj1, obj2)):\n                return True\n            else:\n                return False\n    elif isinstance(obj1, dict):\n        if len(obj1) == len(obj2):\n            if obj1 == obj2:\n                return True \n            else:\n                return False\n\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to compare two objects in Python.\n\n### Input:\n\n\n### Output:\ndef compare_objects(obj1, obj2):\n    # Compare type\n    if type(obj1) != type(obj2):\n        return False\n    # Compare values\n    if isinstance(obj1, (int, float)):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, str):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, tuple):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, list):\n        if len(obj1) == len(obj2):\n            if all(x == y for x, y in zip(obj1, obj2)):\n                return True\n            else:\n                return False\n    elif isinstance(obj1, dict):\n        if len(obj1) == len(obj2):\n            if obj1 == obj2:\n                return True \n            else:\n                return False\n\n    return True","tok_input_length":223,"tok_output_length":187,"system_prompt":"","index":3315}
{"question":"Write a Python program for generating a password that meets the following criteria:","input":"Length 8 characters, At least one lowercase letter, At least one uppercase letter, At least one special character","expected_output":"import random\nimport string\n\ndef generate_password(length, lowercase, uppercase, special):\n    characters = string.ascii_letters + string.digits + '!\"#$%&\\'()*+,-.\/:;<=>?@[\\\\]^_{|}~'\n    password = ''\n    for i in range(length): \n        if lowercase > 0:\n            password += random.choice(string.ascii_lowercase)\n            lowercase -= 1\n        elif uppercase > 0:\n            password += random.choice(string.ascii_uppercase)\n            uppercase -= 1\n        elif special > 0:\n            password += random.choice(special)\n            special -= 1\n        else:\n            password += random.choice(characters)\n    return password\n\nprint(generate_password(8, 1, 1, 1))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for generating a password that meets the following criteria:\n\n### Input:\nLength 8 characters, At least one lowercase letter, At least one uppercase letter, At least one special character\n\n### Output:\nimport random\nimport string\n\ndef generate_password(length, lowercase, uppercase, special):\n    characters = string.ascii_letters + string.digits + '!\"#$%&\\'()*+,-.\/:;<=>?@[\\\\]^_{|}~'\n    password = ''\n    for i in range(length): \n        if lowercase > 0:\n            password += random.choice(string.ascii_lowercase)\n            lowercase -= 1\n        elif uppercase > 0:\n            password += random.choice(string.ascii_uppercase)\n            uppercase -= 1\n        elif special > 0:\n            password += random.choice(special)\n            special -= 1\n        else:\n            password += random.choice(characters)\n    return password\n\nprint(generate_password(8, 1, 1, 1))","tok_input_length":224,"tok_output_length":160,"system_prompt":"","index":13141}
{"question":"Develop a Python program to input an integer and print all its digits in the English language.","input":"Number: 678","expected_output":"# Function to convert an integer to its English equivalent\ndef convert(num):\n # Dictionary of numbers in the English language\n numbers = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine'\n }\n\n # Convert number to string\n num = str(num)\n result = ''\n\n # Iterate through each digit\n for digit in num:\n  result += numbers[int(digit)] + ' '\n\n # Return the result\n return result\n\n# Take input from the user\nnum = int(input('Enter a number: '))\n\n# Convert the number to its English equivalent\nprint(convert(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to input an integer and print all its digits in the English language.\n\n### Input:\nNumber: 678\n\n### Output:\n# Function to convert an integer to its English equivalent\ndef convert(num):\n # Dictionary of numbers in the English language\n numbers = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine'\n }\n\n # Convert number to string\n num = str(num)\n result = ''\n\n # Iterate through each digit\n for digit in num:\n  result += numbers[int(digit)] + ' '\n\n # Return the result\n return result\n\n# Take input from the user\nnum = int(input('Enter a number: '))\n\n# Convert the number to its English equivalent\nprint(convert(num))","tok_input_length":224,"tok_output_length":174,"system_prompt":"","index":9674}
{"question":"Create a Python program to handle calendars and reminders.","input":"Not applicable","expected_output":"import datetime \n\n# Sample reminder \nreminders = [\n {\n \"date\": \"2021-02-14\",\n \"title\": \"Valentine's Day\",\n \"description\": \"Buy a heart-shaped document for your beloved!\",\n },\n {\n \"date\": \"2021-04-01\",\n \"title\": \"April Fool's Day\",\n \"description\": \"Camouflage pranks on the family!\",\n },\n] \n\n# Function to add reminders \ndef add_reminder(reminder):\n reminder['date'] = datetime.datetime.strptime(reminder['date'], '%Y-%m-%d').date()\n reminders.append(reminder)\n\n# Function to remove reminders \ndef remove_reminder(index):\n reminders.pop(index)\n\n# Function to list reminders \ndef list_reminders():\n for index, reminder in enumerate(reminders):\n    print(f\"{index}. {reminder['title']} - {reminder['date']}: {reminder['description']}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to handle calendars and reminders.\n\n### Input:\nNot applicable\n\n### Output:\nimport datetime \n\n# Sample reminder \nreminders = [\n {\n \"date\": \"2021-02-14\",\n \"title\": \"Valentine's Day\",\n \"description\": \"Buy a heart-shaped document for your beloved!\",\n },\n {\n \"date\": \"2021-04-01\",\n \"title\": \"April Fool's Day\",\n \"description\": \"Camouflage pranks on the family!\",\n },\n] \n\n# Function to add reminders \ndef add_reminder(reminder):\n reminder['date'] = datetime.datetime.strptime(reminder['date'], '%Y-%m-%d').date()\n reminders.append(reminder)\n\n# Function to remove reminders \ndef remove_reminder(index):\n reminders.pop(index)\n\n# Function to list reminders \ndef list_reminders():\n for index, reminder in enumerate(reminders):\n    print(f\"{index}. {reminder['title']} - {reminder['date']}: {reminder['description']}\")","tok_input_length":224,"tok_output_length":184,"system_prompt":"","index":16172}
{"question":"Use Python and SQL to create a basic database for a fictional company. The company has a list of products, employees, and customers. The database should include models and relations for these three.","input":"Not applicable","expected_output":"from sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Product(Base):\n __tablename__ = 'product'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Employee(Base):\n __tablename__ = 'employee'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Customer(Base):\n __tablename__ = 'customer'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Purchase(Base):\n __tablename__ = 'purchase'\n id = Column(Integer, primary_key=True)\n product_id = Column(Integer, ForeignKey('product.id'))\n employee_id = Column(Integer, ForeignKey('employee.id'))\n customer_id = Column(Integer, ForeignKey('customer.id'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python and SQL to create a basic database for a fictional company. The company has a list of products, employees, and customers. The database should include models and relations for these three.\n\n### Input:\nNot applicable\n\n### Output:\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Product(Base):\n __tablename__ = 'product'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Employee(Base):\n __tablename__ = 'employee'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Customer(Base):\n __tablename__ = 'customer'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Purchase(Base):\n __tablename__ = 'purchase'\n id = Column(Integer, primary_key=True)\n product_id = Column(Integer, ForeignKey('product.id'))\n employee_id = Column(Integer, ForeignKey('employee.id'))\n customer_id = Column(Integer, ForeignKey('customer.id'))","tok_input_length":225,"tok_output_length":157,"system_prompt":"","index":17496}
{"question":"Create an API route in Python to return the top three highest-priced products.","input":"Not applicable","expected_output":"import json\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nproducts = [\n {\n  \"name\": \"book\",\n  \"price\": 15\n }, \n {\n  \"name\": \"pen\",\n  \"price\": 5\n }, \n {\n  \"name\": \"tablet\",\n  \"price\": 200\n }, \n {\n  \"name\": \"chair\",\n  \"price\": 80\n }\n]\n\n@app.route(\"\/top_three_products\", methods=[\"GET\"])\ndef get_top_three_products():\n   # Sort the list of products by price in descending order\n   sorted_products = sorted(products, key=lambda product: -product['price'])\n   # Return only the top 3 products\n   highest_priced_products = sorted_products[:3]\n   return jsonify(highest_priced_products)\n\nif __name__ == \"__main__\":\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API route in Python to return the top three highest-priced products.\n\n### Input:\nNot applicable\n\n### Output:\nimport json\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nproducts = [\n {\n  \"name\": \"book\",\n  \"price\": 15\n }, \n {\n  \"name\": \"pen\",\n  \"price\": 5\n }, \n {\n  \"name\": \"tablet\",\n  \"price\": 200\n }, \n {\n  \"name\": \"chair\",\n  \"price\": 80\n }\n]\n\n@app.route(\"\/top_three_products\", methods=[\"GET\"])\ndef get_top_three_products():\n   # Sort the list of products by price in descending order\n   sorted_products = sorted(products, key=lambda product: -product['price'])\n   # Return only the top 3 products\n   highest_priced_products = sorted_products[:3]\n   return jsonify(highest_priced_products)\n\nif __name__ == \"__main__\":\n    app.run()","tok_input_length":225,"tok_output_length":180,"system_prompt":"","index":1289}
{"question":"Design a Python program which takes in a text-based menu from a restaurant,  organizes it into sections, and prints out the menu in a neat format.","input":"\"Burgers: \nCheeseburger - $7 \nHamburger - $6 \n\nDrinks: \nSoda - $1 \nWater - $1\n\nWings:\nMild - $10 \nHot - $12\n\nDesserts:\nIce Cream - $4\"","expected_output":"menu = {\n 'Burgers': {\n 'Cheeseburger': 7,\n 'Hamburger': 6\n },\n 'Drinks': {\n 'Soda': 1,\n 'Water': 1\n },\n 'Wings': {\n 'Mild': 10,\n 'Hot': 12\n },\n 'Desserts': {\n 'Ice Cream': 4\n }\n}\n\nfor section, items in menu.items():\n print(section)\n for item, price in items.items():\n  print(f'{item} - ${price}')\n print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program which takes in a text-based menu from a restaurant,  organizes it into sections, and prints out the menu in a neat format.\n\n### Input:\n\"Burgers: \nCheeseburger - $7 \nHamburger - $6 \n\nDrinks: \nSoda - $1 \nWater - $1\n\nWings:\nMild - $10 \nHot - $12\n\nDesserts:\nIce Cream - $4\"\n\n### Output:\nmenu = {\n 'Burgers': {\n 'Cheeseburger': 7,\n 'Hamburger': 6\n },\n 'Drinks': {\n 'Soda': 1,\n 'Water': 1\n },\n 'Wings': {\n 'Mild': 10,\n 'Hot': 12\n },\n 'Desserts': {\n 'Ice Cream': 4\n }\n}\n\nfor section, items in menu.items():\n print(section)\n for item, price in items.items():\n  print(f'{item} - ${price}')\n print()","tok_input_length":226,"tok_output_length":110,"system_prompt":"","index":7980}
{"question":"Create a Python script that takes in an array with numbers and returns an array with all the even numbers in the original array.","input":"[1, 2, 3, 4, 5, 6, 7, 8]","expected_output":"def even_numbers(numbers):\n \n  # Initialize an empty array to store the even numbers\n  even_numbers_array = []\n  \n  # Iterate through the numbers array\n  for number in numbers:\n    \n    # Check if the number is even\n    if number % 2 == 0:\n      \n      # If the number is even, add it to the even_numbers_array\n      even_numbers_array.append(number)\n      \n  # Return the even_numbers_array  \n  return even_numbers_array\n  \n# Test it\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(even_numbers(numbers)) # Should return [2, 4, 6, 8]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes in an array with numbers and returns an array with all the even numbers in the original array.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8]\n\n### Output:\ndef even_numbers(numbers):\n \n  # Initialize an empty array to store the even numbers\n  even_numbers_array = []\n  \n  # Iterate through the numbers array\n  for number in numbers:\n    \n    # Check if the number is even\n    if number % 2 == 0:\n      \n      # If the number is even, add it to the even_numbers_array\n      even_numbers_array.append(number)\n      \n  # Return the even_numbers_array  \n  return even_numbers_array\n  \n# Test it\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(even_numbers(numbers)) # Should return [2, 4, 6, 8]","tok_input_length":226,"tok_output_length":150,"system_prompt":"","index":11575}
{"question":"Create a Python class which detects whether a sentence is an anagram.","input":"sentence1 = \"hello world\"\nsentence2 = \"world hello\"","expected_output":"class AnagramDetector:\n    def __init__(self, sentence1, sentence2):\n        self.sentence1 = sentence1\n        self.sentence2 = sentence2\n    \n    def is_anagram(self):\n        # put words in sentences in lowercase\n        s1_words = [word.lower() for word in self.sentence1.split()]\n        s2_words = [word.lower() for word in self.sentence2.split()]\n        \n        # compare the length of the words\n        if len(s1_words) != len(s2_words):\n            return False\n        \n        # compare the words in both list\n        for word in s1_words:\n            if word not in s2_words:\n                return False\n        \n        return True\n\ndetector = AnagramDetector(sentence1, sentence2)\nresult = detector.is_anagram()\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class which detects whether a sentence is an anagram.\n\n### Input:\nsentence1 = \"hello world\"\nsentence2 = \"world hello\"\n\n### Output:\nclass AnagramDetector:\n    def __init__(self, sentence1, sentence2):\n        self.sentence1 = sentence1\n        self.sentence2 = sentence2\n    \n    def is_anagram(self):\n        # put words in sentences in lowercase\n        s1_words = [word.lower() for word in self.sentence1.split()]\n        s2_words = [word.lower() for word in self.sentence2.split()]\n        \n        # compare the length of the words\n        if len(s1_words) != len(s2_words):\n            return False\n        \n        # compare the words in both list\n        for word in s1_words:\n            if word not in s2_words:\n                return False\n        \n        return True\n\ndetector = AnagramDetector(sentence1, sentence2)\nresult = detector.is_anagram()\nprint(result)","tok_input_length":226,"tok_output_length":171,"system_prompt":"","index":5825}
{"question":"Create a Python program to build a chatbot with a user-specified name.","input":"Not applicable","expected_output":"# Create an instance of the Chatbot class\nclass Chatbot:\n    def __init__(self, name):\n        self.name = name\n        self.conversations = []\n \n    # Input a message and get a response from the bot\n    def get_response(self, message):\n        response = \"I don't understand what you're saying.\"\n        if message in self.conversations:\n            response = self.conversations[message]\n        return response\n \n# Create the bot\nname = input(\"What should I call you? \")\nchatbot = Chatbot(name)\nprint(\"Nice to meet you, \" + name + \"!\")\n \nloop = True\nwhile loop:\n    message = input(\"You: \")\n    response = chatbot.get_response(message)\n    print(name + \": \" + response)\n    if message == \"bye\":\n        loop = False\n        print(\"Goodbye!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to build a chatbot with a user-specified name.\n\n### Input:\nNot applicable\n\n### Output:\n# Create an instance of the Chatbot class\nclass Chatbot:\n    def __init__(self, name):\n        self.name = name\n        self.conversations = []\n \n    # Input a message and get a response from the bot\n    def get_response(self, message):\n        response = \"I don't understand what you're saying.\"\n        if message in self.conversations:\n            response = self.conversations[message]\n        return response\n \n# Create the bot\nname = input(\"What should I call you? \")\nchatbot = Chatbot(name)\nprint(\"Nice to meet you, \" + name + \"!\")\n \nloop = True\nwhile loop:\n    message = input(\"You: \")\n    response = chatbot.get_response(message)\n    print(name + \": \" + response)\n    if message == \"bye\":\n        loop = False\n        print(\"Goodbye!\")","tok_input_length":226,"tok_output_length":180,"system_prompt":"","index":8012}
{"question":"Create an AI program in Python that predicts the temperature on a given day.","input":"csv file with the following data:\nday; temperature\n1; 25 \n2; 28\n3; 29\n4; 24\n5; 26\n6; 25\n7; 27\n8; 29\n9; 28\n10; 28","expected_output":"import pandas as pd\nimport numpy as np\n\n# read the csv file\ndata = pd.read_csv('temperature_data.csv')\n\n# define feature and target variables\nX = data['day'].values.reshape(-1,1)\ny = data['temperature'].values\n\n# train the model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# make prediction \nx_pred = 11\nprediction = model.predict(np.array([x_pred]).reshape(-1,1))\n\nprint(\"The predicted temperature for day {} is: {}\".format(x_pred, prediction[0]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI program in Python that predicts the temperature on a given day.\n\n### Input:\ncsv file with the following data:\nday; temperature\n1; 25 \n2; 28\n3; 29\n4; 24\n5; 26\n6; 25\n7; 27\n8; 29\n9; 28\n10; 28\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\n# read the csv file\ndata = pd.read_csv('temperature_data.csv')\n\n# define feature and target variables\nX = data['day'].values.reshape(-1,1)\ny = data['temperature'].values\n\n# train the model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# make prediction \nx_pred = 11\nprediction = model.predict(np.array([x_pred]).reshape(-1,1))\n\nprint(\"The predicted temperature for day {} is: {}\".format(x_pred, prediction[0]))","tok_input_length":227,"tok_output_length":124,"system_prompt":"","index":8022}
{"question":"Enhance the output of a Python program that prints the Fibonacci sequence in a reverse order. Only include numbers that are divisible by 3.","input":"Not applicable","expected_output":"def Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return a \n elif n == 1: \n  return b \n else: \n  for i in range(2,n+1): \n   c = a + b \n   a = b \n   b = c \n return b \n\n# Driver Program \nnterms = 20\n\n# check if the number of terms is valid \nif nterms <= 0: \n print(\"Please enter a positive integer\") \nelse: \n print(\"Fibonacci sequence:\") \n for i in range(nterms, 0, -1):\n  if Fibonacci(i) % 3 == 0:\n   print(Fibonacci(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEnhance the output of a Python program that prints the Fibonacci sequence in a reverse order. Only include numbers that are divisible by 3.\n\n### Input:\nNot applicable\n\n### Output:\ndef Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return a \n elif n == 1: \n  return b \n else: \n  for i in range(2,n+1): \n   c = a + b \n   a = b \n   b = c \n return b \n\n# Driver Program \nnterms = 20\n\n# check if the number of terms is valid \nif nterms <= 0: \n print(\"Please enter a positive integer\") \nelse: \n print(\"Fibonacci sequence:\") \n for i in range(nterms, 0, -1):\n  if Fibonacci(i) % 3 == 0:\n   print(Fibonacci(i))","tok_input_length":227,"tok_output_length":169,"system_prompt":"","index":11195}
{"question":"Create a Python script to generate an XML sitemap of a website.","input":"Example of a website URL","expected_output":"import requests\nfrom bs4 import BeautifulSoup\nfrom xml.dom import minidom\n\n# Get the website content\nurl = \"http:\/\/example.com\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# Create the XML document\ndoc = minidom.Document()\nroot = doc.createElement('urlset')\nroot.setAttribute(\"xmlns\", \"http:\/\/www.sitemaps.org\/schemas\/sitemap\/0.9\")\n\n# Parse the website pages\nfor link in soup.find_all('a'):\n        page = doc.createElement('url')\n        page.appendChild(doc.createElement('loc')).appendChild(doc.createTextNode(link.get('href')))\n        root.appendChild(page)\n\n# Generate the file\ndoc.appendChild(root)\nfilename = \"sitemap.xml\"\nf = open(filename,\"w\")\ndoc.writexml(f, indent=\"  \", addindent=\"  \", newl='\\n')\nf.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate an XML sitemap of a website.\n\n### Input:\nExample of a website URL\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nfrom xml.dom import minidom\n\n# Get the website content\nurl = \"http:\/\/example.com\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# Create the XML document\ndoc = minidom.Document()\nroot = doc.createElement('urlset')\nroot.setAttribute(\"xmlns\", \"http:\/\/www.sitemaps.org\/schemas\/sitemap\/0.9\")\n\n# Parse the website pages\nfor link in soup.find_all('a'):\n        page = doc.createElement('url')\n        page.appendChild(doc.createElement('loc')).appendChild(doc.createTextNode(link.get('href')))\n        root.appendChild(page)\n\n# Generate the file\ndoc.appendChild(root)\nfilename = \"sitemap.xml\"\nf = open(filename,\"w\")\ndoc.writexml(f, indent=\"  \", addindent=\"  \", newl='\\n')\nf.close()","tok_input_length":227,"tok_output_length":180,"system_prompt":"","index":13846}
{"question":"Build a decision tree classifier in Python that classfies the given data points.","input":"[[2,1,1], [2,2,0], [2,0,1], [1,1,1], [1,0,1], [1,2,0], [0,2,0], [0,1,1], [0,0,1]]","expected_output":"import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = np.matrix('2 1 1; 2 2 0; 2 0 1; 1 1 1; 1 0 1; 1 2 0; 0 2 0; 0 1 1; 0 0 1')\nY = np.array([1, 0, 1, 1, 1, 0, 0, 1, 1])\n\nmodel = DecisionTreeClassifier().fit(X,Y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a decision tree classifier in Python that classfies the given data points.\n\n### Input:\n[[2,1,1], [2,2,0], [2,0,1], [1,1,1], [1,0,1], [1,2,0], [0,2,0], [0,1,1], [0,0,1]]\n\n### Output:\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = np.matrix('2 1 1; 2 2 0; 2 0 1; 1 1 1; 1 0 1; 1 2 0; 0 2 0; 0 1 1; 0 0 1')\nY = np.array([1, 0, 1, 1, 1, 0, 0, 1, 1])\n\nmodel = DecisionTreeClassifier().fit(X,Y)","tok_input_length":228,"tok_output_length":122,"system_prompt":"","index":17912}
{"question":"Create a Python program to detect the occurrence of a certain word in a collection of text documents.","input":"A collection of 10 text documents from a news website and the word is \"coronavirus\".","expected_output":"import os\n\ndef detect_coronavirus(input_dir):\n    # input_dir - The directory containing the text documents\n    total_occurrences = 0\n\n    # Iterate through each file in the input_dir\n    for file in os.listdir(input_dir):\n        file_path = os.path.join(input_dir, file)\n\n        # Read the file\n        with open(file_path, 'r') as f:\n            data = f.read()\n\n            # Detect the occurrences of the word \"coronavirus\"\n            occurrence_count = data.lower().count(\"coronavirus\")\n            total_occurrences += occurrence_count\n\n    return total_occurrences\n\n# Call the function\noccurrences = detect_coronavirus('input_dir')\nprint(f'The word \"coronavirus\" has occurred {occurrences} times.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to detect the occurrence of a certain word in a collection of text documents.\n\n### Input:\nA collection of 10 text documents from a news website and the word is \"coronavirus\".\n\n### Output:\nimport os\n\ndef detect_coronavirus(input_dir):\n    # input_dir - The directory containing the text documents\n    total_occurrences = 0\n\n    # Iterate through each file in the input_dir\n    for file in os.listdir(input_dir):\n        file_path = os.path.join(input_dir, file)\n\n        # Read the file\n        with open(file_path, 'r') as f:\n            data = f.read()\n\n            # Detect the occurrences of the word \"coronavirus\"\n            occurrence_count = data.lower().count(\"coronavirus\")\n            total_occurrences += occurrence_count\n\n    return total_occurrences\n\n# Call the function\noccurrences = detect_coronavirus('input_dir')\nprint(f'The word \"coronavirus\" has occurred {occurrences} times.')","tok_input_length":228,"tok_output_length":162,"system_prompt":"","index":2987}
{"question":"Create a python program that converts a number to its Roman Numeral equivalent.","input":"10","expected_output":"def int_to_Roman(number): \n  \n    num = [1, 4, 5, 9, 10, 40, 50, 90, \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n  \n        while div: \n            print(sym[i], end = \"\") \n            div -= 1\n        i -= 1\n  \n# Driver Code \nif __name__ == \"__main__\": \n    number = 10\n    int_to_Roman(number)\n\n# Output:\nX","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that converts a number to its Roman Numeral equivalent.\n\n### Input:\n10\n\n### Output:\ndef int_to_Roman(number): \n  \n    num = [1, 4, 5, 9, 10, 40, 50, 90, \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n  \n        while div: \n            print(sym[i], end = \"\") \n            div -= 1\n        i -= 1\n  \n# Driver Code \nif __name__ == \"__main__\": \n    number = 10\n    int_to_Roman(number)\n\n# Output:\nX","tok_input_length":228,"tok_output_length":184,"system_prompt":"","index":2382}
{"question":"Create a code in python for performing principal component analysis on the given dataset.","input":"import pandas as pd\n\ndata = {'Name':['Alice','Bob','Charlie','Dave','Emily'], \n        'Score1':[62,89,85,72,74],\n        'Score2':[64,87,84,78,76]}\n\ndf = pd.DataFrame(data)","expected_output":"import pandas as pd\nfrom sklearn.decomposition import PCA\n\ndata = {'Name':['Alice','Bob','Charlie','Dave','Emily'], \n        'Score1':[62,89,85,72,74],\n        'Score2':[64,87,84,78,76]}\n\ndf = pd.DataFrame(data)\n\n# Define X and y\nX = df[['Score1', 'Score2']]\ny = df['Name']\n\n# Perform PCA\npca = PCA(n_components=2)\nX_reduced = pca.fit_transform(X)\n\n# Print the explained variance for each component\nprint(pca.explained_variance_ratio_)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code in python for performing principal component analysis on the given dataset.\n\n### Input:\nimport pandas as pd\n\ndata = {'Name':['Alice','Bob','Charlie','Dave','Emily'], \n        'Score1':[62,89,85,72,74],\n        'Score2':[64,87,84,78,76]}\n\ndf = pd.DataFrame(data)\n\n### Output:\nimport pandas as pd\nfrom sklearn.decomposition import PCA\n\ndata = {'Name':['Alice','Bob','Charlie','Dave','Emily'], \n        'Score1':[62,89,85,72,74],\n        'Score2':[64,87,84,78,76]}\n\ndf = pd.DataFrame(data)\n\n# Define X and y\nX = df[['Score1', 'Score2']]\ny = df['Name']\n\n# Perform PCA\npca = PCA(n_components=2)\nX_reduced = pca.fit_transform(X)\n\n# Print the explained variance for each component\nprint(pca.explained_variance_ratio_)","tok_input_length":229,"tok_output_length":129,"system_prompt":"","index":12899}
{"question":"Implement a program to delete an element from the given array.","input":"[1, 2, 3, 4, 5]","expected_output":"# Python program to delete an element from a given array\n\narr = [1, 2, 3, 4, 5]\n\n# function to delete an element from the array\ndef deleteElem(arr, n):\n \n    # Used in conjunction with remove\n    # to only delete one element\n    x = 0\n \n    # Iterate the array and search for\n    # the element to be deleted\n    for i in range (0, n):\n        if arr[i] == x:\n            break\n \n    # If element found, delete the\n    # element using pop()\n    if i < n:\n        arr.pop(i)\n \n    # Print the array after deletion\n    for i in range(0, n-1):\n            print(arr[i], end=\" \")\n \n# Driver program\ndeleteElem(arr, 5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a program to delete an element from the given array.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\n# Python program to delete an element from a given array\n\narr = [1, 2, 3, 4, 5]\n\n# function to delete an element from the array\ndef deleteElem(arr, n):\n \n    # Used in conjunction with remove\n    # to only delete one element\n    x = 0\n \n    # Iterate the array and search for\n    # the element to be deleted\n    for i in range (0, n):\n        if arr[i] == x:\n            break\n \n    # If element found, delete the\n    # element using pop()\n    if i < n:\n        arr.pop(i)\n \n    # Print the array after deletion\n    for i in range(0, n-1):\n            print(arr[i], end=\" \")\n \n# Driver program\ndeleteElem(arr, 5)","tok_input_length":229,"tok_output_length":175,"system_prompt":"","index":8338}
{"question":"Generate a Python program to perform matrix multiplication.","input":"A = [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]] \n\nB = [[7, 8, 9],\n     [4, 5, 6],\n     [1, 2, 3]]","expected_output":"def matrixMultiplication(A,B): \n \n    return [[sum(a*b for a,b in zip(A_row,B_col))  \n                 for B_col in zip(*B)] for A_row in A] \n\nA = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]] \n\nB = [[7, 8, 9], \n     [4, 5, 6], \n     [1, 2, 3]]\n\nC = matrixMultiplication(A,B) \n\nfor i in range(len(C)): \n    print(C[i])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to perform matrix multiplication.\n\n### Input:\nA = [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]] \n\nB = [[7, 8, 9],\n     [4, 5, 6],\n     [1, 2, 3]]\n\n### Output:\ndef matrixMultiplication(A,B): \n \n    return [[sum(a*b for a,b in zip(A_row,B_col))  \n                 for B_col in zip(*B)] for A_row in A] \n\nA = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]] \n\nB = [[7, 8, 9], \n     [4, 5, 6], \n     [1, 2, 3]]\n\nC = matrixMultiplication(A,B) \n\nfor i in range(len(C)): \n    print(C[i])","tok_input_length":230,"tok_output_length":131,"system_prompt":"","index":1020}
{"question":"Develop a Python program to sort a given array using Quicksort","input":"[1, 5, 7, 0, 3]","expected_output":"def partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n  \n    for j in range(low, high): \n        if arr[j] < pivot: \n            i += 1\n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return i+1\n  \ndef quick_sort(arr, low, high): \n    if low < high: \n        pi = partition(arr, low, high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high) \n\nresult = quick_sort([1, 5, 7, 0, 3], 0, 4) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to sort a given array using Quicksort\n\n### Input:\n[1, 5, 7, 0, 3]\n\n### Output:\ndef partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n  \n    for j in range(low, high): \n        if arr[j] < pivot: \n            i += 1\n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return i+1\n  \ndef quick_sort(arr, low, high): \n    if low < high: \n        pi = partition(arr, low, high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high) \n\nresult = quick_sort([1, 5, 7, 0, 3], 0, 4) \nprint(result)","tok_input_length":230,"tok_output_length":174,"system_prompt":"","index":9385}
{"question":"Design a Python program to classify a given set of data using a decision tree.","input":"","expected_output":"# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Importing the dataset\ndataset = pd.read_csv('data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Fitting the Decision Tree Classification to the Training set\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to classify a given set of data using a decision tree.\n\n### Input:\n\n\n### Output:\n# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Importing the dataset\ndataset = pd.read_csv('data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Fitting the Decision Tree Classification to the Training set\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","tok_input_length":230,"tok_output_length":187,"system_prompt":"","index":12551}
{"question":"Write a Python program to create a dictionary from two given lists. The lists should be of equal length and the values in the dictionary should be the elements of the lists at the same index.","input":"list_1 = [1,2,3]\nlist_2 = [\"A\",\"B\",\"C\"]","expected_output":"list_1 = [1,2,3]\nlist_2 = [\"A\",\"B\",\"C\"]\n\n# define a function to create the dictionary\ndef create_dict(l1,l2):\n # dictionary variable\n dict={}\n # loop through both the lists\n for i in range(len(l1)):\n  # add the values to the dictionary\n  dict[l1[i]]=l2[i]\n # return the dictionary\n return dict\n\n# get the dictionary by calling the function\ndict_1_2=create_dict(list_1,list_2)\n\n# print the output\nprint(dict_1_2)\n# Output: {1: 'A', 2: 'B', 3: 'C'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a dictionary from two given lists. The lists should be of equal length and the values in the dictionary should be the elements of the lists at the same index.\n\n### Input:\nlist_1 = [1,2,3]\nlist_2 = [\"A\",\"B\",\"C\"]\n\n### Output:\nlist_1 = [1,2,3]\nlist_2 = [\"A\",\"B\",\"C\"]\n\n# define a function to create the dictionary\ndef create_dict(l1,l2):\n # dictionary variable\n dict={}\n # loop through both the lists\n for i in range(len(l1)):\n  # add the values to the dictionary\n  dict[l1[i]]=l2[i]\n # return the dictionary\n return dict\n\n# get the dictionary by calling the function\ndict_1_2=create_dict(list_1,list_2)\n\n# print the output\nprint(dict_1_2)\n# Output: {1: 'A', 2: 'B', 3: 'C'}","tok_input_length":231,"tok_output_length":144,"system_prompt":"","index":7795}
{"question":"Create a Python script for creating an Excel spreadsheet with 2 sheets, one with a list of expenses and another one with a chart showing the total expenses.","input":"Not applicable","expected_output":"import openpyxl\n\ndef createSpreadsheet(name):\n  # Create an Excel workbook\n  workbook = openpyxl.Workbook()\n\n  # Set up the first sheet with the list of expenses\n  expenseSheet = workbook.active\n  expenseSheet.title = 'Expenses'\n  expenseSheet.cell(row=1, column=1).value = 'Item'\n  expenseSheet.cell(row=1, column=2).value = 'Amount'\n\n  # Set up the second sheet with the chart of expenses\n  chartSheet = workbook.create_sheet('Chart')\n  chartSheet.add_data(expenseSheet['A2':'B4'],\n                      from_rows=True,\n                      titles_from_data=True)\n  chartSheet.add_chart(openpyxl.chart.BarChart(), 'C1')\n\n  # Save the workbook\n  workbook.save(name + '.xlsx')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for creating an Excel spreadsheet with 2 sheets, one with a list of expenses and another one with a chart showing the total expenses.\n\n### Input:\nNot applicable\n\n### Output:\nimport openpyxl\n\ndef createSpreadsheet(name):\n  # Create an Excel workbook\n  workbook = openpyxl.Workbook()\n\n  # Set up the first sheet with the list of expenses\n  expenseSheet = workbook.active\n  expenseSheet.title = 'Expenses'\n  expenseSheet.cell(row=1, column=1).value = 'Item'\n  expenseSheet.cell(row=1, column=2).value = 'Amount'\n\n  # Set up the second sheet with the chart of expenses\n  chartSheet = workbook.create_sheet('Chart')\n  chartSheet.add_data(expenseSheet['A2':'B4'],\n                      from_rows=True,\n                      titles_from_data=True)\n  chartSheet.add_chart(openpyxl.chart.BarChart(), 'C1')\n\n  # Save the workbook\n  workbook.save(name + '.xlsx')","tok_input_length":231,"tok_output_length":170,"system_prompt":"","index":10119}
{"question":"Create a python web scraper that extracts the title and text of a web page and stores it in a dataframe.","input":"Not applicable","expected_output":"import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd \n\ndef scrape_page(url):\n # make a request to the page and get the HTHML content\n r = requests.get(url) \n content = r.content\n \n # parse the HTML content with Beatiful Soup\n soup = BeautifulSoup(content, 'html.parser')\n \n # extract the title and text \n title = soup.title.string\n paragraphs = soup.find_all('p')\n text = ' '.join([paragraph.get_text() for paragraph in paragraphs])\n \n # store the data an a dictionary\n data = {\n 'title': title,\n 'text': text\n }\n\n return data\n\n# define the URL \nurl = 'https:\/\/example.com'\n\n# scrape the page\ndata = scrape_page(url)\n\n# print the data\nprint(data)\n\n# store the data in a dataframe\ndf = pd.DataFrame([data])\ndf.head()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python web scraper that extracts the title and text of a web page and stores it in a dataframe.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd \n\ndef scrape_page(url):\n # make a request to the page and get the HTHML content\n r = requests.get(url) \n content = r.content\n \n # parse the HTML content with Beatiful Soup\n soup = BeautifulSoup(content, 'html.parser')\n \n # extract the title and text \n title = soup.title.string\n paragraphs = soup.find_all('p')\n text = ' '.join([paragraph.get_text() for paragraph in paragraphs])\n \n # store the data an a dictionary\n data = {\n 'title': title,\n 'text': text\n }\n\n return data\n\n# define the URL \nurl = 'https:\/\/example.com'\n\n# scrape the page\ndata = scrape_page(url)\n\n# print the data\nprint(data)\n\n# store the data in a dataframe\ndf = pd.DataFrame([data])\ndf.head()","tok_input_length":231,"tok_output_length":179,"system_prompt":"","index":6909}
{"question":"Create a web scraper in Python that finds the title and author information from a given list of book URLs.","input":"URLs: \nhttps:\/\/www.amazon.com\/Cup-Stars-Novel-Alex-Awards-ebook\/dp\/B07PWNWS3G\nhttps:\/\/www.amazon.com\/Life-Will-Dark-Novel\/dp\/B07KY7P1SR","expected_output":"import requests\nfrom bs4 import BeautifulSoup\n\nurls = [\n 'https:\/\/www.amazon.com\/Cup-Stars-Novel-Alex-Awards-ebook\/dp\/B07PWNWS3G',\n 'https:\/\/www.amazon.com\/Life-Will-Dark-Novel\/dp\/B07KY7P1SR'\n]\n\nfor url in urls:\n page = requests.get(url)\n soup = BeautifulSoup(page.content, 'html.parser')\n \n title = soup.find(id=\"productTitle\").get_text()\n author = soup.find(class_=\"author notFaded\").get_text()\n \n print('Title: ', title)\n print('Author: ', author)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that finds the title and author information from a given list of book URLs.\n\n### Input:\nURLs: \nhttps:\/\/www.amazon.com\/Cup-Stars-Novel-Alex-Awards-ebook\/dp\/B07PWNWS3G\nhttps:\/\/www.amazon.com\/Life-Will-Dark-Novel\/dp\/B07KY7P1SR\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurls = [\n 'https:\/\/www.amazon.com\/Cup-Stars-Novel-Alex-Awards-ebook\/dp\/B07PWNWS3G',\n 'https:\/\/www.amazon.com\/Life-Will-Dark-Novel\/dp\/B07KY7P1SR'\n]\n\nfor url in urls:\n page = requests.get(url)\n soup = BeautifulSoup(page.content, 'html.parser')\n \n title = soup.find(id=\"productTitle\").get_text()\n author = soup.find(class_=\"author notFaded\").get_text()\n \n print('Title: ', title)\n print('Author: ', author)","tok_input_length":232,"tok_output_length":130,"system_prompt":"","index":5313}
{"question":"Create a GUI for a Python program that calculates the area of a rectangle. The GUI should allow users to enter the length and width of the rectangle, and it should provide a button for calculating the area.","input":"Not applicable","expected_output":"import tkinter as tk\n\nroot = tk.Tk()\n\nlength_label = tk.Label(text=\"Length:\")\nlength_label.grid(row=0, column=0)\nlength_entry = tk.Entry()\nlength_entry.grid(row=0, column=1)\n\nwidth_label = tk.Label(text=\"Width:\")\nwidth_label.grid(row=1, column=0)\nwidth_entry = tk.Entry()\nwidth_entry.grid(row=1, column=1)\n\ndef area():\n area = float(length_entry.get()) * float(width_entry.get())\n area_label = tk.Label(root, text=\"Area: \" + str(area))\n area_label.grid(row=2, column=0, columnspan=2)\n\ncalc_button = tk.Button(text=\"Calculate\", command=area)\ncalc_button.grid(row=2, column=1)\n\nroot.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI for a Python program that calculates the area of a rectangle. The GUI should allow users to enter the length and width of the rectangle, and it should provide a button for calculating the area.\n\n### Input:\nNot applicable\n\n### Output:\nimport tkinter as tk\n\nroot = tk.Tk()\n\nlength_label = tk.Label(text=\"Length:\")\nlength_label.grid(row=0, column=0)\nlength_entry = tk.Entry()\nlength_entry.grid(row=0, column=1)\n\nwidth_label = tk.Label(text=\"Width:\")\nwidth_label.grid(row=1, column=0)\nwidth_entry = tk.Entry()\nwidth_entry.grid(row=1, column=1)\n\ndef area():\n area = float(length_entry.get()) * float(width_entry.get())\n area_label = tk.Label(root, text=\"Area: \" + str(area))\n area_label.grid(row=2, column=0, columnspan=2)\n\ncalc_button = tk.Button(text=\"Calculate\", command=area)\ncalc_button.grid(row=2, column=1)\n\nroot.mainloop()","tok_input_length":232,"tok_output_length":161,"system_prompt":"","index":12946}
{"question":"Create a Python calculation that finds the minimum number of moves to solve the tower of hanoi.","input":"Not applicable","expected_output":"def hanoi(n, source, helper, target):\n    if n > 0:\n        # Move tower of size n - 1 to helper:\n        hanoi(n - 1, source, target, helper)\n        # Move disk from source peg to target peg\n        if source[0]:\n            disk = source[0].pop()\n            print(\"moving \" + str(disk) + \" from \" + source[1] + \" to \" + target[1])\n            target[0].append(disk)\n        # Move tower of size n-1 from helper to target\n        hanoi(n - 1, helper, source, target)\n\n# source = (stack, name)\nsource = ([3,2,1], \"A\")\ntarget = ([], \"C\")\nhelper = ([], \"B\")\nhanoi(len(source[0]),source,helper,target)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python calculation that finds the minimum number of moves to solve the tower of hanoi.\n\n### Input:\nNot applicable\n\n### Output:\ndef hanoi(n, source, helper, target):\n    if n > 0:\n        # Move tower of size n - 1 to helper:\n        hanoi(n - 1, source, target, helper)\n        # Move disk from source peg to target peg\n        if source[0]:\n            disk = source[0].pop()\n            print(\"moving \" + str(disk) + \" from \" + source[1] + \" to \" + target[1])\n            target[0].append(disk)\n        # Move tower of size n-1 from helper to target\n        hanoi(n - 1, helper, source, target)\n\n# source = (stack, name)\nsource = ([3,2,1], \"A\")\ntarget = ([], \"C\")\nhelper = ([], \"B\")\nhanoi(len(source[0]),source,helper,target)","tok_input_length":232,"tok_output_length":183,"system_prompt":"","index":6127}
{"question":"Create a Python program that takes a list of numbers as input and sorts them by their greatest occurring number.","input":"[4, 7, 3, 5, 3, 4, 5, 3, 7]","expected_output":"[3, 3, 3, 4, 4, 5, 5, 7, 7]\n\nPython Code:\n\ndef sort_by_greatest_occurrence(nums):\n    num_freq = {}\n    for num in nums:\n        num_freq[num] = num_freq.get(num, 0) + 1\n    sorted_freq = sorted(num_freq.items(), key=lambda x: x[1], reverse=True)\n    sorted_nums = []\n    for num, _ in sorted_freq:\n        sorted_nums += [num] * num_freq[num]\n    return sorted_nums\n\nnums = [4, 7, 3, 5, 3, 4, 5, 3, 7]\nprint(sort_by_greatest_occurrence(nums))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a list of numbers as input and sorts them by their greatest occurring number.\n\n### Input:\n[4, 7, 3, 5, 3, 4, 5, 3, 7]\n\n### Output:\n[3, 3, 3, 4, 4, 5, 5, 7, 7]\n\nPython Code:\n\ndef sort_by_greatest_occurrence(nums):\n    num_freq = {}\n    for num in nums:\n        num_freq[num] = num_freq.get(num, 0) + 1\n    sorted_freq = sorted(num_freq.items(), key=lambda x: x[1], reverse=True)\n    sorted_nums = []\n    for num, _ in sorted_freq:\n        sorted_nums += [num] * num_freq[num]\n    return sorted_nums\n\nnums = [4, 7, 3, 5, 3, 4, 5, 3, 7]\nprint(sort_by_greatest_occurrence(nums))","tok_input_length":233,"tok_output_length":158,"system_prompt":"","index":13646}
{"question":"Build a code-classification model in Keras to classify a given code snippet into various programming languages like Java, Python, and C++.","input":"Not applicable","expected_output":"import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Input, Dense, Dropout\nfrom keras.utils import to_categorical\n\nnum_classes = 3 # number of languages to classify\n\n# Define the model architecture\nmodel = Sequential()\nmodel.add(Input(shape=(1000,)))\nmodel.add(Dense(2000, activation='relu'))\nmodel.add(Dense(1000, activation='relu'))\nmodel.add(Dense(500, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_data, train_labels)\n\n# Evaluate the model\nval_loss, val_acc = model.evaluate(val_data, val_labels)\n\n# Make predictions on test data\npredictions = model.predict([test_data])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a code-classification model in Keras to classify a given code snippet into various programming languages like Java, Python, and C++.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Input, Dense, Dropout\nfrom keras.utils import to_categorical\n\nnum_classes = 3 # number of languages to classify\n\n# Define the model architecture\nmodel = Sequential()\nmodel.add(Input(shape=(1000,)))\nmodel.add(Dense(2000, activation='relu'))\nmodel.add(Dense(1000, activation='relu'))\nmodel.add(Dense(500, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_data, train_labels)\n\n# Evaluate the model\nval_loss, val_acc = model.evaluate(val_data, val_labels)\n\n# Make predictions on test data\npredictions = model.predict([test_data])","tok_input_length":233,"tok_output_length":175,"system_prompt":"","index":17239}
{"question":"Write a Python program to create a tic-tac-toe game.","input":"","expected_output":"# define a function to draw the board\ndef draw_board(): \n  \n    print(\"\\n\")                   \n    print(\" --- | --- | --- \")\n    print(\"  7  |  8  |  9  \") \n    print(\" --- | --- | --- \")\n    print(\"  4  |  5  |  6  \") \n    print(\" --- | --- | --- \")\n    print(\"  1  |  2  |  3  \") \n    print(\" --- | --- | --- \")\n  \n# define a function to check if position is empty \ndef check_position(position, board): \n    return board[position] == ' '\n  \n# define a function to check if board is full and return boolean  \ndef is_board_full(board): \n    for i in range(1, 10): \n        if check_position(i, board): \n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a tic-tac-toe game.\n\n### Input:\n\n\n### Output:\n# define a function to draw the board\ndef draw_board(): \n  \n    print(\"\\n\")                   \n    print(\" --- | --- | --- \")\n    print(\"  7  |  8  |  9  \") \n    print(\" --- | --- | --- \")\n    print(\"  4  |  5  |  6  \") \n    print(\" --- | --- | --- \")\n    print(\"  1  |  2  |  3  \") \n    print(\" --- | --- | --- \")\n  \n# define a function to check if position is empty \ndef check_position(position, board): \n    return board[position] == ' '\n  \n# define a function to check if board is full and return boolean  \ndef is_board_full(board): \n    for i in range(1, 10): \n        if check_position(i, board): \n            return False\n    return True","tok_input_length":233,"tok_output_length":192,"system_prompt":"","index":16451}
{"question":"Implement a TensorFlow model in Python to generate the sentiment score of a short review document.","input":"Example review document: \"The food was great and the atmosphere was friendly.\"","expected_output":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\nreview = \"The food was great and the atmosphere was friendly.\"\n\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts([review])\n\nencoded_review = tokenizer.texts_to_sequences([review])[0]\n\npadded_review = pad_sequences([encoded_review], maxlen=6, padding='post')\n\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Embedding(\n  input_dim=len(tokenizer.word_index) + 1,\n  output_dim=16,\n  input_length=6\n ),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(units=1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nscore = model.predict(padded_review).round(2)[0][0]  # 0.87","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a TensorFlow model in Python to generate the sentiment score of a short review document.\n\n### Input:\nExample review document: \"The food was great and the atmosphere was friendly.\"\n\n### Output:\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\nreview = \"The food was great and the atmosphere was friendly.\"\n\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts([review])\n\nencoded_review = tokenizer.texts_to_sequences([review])[0]\n\npadded_review = pad_sequences([encoded_review], maxlen=6, padding='post')\n\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Embedding(\n  input_dim=len(tokenizer.word_index) + 1,\n  output_dim=16,\n  input_length=6\n ),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(units=1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nscore = model.predict(padded_review).round(2)[0][0]  # 0.87","tok_input_length":234,"tok_output_length":175,"system_prompt":"","index":8436}
{"question":"Perform an optimization of a given Python program to reduce its execution time.","input":"Sample Program:\n\ndef find_longest_sequence(arr):\n current = []\n longest = []\n i = 0\n while i < len(arr):\n  j = i\n  while j < len(arr) and arr[j] > arr[j-1]:\n   current.append(arr[j])\n   j += 1\n  if len(current) > len(longest):\n   longest = current\n  current = []\n  i += 1\n return longest\n\narr = [3, 10, 2, 1, 20]","expected_output":"def find_longest_sequence(arr):\n longest = []\n for i in range(len(arr)):\n  current = []\n  for j in range(i, len(arr)):\n   if arr[j] > arr[j-1]:\n    current.append(arr[j])\n    if len(current) > len(longest):\n     longest = current\n  current = []\n return longest\n\narr = [3, 10, 2, 1, 20]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform an optimization of a given Python program to reduce its execution time.\n\n### Input:\nSample Program:\n\ndef find_longest_sequence(arr):\n current = []\n longest = []\n i = 0\n while i < len(arr):\n  j = i\n  while j < len(arr) and arr[j] > arr[j-1]:\n   current.append(arr[j])\n   j += 1\n  if len(current) > len(longest):\n   longest = current\n  current = []\n  i += 1\n return longest\n\narr = [3, 10, 2, 1, 20]\n\n### Output:\ndef find_longest_sequence(arr):\n longest = []\n for i in range(len(arr)):\n  current = []\n  for j in range(i, len(arr)):\n   if arr[j] > arr[j-1]:\n    current.append(arr[j])\n    if len(current) > len(longest):\n     longest = current\n  current = []\n return longest\n\narr = [3, 10, 2, 1, 20]","tok_input_length":235,"tok_output_length":88,"system_prompt":"","index":13327}
{"question":"Create a Python program to perform a search on a given array using binary search algorithm.","input":"Search term: 5 \nArray: [1,2,3,4,5,6,7,8,9,10]","expected_output":"def binarySearch(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l)\/\/2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    x = 5\n    result = binarySearch(arr, 0, len(arr)-1, x)\n    if result != -1:\n        print(\"Element is present at index\", str(result))\n    else:\n        print(\"Element is not present in the array\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to perform a search on a given array using binary search algorithm.\n\n### Input:\nSearch term: 5 \nArray: [1,2,3,4,5,6,7,8,9,10]\n\n### Output:\ndef binarySearch(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l)\/\/2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    x = 5\n    result = binarySearch(arr, 0, len(arr)-1, x)\n    if result != -1:\n        print(\"Element is present at index\", str(result))\n    else:\n        print(\"Element is not present in the array\")","tok_input_length":235,"tok_output_length":162,"system_prompt":"","index":10649}
{"question":"Develop a Python algorithm to calculate the minimum number of coins needed to make change for a given amount of money.","input":"","expected_output":"def min_coins(amount): \n  \n    # list of coins\n    coins = [25, 10, 5, 1] \n  \n    # contains minimum number of coins needed for a given amount\n    coins_needed = [0] * (amount + 1) \n  \n    # fill the minimum number of coins needed \n    # for a given amount of cents\n    for j in range(1, amount + 1): \n  \n        # initialize coins_needed array with max int\n        coins_needed[j] = float('inf')      \n        for i in range(0, 4):  \n            if j >= coins[i]: \n                sub_res = coins_needed[j - coins[i]] \n                if sub_res != float('inf') and  \n                        sub_res + 1 < coins_needed[j]: \n                    coins_needed[j] = sub_res + 1\n  \n    return coins_needed[amount]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python algorithm to calculate the minimum number of coins needed to make change for a given amount of money.\n\n### Input:\n\n\n### Output:\ndef min_coins(amount): \n  \n    # list of coins\n    coins = [25, 10, 5, 1] \n  \n    # contains minimum number of coins needed for a given amount\n    coins_needed = [0] * (amount + 1) \n  \n    # fill the minimum number of coins needed \n    # for a given amount of cents\n    for j in range(1, amount + 1): \n  \n        # initialize coins_needed array with max int\n        coins_needed[j] = float('inf')      \n        for i in range(0, 4):  \n            if j >= coins[i]: \n                sub_res = coins_needed[j - coins[i]] \n                if sub_res != float('inf') and  \n                        sub_res + 1 < coins_needed[j]: \n                    coins_needed[j] = sub_res + 1\n  \n    return coins_needed[amount]","tok_input_length":235,"tok_output_length":186,"system_prompt":"","index":13931}
{"question":"Implement a function in Python that takes two derivatives of a polynomial and returns the greatest common multiple.","input":">f'(x) = x^3 + 3x + 2; g'(x) = x^5 + x^3 - 24","expected_output":"def gcd(f, g):\n    # We use Euclid's algorithm to find the GCD\n    if (g == 0): \n        return f \n    return gcd(g, f % g) \n    \ndef greatestCommonMultiple(f, g): \n    # Find the GCD of two polynomial derivatives \n    x = gcd(f, g) \n\n    # Find the least common multiple using the GCD\n    lcm = int(f * g)\/ int(x)  \n    return lcm \n\n# derivatives of f(x) and g(x) \nf_prime = 'x^3 + 3x + 2'\ng_prime = 'x^5 + x^3 - 24'\n\n# Calling the function \nprint(greatestCommonMultiple(f_prime, g_prime))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes two derivatives of a polynomial and returns the greatest common multiple.\n\n### Input:\n>f'(x) = x^3 + 3x + 2; g'(x) = x^5 + x^3 - 24\n\n### Output:\ndef gcd(f, g):\n    # We use Euclid's algorithm to find the GCD\n    if (g == 0): \n        return f \n    return gcd(g, f % g) \n    \ndef greatestCommonMultiple(f, g): \n    # Find the GCD of two polynomial derivatives \n    x = gcd(f, g) \n\n    # Find the least common multiple using the GCD\n    lcm = int(f * g)\/ int(x)  \n    return lcm \n\n# derivatives of f(x) and g(x) \nf_prime = 'x^3 + 3x + 2'\ng_prime = 'x^5 + x^3 - 24'\n\n# Calling the function \nprint(greatestCommonMultiple(f_prime, g_prime))","tok_input_length":236,"tok_output_length":158,"system_prompt":"","index":11241}
{"question":"Create a model in Python using scikit-learn that takes a dataset of user-generated feedback and predicts the sentiment (positive or negative).","input":"Not applicable","expected_output":"import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n#load dataset\ndf = pd.read_csv('data.csv')\n\n#Vectorize the data\ncv = CountVectorizer(stop_words='english', max_features=1000)\nX = cv.fit_transform(df['text']).toarray()\ny = df['sentiment']\n\n#Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n#Train the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n#Evaluate the model\nscore = model.score(X_test, y_test)\nprint(f'Model Accuracy: {score*100}%')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a model in Python using scikit-learn that takes a dataset of user-generated feedback and predicts the sentiment (positive or negative).\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n#load dataset\ndf = pd.read_csv('data.csv')\n\n#Vectorize the data\ncv = CountVectorizer(stop_words='english', max_features=1000)\nX = cv.fit_transform(df['text']).toarray()\ny = df['sentiment']\n\n#Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n#Train the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n#Evaluate the model\nscore = model.score(X_test, y_test)\nprint(f'Model Accuracy: {score*100}%')","tok_input_length":236,"tok_output_length":179,"system_prompt":"","index":7883}
{"question":"Write a Python function to create and show a binary search tree given a set of values.","input":"","expected_output":"class Node:\n    def __init__(self, val):\n        self.l = None\n        self.r = None\n        self.v = val\n\ndef tree_insert( node, val):\n    if node is None:\n        return Node(val)\n    if val < node.v:\n        node.l = tree_insert(node.l, val)\n    else:\n        node.r = tree_insert(node.r, val)\n\n    return node\n\ndef show_tree(node):\n    if node is None:\n        return\n    \n    show_tree(node.l)\n    \n    print(f\"{node.v}\")\n    \n    show_tree(node.r)\n\ndef initialize_tree():\n    root = None\n    set_values = [8, 3, 10, 1, 6, 14, 4, 7, 13]\n    for val in set_values:\n        root = tree_insert(root, val)\n    \n    return root\n\nroot = initialize_tree()\nshow_tree(root)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to create and show a binary search tree given a set of values.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, val):\n        self.l = None\n        self.r = None\n        self.v = val\n\ndef tree_insert( node, val):\n    if node is None:\n        return Node(val)\n    if val < node.v:\n        node.l = tree_insert(node.l, val)\n    else:\n        node.r = tree_insert(node.r, val)\n\n    return node\n\ndef show_tree(node):\n    if node is None:\n        return\n    \n    show_tree(node.l)\n    \n    print(f\"{node.v}\")\n    \n    show_tree(node.r)\n\ndef initialize_tree():\n    root = None\n    set_values = [8, 3, 10, 1, 6, 14, 4, 7, 13]\n    for val in set_values:\n        root = tree_insert(root, val)\n    \n    return root\n\nroot = initialize_tree()\nshow_tree(root)","tok_input_length":236,"tok_output_length":191,"system_prompt":"","index":14985}
{"question":"Create a Python program to optimize a given function with at least two variables.","input":"The function is given as f(x,y) = 3x^2 + 2xy + 7y^2 and the x and y values are bounded from 0 to 5.","expected_output":"from scipy.optimize import minimize\n\ndef objective(x):\n # minimize 3x^2 + 2xy + 7y^2\n return 3*x[0]**2 + 2*x[0]*x[1] + 7*x[1]**2\n\n# define bounds\nx0_bounds = (0,5)\nx1_bounds = (0,5)\n\nbounds = [x0_bounds, x1_bounds]\n\n# intial values\nx0 = [1, 1]\n\n# optimization\nsolution = minimize(objective,x0, bounds=bounds)\n\n# result\nprint(\"Optimized x0:\", solution.x[0])\nprint(\"Optimized x1:\", solution.x[1])\nprint(\"Optimized result:\", solution.fun)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to optimize a given function with at least two variables.\n\n### Input:\nThe function is given as f(x,y) = 3x^2 + 2xy + 7y^2 and the x and y values are bounded from 0 to 5.\n\n### Output:\nfrom scipy.optimize import minimize\n\ndef objective(x):\n # minimize 3x^2 + 2xy + 7y^2\n return 3*x[0]**2 + 2*x[0]*x[1] + 7*x[1]**2\n\n# define bounds\nx0_bounds = (0,5)\nx1_bounds = (0,5)\n\nbounds = [x0_bounds, x1_bounds]\n\n# intial values\nx0 = [1, 1]\n\n# optimization\nsolution = minimize(objective,x0, bounds=bounds)\n\n# result\nprint(\"Optimized x0:\", solution.x[0])\nprint(\"Optimized x1:\", solution.x[1])\nprint(\"Optimized result:\", solution.fun)","tok_input_length":237,"tok_output_length":155,"system_prompt":"","index":16782}
{"question":"Write a function to calculate the median value of given list of numbers in Python.","input":"Random Integer List : [3, 5, 2, 8, 6, 5]","expected_output":"def calculate_median(input_list): \n   \n    # Sort the list\n    sorted_list = sorted(input_list)\n    length = len(sorted_list)\n  \n    # Check if number of elements are even \n    if (length % 2 == 0) :  \n        # If true, get the 2 middle elements \n        first = length\/\/2 -1\n        second = length\/\/2\n  \n        # Get the median value\n        median = (sorted_list[first] + sorted_list[second]) \/ 2\n    else : \n        # If odd, get the middle element \n        median = sorted_list[length\/\/2]\n\n    return median\n\n# Call the function\ninput_list = [3, 5, 2, 8, 6, 5]\nprint(calculate_median(input_list))\n\n# Output: 5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to calculate the median value of given list of numbers in Python.\n\n### Input:\nRandom Integer List : [3, 5, 2, 8, 6, 5]\n\n### Output:\ndef calculate_median(input_list): \n   \n    # Sort the list\n    sorted_list = sorted(input_list)\n    length = len(sorted_list)\n  \n    # Check if number of elements are even \n    if (length % 2 == 0) :  \n        # If true, get the 2 middle elements \n        first = length\/\/2 -1\n        second = length\/\/2\n  \n        # Get the median value\n        median = (sorted_list[first] + sorted_list[second]) \/ 2\n    else : \n        # If odd, get the middle element \n        median = sorted_list[length\/\/2]\n\n    return median\n\n# Call the function\ninput_list = [3, 5, 2, 8, 6, 5]\nprint(calculate_median(input_list))\n\n# Output: 5","tok_input_length":237,"tok_output_length":172,"system_prompt":"","index":16937}
{"question":"Design an algorithm in Python to find the shortest unique substrings in a given input string.","input":"input_string =\"abccab\"","expected_output":"def find_shortest_unique_substrings(input_string):\n    \"\"\"\n    Finds the shortest unique substrings in a given input string\n\n    Parameters\n    ----------\n    input_string : str\n        The input string\n\n    Returns\n    -------\n    List[str]\n        A list containing the shortest unique substrings\n\n    \"\"\"\n\n    # Generate all possible substrings\n    substrings = []\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            substrings.append(input_string[i:j])\n\n    # Keep track of the unique substrings\n    unique_substrings = []\n\n    # Iterate over all substrings\n    for substring in substrings:\n        # Check if the substring is unique\n        if substring not in unique_substrings:\n            unique_substrings.append(substring)\n\n    # Return the shortest unique substrings\n    return sorted(unique_substrings, key=len)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the shortest unique substrings in a given input string.\n\n### Input:\ninput_string =\"abccab\"\n\n### Output:\ndef find_shortest_unique_substrings(input_string):\n    \"\"\"\n    Finds the shortest unique substrings in a given input string\n\n    Parameters\n    ----------\n    input_string : str\n        The input string\n\n    Returns\n    -------\n    List[str]\n        A list containing the shortest unique substrings\n\n    \"\"\"\n\n    # Generate all possible substrings\n    substrings = []\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            substrings.append(input_string[i:j])\n\n    # Keep track of the unique substrings\n    unique_substrings = []\n\n    # Iterate over all substrings\n    for substring in substrings:\n        # Check if the substring is unique\n        if substring not in unique_substrings:\n            unique_substrings.append(substring)\n\n    # Return the shortest unique substrings\n    return sorted(unique_substrings, key=len)","tok_input_length":237,"tok_output_length":185,"system_prompt":"","index":16554}
{"question":"Create a web scraper using Python and Selenium to scrape information from IMDB website.","input":"","expected_output":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport pandas as pd\n\n# Initialize Webdriver\ndriver = webdriver.Firefox()\n\n# Open the IMDB website\ndriver.get('https:\/\/www.imdb.com\/chart\/top?ref_=ft_250')\n\n# Wait until the elements on the web page are loaded\nWebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, \"chart\")))\n\n# Parse and store the information to a pandas dataframe\ntitles = driver.find_elements_by_class_name('titleColumn')\nratings = driver.find_elements_by_class_name('ratingColumn')\ndf = pd.DataFrame(columns = ['title', 'rating'])\n\nfor title, rating in zip(titles, ratings):\n    df = df.append({'title': title.text, 'rating':rating.text}, ignore_index=True)\n\n# Close the browser\ndriver.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python and Selenium to scrape information from IMDB website.\n\n### Input:\n\n\n### Output:\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport pandas as pd\n\n# Initialize Webdriver\ndriver = webdriver.Firefox()\n\n# Open the IMDB website\ndriver.get('https:\/\/www.imdb.com\/chart\/top?ref_=ft_250')\n\n# Wait until the elements on the web page are loaded\nWebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, \"chart\")))\n\n# Parse and store the information to a pandas dataframe\ntitles = driver.find_elements_by_class_name('titleColumn')\nratings = driver.find_elements_by_class_name('ratingColumn')\ndf = pd.DataFrame(columns = ['title', 'rating'])\n\nfor title, rating in zip(titles, ratings):\n    df = df.append({'title': title.text, 'rating':rating.text}, ignore_index=True)\n\n# Close the browser\ndriver.close()","tok_input_length":237,"tok_output_length":194,"system_prompt":"","index":3011}
{"question":"Write a Python program to create an editable table showing a list of quote objects.","input":"quoteList = [{name: \"Albert Einstein\", quote: \"Imagination is more important than knowledge.\"},\n             {name: \"Mahatma Gandhi\", quote: \"Be the change you wish to see in the world.\"}, \n             {name: \"J.K. Rowling\", quote: \"The power of imagination makes us infinite.\"}\n            ]","expected_output":"import tkinter as tk\nfrom tkinter import ttk\n\nroot = tk.Tk()\nroot.title('Quotes Table')\n\n# create a table of quote objects\ntree = ttk.Treeview(root, columns=['name', 'quote'], show = 'headings')\n\ntree.column('name', width=100, anchor='w')\ntree.heading('name', text='Name')\n\ntree.column('quote', width=300, anchor='w')\ntree.heading('quote', text='Quote')\n\nfor quote in quoteList:\n tree.insert('', 'end', values=[quote['name'], quote['quote']])\n\ntree.pack()\n\nroot.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create an editable table showing a list of quote objects.\n\n### Input:\nquoteList = [{name: \"Albert Einstein\", quote: \"Imagination is more important than knowledge.\"},\n             {name: \"Mahatma Gandhi\", quote: \"Be the change you wish to see in the world.\"}, \n             {name: \"J.K. Rowling\", quote: \"The power of imagination makes us infinite.\"}\n            ]\n\n### Output:\nimport tkinter as tk\nfrom tkinter import ttk\n\nroot = tk.Tk()\nroot.title('Quotes Table')\n\n# create a table of quote objects\ntree = ttk.Treeview(root, columns=['name', 'quote'], show = 'headings')\n\ntree.column('name', width=100, anchor='w')\ntree.heading('name', text='Name')\n\ntree.column('quote', width=300, anchor='w')\ntree.heading('quote', text='Quote')\n\nfor quote in quoteList:\n tree.insert('', 'end', values=[quote['name'], quote['quote']])\n\ntree.pack()\n\nroot.mainloop()","tok_input_length":238,"tok_output_length":124,"system_prompt":"","index":9688}
{"question":"Design a recommender system in Python that suggests similar items to a given item based on its attributes.","input":"A list of book objects with id, author, title, publisher, and reviews properties.","expected_output":"def get_recommendations(books):\n  recommendations = []\n  for book in books:\n    # Mapping books to a vector for comparison\n    vector_book = [book['author'], book['title'], book['publisher']]\n    # Iterating through the list of books to check similarities\n    for other_book in books:\n      # Mapping other books in the list books to a vector for comparison\n      other_vector_book = [other_book['author'], other_book['title'], other_book['publisher']]\n      # Check similarity\n      if other_vector_book != vector_book and evaluate_similarity(vector_book, other_vector_book):\n        recommendations.append(other_book['id'])\n  return recommendations\n  \ndef evaluate_similarity(vector_book1, vector_book2):\n  # Perform algorithm for checking the similarity of two books\n  # e.g. Pearson correlation\n  return True # or False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a recommender system in Python that suggests similar items to a given item based on its attributes.\n\n### Input:\nA list of book objects with id, author, title, publisher, and reviews properties.\n\n### Output:\ndef get_recommendations(books):\n  recommendations = []\n  for book in books:\n    # Mapping books to a vector for comparison\n    vector_book = [book['author'], book['title'], book['publisher']]\n    # Iterating through the list of books to check similarities\n    for other_book in books:\n      # Mapping other books in the list books to a vector for comparison\n      other_vector_book = [other_book['author'], other_book['title'], other_book['publisher']]\n      # Check similarity\n      if other_vector_book != vector_book and evaluate_similarity(vector_book, other_vector_book):\n        recommendations.append(other_book['id'])\n  return recommendations\n  \ndef evaluate_similarity(vector_book1, vector_book2):\n  # Perform algorithm for checking the similarity of two books\n  # e.g. Pearson correlation\n  return True # or False","tok_input_length":238,"tok_output_length":173,"system_prompt":"","index":7722}
{"question":"Create a classification algorithm in Python to distinguish between cats and dogs.","input":"","expected_output":"# Import Python libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score \n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Preprocess data\nX = data[['Height','Weight','Length']].values\ny = data['Label'].values\n\n# Encode labels\nencoder = LabelEncoder()\ny_encoded = encoder.fit_transform(y)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2)\n\n# Train classifier\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Make predictions \ny_pred = clf.predict(X_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Classification accuracy: ', accuracy * 100, '%')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a classification algorithm in Python to distinguish between cats and dogs.\n\n### Input:\n\n\n### Output:\n# Import Python libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score \n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Preprocess data\nX = data[['Height','Weight','Length']].values\ny = data['Label'].values\n\n# Encode labels\nencoder = LabelEncoder()\ny_encoded = encoder.fit_transform(y)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2)\n\n# Train classifier\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Make predictions \ny_pred = clf.predict(X_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Classification accuracy: ', accuracy * 100, '%')","tok_input_length":238,"tok_output_length":198,"system_prompt":"","index":18611}
{"question":"Can you design a mathematical function using Python which takes a n x n matrix as input and returns the determinant of the matrix?","input":"[[1, 0, 1],\n [1, 1, 0],\n [0, 1, 1]]","expected_output":"def determinantMatrix(matrix):\n    if len(matrix) == 2:\n        return (matrix[0][0] * matrix[1][1]) - (matrix[0][1] * matrix[1][0])\n    else:\n        det = 0\n        for i in range(len(matrix)):\n            temp = [[row[a] for a in range(len(matrix)) if a != i] for row in matrix[1:]]\n            det += ((-1) ** i) * matrix[0][i] * determinantMatrix(temp)\n        return det\n\nmatrix = [[1, 0, 1],\n        [1, 1, 0],\n        [0, 1, 1]]\n\nprint(\"The determinant of the matrix is:\", determinantMatrix(matrix))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you design a mathematical function using Python which takes a n x n matrix as input and returns the determinant of the matrix?\n\n### Input:\n[[1, 0, 1],\n [1, 1, 0],\n [0, 1, 1]]\n\n### Output:\ndef determinantMatrix(matrix):\n    if len(matrix) == 2:\n        return (matrix[0][0] * matrix[1][1]) - (matrix[0][1] * matrix[1][0])\n    else:\n        det = 0\n        for i in range(len(matrix)):\n            temp = [[row[a] for a in range(len(matrix)) if a != i] for row in matrix[1:]]\n            det += ((-1) ** i) * matrix[0][i] * determinantMatrix(temp)\n        return det\n\nmatrix = [[1, 0, 1],\n        [1, 1, 0],\n        [0, 1, 1]]\n\nprint(\"The determinant of the matrix is:\", determinantMatrix(matrix))","tok_input_length":239,"tok_output_length":160,"system_prompt":"","index":7617}
{"question":"Build an AI chatbot using Python and DialogFlow. The chatbot should be able to answer customer inquiries related to orders, shipping, and returns.","input":"Not applicable","expected_output":"# import libraries\nimport os\nimport dialogflow\n\n# instantiate dialogflow\nimport dialogflow_v2 as dialogflow\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"path\/to\/credentials.json\"\n\n# define the session\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path('test-project', \"unique-session-id\")\n\n# define the request and response\nrequest = dialogflow.types.TextInput(text=\"What is your return policy?\", language_code=\"en\")\nresponse = session_client.detect_intent(session=session, query_input=request)\n\n# print results\nprint('Query text: {}'.format(response.query_result.query_text))\nprint('Detected intent: {} (confidence: {})\\n'.format(\n response.query_result.intent.display_name,\n response.query_result.intent_detection_confidence))\nprint('Fulfillment text: {}\\n'.format(response.query_result.fulfillment_text))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an AI chatbot using Python and DialogFlow. The chatbot should be able to answer customer inquiries related to orders, shipping, and returns.\n\n### Input:\nNot applicable\n\n### Output:\n# import libraries\nimport os\nimport dialogflow\n\n# instantiate dialogflow\nimport dialogflow_v2 as dialogflow\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"path\/to\/credentials.json\"\n\n# define the session\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path('test-project', \"unique-session-id\")\n\n# define the request and response\nrequest = dialogflow.types.TextInput(text=\"What is your return policy?\", language_code=\"en\")\nresponse = session_client.detect_intent(session=session, query_input=request)\n\n# print results\nprint('Query text: {}'.format(response.query_result.query_text))\nprint('Detected intent: {} (confidence: {})\\n'.format(\n response.query_result.intent.display_name,\n response.query_result.intent_detection_confidence))\nprint('Fulfillment text: {}\\n'.format(response.query_result.fulfillment_text))","tok_input_length":239,"tok_output_length":179,"system_prompt":"","index":7212}
{"question":"Generate a Python program to output a machine-learning model stacked with feature-selection, extraction and preprocessing.","input":"","expected_output":"import pandas as pd\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Data Preprocessing\nfeatures = pd.read_csv('features.csv')\nX = features.iloc[:, :-1].values\ny = features.iloc[:, -1].values\n\n#Feature Selection\nselector = SelectKBest(k=10)\nselector.fit(X, y)\nX_new = selector.transform(X)\n\n#Feature Extraction\nvectorizer = DictVectorizer(sparse=False)\nX_final = vectorizer.fit_transform(X)\n\n#Feature Scaling\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_final)\n\n#Training and Testing\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)\n\n#Model Stacking\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to output a machine-learning model stacked with feature-selection, extraction and preprocessing.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Data Preprocessing\nfeatures = pd.read_csv('features.csv')\nX = features.iloc[:, :-1].values\ny = features.iloc[:, -1].values\n\n#Feature Selection\nselector = SelectKBest(k=10)\nselector.fit(X, y)\nX_new = selector.transform(X)\n\n#Feature Extraction\nvectorizer = DictVectorizer(sparse=False)\nX_final = vectorizer.fit_transform(X)\n\n#Feature Scaling\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_final)\n\n#Training and Testing\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)\n\n#Model Stacking\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)","tok_input_length":239,"tok_output_length":193,"system_prompt":"","index":17823}
{"question":"Write a python script to parse a JSON string and create two reports - one containing all the cities in the US and another one containing all the cities in Europe.","input":"jsonString = \"\"\"\n{\n  \"locations\": [\n    {\n      \"name\": \"New York\",\n      \"continent\": \"North America\"\n    },\n    {\n      \"name\": \"Berlin\",\n      \"continent\": \"Europe\"\n    },\n    {\n      \"name\": \"San Francisco\",\n      \"continent\": \"North America\"\n    },\n    {\n      \"name\": \"Paris\",\n      \"continent\": \"Europe\"\n    }\n  ]\n}\n\"\"\"","expected_output":"import json\n\ndata = json.loads(jsonString)\n\nus_cities = []\neurope_cities = []\n\nfor location in data['locations']:\n if location['continent'] == 'North America':\n us_cities.append(location['name'])\n elif location['continent'] == 'Europe':\n europe_cities.append(location['name'])\n\nprint(f'US cities: {us_cities}\\n')\nprint(f'Europe cities: {europe_cities}\\n')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to parse a JSON string and create two reports - one containing all the cities in the US and another one containing all the cities in Europe.\n\n### Input:\njsonString = \"\"\"\n{\n  \"locations\": [\n    {\n      \"name\": \"New York\",\n      \"continent\": \"North America\"\n    },\n    {\n      \"name\": \"Berlin\",\n      \"continent\": \"Europe\"\n    },\n    {\n      \"name\": \"San Francisco\",\n      \"continent\": \"North America\"\n    },\n    {\n      \"name\": \"Paris\",\n      \"continent\": \"Europe\"\n    }\n  ]\n}\n\"\"\"\n\n### Output:\nimport json\n\ndata = json.loads(jsonString)\n\nus_cities = []\neurope_cities = []\n\nfor location in data['locations']:\n if location['continent'] == 'North America':\n us_cities.append(location['name'])\n elif location['continent'] == 'Europe':\n europe_cities.append(location['name'])\n\nprint(f'US cities: {us_cities}\\n')\nprint(f'Europe cities: {europe_cities}\\n')","tok_input_length":240,"tok_output_length":91,"system_prompt":"","index":5034}
{"question":"Write a function in Python which takes two strings as inputs and returns the longest common proper substring.","input":"str1 = \"abbcde\" and str2 = \"aede\"","expected_output":"def longest_common_proper_substring(str1, str2):\n    \n    max_len = 0\n    longest_substring = \"\"\n\n    for i in range(len(str1)):\n        length = 0\n        substring = \"\"\n\n        if str1[i] in str2:\n            length += 1\n            substring += str1[i]\n\n            for j in range(i+1, len(str1)):\n                if str1[j] in str2 and str1[j] == str1[j - length]:\n                    length += 1\n                    substring += str1[j]\n                else:\n                    break\n\n        if length > max_len:\n            max_len = length\n            longest_substring = substring\n\n    return longest_substring\n\nstr1 = \"abbcde\"\nstr2 = \"aede\"\nprint(longest_common_proper_substring(str1, str2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python which takes two strings as inputs and returns the longest common proper substring.\n\n### Input:\nstr1 = \"abbcde\" and str2 = \"aede\"\n\n### Output:\ndef longest_common_proper_substring(str1, str2):\n    \n    max_len = 0\n    longest_substring = \"\"\n\n    for i in range(len(str1)):\n        length = 0\n        substring = \"\"\n\n        if str1[i] in str2:\n            length += 1\n            substring += str1[i]\n\n            for j in range(i+1, len(str1)):\n                if str1[j] in str2 and str1[j] == str1[j - length]:\n                    length += 1\n                    substring += str1[j]\n                else:\n                    break\n\n        if length > max_len:\n            max_len = length\n            longest_substring = substring\n\n    return longest_substring\n\nstr1 = \"abbcde\"\nstr2 = \"aede\"\nprint(longest_common_proper_substring(str1, str2))","tok_input_length":240,"tok_output_length":178,"system_prompt":"","index":8927}
{"question":"Create a Python program that extracts a set of keywords from a given text document.","input":"Not applicable","expected_output":"# package imports\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize, sent_tokenize \n\n# store the text document as a string\ntext = '''\nThis is a sample text document that will be used to find the keywords. \nIt has a few sentences that talk about different topics such as sports, \ntechnology, and entertainment.\n'''\n\n# tokenize sentences\nsentences = sent_tokenize(text) \n\n# store keyword set\nkeywords = set() \n\nfor i in sentences: \n\t\n\t# tokenize words\n\twords = word_tokenize(i) \n\t\n\t# remove stopwords\n\twords = [w for w in words if not w in stopwords.words('english')] \n\n\t# store keywords\n\tkeywords = keywords.union(set(words)) \n\nprint(keywords)\n\n# Output: \n{'different', 'sentences', 'sports', 'document', 'Technology', \n'entertainment', 'find', 'sample', 'text', 'topics'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that extracts a set of keywords from a given text document.\n\n### Input:\nNot applicable\n\n### Output:\n# package imports\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize, sent_tokenize \n\n# store the text document as a string\ntext = '''\nThis is a sample text document that will be used to find the keywords. \nIt has a few sentences that talk about different topics such as sports, \ntechnology, and entertainment.\n'''\n\n# tokenize sentences\nsentences = sent_tokenize(text) \n\n# store keyword set\nkeywords = set() \n\nfor i in sentences: \n\t\n\t# tokenize words\n\twords = word_tokenize(i) \n\t\n\t# remove stopwords\n\twords = [w for w in words if not w in stopwords.words('english')] \n\n\t# store keywords\n\tkeywords = keywords.union(set(words)) \n\nprint(keywords)\n\n# Output: \n{'different', 'sentences', 'sports', 'document', 'Technology', \n'entertainment', 'find', 'sample', 'text', 'topics'}","tok_input_length":240,"tok_output_length":194,"system_prompt":"","index":17164}
{"question":"Create an algorithm in Python to sort an array of 1000 randomly generated numbers between 0 and 10,000 using the quicksort algorithm.","input":"list = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]","expected_output":"def quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nlist = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]    \nprint(quicksort(list))\n\n# Output: [129, 156, 310, 422, 536, 662, 705, 721, 735, 799]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to sort an array of 1000 randomly generated numbers between 0 and 10,000 using the quicksort algorithm.\n\n### Input:\nlist = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]\n\n### Output:\ndef quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nlist = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]    \nprint(quicksort(list))\n\n# Output: [129, 156, 310, 422, 536, 662, 705, 721, 735, 799]","tok_input_length":241,"tok_output_length":152,"system_prompt":"","index":660}
{"question":"Develop a web scraping program using Python to extract the names and contact information of 10 randomly selected people from a popular website.","input":"Not applicable","expected_output":"import requests\nimport random\nfrom bs4 import BeautifulSoup\n\n#specify website url\nwebsite_url = 'https:\/\/www.example.com\/people'\n\n#scraping function\ndef scrape_contacts():\n    #load website\n    html = requests.get(website_url).text\n    #parse html\n    soup = BeautifulSoup(html, 'html.parser')\n    contacts = []\n    #extract contact information\n    for contact in soup.find_all('div', {'class': 'contact'}):\n        name = contact.find('h3').text\n        email = contact.find('p', {'class': 'email'}).text\n        phone = contact.find('p', {'class': 'phone'}).text\n        contacts.append({'name': name, 'email': email, 'phone': phone})\n    #randomly select 10 contacts\n    return random.sample(contacts, 10)\n\nscraped_contacts = scrape_contacts()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraping program using Python to extract the names and contact information of 10 randomly selected people from a popular website.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport random\nfrom bs4 import BeautifulSoup\n\n#specify website url\nwebsite_url = 'https:\/\/www.example.com\/people'\n\n#scraping function\ndef scrape_contacts():\n    #load website\n    html = requests.get(website_url).text\n    #parse html\n    soup = BeautifulSoup(html, 'html.parser')\n    contacts = []\n    #extract contact information\n    for contact in soup.find_all('div', {'class': 'contact'}):\n        name = contact.find('h3').text\n        email = contact.find('p', {'class': 'email'}).text\n        phone = contact.find('p', {'class': 'phone'}).text\n        contacts.append({'name': name, 'email': email, 'phone': phone})\n    #randomly select 10 contacts\n    return random.sample(contacts, 10)\n\nscraped_contacts = scrape_contacts()","tok_input_length":241,"tok_output_length":186,"system_prompt":"","index":11375}
{"question":"Write a Python program that given two strings, s1 and s2, returns the length of the smallest substring in s1 that contains all of the characters in s2.","input":"s1 = \"abcdefghi\"\ns2 = \"cgh\"","expected_output":"def min_substring_length(s1, s2):\n\n last_seen = {c: -1 for c in s2}\n min_length = len(s1) + 1\n\n left, right = 0, 0\n\nwhile right < len(s1):\n c = s1[right]\n if c in s2:\n last_seen[c] = right # record the last seen position of c\n\n # if all characters in s2 is found\n if all(v>=left for v in last_seen.values()):\n min_length = min(min_length, right - left + 1) # update min length\n\n # move left pointer of the window\n left = min(last_seen.values()) + 1\n\n right += 1\n\n return min_length\n\nprint(min_substring_length(s1, s2))\n# Output: 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that given two strings, s1 and s2, returns the length of the smallest substring in s1 that contains all of the characters in s2.\n\n### Input:\ns1 = \"abcdefghi\"\ns2 = \"cgh\"\n\n### Output:\ndef min_substring_length(s1, s2):\n\n last_seen = {c: -1 for c in s2}\n min_length = len(s1) + 1\n\n left, right = 0, 0\n\nwhile right < len(s1):\n c = s1[right]\n if c in s2:\n last_seen[c] = right # record the last seen position of c\n\n # if all characters in s2 is found\n if all(v>=left for v in last_seen.values()):\n min_length = min(min_length, right - left + 1) # update min length\n\n # move left pointer of the window\n left = min(last_seen.values()) + 1\n\n right += 1\n\n return min_length\n\nprint(min_substring_length(s1, s2))\n# Output: 3","tok_input_length":242,"tok_output_length":166,"system_prompt":"","index":8325}
{"question":"Design a Python web application with a backend using Flask. This application should contain routes for displaying a list of products and a route for adding a new product.","input":"Not applicable","expected_output":"from flask import Flask, render_template, request\n\n#Initialize the app\napp = Flask(__name__)\n\n# Create a list of products\nproducts = [\n {'name': 'Apple', 'price': 3.99},\n {'name': 'Banana', 'price': 2.99},\n {'name': 'Kiwi', 'price': 4.99}\n]\n\n# Route for displaying the list of products\n@app.route('\/')\ndef home():\n return render_template('index.html', products=products)\n\n# Route for adding a new product\n@app.route('\/add_product', methods = ['POST'])\ndef add_product():\n new_product = { 'name': request.form['name'], 'price': request.form['price'] }\n products.append(new_product)\n return render_template('index.html', products=products)\n\n# Run the app\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python web application with a backend using Flask. This application should contain routes for displaying a list of products and a route for adding a new product.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, render_template, request\n\n#Initialize the app\napp = Flask(__name__)\n\n# Create a list of products\nproducts = [\n {'name': 'Apple', 'price': 3.99},\n {'name': 'Banana', 'price': 2.99},\n {'name': 'Kiwi', 'price': 4.99}\n]\n\n# Route for displaying the list of products\n@app.route('\/')\ndef home():\n return render_template('index.html', products=products)\n\n# Route for adding a new product\n@app.route('\/add_product', methods = ['POST'])\ndef add_product():\n new_product = { 'name': request.form['name'], 'price': request.form['price'] }\n products.append(new_product)\n return render_template('index.html', products=products)\n\n# Run the app\nif __name__ == '__main__':\n app.run(debug=True)","tok_input_length":242,"tok_output_length":181,"system_prompt":"","index":18272}
{"question":"Create a Python module that calculates the distance between two points given their latitude and longitude.","input":"Not applicable","expected_output":"import math\n\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    '''\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees).\n    Source: https:\/\/stackoverflow.com\/a\/4913653\n    '''\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat\/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon\/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that calculates the distance between two points given their latitude and longitude.\n\n### Input:\nNot applicable\n\n### Output:\nimport math\n\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    '''\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees).\n    Source: https:\/\/stackoverflow.com\/a\/4913653\n    '''\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat\/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon\/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r","tok_input_length":242,"tok_output_length":195,"system_prompt":"","index":1163}
{"question":"Write a Python program to generate a script for deploying a web application.","input":"The web application contains one page with HTML, Javascript and a MySQL database.","expected_output":"#!\/usr\/bin\/python\n\nimport os\n\n# Install Apache Web Server\nos.system('sudo apt-get install apache2')\n\n# Install MySQL server\nos.system('sudo apt-get install mysql-server')\n\n# Create database\nos.system('mysql -u root -p create database mydb')\n\n# Create user\nos.system('mysql -u root -p grant all privileges on mydb.* to username@localhost identified by 'password';\n\n# Copy html file\nhtml_file='index.html'\nos.system('cp ' + html_file + ' \/var\/www\/html\/')\n\n# Create and run CGI script\ncgi_file='my_cgi.py'\nos.system('cp ' + cgi_file + ' \/usr\/lib\/cgi-bin\/')\nos.system('sudo chmod 755 \/usr\/lib\/cgi-bin\/'+cgi_file)\n\n# Create connection file\nconn_file='my_conn.py'\nos.system('cp ' + conn_file + ' \/usr\/lib\/')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a script for deploying a web application.\n\n### Input:\nThe web application contains one page with HTML, Javascript and a MySQL database.\n\n### Output:\n#!\/usr\/bin\/python\n\nimport os\n\n# Install Apache Web Server\nos.system('sudo apt-get install apache2')\n\n# Install MySQL server\nos.system('sudo apt-get install mysql-server')\n\n# Create database\nos.system('mysql -u root -p create database mydb')\n\n# Create user\nos.system('mysql -u root -p grant all privileges on mydb.* to username@localhost identified by 'password';\n\n# Copy html file\nhtml_file='index.html'\nos.system('cp ' + html_file + ' \/var\/www\/html\/')\n\n# Create and run CGI script\ncgi_file='my_cgi.py'\nos.system('cp ' + cgi_file + ' \/usr\/lib\/cgi-bin\/')\nos.system('sudo chmod 755 \/usr\/lib\/cgi-bin\/'+cgi_file)\n\n# Create connection file\nconn_file='my_conn.py'\nos.system('cp ' + conn_file + ' \/usr\/lib\/')","tok_input_length":243,"tok_output_length":187,"system_prompt":"","index":2886}
{"question":"Write a function or class in Python to parse an Excel sheet and extract all strings that are in bold.","input":"EXCEL SHEET CONTENT ;\n\n| Customer ID | Name | Date |\n|------------|------|------|\n|      12345 | John | 10\/9 |\n| **STRING1** | Mary | 12\/3 |\n|     54321  | Joe  | 5\/7  |   \n| **STRING2** | Paul | 3\/1  |","expected_output":"import xlrd\n\ndef extract_bold_strings(filename):\n strings = []\n workbook = xlrd.open_workbook(filename)\n sheet = workbook.sheet_by_index(0)\n for row in range(sheet.nrows):\n  for col in range(sheet.ncols):\n   cell_value = sheet.cell(row, col).value\n   font_style = sheet.cell_xf_index(row, col).font_record.weight\n   if font_style == 700:\n    strings.append(cell_value)\n return strings\n \n strings = extract_bold_strings('test.xlsx') \n print(strings) # prints ['STRING1', 'STRING2']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function or class in Python to parse an Excel sheet and extract all strings that are in bold.\n\n### Input:\nEXCEL SHEET CONTENT ;\n\n| Customer ID | Name | Date |\n|------------|------|------|\n|      12345 | John | 10\/9 |\n| **STRING1** | Mary | 12\/3 |\n|     54321  | Joe  | 5\/7  |   \n| **STRING2** | Paul | 3\/1  |\n\n### Output:\nimport xlrd\n\ndef extract_bold_strings(filename):\n strings = []\n workbook = xlrd.open_workbook(filename)\n sheet = workbook.sheet_by_index(0)\n for row in range(sheet.nrows):\n  for col in range(sheet.ncols):\n   cell_value = sheet.cell(row, col).value\n   font_style = sheet.cell_xf_index(row, col).font_record.weight\n   if font_style == 700:\n    strings.append(cell_value)\n return strings\n \n strings = extract_bold_strings('test.xlsx') \n print(strings) # prints ['STRING1', 'STRING2']","tok_input_length":244,"tok_output_length":118,"system_prompt":"","index":1252}
{"question":"Create a Python program to check if given inputs are anagrams.","input":"Input 1: 'listen'\nInput 2: 'silent'","expected_output":"def is_anagram(input1, input2):\n  # turn the strings into sets\n  s1 = set(input1)\n  s2 = set(input2)\n  \n  # Compare the size of the sets\n  if len(s1) != len(s2):\n    return False\n  \n  # Iterate through the sets and compare the contents\n  for element in s1:\n    if element not in s2:\n      return False\n  \n  # If all the conditions pass, then the strings are anagrams\n  return True\n\n# Sample inputs\ninput1 = 'listen'\ninput2 = 'silent'\n\n# Check if the strings are anagrams\nif is_anagram(input1, input2):\n  print(\"{} and {} are anagrams.\".format(input1, input2))\nelse:\n  print(\"{} and {} are not anagrams.\".format(input1, input2))\n\n# Output\n# listen and silent are anagrams.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check if given inputs are anagrams.\n\n### Input:\nInput 1: 'listen'\nInput 2: 'silent'\n\n### Output:\ndef is_anagram(input1, input2):\n  # turn the strings into sets\n  s1 = set(input1)\n  s2 = set(input2)\n  \n  # Compare the size of the sets\n  if len(s1) != len(s2):\n    return False\n  \n  # Iterate through the sets and compare the contents\n  for element in s1:\n    if element not in s2:\n      return False\n  \n  # If all the conditions pass, then the strings are anagrams\n  return True\n\n# Sample inputs\ninput1 = 'listen'\ninput2 = 'silent'\n\n# Check if the strings are anagrams\nif is_anagram(input1, input2):\n  print(\"{} and {} are anagrams.\".format(input1, input2))\nelse:\n  print(\"{} and {} are not anagrams.\".format(input1, input2))\n\n# Output\n# listen and silent are anagrams.","tok_input_length":244,"tok_output_length":190,"system_prompt":"","index":15890}
{"question":"Generate a Python script to classify emails into spam\/ham categories.","input":"","expected_output":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\ndf = pd.read_csv('data.csv')\n\n# Split the data into features and labels\nfeatures = df['text']\nlabels = df['label']\n\n# Extract features\nvectorizer = TfidfVectorizer()\nfeatures_transformed = vectorizer.fit_transform(features)\n\n# Split into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(features_transformed, labels, test_size = 0.2)\n\n# Build the classification model\nmodel = MultinomialNB()\nmodel.fit(x_train, y_train)\n\n# Make predictions\ny_pred = model.predict(x_test)\n\n# Calculate the accuracy\naccuracy = np.mean(y_pred == y_test)\n\n# Print the accuracy\nprint(\"Model accuracy: {}%\".format(accuracy*100))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to classify emails into spam\/ham categories.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\ndf = pd.read_csv('data.csv')\n\n# Split the data into features and labels\nfeatures = df['text']\nlabels = df['label']\n\n# Extract features\nvectorizer = TfidfVectorizer()\nfeatures_transformed = vectorizer.fit_transform(features)\n\n# Split into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(features_transformed, labels, test_size = 0.2)\n\n# Build the classification model\nmodel = MultinomialNB()\nmodel.fit(x_train, y_train)\n\n# Make predictions\ny_pred = model.predict(x_test)\n\n# Calculate the accuracy\naccuracy = np.mean(y_pred == y_test)\n\n# Print the accuracy\nprint(\"Model accuracy: {}%\".format(accuracy*100))","tok_input_length":244,"tok_output_length":204,"system_prompt":"","index":17925}
{"question":"Create a Machine Learning model in Python which predicts the house prices in a given area.","input":"A required dataset housing.csv which contains house information, such as square footage, location, number of bedrooms and bathrooms, etc.","expected_output":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\n\n# Loading the data\ndata = pd.read_csv('housing.csv')\n\n# Feature selection & Data Splitting\nX = data[['square_feet', ' bedrooms', 'bathrooms', 'location']]\ny = data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create the model & Training\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Testing & Evaluating\ny_pred = model.predict(X_test)\n\n# Visualizing the results\nplt.scatter(y_test, y_pred)\nplt.xlabel('Actual Prices')\nplt.ylabel('Predicted Prices')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Machine Learning model in Python which predicts the house prices in a given area.\n\n### Input:\nA required dataset housing.csv which contains house information, such as square footage, location, number of bedrooms and bathrooms, etc.\n\n### Output:\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\n\n# Loading the data\ndata = pd.read_csv('housing.csv')\n\n# Feature selection & Data Splitting\nX = data[['square_feet', ' bedrooms', 'bathrooms', 'location']]\ny = data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create the model & Training\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Testing & Evaluating\ny_pred = model.predict(X_test)\n\n# Visualizing the results\nplt.scatter(y_test, y_pred)\nplt.xlabel('Actual Prices')\nplt.ylabel('Predicted Prices')\nplt.show()","tok_input_length":245,"tok_output_length":176,"system_prompt":"","index":1646}
{"question":"Develop an ordinary least squares regression model in Python for the following data and explain the meaning of the parameters:","input":"independent variables (x1, x2): 2.0, 5.0\ndependent variables (y): 7.5","expected_output":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# define input data\nX = np.array([[2.0,5.0]])\ny = np.array([7.5])\n\n# initialise and train the model\nregr = LinearRegression()\nregr.fit(X, y)\n\n# The coefficients\nprint('Coefficient\/Parameter: ', regr.coef_)\n\n# The intercept\nprint('Intercept: ', regr.intercept_)\n\n# The meaning of the parameters: \n# The coefficient\/Parameters is the slope of the regression line. It indicates the effect that a unit change in one of the independent variables has on the dependent variable. \n# The intercept is the point where the regression line intersects the y-axis. It indicates the value of the dependent variable when all independent variables are equal to zero.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an ordinary least squares regression model in Python for the following data and explain the meaning of the parameters:\n\n### Input:\nindependent variables (x1, x2): 2.0, 5.0\ndependent variables (y): 7.5\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# define input data\nX = np.array([[2.0,5.0]])\ny = np.array([7.5])\n\n# initialise and train the model\nregr = LinearRegression()\nregr.fit(X, y)\n\n# The coefficients\nprint('Coefficient\/Parameter: ', regr.coef_)\n\n# The intercept\nprint('Intercept: ', regr.intercept_)\n\n# The meaning of the parameters: \n# The coefficient\/Parameters is the slope of the regression line. It indicates the effect that a unit change in one of the independent variables has on the dependent variable. \n# The intercept is the point where the regression line intersects the y-axis. It indicates the value of the dependent variable when all independent variables are equal to zero.","tok_input_length":246,"tok_output_length":168,"system_prompt":"","index":13237}
{"question":"Construct a Python program that shuffles a deck of cards.","input":"A standard deck of cards with 52 cards","expected_output":"import random\n\n# A standard deck of cards with 52 cards\ndeck = [2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A', \n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A',\n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A',\n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A']\n\n# Shuffle the deck\nrandom.shuffle(deck)\nprint(deck)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that shuffles a deck of cards.\n\n### Input:\nA standard deck of cards with 52 cards\n\n### Output:\nimport random\n\n# A standard deck of cards with 52 cards\ndeck = [2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A', \n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A',\n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A',\n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A']\n\n# Shuffle the deck\nrandom.shuffle(deck)\nprint(deck)","tok_input_length":246,"tok_output_length":197,"system_prompt":"","index":1976}
{"question":"Write a python program to parse an XML document and return a list of tag objects.","input":"<xml>\n  <root>\n    <child1 id=\"1\">\n      <subchild1 value=\"a\">\n      <\/subchild1>\n      <subchild2 value=\"b\">\n      <\/subchild2>\n    <\/child1>\n    <child2 id=\"2\">\n      <subchild3 value=\"c\">\n      <\/subchild3>\n      <subchild4 value=\"d\">\n      <\/subchild4>\n    <\/child2>\n  <\/root>\n<\/xml>","expected_output":"def parse_xml(text):\n    tag_objects = []\n\n    root = ET.fromstring(text)\n    for child in root:\n        tag = Tag(child.attrib[\"id\"])\n        for subchild in child:\n            tag.add_value(subchild.attrib[\"value\"])\n        tag_objects.append(tag)\n\n    return tag_objects\n\nclass Tag:\n    def __init__(self, tag_id):\n        self.tag_id = tag_id\n        self.values = []\n    \n    def add_value(self, value):\n        self.values.append(value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to parse an XML document and return a list of tag objects.\n\n### Input:\n<xml>\n  <root>\n    <child1 id=\"1\">\n      <subchild1 value=\"a\">\n      <\/subchild1>\n      <subchild2 value=\"b\">\n      <\/subchild2>\n    <\/child1>\n    <child2 id=\"2\">\n      <subchild3 value=\"c\">\n      <\/subchild3>\n      <subchild4 value=\"d\">\n      <\/subchild4>\n    <\/child2>\n  <\/root>\n<\/xml>\n\n### Output:\ndef parse_xml(text):\n    tag_objects = []\n\n    root = ET.fromstring(text)\n    for child in root:\n        tag = Tag(child.attrib[\"id\"])\n        for subchild in child:\n            tag.add_value(subchild.attrib[\"value\"])\n        tag_objects.append(tag)\n\n    return tag_objects\n\nclass Tag:\n    def __init__(self, tag_id):\n        self.tag_id = tag_id\n        self.values = []\n    \n    def add_value(self, value):\n        self.values.append(value)","tok_input_length":247,"tok_output_length":103,"system_prompt":"","index":269}
{"question":"Write a Python program to normalize a 3x3 matrix.","input":"[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]","expected_output":"\"\"\"\nWrite a Python program to normalize a 3x3 matrix\n\"\"\"\n \n# Function to normalize a 3x3 matrix \ndef normalize_matrix(mat): \n  \n    norm_matrix= []\n    sum_elements = 0\n    for row in mat: \n        for element in row: \n            sum_elements += element \n    for row in mat:\n        norm_row = []\n        for element in row:\n            norm_row.append(element\/sum_elements)\n        norm_matrix.append(norm_row)\n    return norm_matrix\n\n# main \nif __name__ == \"__main__\": \n    # Given matrix \n    mat = [[1, 2, 3], \n           [4, 5, 6], \n           [7, 8, 9]]\n  \n    norm_matrix = normalize_matrix(mat) \n    print(\"Normalized matrix:\") \n    print(norm_matrix)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to normalize a 3x3 matrix.\n\n### Input:\n[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]\n\n### Output:\n\"\"\"\nWrite a Python program to normalize a 3x3 matrix\n\"\"\"\n \n# Function to normalize a 3x3 matrix \ndef normalize_matrix(mat): \n  \n    norm_matrix= []\n    sum_elements = 0\n    for row in mat: \n        for element in row: \n            sum_elements += element \n    for row in mat:\n        norm_row = []\n        for element in row:\n            norm_row.append(element\/sum_elements)\n        norm_matrix.append(norm_row)\n    return norm_matrix\n\n# main \nif __name__ == \"__main__\": \n    # Given matrix \n    mat = [[1, 2, 3], \n           [4, 5, 6], \n           [7, 8, 9]]\n  \n    norm_matrix = normalize_matrix(mat) \n    print(\"Normalized matrix:\") \n    print(norm_matrix)","tok_input_length":247,"tok_output_length":178,"system_prompt":"","index":9814}
{"question":"Create a visually appealing line chart in Python comparing the sales of two products over a 6-month period.","input":"","expected_output":"import matplotlib.pyplot as plt\n\nx1 = [1, 2, 3, 4, 5, 6]\ny1 = [50, 60, 70, 80, 70, 60]\nx2 = [1, 2, 3, 4, 5, 6]\ny2 = [40, 50, 70, 80, 90, 100]\n\n# set figure size\nplt.figure(figsize=(8, 5))\n\n# plot data\nplt.plot(x1, y1, label='Product A')\nplt.plot(x2, y2, label='Product B')\n\n# beautify the graph\nplt.xlabel('Months')\nplt.xticks([1, 2, 3, 4, 5, 6])\nplt.ylabel('Sales (in Units)')\nplt.title('Comparing Sales of Two Products')\nplt.legend()\nplt.grid(True)\n\n# show the chart\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a visually appealing line chart in Python comparing the sales of two products over a 6-month period.\n\n### Input:\n\n\n### Output:\nimport matplotlib.pyplot as plt\n\nx1 = [1, 2, 3, 4, 5, 6]\ny1 = [50, 60, 70, 80, 70, 60]\nx2 = [1, 2, 3, 4, 5, 6]\ny2 = [40, 50, 70, 80, 90, 100]\n\n# set figure size\nplt.figure(figsize=(8, 5))\n\n# plot data\nplt.plot(x1, y1, label='Product A')\nplt.plot(x2, y2, label='Product B')\n\n# beautify the graph\nplt.xlabel('Months')\nplt.xticks([1, 2, 3, 4, 5, 6])\nplt.ylabel('Sales (in Units)')\nplt.title('Comparing Sales of Two Products')\nplt.legend()\nplt.grid(True)\n\n# show the chart\nplt.show()","tok_input_length":247,"tok_output_length":199,"system_prompt":"","index":2156}
{"question":"Optimize a linear programming problem in Python using the scipy.optimize library.","input":"Objective Function: \nmax 3x + 4y \n\nConstraints: \n2x + y \u2264 10 \nx + 2y \u2264 10 \nx, y \u2265 0","expected_output":"import numpy as np\nfrom scipy.optimize import linprog\n\n# Define objective function\nc = np.array([3,4])\n\n# Define constraints\nA = np.array([[2,1], [1,2]])\nb = np.array([10,10])\n\n# Define bounds\nx0_bnds = (0, None)\nx1_bnds = (0, None)\n\n# Apply constraint\nres = linprog(c, A_ub=A, b_ub=b, bounds=(x0_bnds, x1_bnds), options={\"disp\": True})\n\n# Print result\nprint(\"Optimal value:\", res.fun, \"\\nX =\", res.x)\n# Output: Optimal value: 13.333333333333334 \n#         X = [3.33333333 2.33333333]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a linear programming problem in Python using the scipy.optimize library.\n\n### Input:\nObjective Function: \nmax 3x + 4y \n\nConstraints: \n2x + y \u2264 10 \nx + 2y \u2264 10 \nx, y \u2265 0\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import linprog\n\n# Define objective function\nc = np.array([3,4])\n\n# Define constraints\nA = np.array([[2,1], [1,2]])\nb = np.array([10,10])\n\n# Define bounds\nx0_bnds = (0, None)\nx1_bnds = (0, None)\n\n# Apply constraint\nres = linprog(c, A_ub=A, b_ub=b, bounds=(x0_bnds, x1_bnds), options={\"disp\": True})\n\n# Print result\nprint(\"Optimal value:\", res.fun, \"\\nX =\", res.x)\n# Output: Optimal value: 13.333333333333334 \n#         X = [3.33333333 2.33333333]","tok_input_length":248,"tok_output_length":167,"system_prompt":"","index":6390}
{"question":"Generate a class with objects and methods in Python to store customer data.","input":"No Input","expected_output":"\"\"\"\nGenerate a class with objects and methods in Python to store customer data\n\"\"\"\n\nclass Customer():\n    '''\n    This class stores customer information\n    '''\n    def __init__(self, name, address, phone):\n        self.name = name\n        self.address = address\n        self.phone = phone\n \n    def get_name(self):\n        '''\n        This method returns customer name\n        '''\n        return self.name\n \n    def get_address(self):\n        '''\n        This method returns customer address\n        '''\n        return self.address\n \n    def get_phone(self):\n        '''\n        This method returns customer phone number\n        '''\n        return self.phone\n  \n    def set_name(self, name):\n        '''\n        This method sets customer name\n        '''\n        self.name = name\n \n    def set_address(self, address):\n        '''\n        This method sets customer address\n        '''\n        self.address = address\n \n    def set_phone(self, phone):\n        '''\n        This method sets customer phone number\n        '''\n        self.phone = phone","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class with objects and methods in Python to store customer data.\n\n### Input:\nNo Input\n\n### Output:\n\"\"\"\nGenerate a class with objects and methods in Python to store customer data\n\"\"\"\n\nclass Customer():\n    '''\n    This class stores customer information\n    '''\n    def __init__(self, name, address, phone):\n        self.name = name\n        self.address = address\n        self.phone = phone\n \n    def get_name(self):\n        '''\n        This method returns customer name\n        '''\n        return self.name\n \n    def get_address(self):\n        '''\n        This method returns customer address\n        '''\n        return self.address\n \n    def get_phone(self):\n        '''\n        This method returns customer phone number\n        '''\n        return self.phone\n  \n    def set_name(self, name):\n        '''\n        This method sets customer name\n        '''\n        self.name = name\n \n    def set_address(self, address):\n        '''\n        This method sets customer address\n        '''\n        self.address = address\n \n    def set_phone(self, phone):\n        '''\n        This method sets customer phone number\n        '''\n        self.phone = phone","tok_input_length":248,"tok_output_length":204,"system_prompt":"","index":11870}
{"question":"Create a web application using Django and Python. This application should allow users to register and login to view a list of quotes.","input":"Not applicable","expected_output":"# projects\/quotes\/models.py\n\nclass Quote(models.Model):\n    author = models.CharField(max_length=255)\n    quote_text = models.TextField()\n\n\nclass UserQuote(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    quote = models.ForeignKey(Quote, on_delete=models.CASCADE)\n\n# projects\/quotes\/views.py\n\ndef index(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    quotes = request.user.userquote_set.all()\n    return render(request, 'quotes\/index.html', {'quotes': quotes})\n\ndef login(request):\n    if request.user.is_authenticated:\n        return redirect('index')\n\n    if request.method == 'POST':\n        form = AuthenticationForm(request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            django_login(request, user)\n            return redirect('index')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'quotes\/login.html', {'form': form})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using Django and Python. This application should allow users to register and login to view a list of quotes.\n\n### Input:\nNot applicable\n\n### Output:\n# projects\/quotes\/models.py\n\nclass Quote(models.Model):\n    author = models.CharField(max_length=255)\n    quote_text = models.TextField()\n\n\nclass UserQuote(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    quote = models.ForeignKey(Quote, on_delete=models.CASCADE)\n\n# projects\/quotes\/views.py\n\ndef index(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    quotes = request.user.userquote_set.all()\n    return render(request, 'quotes\/index.html', {'quotes': quotes})\n\ndef login(request):\n    if request.user.is_authenticated:\n        return redirect('index')\n\n    if request.method == 'POST':\n        form = AuthenticationForm(request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            django_login(request, user)\n            return redirect('index')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'quotes\/login.html', {'form': form})","tok_input_length":249,"tok_output_length":194,"system_prompt":"","index":641}
{"question":"Write a Python script to predict the expected values given some input data.","input":"Input data:\n\nX1 = [1, 2, 3, 4, 5] \nY1 = [5, 7, 4, 8, 3]\n\nX2 = [1, 4, 9, 16, 25]\nY2 = [6, 8, 10, 12, 15]","expected_output":"#Linear regression\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx1 = np.array(X1).reshape(-1,1)\ny1 = np.array(Y1).reshape(-1,1)\n\nx2 = np.array(X2).reshape(-1,1)\ny2 = np.array(Y2).reshape(-1,1)\n\nmodel1 = LinearRegression().fit(x1,y1)\nmodel2 = LinearRegression().fit(x2,y2)\n\npredictions1 = model1.predict(x1)\npredictions2 = model2.predict(x2)\n\nprint (\"Predicted values: \")\nprint (predictions1)\nprint (predictions2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to predict the expected values given some input data.\n\n### Input:\nInput data:\n\nX1 = [1, 2, 3, 4, 5] \nY1 = [5, 7, 4, 8, 3]\n\nX2 = [1, 4, 9, 16, 25]\nY2 = [6, 8, 10, 12, 15]\n\n### Output:\n#Linear regression\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx1 = np.array(X1).reshape(-1,1)\ny1 = np.array(Y1).reshape(-1,1)\n\nx2 = np.array(X2).reshape(-1,1)\ny2 = np.array(Y2).reshape(-1,1)\n\nmodel1 = LinearRegression().fit(x1,y1)\nmodel2 = LinearRegression().fit(x2,y2)\n\npredictions1 = model1.predict(x1)\npredictions2 = model2.predict(x2)\n\nprint (\"Predicted values: \")\nprint (predictions1)\nprint (predictions2)","tok_input_length":250,"tok_output_length":133,"system_prompt":"","index":7284}
{"question":"Create a Recurrent Neural Network (RNN) Model in Python with Keras that takes in text data and generates predicted labels.","input":"Not applicable","expected_output":"import keras\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\nfrom keras.datasets import imdb\n\n(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=20000)\n\nx_train = sequence.pad_sequences(x_train, maxlen=80)\nx_test = sequence.pad_sequences(x_test, maxlen=80)\n\nmodel = Sequential()\nmodel.add(Embedding(20000, 128))\nmodel.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n batch_size=32,\n epochs=15,\n verbose=2,\n validation_data=(x_test, y_test))\n\nscore, acc = model.evaluate(x_test, y_test,\n batch_size=32,\n verbose=2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Recurrent Neural Network (RNN) Model in Python with Keras that takes in text data and generates predicted labels.\n\n### Input:\nNot applicable\n\n### Output:\nimport keras\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\nfrom keras.datasets import imdb\n\n(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=20000)\n\nx_train = sequence.pad_sequences(x_train, maxlen=80)\nx_test = sequence.pad_sequences(x_test, maxlen=80)\n\nmodel = Sequential()\nmodel.add(Embedding(20000, 128))\nmodel.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n batch_size=32,\n epochs=15,\n verbose=2,\n validation_data=(x_test, y_test))\n\nscore, acc = model.evaluate(x_test, y_test,\n batch_size=32,\n verbose=2)","tok_input_length":250,"tok_output_length":194,"system_prompt":"","index":17526}
{"question":"Create a machine learning model in Python for classifying animal sounds.","input":"Training dataset containing labels and associated audio samples (example):\n\nLabel | Audio Sample\nCow | CowMooing.wav\nDog | DogBarking.wav\nCat | CatMeowing.wav","expected_output":"import wave\nimport pandas as pd\nimport numpy as np\nfrom scipy.io import wavfile\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the data\ndata = pd.read_csv(\"dataset.csv\")\n\n# Extract the audio samples and labels as numpy arrays\nsamples = np.array([wavfile.read(f)[1] for f in data[\"Audio Sample\"]])\nlabels = np.array(data[\"Label\"])\n\n# Split datasets into training and test\nX_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.2)\n\n# Create and train a Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\n\n# Measure accuracy\naccuracy = clf.score(X_test, y_test)\nprint('Model accuracy:', accuracy)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python for classifying animal sounds.\n\n### Input:\nTraining dataset containing labels and associated audio samples (example):\n\nLabel | Audio Sample\nCow | CowMooing.wav\nDog | DogBarking.wav\nCat | CatMeowing.wav\n\n### Output:\nimport wave\nimport pandas as pd\nimport numpy as np\nfrom scipy.io import wavfile\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the data\ndata = pd.read_csv(\"dataset.csv\")\n\n# Extract the audio samples and labels as numpy arrays\nsamples = np.array([wavfile.read(f)[1] for f in data[\"Audio Sample\"]])\nlabels = np.array(data[\"Label\"])\n\n# Split datasets into training and test\nX_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.2)\n\n# Create and train a Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\n\n# Measure accuracy\naccuracy = clf.score(X_test, y_test)\nprint('Model accuracy:', accuracy)","tok_input_length":251,"tok_output_length":173,"system_prompt":"","index":3561}
{"question":"Create a Python program to analyze and classify text documents into different categories.","input":"","expected_output":"import nltk\nfrom sklearn import datasets\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Load the data\ncategories = ['science', 'arts', 'politics']\ndocuments = datasets.load_files(\".\/documents\", categories=categories, encoding=\"utf-8\")\n\n#Preprocess the data\nvectorizer = CountVectorizer(stop_words='english',lowercase=True)\nX = vectorizer.fit_transform(documents.data)\ntfidf_transformer = TfidfTransformer()\nX_tfidf = tfidf_transformer.fit_transform(X)\n\n#Build the model\nclf = MultinomialNB().fit(X_tfidf, documents.target)\n\n#Classify documents\ntext = \"This document is about the science of climate change.\"\nX = vectorizer.transform([text])\nX_tfidf = tfidf_transformer.transform(X)\nprediction = clf.predict(X_tfidf)\n\nprint \"This document is classified as:\", documents.target_names[prediction[0]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to analyze and classify text documents into different categories.\n\n### Input:\n\n\n### Output:\nimport nltk\nfrom sklearn import datasets\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Load the data\ncategories = ['science', 'arts', 'politics']\ndocuments = datasets.load_files(\".\/documents\", categories=categories, encoding=\"utf-8\")\n\n#Preprocess the data\nvectorizer = CountVectorizer(stop_words='english',lowercase=True)\nX = vectorizer.fit_transform(documents.data)\ntfidf_transformer = TfidfTransformer()\nX_tfidf = tfidf_transformer.fit_transform(X)\n\n#Build the model\nclf = MultinomialNB().fit(X_tfidf, documents.target)\n\n#Classify documents\ntext = \"This document is about the science of climate change.\"\nX = vectorizer.transform([text])\nX_tfidf = tfidf_transformer.transform(X)\nprediction = clf.predict(X_tfidf)\n\nprint \"This document is classified as:\", documents.target_names[prediction[0]]","tok_input_length":251,"tok_output_length":210,"system_prompt":"","index":11277}
{"question":"Create a Python program to implement a basic calculator. The program should have functions to perform addition, subtraction, multiplication, division, and find the modulus.","input":"Not applicable","expected_output":"# Program to implement basic calculator operations \n# Addition, Subtraction, Multiplication, Division, Modulus\n\n# Function to add two numbers \ndef add(num1, num2): \n return num1 + num2 \n\n# Function to subtract two numbers \ndef subtract(num1, num2): \n return num1 - num2 \n\n# Function to multiply two numbers \ndef multiply(num1, num2): \n return num1 * num2 \n\n# Function to divide two numbers \ndef divide(num1, num2): \n return num1 \/ num2 \n\n# Function to find modulus of two numbers \ndef modulus(num1, num2): \n return num1 % num2\n\n# Print results \nprint(add(10, 20)) \nprint(subtract(20, 10)) \nprint(multiply(20, 10)) \nprint(divide(20, 10)) \nprint(modulus(20, 10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to implement a basic calculator. The program should have functions to perform addition, subtraction, multiplication, division, and find the modulus.\n\n### Input:\nNot applicable\n\n### Output:\n# Program to implement basic calculator operations \n# Addition, Subtraction, Multiplication, Division, Modulus\n\n# Function to add two numbers \ndef add(num1, num2): \n return num1 + num2 \n\n# Function to subtract two numbers \ndef subtract(num1, num2): \n return num1 - num2 \n\n# Function to multiply two numbers \ndef multiply(num1, num2): \n return num1 * num2 \n\n# Function to divide two numbers \ndef divide(num1, num2): \n return num1 \/ num2 \n\n# Function to find modulus of two numbers \ndef modulus(num1, num2): \n return num1 % num2\n\n# Print results \nprint(add(10, 20)) \nprint(subtract(20, 10)) \nprint(multiply(20, 10)) \nprint(divide(20, 10)) \nprint(modulus(20, 10))","tok_input_length":252,"tok_output_length":192,"system_prompt":"","index":2675}
{"question":"Create a function in Python that takes two matrices and prints the result of their subtraction.","input":"A = [[2, 5, 3],\n     [1, 4, 7],\n     [5, 2, 9]]\n\nB = [[4, 7, 0],\n     [3, 2, 8],\n     [1, 3, 6]]","expected_output":"def subtractMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    # Checking if the given two matrix are of same size \n    if rowsB != rowsA or colsA != colsB: \n        print(\"ERROR\") \n     \n    # Subtracting corresponding elements \n    C = [[0 for j in range(colsA)] for i in range(rowsB)] \n    for i in range(rowsA): \n        for j in range(colsB): \n            C[i][j] = A[i][j] - B[i][j] \n    return C","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two matrices and prints the result of their subtraction.\n\n### Input:\nA = [[2, 5, 3],\n     [1, 4, 7],\n     [5, 2, 9]]\n\nB = [[4, 7, 0],\n     [3, 2, 8],\n     [1, 3, 6]]\n\n### Output:\ndef subtractMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    # Checking if the given two matrix are of same size \n    if rowsB != rowsA or colsA != colsB: \n        print(\"ERROR\") \n     \n    # Subtracting corresponding elements \n    C = [[0 for j in range(colsA)] for i in range(rowsB)] \n    for i in range(rowsA): \n        for j in range(colsB): \n            C[i][j] = A[i][j] - B[i][j] \n    return C","tok_input_length":253,"tok_output_length":147,"system_prompt":"","index":993}
{"question":"Write a Python program for predicting stock prices.","input":"A sample dataset with historic prices for Apple Inc. (AAPL)","expected_output":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndataset = pd.read_csv('AAPL.csv')\n\n# Separate the dataset into features and labels\n#labels = dataset['Label']\ny = np.array(dataset['Close'])\ndataset.drop(\"Close\", axis=1, inplace=True)\nx = np.array(dataset)\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)\n\n# Create the model\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=100)\n\n# Train the model\nregressor.fit(x_train, y_train)\n\n# Make predictions\ny_pred = regressor.predict(x_test)\n\n# Check the accuracy\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test, y_pred)\nprint(\"Mean squared error:\", mse)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for predicting stock prices.\n\n### Input:\nA sample dataset with historic prices for Apple Inc. (AAPL)\n\n### Output:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndataset = pd.read_csv('AAPL.csv')\n\n# Separate the dataset into features and labels\n#labels = dataset['Label']\ny = np.array(dataset['Close'])\ndataset.drop(\"Close\", axis=1, inplace=True)\nx = np.array(dataset)\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)\n\n# Create the model\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=100)\n\n# Train the model\nregressor.fit(x_train, y_train)\n\n# Make predictions\ny_pred = regressor.predict(x_test)\n\n# Check the accuracy\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test, y_pred)\nprint(\"Mean squared error:\", mse)","tok_input_length":253,"tok_output_length":203,"system_prompt":"","index":986}
{"question":"Create a program to display a list of words and respective scores that are sorted in descending order","input":"scores = {\"cat\": 5, \"dog\": 2, \"elephant\": 7, \"tiger\": 3}","expected_output":"# Python 3 program to print the list of words and their scores \n# sorted in descending order of scores\n\n# function is used to sort the list of words\n# according to the scores in decreasing order\ndef sort_list(list): \n    sorted_list = sorted(list, key=lambda x: x[1], reverse = True) \n    return sorted_list \n  \n# Driver code \nscores = {\"cat\": 5, \"dog\": 2, \"elephant\": 7, \"tiger\": 3}\n\n# Creating a list of tuples and sorting them \nlist = [] \nfor word, score in scores.items(): \n    list.append((word, score)) \n   \n# Printing the modified list \nsorted_list = sort_list(list) \n\nfor word,score in sorted_list:\n    print(\"Word: {0}, Score: {1}\".format(word, score))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to display a list of words and respective scores that are sorted in descending order\n\n### Input:\nscores = {\"cat\": 5, \"dog\": 2, \"elephant\": 7, \"tiger\": 3}\n\n### Output:\n# Python 3 program to print the list of words and their scores \n# sorted in descending order of scores\n\n# function is used to sort the list of words\n# according to the scores in decreasing order\ndef sort_list(list): \n    sorted_list = sorted(list, key=lambda x: x[1], reverse = True) \n    return sorted_list \n  \n# Driver code \nscores = {\"cat\": 5, \"dog\": 2, \"elephant\": 7, \"tiger\": 3}\n\n# Creating a list of tuples and sorting them \nlist = [] \nfor word, score in scores.items(): \n    list.append((word, score)) \n   \n# Printing the modified list \nsorted_list = sort_list(list) \n\nfor word,score in sorted_list:\n    print(\"Word: {0}, Score: {1}\".format(word, score))","tok_input_length":254,"tok_output_length":180,"system_prompt":"","index":2892}
{"question":"Design a class in Python that calculates the mean, median, and mode of a group of numbers.","input":"","expected_output":"class MeanMedianModeCalculator:\n    \n    # Function to calculate the mean  \n    def calculate_mean(self, numbers):\n        return sum(numbers) \/ len(numbers)\n    \n    # Function to calculate the median  \n    def calculate_median(self, numbers):\n        numbers.sort()\n        mid_point = int(len(numbers) \/ 2)\n        if len(numbers) % 2 == 0:\n            return (numbers[mid_point - 1] + numbers[mid_point]) \/ 2\n        else: \n            return numbers[mid_point]\n            \n    # Function to calculate the mode \n    def calculate_mode(self, numbers):\n        max_count = 0\n        max_num = 0\n        count_dictionary = {}\n        \n        for number in numbers:\n            if number in count_dictionary.keys():\n                count_dictionary[number] += 1\n            else:\n                count_dictionary[number] = 1\n                \n            if count_dictionary[number] > max_count:\n                max_count = count_dictionary[number]\n                max_num = number\n                \n        return max_num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that calculates the mean, median, and mode of a group of numbers.\n\n### Input:\n\n\n### Output:\nclass MeanMedianModeCalculator:\n    \n    # Function to calculate the mean  \n    def calculate_mean(self, numbers):\n        return sum(numbers) \/ len(numbers)\n    \n    # Function to calculate the median  \n    def calculate_median(self, numbers):\n        numbers.sort()\n        mid_point = int(len(numbers) \/ 2)\n        if len(numbers) % 2 == 0:\n            return (numbers[mid_point - 1] + numbers[mid_point]) \/ 2\n        else: \n            return numbers[mid_point]\n            \n    # Function to calculate the mode \n    def calculate_mode(self, numbers):\n        max_count = 0\n        max_num = 0\n        count_dictionary = {}\n        \n        for number in numbers:\n            if number in count_dictionary.keys():\n                count_dictionary[number] += 1\n            else:\n                count_dictionary[number] = 1\n                \n            if count_dictionary[number] > max_count:\n                max_count = count_dictionary[number]\n                max_num = number\n                \n        return max_num","tok_input_length":254,"tok_output_length":207,"system_prompt":"","index":4303}
{"question":"Write a Python algorithm to calculate which three numbers in a given list add up to a given sum.","input":"A list of integers: [1, 3, 5, 7, 10, 2, 4, 8]\nA sum: 15","expected_output":"def three_sum(list_of_integers, target):\n  results = []\n  for i in range(len(list_of_integers)):\n    for j in range(i+1, len(list_of_integers)):\n      for k in range(j+1, len(list_of_integers)):\n        if list_of_integers[i] + list_of_integers[j] + list_of_integers[k] == target:\n          results.append([list_of_integers[i], list_of_integers[j], list_of_integers[k]])\n  return results\n  \nlist_of_integers = [1, 3, 5, 7, 10, 2, 4, 8]\ntarget = 15\n\nprint(three_sum(list_of_integers, target))\n\n# Output: [[5, 7, 3], [8, 4, 3]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm to calculate which three numbers in a given list add up to a given sum.\n\n### Input:\nA list of integers: [1, 3, 5, 7, 10, 2, 4, 8]\nA sum: 15\n\n### Output:\ndef three_sum(list_of_integers, target):\n  results = []\n  for i in range(len(list_of_integers)):\n    for j in range(i+1, len(list_of_integers)):\n      for k in range(j+1, len(list_of_integers)):\n        if list_of_integers[i] + list_of_integers[j] + list_of_integers[k] == target:\n          results.append([list_of_integers[i], list_of_integers[j], list_of_integers[k]])\n  return results\n  \nlist_of_integers = [1, 3, 5, 7, 10, 2, 4, 8]\ntarget = 15\n\nprint(three_sum(list_of_integers, target))\n\n# Output: [[5, 7, 3], [8, 4, 3]]","tok_input_length":255,"tok_output_length":173,"system_prompt":"","index":13786}
{"question":"Create a machine learning program in Python that will classify text data into 3 different categories.","input":"Not applicable","expected_output":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Vectorize the text\ncv = CountVectorizer()\nX = cv.fit_transform(data[\"text\"])\n\n# Convert target labels to numerical values\ny = np.array([1 if label == \"category1\" else 2 if label == \"category2\" else 3 for label in data[\"category\"]])\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# Train the model\nnb = MultinomialNB()\nnb.fit(X_train, y_train)\n\n# Test the model\ny_pred = nb.predict(X_test)\n\n# Print out the results\nprint(classification_report(y_test, y_pred))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning program in Python that will classify text data into 3 different categories.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Vectorize the text\ncv = CountVectorizer()\nX = cv.fit_transform(data[\"text\"])\n\n# Convert target labels to numerical values\ny = np.array([1 if label == \"category1\" else 2 if label == \"category2\" else 3 for label in data[\"category\"]])\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# Train the model\nnb = MultinomialNB()\nnb.fit(X_train, y_train)\n\n# Test the model\ny_pred = nb.predict(X_test)\n\n# Print out the results\nprint(classification_report(y_test, y_pred))","tok_input_length":255,"tok_output_length":207,"system_prompt":"","index":513}
{"question":"Create an AI ML model using Python to classify a given dataset which contains restaurants reviews into different categories.","input":"dataset containing 8,000 restaurant reviews","expected_output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read the dataset\ndata = pd.read_csv('restaurant_reviews.csv')\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(data['review'], data['category'], test_size=0.2, random_state=42)\n\n# Initialize the CountVectorizer\nvect = CountVectorizer().fit(X_train)\n\n# Transform the training and testing sets\nX_train_vectorized = vect.transform(X_train)\nX_test_vectorized = vect.transform(X_test)\n\n# Initialize and train the model\nmodel = MultinomialNB().fit(X_train_vectorized, y_train)\n\n# Make predictions\npreds = model.predict(X_test_vectorized)\n\n# Generate the classification report\nprint(classification_report(y_test, preds))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI ML model using Python to classify a given dataset which contains restaurants reviews into different categories.\n\n### Input:\ndataset containing 8,000 restaurant reviews\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read the dataset\ndata = pd.read_csv('restaurant_reviews.csv')\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(data['review'], data['category'], test_size=0.2, random_state=42)\n\n# Initialize the CountVectorizer\nvect = CountVectorizer().fit(X_train)\n\n# Transform the training and testing sets\nX_train_vectorized = vect.transform(X_train)\nX_test_vectorized = vect.transform(X_test)\n\n# Initialize and train the model\nmodel = MultinomialNB().fit(X_train_vectorized, y_train)\n\n# Make predictions\npreds = model.predict(X_test_vectorized)\n\n# Generate the classification report\nprint(classification_report(y_test, preds))","tok_input_length":256,"tok_output_length":200,"system_prompt":"","index":13156}
{"question":"Generate a function in Python for computing the Levenshtein distance between two strings.","input":"","expected_output":"#Compute the Levenshtein distance between two strings\ndef levenshtein(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein(s2, s1)\n \n    # len(s1) >= len(s2)\n    if len(s2) == 0:\n        return len(s1)\n \n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer\n            deletions = current_row[j] + 1       # than s2\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python for computing the Levenshtein distance between two strings.\n\n### Input:\n\n\n### Output:\n#Compute the Levenshtein distance between two strings\ndef levenshtein(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein(s2, s1)\n \n    # len(s1) >= len(s2)\n    if len(s2) == 0:\n        return len(s1)\n \n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer\n            deletions = current_row[j] + 1       # than s2\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]","tok_input_length":256,"tok_output_length":212,"system_prompt":"","index":5439}
{"question":"Create a Python program that implements the Fisher-Yates algorithm to generate a random permutation of numbers from 0 to n-1.","input":"n = 10","expected_output":"# Fisher-Yates algorithm to generate a random permutation of numbers from 0 to n-1\n# Time Complexity: O(n)\n\nimport random\n\ndef fisher_yates(n):\n    # Create an array to hold the permutation\n    perm = [x for x in range(0, n)]\n \n    # Start from the last element and swap and decrease \n    # index by one\n    for i in range(n-1, 0, -1):\n        # Pick a random index from 0 to i\n        j = random.randint(0, i)\n \n        # Swap the random element with current element\n        temp = perm[i]\n        perm[i] = perm[j]\n        perm[j] = temp\n    return perm\n\n# Sample call\nprint(fisher_yates(10))\n# Output: [4, 2, 0, 8, 5, 6, 9, 3, 1, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that implements the Fisher-Yates algorithm to generate a random permutation of numbers from 0 to n-1.\n\n### Input:\nn = 10\n\n### Output:\n# Fisher-Yates algorithm to generate a random permutation of numbers from 0 to n-1\n# Time Complexity: O(n)\n\nimport random\n\ndef fisher_yates(n):\n    # Create an array to hold the permutation\n    perm = [x for x in range(0, n)]\n \n    # Start from the last element and swap and decrease \n    # index by one\n    for i in range(n-1, 0, -1):\n        # Pick a random index from 0 to i\n        j = random.randint(0, i)\n \n        # Swap the random element with current element\n        temp = perm[i]\n        perm[i] = perm[j]\n        perm[j] = temp\n    return perm\n\n# Sample call\nprint(fisher_yates(10))\n# Output: [4, 2, 0, 8, 5, 6, 9, 3, 1, 7]","tok_input_length":257,"tok_output_length":199,"system_prompt":"","index":9357}
{"question":"Create a program in Python that implements a greedy knapsack solution for a given set of items with weights and values.","input":"Item Weight: [5, 4, 3, 2] \nItem Value: [20, 10, 12, 4] \nKnapsack capacity: 6","expected_output":"def knapsack(weights, values, capacity):\n if len(weights) == 0 or len(values) == 0 or capacity == 0:\n return 0\n \n v = [0 for _ in range(len(weights))]\n for i in range(len(weights)):\n if weights[i] <= capacity:\n v[i] = values[i]\n \n for i in range(len(weights)):\n for c in range(capacity, weights[i] - 1, -1):\n v[i] = max(v[i], values[i] + v[c - weights[i]])\n \n return v[capacity]\n \nweights = [5, 4, 3, 2] \nvalues = [20, 10, 12, 4] \ncapacity = 6\n\nprint(knapsack(weights, values, capacity)) # Prints 24","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that implements a greedy knapsack solution for a given set of items with weights and values.\n\n### Input:\nItem Weight: [5, 4, 3, 2] \nItem Value: [20, 10, 12, 4] \nKnapsack capacity: 6\n\n### Output:\ndef knapsack(weights, values, capacity):\n if len(weights) == 0 or len(values) == 0 or capacity == 0:\n return 0\n \n v = [0 for _ in range(len(weights))]\n for i in range(len(weights)):\n if weights[i] <= capacity:\n v[i] = values[i]\n \n for i in range(len(weights)):\n for c in range(capacity, weights[i] - 1, -1):\n v[i] = max(v[i], values[i] + v[c - weights[i]])\n \n return v[capacity]\n \nweights = [5, 4, 3, 2] \nvalues = [20, 10, 12, 4] \ncapacity = 6\n\nprint(knapsack(weights, values, capacity)) # Prints 24","tok_input_length":258,"tok_output_length":167,"system_prompt":"","index":11015}
{"question":"Create an end-to-end machine learning system in Python by using a deep neural network to solve a multi-class classification problem.","input":"Not applicable","expected_output":"# Importing Libraries\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Defining Input and Output\nx = np.array([[1, 3], [1, 4], [2, 4], [3, 1], [4, 1], [4, 2]])\ny = np.array([[1], [1], [2], [3], [3], [2]])\n\n# Defining and Compiling the Model\nmodel = Sequential()\nmodel.add(Dense(4, input_dim=2, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Training the Model\nmodel.fit(x, y, epochs=100, batch_size=5)\n\n# Testing the Model\ntest_x = np.array([[5, 2], [4, 3]])\nresults = model.predict(test_x)\nprint(\"Classes predicted: \", np.round(results))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an end-to-end machine learning system in Python by using a deep neural network to solve a multi-class classification problem.\n\n### Input:\nNot applicable\n\n### Output:\n# Importing Libraries\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Defining Input and Output\nx = np.array([[1, 3], [1, 4], [2, 4], [3, 1], [4, 1], [4, 2]])\ny = np.array([[1], [1], [2], [3], [3], [2]])\n\n# Defining and Compiling the Model\nmodel = Sequential()\nmodel.add(Dense(4, input_dim=2, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Training the Model\nmodel.fit(x, y, epochs=100, batch_size=5)\n\n# Testing the Model\ntest_x = np.array([[5, 2], [4, 3]])\nresults = model.predict(test_x)\nprint(\"Classes predicted: \", np.round(results))","tok_input_length":258,"tok_output_length":204,"system_prompt":"","index":14443}
{"question":"Create a Python script to filter tweets by language.","input":"[\n { \n 'user': 'John', \n 'tweet': 'This is a tweet in English', \n 'language': 'en' \n }, \n { \n 'user': 'Jane', \n 'tweet': 'Ceci est un tweet en fran\u00e7ais', \n 'language': 'fr' \n }, \n { \n 'user': 'Bob', \n 'tweet': 'Esta es una publicaci\u00f3n en espa\u00f1ol', \n 'language': 'es' \n }\n ]","expected_output":"import json\n\ntweets = [\n { \n 'user': 'John', \n 'tweet': 'This is a tweet in English', \n 'language': 'en' \n }, \n { \n 'user': 'Jane', \n 'tweet': 'Ceci est un tweet en fran\u00e7ais', \n 'language': 'fr' \n }, \n { \n 'user': 'Bob', \n 'tweet': 'Esta es una publicaci\u00f3n en espa\u00f1ol', \n 'language': 'es' \n }\n ]\n\nlanguage = 'en'\n\nfiltered = [tweet for tweet in tweets if tweet['language'] == language]\n\nprint(json.dumps(filtered, indent=2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to filter tweets by language.\n\n### Input:\n[\n { \n 'user': 'John', \n 'tweet': 'This is a tweet in English', \n 'language': 'en' \n }, \n { \n 'user': 'Jane', \n 'tweet': 'Ceci est un tweet en fran\u00e7ais', \n 'language': 'fr' \n }, \n { \n 'user': 'Bob', \n 'tweet': 'Esta es una publicaci\u00f3n en espa\u00f1ol', \n 'language': 'es' \n }\n ]\n\n### Output:\nimport json\n\ntweets = [\n { \n 'user': 'John', \n 'tweet': 'This is a tweet in English', \n 'language': 'en' \n }, \n { \n 'user': 'Jane', \n 'tweet': 'Ceci est un tweet en fran\u00e7ais', \n 'language': 'fr' \n }, \n { \n 'user': 'Bob', \n 'tweet': 'Esta es una publicaci\u00f3n en espa\u00f1ol', \n 'language': 'es' \n }\n ]\n\nlanguage = 'en'\n\nfiltered = [tweet for tweet in tweets if tweet['language'] == language]\n\nprint(json.dumps(filtered, indent=2))","tok_input_length":259,"tok_output_length":129,"system_prompt":"","index":4238}
{"question":"Develop a machine learning model in Python to predict the survival rate of a passenger in the Titanic dataset.","input":"Not applicable","expected_output":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import cross_validate, train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nstyle.use(\"seaborn-whitegrid\")\n\n# Load the dataset\ndf = pd.read_csv(\"dataset.csv\")\n\n# Preprocess the data\nle = preprocessing.LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\n\n# Feature selection\nX = df[['Pclass','Sex','Age','SibSp','Parch','Fare']]\ny = df['Survived']\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy: ', accuracy)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python to predict the survival rate of a passenger in the Titanic dataset.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import cross_validate, train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nstyle.use(\"seaborn-whitegrid\")\n\n# Load the dataset\ndf = pd.read_csv(\"dataset.csv\")\n\n# Preprocess the data\nle = preprocessing.LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\n\n# Feature selection\nX = df[['Pclass','Sex','Age','SibSp','Parch','Fare']]\ny = df['Survived']\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy: ', accuracy)","tok_input_length":259,"tok_output_length":209,"system_prompt":"","index":7331}
{"question":"Write a Python program to read in a data set, and output the mean of the set and the range (highest - lowest) of the set.","input":"[2, 3, 6, 12, 21, 41]","expected_output":"#this program reads in a data set, and outputs the mean of the set \n# and the range (highest - lowest) of the set.\n\n#function to get the mean of given data set\ndef mean(input_list):\n    total = 0\n    for i in input_list:\n        total += i\n    return total\/len(input_list)\n\n#function to get the range (highest - lowest) of the given data set\ndef range(input_list):\n    return max(input_list)-min(input_list)  \n\n#initialize an array\ninput_list = [2, 3, 6, 12, 21, 41]\n\n#get the mean\nmean = mean(input_list)\n\n#get the range\nthe_range = range(input_list)\n\n#print the output\nprint(\"The mean of given array is\",mean)\nprint(\"The range (highest - lowest) of given array is\",the_range)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to read in a data set, and output the mean of the set and the range (highest - lowest) of the set.\n\n### Input:\n[2, 3, 6, 12, 21, 41]\n\n### Output:\n#this program reads in a data set, and outputs the mean of the set \n# and the range (highest - lowest) of the set.\n\n#function to get the mean of given data set\ndef mean(input_list):\n    total = 0\n    for i in input_list:\n        total += i\n    return total\/len(input_list)\n\n#function to get the range (highest - lowest) of the given data set\ndef range(input_list):\n    return max(input_list)-min(input_list)  \n\n#initialize an array\ninput_list = [2, 3, 6, 12, 21, 41]\n\n#get the mean\nmean = mean(input_list)\n\n#get the range\nthe_range = range(input_list)\n\n#print the output\nprint(\"The mean of given array is\",mean)\nprint(\"The range (highest - lowest) of given array is\",the_range)","tok_input_length":260,"tok_output_length":185,"system_prompt":"","index":8419}
{"question":"Train a model using Scikit-Learn in Python to detect if a tweet contains hate speech.","input":"The input dataset contains 800 tweets.","expected_output":"import nltk\nfrom nltk.tokenize import word_tokenize\nimport sklearn\n\n# load data\ntweets = [<input dataset>]\nlabels = [<ground truth labels>]\n\n# create training and test datasets\nX_train, X_test, y_train, y_test = train_test_split(tweets, labels, test_size=0.25, random_state=42)\n\n# prepare datasets for vectorization\nword_counter = Counter(word for tweet in X_train for word in word_tokenize(tweet[1])) \n\n# vectorize the datasets using word count\nvectorizer = TfidfVectorizer(max_features=1000, stop_words='english', max_df=0.5,\n                             min_df=2, tokenizer=word_tokenize).fit(X_train)\nX_train_vec = vectorizer.transform(X_train)\nX_test_vec = vectorizer.transform(X_test)\n\n# fit the classifier using the vectorized train dataset\nclf = SGDClassifier().fit(X_train_vec, y_train)\n\n# predict the test dataset\ny_pred = clf.predict(X_test_vec)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a model using Scikit-Learn in Python to detect if a tweet contains hate speech.\n\n### Input:\nThe input dataset contains 800 tweets.\n\n### Output:\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport sklearn\n\n# load data\ntweets = [<input dataset>]\nlabels = [<ground truth labels>]\n\n# create training and test datasets\nX_train, X_test, y_train, y_test = train_test_split(tweets, labels, test_size=0.25, random_state=42)\n\n# prepare datasets for vectorization\nword_counter = Counter(word for tweet in X_train for word in word_tokenize(tweet[1])) \n\n# vectorize the datasets using word count\nvectorizer = TfidfVectorizer(max_features=1000, stop_words='english', max_df=0.5,\n                             min_df=2, tokenizer=word_tokenize).fit(X_train)\nX_train_vec = vectorizer.transform(X_train)\nX_test_vec = vectorizer.transform(X_test)\n\n# fit the classifier using the vectorized train dataset\nclf = SGDClassifier().fit(X_train_vec, y_train)\n\n# predict the test dataset\ny_pred = clf.predict(X_test_vec)","tok_input_length":260,"tok_output_length":206,"system_prompt":"","index":11431}
{"question":"Implement a decision tree classifier in Python to predict car prices.","input":"[Number_of_Doors, Vehicle_Size, Price]\n\n[2, Small, 12000]\n[4, Small, 18000]\n[4, Large, 20000]\n[4, Small, 25000]","expected_output":"import pandas as pd\nfrom sklearn import tree\n\n# Dataset\ndata = [[2, 'Small', 12000], [4, 'Small', 18000], [4, 'Large', 20000], [4, 'Small', 25000]]\n\n# Columns Headers\ncolumns= ['Number_of_Doors', 'Vehicle_size', 'Price']\n\n# Create Dataframe\ndf = pd.DataFrame(data, columns=columns)\n\n# Create Features\nX = df.iloc[:, :2].values\ny = df.Price\n\n# Create Decision Tree Classifier\nclf = tree.DecisionTreeClassifier().fit(X,y)\n\n# Making Predictions\ntest_data = [[2, 'Small']]\ntest_data_df = pd.DataFrame(test_data, columns=['Number_of_Doors', 'Vehicle_size'])\n \nresult = clf.predict(test_data_df)\n\nprint(result[0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision tree classifier in Python to predict car prices.\n\n### Input:\n[Number_of_Doors, Vehicle_Size, Price]\n\n[2, Small, 12000]\n[4, Small, 18000]\n[4, Large, 20000]\n[4, Small, 25000]\n\n### Output:\nimport pandas as pd\nfrom sklearn import tree\n\n# Dataset\ndata = [[2, 'Small', 12000], [4, 'Small', 18000], [4, 'Large', 20000], [4, 'Small', 25000]]\n\n# Columns Headers\ncolumns= ['Number_of_Doors', 'Vehicle_size', 'Price']\n\n# Create Dataframe\ndf = pd.DataFrame(data, columns=columns)\n\n# Create Features\nX = df.iloc[:, :2].values\ny = df.Price\n\n# Create Decision Tree Classifier\nclf = tree.DecisionTreeClassifier().fit(X,y)\n\n# Making Predictions\ntest_data = [[2, 'Small']]\ntest_data_df = pd.DataFrame(test_data, columns=['Number_of_Doors', 'Vehicle_size'])\n \nresult = clf.predict(test_data_df)\n\nprint(result[0])","tok_input_length":261,"tok_output_length":175,"system_prompt":"","index":12410}
{"question":"Create a system for monitoring vehicle usage in Python. The system should run periodic diagnostics and generate a report showing vehicle data like fuel consumption, performance and wear levels.","input":"Not applicable","expected_output":"import time\nimport logging \nimport sched\n\nimport vehicle_data # module for reading vehicle data\n\n# configure logging \nlogging.basicConfig(level=logging.INFO)\n\n# define the scheduler \nscheduler = sched.scheduler(time.time, time.sleep)\n\n# define diagnostics job\ndef job_diagnostics(vehicle_id): \n # reading and processing vehicle data\n data = vehicle_data.read(vehicle_id) \n performance = data['performance']\n fuel_consumption = data['fuel_consumption']\n wear_level = data['wear_level']\n\n # logging diagnostics \n logging.info(f'Vehicle {vehicle_id} diagnostics report: performance={performance} fuel_consumption={fuel_consumption}\n wear_level={wear_level}.')\n\n# define setup for periodic jobs\ndef setup_job(job, vehicle_id, interval): \n scheduler.enter(interval, 1, job, argument=(vehicle_id,))\n\n# setup diagnostics job for a vehicle\nsetup_job(job_diagnostics, vehicle_id, interval=3600) \n\n# start the scheduler\nscheduler.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a system for monitoring vehicle usage in Python. The system should run periodic diagnostics and generate a report showing vehicle data like fuel consumption, performance and wear levels.\n\n### Input:\nNot applicable\n\n### Output:\nimport time\nimport logging \nimport sched\n\nimport vehicle_data # module for reading vehicle data\n\n# configure logging \nlogging.basicConfig(level=logging.INFO)\n\n# define the scheduler \nscheduler = sched.scheduler(time.time, time.sleep)\n\n# define diagnostics job\ndef job_diagnostics(vehicle_id): \n # reading and processing vehicle data\n data = vehicle_data.read(vehicle_id) \n performance = data['performance']\n fuel_consumption = data['fuel_consumption']\n wear_level = data['wear_level']\n\n # logging diagnostics \n logging.info(f'Vehicle {vehicle_id} diagnostics report: performance={performance} fuel_consumption={fuel_consumption}\n wear_level={wear_level}.')\n\n# define setup for periodic jobs\ndef setup_job(job, vehicle_id, interval): \n scheduler.enter(interval, 1, job, argument=(vehicle_id,))\n\n# setup diagnostics job for a vehicle\nsetup_job(job_diagnostics, vehicle_id, interval=3600) \n\n# start the scheduler\nscheduler.run()","tok_input_length":261,"tok_output_length":199,"system_prompt":"","index":8574}
{"question":"Develop a Python script to find the optimal number of clusters for a given dataset.","input":"","expected_output":"import numpy as np \nimport matplotlib.pyplot as plt \n\ndef optimal_k(X): \n \n distortions = [] \n inertias = [] \n mapping1 = {} \n mapping2 = {} \n K = range(1,10) \n\n for k in K: \n #Building and fitting the model \n kmeanModel = KMeans(n_clusters=k).fit(X) \n kmeanModel.fit(X) \n \n distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, \n 'euclidean'),axis=1)) \/ X.shape[0]) \n inertias.append(kmeanModel.inertia_) \n\n #Visualize \n plt.plot(K, distortions, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Distortion') \n plt.title('The Elbow Method using Distortion') \n plt.show() \n \n plt.plot(K, inertias, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Inertia') \n plt.title('The Elbow Method using Inertia') \n plt.show() \n\noptimal_k(X)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to find the optimal number of clusters for a given dataset.\n\n### Input:\n\n\n### Output:\nimport numpy as np \nimport matplotlib.pyplot as plt \n\ndef optimal_k(X): \n \n distortions = [] \n inertias = [] \n mapping1 = {} \n mapping2 = {} \n K = range(1,10) \n\n for k in K: \n #Building and fitting the model \n kmeanModel = KMeans(n_clusters=k).fit(X) \n kmeanModel.fit(X) \n \n distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, \n 'euclidean'),axis=1)) \/ X.shape[0]) \n inertias.append(kmeanModel.inertia_) \n\n #Visualize \n plt.plot(K, distortions, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Distortion') \n plt.title('The Elbow Method using Distortion') \n plt.show() \n \n plt.plot(K, inertias, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Inertia') \n plt.title('The Elbow Method using Inertia') \n plt.show() \n\noptimal_k(X)","tok_input_length":261,"tok_output_length":218,"system_prompt":"","index":11633}
{"question":"Create a Python function which takes a list of numbers and returns a list of median values.","input":"list = [1, 2, 4, 16, 8, 10]","expected_output":"def get_medians(input_list):\n    '''Returns list of median values of the list of numbers given.'''   \n    medians = []\n    l = len(input_list)\n    for i in range(l):\n        tuple_l = input_list[:i]+input_list[i+1:] # Exclude the current element while calculating median.\n        tuple_l.sort()\n        l_1 = len(tuple_l)\n        if l_1%2==0:\n            median = (tuple_l[int(l_1\/2)-1] + tuple_l[int(l_1\/2)])\/2\n        else:\n            median = tuple_l[int((l_1-1)\/2)]\n        medians.append(median)\n    return medians\n\nlist = [1, 2, 4, 16, 8, 10]\nprint(get_medians(list))\n# Output: [1.5, 2, 5, 8, 6.5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function which takes a list of numbers and returns a list of median values.\n\n### Input:\nlist = [1, 2, 4, 16, 8, 10]\n\n### Output:\ndef get_medians(input_list):\n    '''Returns list of median values of the list of numbers given.'''   \n    medians = []\n    l = len(input_list)\n    for i in range(l):\n        tuple_l = input_list[:i]+input_list[i+1:] # Exclude the current element while calculating median.\n        tuple_l.sort()\n        l_1 = len(tuple_l)\n        if l_1%2==0:\n            median = (tuple_l[int(l_1\/2)-1] + tuple_l[int(l_1\/2)])\/2\n        else:\n            median = tuple_l[int((l_1-1)\/2)]\n        medians.append(median)\n    return medians\n\nlist = [1, 2, 4, 16, 8, 10]\nprint(get_medians(list))\n# Output: [1.5, 2, 5, 8, 6.5]","tok_input_length":262,"tok_output_length":197,"system_prompt":"","index":17330}
{"question":"Build a model in Python to classify if a given input is a positive or negative sentiment","input":"","expected_output":"import numpy as np \nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score \n\n# load and prepare the data\ndata = pd.read_csv(\"data.csv\")\n# split into training and test datasets\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['sentiment'], test_size=0.3, random_state=42)\n\n# transform text into numbers\ntfidf = TfidfVectorizer(max_features=1000, stop_words='english')\nX_train_tfidf = tfidf.fit_transform(X_train) \nX_test_tfidf = tfidf.transform(X_test)\n\n# create and train the model \nmodel = MultinomialNB()\nmodel.fit(X_train_tfidf, y_train)\n\n# make predictions\ny_pred = model.predict(X_test_tfidf)\n\n# evaluate the model \nscore = accuracy_score(y_test, y_pred)\nprint(score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a model in Python to classify if a given input is a positive or negative sentiment\n\n### Input:\n\n\n### Output:\nimport numpy as np \nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score \n\n# load and prepare the data\ndata = pd.read_csv(\"data.csv\")\n# split into training and test datasets\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['sentiment'], test_size=0.3, random_state=42)\n\n# transform text into numbers\ntfidf = TfidfVectorizer(max_features=1000, stop_words='english')\nX_train_tfidf = tfidf.fit_transform(X_train) \nX_test_tfidf = tfidf.transform(X_test)\n\n# create and train the model \nmodel = MultinomialNB()\nmodel.fit(X_train_tfidf, y_train)\n\n# make predictions\ny_pred = model.predict(X_test_tfidf)\n\n# evaluate the model \nscore = accuracy_score(y_test, y_pred)\nprint(score)","tok_input_length":262,"tok_output_length":217,"system_prompt":"","index":6043}
{"question":"Create a python program that determines the grade of a student based on the marks they received in their exams.","input":"marks = {\n    'math': 90,\n    'history': 80,\n    'english': 75\n}","expected_output":"def determine_grade(marks):\n    # Determine the average mark\n    avg = (marks['math'] + marks['history'] + marks['english'])\/3\n    \n    # If the average mark is greater than or equal to 90, the student's grade is A \n    if avg >= 90:\n        return 'A'\n    # If the average mark is greater than or equal to 80, the student's grade is B \n    elif avg >= 80:\n        return 'B'\n    # If the average mark is greater than or equal to 70, the student's grade is C \n    elif avg >= 70:\n        return 'C'\n    # If the average mark is greater than or equal to 60, the student's grade is D \n    elif avg >= 60:\n        return 'D'\n    # Anything less than 60 is an F \n    else:\n        return 'F'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that determines the grade of a student based on the marks they received in their exams.\n\n### Input:\nmarks = {\n    'math': 90,\n    'history': 80,\n    'english': 75\n}\n\n### Output:\ndef determine_grade(marks):\n    # Determine the average mark\n    avg = (marks['math'] + marks['history'] + marks['english'])\/3\n    \n    # If the average mark is greater than or equal to 90, the student's grade is A \n    if avg >= 90:\n        return 'A'\n    # If the average mark is greater than or equal to 80, the student's grade is B \n    elif avg >= 80:\n        return 'B'\n    # If the average mark is greater than or equal to 70, the student's grade is C \n    elif avg >= 70:\n        return 'C'\n    # If the average mark is greater than or equal to 60, the student's grade is D \n    elif avg >= 60:\n        return 'D'\n    # Anything less than 60 is an F \n    else:\n        return 'F'","tok_input_length":263,"tok_output_length":190,"system_prompt":"","index":5728}
{"question":"Create a python program to calculate the Mertens function over a given range.","input":"","expected_output":"# Function to calculate the Mertens function\ndef mertens_function(m):\n    # Initialize the result\n    res = 0\n    \n    # Iterate over all numbers from 1 to m\n    for j in range(1, m+1):\n        res += moebius_function(j)\n    \n    return res\n\n# Function to calculate the Moebius function\ndef moebius_function(n):\n    # Initialize result \n    res = 1\n    \n    # Iterate over all factors\n    for i in range(2, n + 1):\n        cnt = 0\n        while n % i == 0:\n            n = int(n \/ i)\n            cnt += 1\n           \n        if cnt > 1: \n            res = 0\n            break\n        if cnt == 1: \n            res = -res \n        \n    return res\n\n# Main Program\nm = int(input(\"Enter the range: \"))\n\nres = mertens_function(m)\n\nprint(\"The Mertens function of\", m, \"is\", res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the Mertens function over a given range.\n\n### Input:\n\n\n### Output:\n# Function to calculate the Mertens function\ndef mertens_function(m):\n    # Initialize the result\n    res = 0\n    \n    # Iterate over all numbers from 1 to m\n    for j in range(1, m+1):\n        res += moebius_function(j)\n    \n    return res\n\n# Function to calculate the Moebius function\ndef moebius_function(n):\n    # Initialize result \n    res = 1\n    \n    # Iterate over all factors\n    for i in range(2, n + 1):\n        cnt = 0\n        while n % i == 0:\n            n = int(n \/ i)\n            cnt += 1\n           \n        if cnt > 1: \n            res = 0\n            break\n        if cnt == 1: \n            res = -res \n        \n    return res\n\n# Main Program\nm = int(input(\"Enter the range: \"))\n\nres = mertens_function(m)\n\nprint(\"The Mertens function of\", m, \"is\", res)","tok_input_length":263,"tok_output_length":220,"system_prompt":"","index":13516}
{"question":"Write a Python program to extract phone numbers from a given text.","input":"This is a sample text. Mr. Smith's cell phone number is (123) 456-7890 and Mrs. Smith's phone number is (321) 234-5678.","expected_output":"\"\"\"\nWrite a Python program to extract phone numbers from a given text.\n\"\"\"\n\nimport re\n\ndef extract_phone_numbers(text):\n    phone_numbers = []\n    pattern = r'(\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4})'\n    regex = re.compile(pattern)\n    matches = regex.finditer(text)\n    for m in matches:\n        phone_numbers.append(m.group())\n    return phone_numbers\n\ntext = \"This is a sample text. Mr. Smith's cell phone number is (123) 456-7890 and Mrs. Smith's phone number is (321) 234-5678.\"\nprint(extract_phone_numbers(text))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract phone numbers from a given text.\n\n### Input:\nThis is a sample text. Mr. Smith's cell phone number is (123) 456-7890 and Mrs. Smith's phone number is (321) 234-5678.\n\n### Output:\n\"\"\"\nWrite a Python program to extract phone numbers from a given text.\n\"\"\"\n\nimport re\n\ndef extract_phone_numbers(text):\n    phone_numbers = []\n    pattern = r'(\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4})'\n    regex = re.compile(pattern)\n    matches = regex.finditer(text)\n    for m in matches:\n        phone_numbers.append(m.group())\n    return phone_numbers\n\ntext = \"This is a sample text. Mr. Smith's cell phone number is (123) 456-7890 and Mrs. Smith's phone number is (321) 234-5678.\"\nprint(extract_phone_numbers(text))","tok_input_length":264,"tok_output_length":185,"system_prompt":"","index":1017}
{"question":"Create a Python program to generate a Shamir's Secret Sharing Scheme implementation with a minimum of 8 shares.","input":"Not applicable","expected_output":"import sys\nimport secrets\nfrom typing import List\n\ndef split_secret(secret: bytes, nb_shares: int, min_required: int) -> List[int]:\n  # Generate random prime\n  r = secrets.randbelow(sys.maxsize)\n  while not is_prime(r):\n    r = secrets.randbelow(sys.maxsize)\n\n  # Generate random coefficients\n  coefficients = [secret] + [ secrets.randbelow(r) for i in range(min_required-1) ]\n\n  # Compute the shares\n  shares = []\n  for i in range(1, nb_shares + 1):\n    val = coefficients[0]\n    for e, c in enumerate(coefficients[1:]):\n        val += c * pow(i, e+1, r)\n    shares.append(val)\n\n  return shares\n\ndef is_prime(x):\n    return pow(2, x-1, x) == 1\n\n# Split secret\nsecret = b'ABCDEFGH'\nshares = split_secret(secret, 8, 5)\n\nprint(shares)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a Shamir's Secret Sharing Scheme implementation with a minimum of 8 shares.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\nimport secrets\nfrom typing import List\n\ndef split_secret(secret: bytes, nb_shares: int, min_required: int) -> List[int]:\n  # Generate random prime\n  r = secrets.randbelow(sys.maxsize)\n  while not is_prime(r):\n    r = secrets.randbelow(sys.maxsize)\n\n  # Generate random coefficients\n  coefficients = [secret] + [ secrets.randbelow(r) for i in range(min_required-1) ]\n\n  # Compute the shares\n  shares = []\n  for i in range(1, nb_shares + 1):\n    val = coefficients[0]\n    for e, c in enumerate(coefficients[1:]):\n        val += c * pow(i, e+1, r)\n    shares.append(val)\n\n  return shares\n\ndef is_prime(x):\n    return pow(2, x-1, x) == 1\n\n# Split secret\nsecret = b'ABCDEFGH'\nshares = split_secret(secret, 8, 5)\n\nprint(shares)","tok_input_length":264,"tok_output_length":212,"system_prompt":"","index":13837}
{"question":"Write a Python code using the Pandas package to filter out rows with a specific condition in a table data.","input":"Table data:\n\nCountry | Population | Area | GDP\n\nUSA | 330,000,000 | 3,796,000 | 21,427,000\n\nChina | 1,400,000,000 | 9,596,961 | 14,140,163\n\nFrance | 67,000,000 | 640,679 | 2,777,000","expected_output":"import pandas as pd\n\n# Read data\ndata = {'Country': ['USA', 'China', 'France'], \n        'Population': [330000000, 1400000000, 67000000], \n        'Area': [3796000, 9596961, 640679], \n        'GDP': [21427000,14140163,2777000]}\ndf = pd.DataFrame(data, columns =['Country', 'Population', 'Area', 'GDP'])\n\n# Filter for rows with a population higher than 500 million\nlarge_countries = df[df['Population'] > 500000000]\nprint(large_countries)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code using the Pandas package to filter out rows with a specific condition in a table data.\n\n### Input:\nTable data:\n\nCountry | Population | Area | GDP\n\nUSA | 330,000,000 | 3,796,000 | 21,427,000\n\nChina | 1,400,000,000 | 9,596,961 | 14,140,163\n\nFrance | 67,000,000 | 640,679 | 2,777,000\n\n### Output:\nimport pandas as pd\n\n# Read data\ndata = {'Country': ['USA', 'China', 'France'], \n        'Population': [330000000, 1400000000, 67000000], \n        'Area': [3796000, 9596961, 640679], \n        'GDP': [21427000,14140163,2777000]}\ndf = pd.DataFrame(data, columns =['Country', 'Population', 'Area', 'GDP'])\n\n# Filter for rows with a population higher than 500 million\nlarge_countries = df[df['Population'] > 500000000]\nprint(large_countries)","tok_input_length":265,"tok_output_length":136,"system_prompt":"","index":1282}
{"question":"Implement a function in Python that takes two strings and returns their longest common substring.","input":"","expected_output":"def find_longest_common_substring(s1, s2):\n    # Set the length of the longest common substring\n    longest = 0\n\n    # Split the strings into lists of characters\n    list1 = list(s1)\n    list2 = list(s2)\n\n    # Iterate over each character of the strings\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            # Compare the characters\n            if list1[i] == list2[j]:\n                # Increase the largest substring length by one\n                longest += 1\n            else:\n                # Reset the longest substring length\n                longest = 0\n\n            # Update the shortest substring length\n            shortest = min(len(list1) - i, len(list2) - j)\n\n            # Return the longest common substring if it has reached the length of the shortest string\n            if longest == shortest:\n                return s1[i-longest+1:i+1]\n\n# Return an empty string if the longest common substring length is 0\nif longest == 0:\n    return \"\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes two strings and returns their longest common substring.\n\n### Input:\n\n\n### Output:\ndef find_longest_common_substring(s1, s2):\n    # Set the length of the longest common substring\n    longest = 0\n\n    # Split the strings into lists of characters\n    list1 = list(s1)\n    list2 = list(s2)\n\n    # Iterate over each character of the strings\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            # Compare the characters\n            if list1[i] == list2[j]:\n                # Increase the largest substring length by one\n                longest += 1\n            else:\n                # Reset the longest substring length\n                longest = 0\n\n            # Update the shortest substring length\n            shortest = min(len(list1) - i, len(list2) - j)\n\n            # Return the longest common substring if it has reached the length of the shortest string\n            if longest == shortest:\n                return s1[i-longest+1:i+1]\n\n# Return an empty string if the longest common substring length is 0\nif longest == 0:\n    return \"\"","tok_input_length":265,"tok_output_length":222,"system_prompt":"","index":1875}
{"question":"Create a Python script that divides a list of numbers into two subsets whose sum is as close as possible.","input":"numbers = [1, 4, 8, 10, 5, 9]","expected_output":"def divide_list(numbers):\n # find the sum of the list\n list_sum = sum(numbers)\n # try all possible combinations of dividing the list\n best_difference = float('inf')\n best_subset_1 = None\n best_subset_2 = None\n for i in range(2**len(numbers)):\n # get the binary representation of i\n bit_string = '{:0b}'.format(i).zfill(len(numbers))\n subset_1 = []\n subset_2 = []\n for j, bit in enumerate(bit_string):\n  if bit == '0':\n   subset_1.append(numbers[j])\n  else:\n   subset_2.append(numbers[j])\n # check if the difference between the two subsets is the lowest\n difference = abs(sum(subset_1) - sum(subset_2))\n if difference < best_difference:\n best_difference = difference\n best_subset_1 = subset_1\n best_subset_2 = subset_2\n return best_subset_1, best_subset_2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that divides a list of numbers into two subsets whose sum is as close as possible.\n\n### Input:\nnumbers = [1, 4, 8, 10, 5, 9]\n\n### Output:\ndef divide_list(numbers):\n # find the sum of the list\n list_sum = sum(numbers)\n # try all possible combinations of dividing the list\n best_difference = float('inf')\n best_subset_1 = None\n best_subset_2 = None\n for i in range(2**len(numbers)):\n # get the binary representation of i\n bit_string = '{:0b}'.format(i).zfill(len(numbers))\n subset_1 = []\n subset_2 = []\n for j, bit in enumerate(bit_string):\n  if bit == '0':\n   subset_1.append(numbers[j])\n  else:\n   subset_2.append(numbers[j])\n # check if the difference between the two subsets is the lowest\n difference = abs(sum(subset_1) - sum(subset_2))\n if difference < best_difference:\n best_difference = difference\n best_subset_1 = subset_1\n best_subset_2 = subset_2\n return best_subset_1, best_subset_2","tok_input_length":266,"tok_output_length":198,"system_prompt":"","index":16593}
{"question":"Generate a python class that implements a singly linked list with methods to add and remove elements.","input":"","expected_output":"class Node(object): \n    # Constructor\n    def __init__(self, data): \n        self.data = data\n        self.next = None\n \n \nclass LinkedList(object): \n    # Function to initialize root \n    def __init__(self): \n        self.head = None\n  \n  \n    # Insert a new node at the beginning \n    def push(self, new_data):\n        # 1 & 2: Allocate the Node & Put in the data\n        new_node = Node(new_data) \n  \n        # 3. Make next of new Node as head \n        new_node.next = self.head \n  \n        # 4. Move the head to point to new Node  \n        self.head = new_node \n\n\n    # Remove a node from the beginning \n    def pop(self):\n        # Store head node \n        temp = self.head \n  \n        # If head node itself holds the key to be deleted \n        if (temp is not None): \n            self.head = temp.next\n            temp = None\n        else: \n            print(\"The linked list is empty\")\n        return","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python class that implements a singly linked list with methods to add and remove elements.\n\n### Input:\n\n\n### Output:\nclass Node(object): \n    # Constructor\n    def __init__(self, data): \n        self.data = data\n        self.next = None\n \n \nclass LinkedList(object): \n    # Function to initialize root \n    def __init__(self): \n        self.head = None\n  \n  \n    # Insert a new node at the beginning \n    def push(self, new_data):\n        # 1 & 2: Allocate the Node & Put in the data\n        new_node = Node(new_data) \n  \n        # 3. Make next of new Node as head \n        new_node.next = self.head \n  \n        # 4. Move the head to point to new Node  \n        self.head = new_node \n\n\n    # Remove a node from the beginning \n    def pop(self):\n        # Store head node \n        temp = self.head \n  \n        # If head node itself holds the key to be deleted \n        if (temp is not None): \n            self.head = temp.next\n            temp = None\n        else: \n            print(\"The linked list is empty\")\n        return","tok_input_length":266,"tok_output_length":221,"system_prompt":"","index":12123}
{"question":"Develop a REST API in Python that will allow the user to retrieve a list of network devices based on a specific IP address range.","input":"\"192.168.1.0\/24\"","expected_output":"from flask import Flask, request, jsonify\nfrom netaddr import IPNetwork\n\napp = Flask(__name__)\n\n@app.route('\/devices', methods=['GET'])\ndef get_devices():\n ip_range = request.args.get('ip_range')\n ip_network = IPNetwork(ip_range)\n\n# Query your data store to retrieve all devices in the given IP range\n devices = [\n {'ip_address': '192.168.1.5', 'vendor': 'Cisco'},\n {'ip_address': '192.168.1.6', 'vendor': 'Huawei'},\n {'ip_address': '192.168.1.7', 'vendor': 'Juniper'},\n {'ip_address': '192.168.1.8', 'vendor': 'HP'}\n ]\n\n# Filter the list of devices to those in the specified IP range\n devices = [device for device in devices if IPNetwork(device['ip_address']) in ip_network]\n return jsonify(devices)\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a REST API in Python that will allow the user to retrieve a list of network devices based on a specific IP address range.\n\n### Input:\n\"192.168.1.0\/24\"\n\n### Output:\nfrom flask import Flask, request, jsonify\nfrom netaddr import IPNetwork\n\napp = Flask(__name__)\n\n@app.route('\/devices', methods=['GET'])\ndef get_devices():\n ip_range = request.args.get('ip_range')\n ip_network = IPNetwork(ip_range)\n\n# Query your data store to retrieve all devices in the given IP range\n devices = [\n {'ip_address': '192.168.1.5', 'vendor': 'Cisco'},\n {'ip_address': '192.168.1.6', 'vendor': 'Huawei'},\n {'ip_address': '192.168.1.7', 'vendor': 'Juniper'},\n {'ip_address': '192.168.1.8', 'vendor': 'HP'}\n ]\n\n# Filter the list of devices to those in the specified IP range\n devices = [device for device in devices if IPNetwork(device['ip_address']) in ip_network]\n return jsonify(devices)\n\nif __name__ == '__main__':\n app.run(debug=True)","tok_input_length":267,"tok_output_length":203,"system_prompt":"","index":15187}
{"question":"Write an optimization algorithm in Python to maximize the profit of a company given a set of constraints.","input":"Maximize Profit\nSubject to:\n\n1.Product A: 5 < x1  \u2264 10\n2.Product B: 0 < x2  \u2264 5\n3.Product C: 0 < x3  \u2264 15\n\nProfit=10x1 +25x2 +20x3","expected_output":"from pulp import *\n\n# Define problem\nmodel = LpProblem(\"Maximize Profit\", LpMaximize)\n\n# Define Decision Variables\nx1 = LpVariable(\"x1\", 5, 10)\nx2 = LpVariable(\"x2\", 0, 5)\nx3 = LpVariable(\"x3\", 0, 15)\n\n# Objective function\nmodel += 10 * x1 + 25 * x2 + 20 * x3\n\n# Constraints\nmodel += x1 + x2 <= 10\nmodel += x2 + x3 <= 15\n\n# Solve model\nmodel.solve()\n\n# Output results\nprint(\"Solution:\")\nfor variable in model.variables():\n print(\"{} = {}\".format(variable.name, variable.varValue))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an optimization algorithm in Python to maximize the profit of a company given a set of constraints.\n\n### Input:\nMaximize Profit\nSubject to:\n\n1.Product A: 5 < x1  \u2264 10\n2.Product B: 0 < x2  \u2264 5\n3.Product C: 0 < x3  \u2264 15\n\nProfit=10x1 +25x2 +20x3\n\n### Output:\nfrom pulp import *\n\n# Define problem\nmodel = LpProblem(\"Maximize Profit\", LpMaximize)\n\n# Define Decision Variables\nx1 = LpVariable(\"x1\", 5, 10)\nx2 = LpVariable(\"x2\", 0, 5)\nx3 = LpVariable(\"x3\", 0, 15)\n\n# Objective function\nmodel += 10 * x1 + 25 * x2 + 20 * x3\n\n# Constraints\nmodel += x1 + x2 <= 10\nmodel += x2 + x3 <= 15\n\n# Solve model\nmodel.solve()\n\n# Output results\nprint(\"Solution:\")\nfor variable in model.variables():\n print(\"{} = {}\".format(variable.name, variable.varValue))","tok_input_length":268,"tok_output_length":159,"system_prompt":"","index":7540}
{"question":"Create a REST API in Python using the Flask framework. The API should provide a GET endpoint to get a list of users from a database, and a POST endpoint for creating new users in the database.","input":"not applicable","expected_output":"from flask import Flask, request, jsonify\nimport mysql.connector\n\n# create a Flask app\napp = Flask(__name__)\n\n# connect to the database\nmydb = mysql.connector.connect(\n host=\"host\",\n user=\"username\",\n passwd=\"password\",\n database=\"databasename\"\n)\n\n# create a GET endpoint\n@app.route('\/users', methods=['GET'])\ndef get_users():\n cur = mydb.cursor()\n cur.execute(\"SELECT * FROM users\")\n results = cur.fetchall()\n return jsonify(results)\n\n# create a POST endpoint\n@app.route('\/users', methods=['POST'])\ndef create_user():\n data = request.get_json()\n username = data['username']\n password = data['password']\n\n cur = mydb.cursor()\n cur.execute('INSERT INTO users (username, password) VALUES (%s, %s)', (username, password))\n mydb.commit()\n\n return jsonify({'message': 'User created successfully'})\n\n# run the app\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API in Python using the Flask framework. The API should provide a GET endpoint to get a list of users from a database, and a POST endpoint for creating new users in the database.\n\n### Input:\nnot applicable\n\n### Output:\nfrom flask import Flask, request, jsonify\nimport mysql.connector\n\n# create a Flask app\napp = Flask(__name__)\n\n# connect to the database\nmydb = mysql.connector.connect(\n host=\"host\",\n user=\"username\",\n passwd=\"password\",\n database=\"databasename\"\n)\n\n# create a GET endpoint\n@app.route('\/users', methods=['GET'])\ndef get_users():\n cur = mydb.cursor()\n cur.execute(\"SELECT * FROM users\")\n results = cur.fetchall()\n return jsonify(results)\n\n# create a POST endpoint\n@app.route('\/users', methods=['POST'])\ndef create_user():\n data = request.get_json()\n username = data['username']\n password = data['password']\n\n cur = mydb.cursor()\n cur.execute('INSERT INTO users (username, password) VALUES (%s, %s)', (username, password))\n mydb.commit()\n\n return jsonify({'message': 'User created successfully'})\n\n# run the app\nif __name__ == '__main__':\n app.run(debug=True)","tok_input_length":268,"tok_output_length":198,"system_prompt":"","index":14404}
{"question":"Design a neural network in Python to classify the sentiment of a movie review. The data should consist of reviews and labels indicating whether the review is positive or negative.","input":"Not applicable","expected_output":"#import libraries\nimport keras\nfrom keras import models\nfrom keras.layers import Dense, Dropout, Embedding, Conv1D, GlobalMaxPooling1D, Flatten\nimport numpy as np\n\n#Specify parameters\nvocab_size = 50000\nembedding_dim = 200\nmaxlen = 500\nbatch_size = 64\n\n#define model\nmodel = models.Sequential()\nmodel.add(Embedding(vocab_size, embedding_dim, input_length=maxlen))\nmodel.add(Conv1D(256, 3, activation='relu'))\nmodel.add(GlobalMaxPooling1D())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n#Fit model\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=5,\n          validation_data=(x_val, y_val))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python to classify the sentiment of a movie review. The data should consist of reviews and labels indicating whether the review is positive or negative.\n\n### Input:\nNot applicable\n\n### Output:\n#import libraries\nimport keras\nfrom keras import models\nfrom keras.layers import Dense, Dropout, Embedding, Conv1D, GlobalMaxPooling1D, Flatten\nimport numpy as np\n\n#Specify parameters\nvocab_size = 50000\nembedding_dim = 200\nmaxlen = 500\nbatch_size = 64\n\n#define model\nmodel = models.Sequential()\nmodel.add(Embedding(vocab_size, embedding_dim, input_length=maxlen))\nmodel.add(Conv1D(256, 3, activation='relu'))\nmodel.add(GlobalMaxPooling1D())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n#Fit model\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=5,\n          validation_data=(x_val, y_val))","tok_input_length":269,"tok_output_length":207,"system_prompt":"","index":4918}
{"question":"Design a simple linear regression algorithm in Python.","input":"","expected_output":"def simple_linear_regression(X, y): \n    # calculate the mean value of a list of numbers \n    def mean(values): \n        return sum(values) \/ float(len(values)) \n\n    # calculate covariance between x and y \n    def covariance(x, mean_x, y, mean_y): \n        covar = 0.0\n        for i in range(len(x)): \n            covar += (x[i] - mean_x) * (y[i] - mean_y) \n        return covar \n\n    # calculate the variance of a list of numbers \n    def variance(values, mean): \n        return sum([(x - mean)**2 for x in values]) \n  \n    # calculate coefficients \n    def coefficients(X, y): \n        x_mean, y_mean = mean(X), mean(y) \n        b1 = covariance(X, x_mean, y, y_mean) \/ variance(X, x_mean) \n        b0 = y_mean - b1 * x_mean \n        return [b0, b1] \n  \n    b = coefficients(X, y) \n    return b[0], b[1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a simple linear regression algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef simple_linear_regression(X, y): \n    # calculate the mean value of a list of numbers \n    def mean(values): \n        return sum(values) \/ float(len(values)) \n\n    # calculate covariance between x and y \n    def covariance(x, mean_x, y, mean_y): \n        covar = 0.0\n        for i in range(len(x)): \n            covar += (x[i] - mean_x) * (y[i] - mean_y) \n        return covar \n\n    # calculate the variance of a list of numbers \n    def variance(values, mean): \n        return sum([(x - mean)**2 for x in values]) \n  \n    # calculate coefficients \n    def coefficients(X, y): \n        x_mean, y_mean = mean(X), mean(y) \n        b1 = covariance(X, x_mean, y, y_mean) \/ variance(X, x_mean) \n        b0 = y_mean - b1 * x_mean \n        return [b0, b1] \n  \n    b = coefficients(X, y) \n    return b[0], b[1]","tok_input_length":269,"tok_output_length":233,"system_prompt":"","index":1929}
{"question":"Create an algorithm in Python to analyze a given list of numbers and identify patterns, if any.","input":"[7,8,10,15,20,25,30,31]","expected_output":"def find_pattern(lst):\n pattern_list = []\n for i in range(len(lst) - 1):\n diff = abs(lst[i] - lst[i + 1])\n pattern_list.append(diff)\n\n # Check for increasing pattern\n increasing = True\n for j in range(len(pattern_list) - 1):\n if pattern_list[j] > pattern_list[j + 1]:\n increasing = False\n\n # Check for constant pattern\n constant = True\n for k in range(len(pattern_list) - 1):\n if pattern_list[k] != pattern_list[k + 1]:\n constant = False\n\n # Check for repeating pattern\n repeating = True\n for l in range(len(pattern_list) - 2):\n if pattern_list[l] != pattern_list[l + 2]:\n repeating = False\n\n if increasing:\n return \"Increasing\"\n elif constant:\n return \"Constant\"\n elif repeating:\n return \"Repeating\"\n else:\n return None\n\nlst = [7,8,10,15,20,25,30,31]\nprint(find_pattern(lst))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to analyze a given list of numbers and identify patterns, if any.\n\n### Input:\n[7,8,10,15,20,25,30,31]\n\n### Output:\ndef find_pattern(lst):\n pattern_list = []\n for i in range(len(lst) - 1):\n diff = abs(lst[i] - lst[i + 1])\n pattern_list.append(diff)\n\n # Check for increasing pattern\n increasing = True\n for j in range(len(pattern_list) - 1):\n if pattern_list[j] > pattern_list[j + 1]:\n increasing = False\n\n # Check for constant pattern\n constant = True\n for k in range(len(pattern_list) - 1):\n if pattern_list[k] != pattern_list[k + 1]:\n constant = False\n\n # Check for repeating pattern\n repeating = True\n for l in range(len(pattern_list) - 2):\n if pattern_list[l] != pattern_list[l + 2]:\n repeating = False\n\n if increasing:\n return \"Increasing\"\n elif constant:\n return \"Constant\"\n elif repeating:\n return \"Repeating\"\n else:\n return None\n\nlst = [7,8,10,15,20,25,30,31]\nprint(find_pattern(lst))","tok_input_length":270,"tok_output_length":207,"system_prompt":"","index":8345}
{"question":"Design an algorithm in Python to order a list with and without O(nlogn) time complexity.","input":"[3, 5, 2, 1, 4]","expected_output":"#O(n^2)\ndef order_without_nlogn(arr): \n\tn = len(arr)\n\n\t# Traverse through all array elements \n\tfor i in range(n): \n\t\n\t\t# Last i elements are already in place \n\t\tfor j in range(0, n-i-1): \n\t\t\n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [3, 5, 2, 1, 4]\norder_without_nlogn(arr) \n\n# O(nlogn)\ndef order_with_nlogn(arr): \n\tarr.sort() \n\n# Driver code to test above \narr = [3, 5, 2, 1, 4]\norder_with_nlogn(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to order a list with and without O(nlogn) time complexity.\n\n### Input:\n[3, 5, 2, 1, 4]\n\n### Output:\n#O(n^2)\ndef order_without_nlogn(arr): \n\tn = len(arr)\n\n\t# Traverse through all array elements \n\tfor i in range(n): \n\t\n\t\t# Last i elements are already in place \n\t\tfor j in range(0, n-i-1): \n\t\t\n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [3, 5, 2, 1, 4]\norder_without_nlogn(arr) \n\n# O(nlogn)\ndef order_with_nlogn(arr): \n\tarr.sort() \n\n# Driver code to test above \narr = [3, 5, 2, 1, 4]\norder_with_nlogn(arr)","tok_input_length":271,"tok_output_length":209,"system_prompt":"","index":14176}
{"question":"Optimize a python script which calculates the sum of all the numbers below 1000 that are divisible by 3 or 5.","input":"# Python program to find sum of all \n# numbers divisible by 3 or 5\n\n# initialize sum\nsum = 0\n\n# find sum of all numbers\n# divisible by 3 or 5\n# below 1000\nfor i in range(1000):\n    if(i%3==0 or i%5==0):\n        sum = sum + i\n\n#print the sum\nprint \"Sum =\",sum","expected_output":"# optimized Python program to find sum \n# of all numbers divisible by 3 or 5\n\n# initialize sum\nsum = 0\n\n# find sum of all numbers\n# divisible by 3\nfor i in range(3, 1000, 3):\n    sum += i\n\n# find sum of all numbers\n# divisible by 5\nfor i in range(5, 1000, 5):\n    # check if it is divisible by both 3 and 5\n    if i % 3 != 0:\n        sum += i\n\n#print the sum\nprint(\"Sum =\",sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a python script which calculates the sum of all the numbers below 1000 that are divisible by 3 or 5.\n\n### Input:\n# Python program to find sum of all \n# numbers divisible by 3 or 5\n\n# initialize sum\nsum = 0\n\n# find sum of all numbers\n# divisible by 3 or 5\n# below 1000\nfor i in range(1000):\n    if(i%3==0 or i%5==0):\n        sum = sum + i\n\n#print the sum\nprint \"Sum =\",sum\n\n### Output:\n# optimized Python program to find sum \n# of all numbers divisible by 3 or 5\n\n# initialize sum\nsum = 0\n\n# find sum of all numbers\n# divisible by 3\nfor i in range(3, 1000, 3):\n    sum += i\n\n# find sum of all numbers\n# divisible by 5\nfor i in range(5, 1000, 5):\n    # check if it is divisible by both 3 and 5\n    if i % 3 != 0:\n        sum += i\n\n#print the sum\nprint(\"Sum =\",sum)","tok_input_length":272,"tok_output_length":129,"system_prompt":"","index":18318}
{"question":"Create a deep learning model for sentiment analysis powered by Python TensorFlow.","input":"Not applicable","expected_output":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nimport matplotlib.pyplot as plt\n\n# load the dataset\ndata = pd.read_csv('.\/sentiment_data.csv')\nx = data['text'].tolist()\ny = data['label'].tolist()\n\n# create an instance of the Tokenizer class\ntokenizer = Tokenizer(num_words=None, lower=True)\ntokenizer.fit_on_texts(x)\n\n# prepare the sequences\ntrain_sequences = tokenizer.texts_to_sequences(x)\nlengths = [len(x) for x in train_sequences]\n\n# pad the sequences\ntrain_padded = pad_sequences(train_sequences)\n\n# create and train the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Embedding(tokenizer.num_words, 128, trainable=True),\n tf.keras.layers.LSTM(64, activation='tanh'),\n tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\nhistory = model.fit(\n train_padded, \n y,\n batch_size=32,\n epochs=10,\n validation_split=0.2\n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a deep learning model for sentiment analysis powered by Python TensorFlow.\n\n### Input:\nNot applicable\n\n### Output:\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nimport matplotlib.pyplot as plt\n\n# load the dataset\ndata = pd.read_csv('.\/sentiment_data.csv')\nx = data['text'].tolist()\ny = data['label'].tolist()\n\n# create an instance of the Tokenizer class\ntokenizer = Tokenizer(num_words=None, lower=True)\ntokenizer.fit_on_texts(x)\n\n# prepare the sequences\ntrain_sequences = tokenizer.texts_to_sequences(x)\nlengths = [len(x) for x in train_sequences]\n\n# pad the sequences\ntrain_padded = pad_sequences(train_sequences)\n\n# create and train the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Embedding(tokenizer.num_words, 128, trainable=True),\n tf.keras.layers.LSTM(64, activation='tanh'),\n tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\nhistory = model.fit(\n train_padded, \n y,\n batch_size=32,\n epochs=10,\n validation_split=0.2\n)","tok_input_length":272,"tok_output_length":229,"system_prompt":"","index":6284}
{"question":"Develop a Python program to generate a list of all possible DNA sequences using a given sequence.","input":"sequence: ATCG","expected_output":"# Create a list to store all possible DNA sequences\ndna_sequence_list = []\n\n# Generate the combinations using recursion\ndef generate_dnasequence_combinations(sequence, seq_length, curr_index): \n  \n    # Break the execution when the index is greater than the length of the sequence \n    if (curr_index == seq_length): \n        dna_sequence_list.append(''.join(sequence)) \n        return\n    \n    # Generate the combinations for each character in the sequence \n    for i in range(curr_index, len(sequence)): \n        # Swap the characters \n        sequence[curr_index], sequence[i] = sequence[i], sequence[curr_index] \n        #add the swapped character to the list \n        generate_dnasequence_combinations(sequence, seq_length, curr_index + 1)  \n        # Swap back the characters \n        sequence[curr_index], sequence[i] = sequence[i], sequence[curr_index] \n        \n# Call the generate_dnasequence_combinations with the initial sequence\ngenerate_dnasequence_combinations(list(sequence), len(sequence), 0) \n\n# Print all the combinations\nprint(dna_sequence_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate a list of all possible DNA sequences using a given sequence.\n\n### Input:\nsequence: ATCG\n\n### Output:\n# Create a list to store all possible DNA sequences\ndna_sequence_list = []\n\n# Generate the combinations using recursion\ndef generate_dnasequence_combinations(sequence, seq_length, curr_index): \n  \n    # Break the execution when the index is greater than the length of the sequence \n    if (curr_index == seq_length): \n        dna_sequence_list.append(''.join(sequence)) \n        return\n    \n    # Generate the combinations for each character in the sequence \n    for i in range(curr_index, len(sequence)): \n        # Swap the characters \n        sequence[curr_index], sequence[i] = sequence[i], sequence[curr_index] \n        #add the swapped character to the list \n        generate_dnasequence_combinations(sequence, seq_length, curr_index + 1)  \n        # Swap back the characters \n        sequence[curr_index], sequence[i] = sequence[i], sequence[curr_index] \n        \n# Call the generate_dnasequence_combinations with the initial sequence\ngenerate_dnasequence_combinations(list(sequence), len(sequence), 0) \n\n# Print all the combinations\nprint(dna_sequence_list)","tok_input_length":273,"tok_output_length":223,"system_prompt":"","index":7118}
{"question":"Generate a Python program that produces a spiral matrix with the specified number of rows and columns.","input":"Row count: 9\nColumn count: 6","expected_output":"def spiral_matrix(num_rows, num_columns):\n    matrix = [[0] * num_columns for row in range(num_rows)]\n\n    stride = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    direction = 0\n    x, y = 0, 0\n    val = 1\n    while 0 <= x < num_rows and 0 <= y < num_columns:\n        matrix[x][y] = val\n        x += stride[direction][0]\n        y += stride[direction][1]\n        if x < 0 or y < 0 or x == num_rows or y == num_columns or matrix[x][y] != 0:\n            x -= stride[direction][0]\n            y -= stride[direction][1]\n            direction += 1\n            if direction == len(stride):\n                direction = 0\n            x += stride[direction][0]\n            y += stride[direction][1]\n        val += 1\n    return matrix","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that produces a spiral matrix with the specified number of rows and columns.\n\n### Input:\nRow count: 9\nColumn count: 6\n\n### Output:\ndef spiral_matrix(num_rows, num_columns):\n    matrix = [[0] * num_columns for row in range(num_rows)]\n\n    stride = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    direction = 0\n    x, y = 0, 0\n    val = 1\n    while 0 <= x < num_rows and 0 <= y < num_columns:\n        matrix[x][y] = val\n        x += stride[direction][0]\n        y += stride[direction][1]\n        if x < 0 or y < 0 or x == num_rows or y == num_columns or matrix[x][y] != 0:\n            x -= stride[direction][0]\n            y -= stride[direction][1]\n            direction += 1\n            if direction == len(stride):\n                direction = 0\n            x += stride[direction][0]\n            y += stride[direction][1]\n        val += 1\n    return matrix","tok_input_length":274,"tok_output_length":217,"system_prompt":"","index":5779}
{"question":"Create a web application in Python with Flask and Mongodb as the backend to provide an end-to-end solution for editing user profile information.","input":"The user profile must include fields for name, email address, phone number, age, location, and profession.","expected_output":"from flask import Flask, request, jsonify\nfrom pymongo import MongoClient\n\napp = Flask(__name__)\n\nclient = MongoClient('localhost', 27017)\ndb = client.user_database\nusers = db.users\n\n@app.route('\/user', methods=['GET', 'POST'])\ndef user_profile():\n if request.method == 'GET':\n # Retrieve user profile information\n user_info = users.find_one({'_id': request.args.get('id')})\n return jsonify(user_info)\n\n elif request.method == 'POST':\n # Update user profile information\n data = request.get_json()\n users.update({\n '_id': data['id']\n }, {\n 'name': data['name'],\n 'email': data['email'],\n 'phone': data['phone'],\n 'age': data['age'],\n 'location': data['location'],\n 'profession': data['profession']\n })\n result = users.find_one({'_id': data['id']})\n return jsonify({'result': result})\n\nif __name__ == '__main__':\n app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Python with Flask and Mongodb as the backend to provide an end-to-end solution for editing user profile information.\n\n### Input:\nThe user profile must include fields for name, email address, phone number, age, location, and profession.\n\n### Output:\nfrom flask import Flask, request, jsonify\nfrom pymongo import MongoClient\n\napp = Flask(__name__)\n\nclient = MongoClient('localhost', 27017)\ndb = client.user_database\nusers = db.users\n\n@app.route('\/user', methods=['GET', 'POST'])\ndef user_profile():\n if request.method == 'GET':\n # Retrieve user profile information\n user_info = users.find_one({'_id': request.args.get('id')})\n return jsonify(user_info)\n\n elif request.method == 'POST':\n # Update user profile information\n data = request.get_json()\n users.update({\n '_id': data['id']\n }, {\n 'name': data['name'],\n 'email': data['email'],\n 'phone': data['phone'],\n 'age': data['age'],\n 'location': data['location'],\n 'profession': data['profession']\n })\n result = users.find_one({'_id': data['id']})\n return jsonify({'result': result})\n\nif __name__ == '__main__':\n app.run()","tok_input_length":275,"tok_output_length":199,"system_prompt":"","index":14470}
{"question":"Write a debugging tool which visualizes the calls and returns of a Python program.","input":"","expected_output":"import sys\nimport traceback\n\ndef visualize_program_calls():\n  def trace_calls(frame, event, arg):\n    if event != 'call':\n      return\n    co = frame.f_code\n    func_name = co.co_name\n    if func_name == 'write':\n      # Ignore write() calls from print statements\n      return\n    func_line_no = frame.f_lineno\n    func_filename = co.co_filename\n    caller = frame.f_back\n    caller_line_no = caller.f_lineno\n    caller_filename = caller.f_code.co_filename\n    print('Call to %s on line %s of %s from line %s of %s' % \\\n        (func_name, func_line_no, func_filename,\n         caller_line_no, caller_filename))\n    return\n\n  sys.setprofile(trace_calls)\n\ndef _visualize_program_returns(*args):\n  for thread_id, frame in sys._current_frames().items():\n    print('Return from %s on line %s of %s' % \\\n        (frame.f_code.co_name, frame.f_lineno, frame.f_code.co_filename))\n\nsys.settrace(_visualize_program_returns)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a debugging tool which visualizes the calls and returns of a Python program.\n\n### Input:\n\n\n### Output:\nimport sys\nimport traceback\n\ndef visualize_program_calls():\n  def trace_calls(frame, event, arg):\n    if event != 'call':\n      return\n    co = frame.f_code\n    func_name = co.co_name\n    if func_name == 'write':\n      # Ignore write() calls from print statements\n      return\n    func_line_no = frame.f_lineno\n    func_filename = co.co_filename\n    caller = frame.f_back\n    caller_line_no = caller.f_lineno\n    caller_filename = caller.f_code.co_filename\n    print('Call to %s on line %s of %s from line %s of %s' % \\\n        (func_name, func_line_no, func_filename,\n         caller_line_no, caller_filename))\n    return\n\n  sys.setprofile(trace_calls)\n\ndef _visualize_program_returns(*args):\n  for thread_id, frame in sys._current_frames().items():\n    print('Return from %s on line %s of %s' % \\\n        (frame.f_code.co_name, frame.f_lineno, frame.f_code.co_filename))\n\nsys.settrace(_visualize_program_returns)","tok_input_length":275,"tok_output_length":232,"system_prompt":"","index":15350}
{"question":"Access the Yelp API and build a program in Python that takes in a zip code and returns the average ratings for all restaurants in that zip code.","input":"94115","expected_output":"\"\"\"\nAccess the Yelp API and build a program that takes a zip code and returns \nthe average ratings for all restaurants in that zip code.\n\"\"\"\n\nimport requests\n\ndef get_restaurant_ratings(zip_code):\n    api_url = 'https:\/\/api.yelp.com\/v3\/businesses\/search?location=' + zip_code\n    headers = {'Authorization': 'Bearer [API KEY]'}\n    r = requests.get(api_url, headers=headers)\n    data = r.json()\n    business_ids = [b['id'] for b in data['businesses']]\n    total_rating = 0\n    num_ratings = 0\n    for business_id in business_ids:\n        business_url = 'https:\/\/api.yelp.com\/v3\/businesses\/' + business_id\n        business_data = requests.get(business_url, headers=headers).json()\n        total_rating += business_data['rating']\n        num_ratings += 1\n        \n    return total_rating \/ num_ratings\n\nif __name__ == '__main__':\n    zip_code = '94115'\n    print(get_restaurant_ratings(zip_code))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAccess the Yelp API and build a program in Python that takes in a zip code and returns the average ratings for all restaurants in that zip code.\n\n### Input:\n94115\n\n### Output:\n\"\"\"\nAccess the Yelp API and build a program that takes a zip code and returns \nthe average ratings for all restaurants in that zip code.\n\"\"\"\n\nimport requests\n\ndef get_restaurant_ratings(zip_code):\n    api_url = 'https:\/\/api.yelp.com\/v3\/businesses\/search?location=' + zip_code\n    headers = {'Authorization': 'Bearer [API KEY]'}\n    r = requests.get(api_url, headers=headers)\n    data = r.json()\n    business_ids = [b['id'] for b in data['businesses']]\n    total_rating = 0\n    num_ratings = 0\n    for business_id in business_ids:\n        business_url = 'https:\/\/api.yelp.com\/v3\/businesses\/' + business_id\n        business_data = requests.get(business_url, headers=headers).json()\n        total_rating += business_data['rating']\n        num_ratings += 1\n        \n    return total_rating \/ num_ratings\n\nif __name__ == '__main__':\n    zip_code = '94115'\n    print(get_restaurant_ratings(zip_code))","tok_input_length":276,"tok_output_length":217,"system_prompt":"","index":5475}
{"question":"Write a Python program to find the closest pair of points in a given set of points.","input":"[[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]","expected_output":"import math\n\ndef closest_pair(points):\n closest_pair = None\n closest_distance = float('inf')\n for i in range(len(points)):\n for j in range(i + 1, len(points)):\n distance = calc_distance(points[i], points[j])\n if distance < closest_distance:\n closest_distance = distance\n closest_pair = (points[i], points[j])\n\n return closest_pair, closest_distance\n\ndef calc_distance(p1, p2):\n return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)\n\npoints = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]\nclosest_pair, closest_distance = closest_pair(points)\n\nprint(closest_pair) # prints ([2, 3], [3, 4])\nprint(closest_distance) # prints 1.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the closest pair of points in a given set of points.\n\n### Input:\n[[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]\n\n### Output:\nimport math\n\ndef closest_pair(points):\n closest_pair = None\n closest_distance = float('inf')\n for i in range(len(points)):\n for j in range(i + 1, len(points)):\n distance = calc_distance(points[i], points[j])\n if distance < closest_distance:\n closest_distance = distance\n closest_pair = (points[i], points[j])\n\n return closest_pair, closest_distance\n\ndef calc_distance(p1, p2):\n return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)\n\npoints = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]\nclosest_pair, closest_distance = closest_pair(points)\n\nprint(closest_pair) # prints ([2, 3], [3, 4])\nprint(closest_distance) # prints 1.0","tok_input_length":277,"tok_output_length":196,"system_prompt":"","index":12449}
{"question":"Write a Python program to search a list of numbers using a binary search algorithm.","input":"list = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]","expected_output":"def binary_search(numbers, number_to_find, low, high):\n \n if low > high:\n return False\n \n mid = (low + high) \/\/ 2\n \n if numbers[mid] == number_to_find:\n return True\n elif numbers[mid] > number_to_find:\n return binary_search(numbers, number_to_find, low, mid - 1)\n else:\n return binary_search(numbers, number_to_find, mid + 1, high)\n \n \nif __name__ == '__main__':\n numbers = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]\n \n number_to_find = int(input('Enter a number: '))\n \n result = binary_search(numbers, number_to_find, 0, len(numbers) - 1)\n \n if result is True:\n print('The number is in the list')\n else:\n print('The number is NOT in the list')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search a list of numbers using a binary search algorithm.\n\n### Input:\nlist = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]\n\n### Output:\ndef binary_search(numbers, number_to_find, low, high):\n \n if low > high:\n return False\n \n mid = (low + high) \/\/ 2\n \n if numbers[mid] == number_to_find:\n return True\n elif numbers[mid] > number_to_find:\n return binary_search(numbers, number_to_find, low, mid - 1)\n else:\n return binary_search(numbers, number_to_find, mid + 1, high)\n \n \nif __name__ == '__main__':\n numbers = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]\n \n number_to_find = int(input('Enter a number: '))\n \n result = binary_search(numbers, number_to_find, 0, len(numbers) - 1)\n \n if result is True:\n print('The number is in the list')\n else:\n print('The number is NOT in the list')","tok_input_length":278,"tok_output_length":197,"system_prompt":"","index":4509}
{"question":"Create a Machine Learning model in Python to predict the values of a function given a set of test inputpoints.","input":"input_values = [(-5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (-2.4, -3.2)]","expected_output":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# List of input points\ninput_values = [(-5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (-2.4, -3.2)]\n\n# Create x and y matrix from input\nx = [v[0] for v in input_values]\ny = [v[1] for v in input_values]\n\n# Create the training data array\nX = np.array(x).reshape(-1, 1)\nY = np.array(y)\n\n# Create the model, train, and predict\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X, Y)\nY_pred = model.predict(X)\n\n# Plot the data and the model\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Machine Learning model in Python to predict the values of a function given a set of test inputpoints.\n\n### Input:\ninput_values = [(-5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (-2.4, -3.2)]\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# List of input points\ninput_values = [(-5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (-2.4, -3.2)]\n\n# Create x and y matrix from input\nx = [v[0] for v in input_values]\ny = [v[1] for v in input_values]\n\n# Create the training data array\nX = np.array(x).reshape(-1, 1)\nY = np.array(y)\n\n# Create the model, train, and predict\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X, Y)\nY_pred = model.predict(X)\n\n# Plot the data and the model\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()","tok_input_length":279,"tok_output_length":186,"system_prompt":"","index":10365}
{"question":"Create a python program optimize a function with two variables such that it returns the maximum value","input":"","expected_output":"import numpy as np\n\ndef optimize_function(f, x_range, y_range):\n\t\"\"\"\n\tOptimizes a given function using brute force search over the specified range\n\n\tParameters:\n\t\tf (func): Function to be optimized\n\t\tx_range (tuple): Range of x over which to search for optimal values\n\t\ty_range (tuple): Range of y over which to search for optimal values\n\n\tReturns:\n\t\ttuple: Optimal x and y values\n\t\"\"\"\n\tmax_val = float(\"-inf\")\n\toptimal_x = 0\n\toptimal_y = 0\n\n\tfor x in np.arange(*x_range):\n\t\tfor y in np.arange(*y_range):\n\t\t\tval = f(x, y)\n\t\t\tif val > max_val:\n\t\t\t\toptimal_x, optimal_y = x, y\n\t\t\t\tmax_val = val\n\n\treturn (optimal_x, optimal_y)\n\nif __name__ == '__main__':\n\tdef f(x, y):\n    \treturn x**2 + y**2\n\n\toptimal_x, optimal_y = optimize_function(f, (-5, 5), (-5, 5))\n\tprint(optimal_x, optimal_y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program optimize a function with two variables such that it returns the maximum value\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef optimize_function(f, x_range, y_range):\n\t\"\"\"\n\tOptimizes a given function using brute force search over the specified range\n\n\tParameters:\n\t\tf (func): Function to be optimized\n\t\tx_range (tuple): Range of x over which to search for optimal values\n\t\ty_range (tuple): Range of y over which to search for optimal values\n\n\tReturns:\n\t\ttuple: Optimal x and y values\n\t\"\"\"\n\tmax_val = float(\"-inf\")\n\toptimal_x = 0\n\toptimal_y = 0\n\n\tfor x in np.arange(*x_range):\n\t\tfor y in np.arange(*y_range):\n\t\t\tval = f(x, y)\n\t\t\tif val > max_val:\n\t\t\t\toptimal_x, optimal_y = x, y\n\t\t\t\tmax_val = val\n\n\treturn (optimal_x, optimal_y)\n\nif __name__ == '__main__':\n\tdef f(x, y):\n    \treturn x**2 + y**2\n\n\toptimal_x, optimal_y = optimize_function(f, (-5, 5), (-5, 5))\n\tprint(optimal_x, optimal_y)","tok_input_length":279,"tok_output_length":234,"system_prompt":"","index":11780}
{"question":"Create a Python script to scrape the title and the release date of all movies shown on IMDB in a given year.","input":"Year: 2020","expected_output":"import requests \nfrom bs4 import BeautifulSoup \n \n# Enter the year you want to scrape \nyear = 2020\n  \n#Creating the IMDb URL for the movies of that year \nurl = f\"https:\/\/www.imdb.com\/search\/title\/?release_date={year}-01-01,{year+1}-12-31\"\n      \nresponse = requests.get(url) \nsoup = BeautifulSoup(response.text,\"html.parser\") \n  \n# List to store the data \nmovie_list = [] \n  \n# Extracting the movie title and release date \nmovie_div = soup.find_all(\"div\", class_ = \"lister-item mode-advanced\") \nfor movie in movie_div: \n     \n    # extracting the movie title      \n    movie_title = movie.h3.a.text\n      \n    # extracting the movie's release date      \n    movie_year = movie.h3.find(\"span\", class_ = \"lister-item-year text-muted unbold\").text\n    year = int(movie_year.replace(\"(\", \"\").replace(\")\", \"\"))\n    \n    movie_list.append((movie_title, year)) \n\n# printing the movie_list\nprint(movie_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape the title and the release date of all movies shown on IMDB in a given year.\n\n### Input:\nYear: 2020\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n \n# Enter the year you want to scrape \nyear = 2020\n  \n#Creating the IMDb URL for the movies of that year \nurl = f\"https:\/\/www.imdb.com\/search\/title\/?release_date={year}-01-01,{year+1}-12-31\"\n      \nresponse = requests.get(url) \nsoup = BeautifulSoup(response.text,\"html.parser\") \n  \n# List to store the data \nmovie_list = [] \n  \n# Extracting the movie title and release date \nmovie_div = soup.find_all(\"div\", class_ = \"lister-item mode-advanced\") \nfor movie in movie_div: \n     \n    # extracting the movie title      \n    movie_title = movie.h3.a.text\n      \n    # extracting the movie's release date      \n    movie_year = movie.h3.find(\"span\", class_ = \"lister-item-year text-muted unbold\").text\n    year = int(movie_year.replace(\"(\", \"\").replace(\")\", \"\"))\n    \n    movie_list.append((movie_title, year)) \n\n# printing the movie_list\nprint(movie_list)","tok_input_length":280,"tok_output_length":223,"system_prompt":"","index":13697}
{"question":"Develop a ML model in Python for predicting the winning team of football matches. Use data from the past 5 years of the Premier League.","input":"Not applicable","expected_output":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Select features\nfeatures = data[['home_team_goals', 'away_team_goals', 'home_team_possession', 'away_team_possession',\n                 'home_team_shots', 'away_team_shots', 'home_team_yellow_cards', 'away_team_yellow_cards',\n                 'home_team_red_cards', 'away_team_red_cards']]\n\n# Select target\ntarget = data['winner']\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Train the model\ngbm = GradientBoostingClassifier()\ngbm.fit(X_train, y_train)\n\n# Make predictions\ny_pred = gbm.predict(X_test)\n\n# Evaluate the model\nscore = gbm.score(X_test, y_test)\nprint(f'Model score: {score}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a ML model in Python for predicting the winning team of football matches. Use data from the past 5 years of the Premier League.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Select features\nfeatures = data[['home_team_goals', 'away_team_goals', 'home_team_possession', 'away_team_possession',\n                 'home_team_shots', 'away_team_shots', 'home_team_yellow_cards', 'away_team_yellow_cards',\n                 'home_team_red_cards', 'away_team_red_cards']]\n\n# Select target\ntarget = data['winner']\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Train the model\ngbm = GradientBoostingClassifier()\ngbm.fit(X_train, y_train)\n\n# Make predictions\ny_pred = gbm.predict(X_test)\n\n# Evaluate the model\nscore = gbm.score(X_test, y_test)\nprint(f'Model score: {score}')","tok_input_length":281,"tok_output_length":223,"system_prompt":"","index":199}
{"question":"Create a machine learning model in Python that predicts the probability of a person having a heart disease given their age, gender, cholesterol level, and height.","input":"Input data:\nAge: 35\nGender: Male\nCholesterol Level: 200\nHeight: 5'11","expected_output":"# Import the required libraries\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndata_file_path = \"<insert_file_path_here>\"\ndata = pd.read_csv(data_file_path)\n\n# Create X and y variables\nX = data.drop(['heart_disease'], axis=1)\ny = data['heart_disease']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make a prediction for the given input\nX_pred = [[35, 1, 200, 71]]  # Age, Gender, Cholesterol Level, Height\nprediction = model.predict_proba(X_pred)[0]\nprint('Probability of having heart disease: ', prediction[1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that predicts the probability of a person having a heart disease given their age, gender, cholesterol level, and height.\n\n### Input:\nInput data:\nAge: 35\nGender: Male\nCholesterol Level: 200\nHeight: 5'11\n\n### Output:\n# Import the required libraries\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndata_file_path = \"<insert_file_path_here>\"\ndata = pd.read_csv(data_file_path)\n\n# Create X and y variables\nX = data.drop(['heart_disease'], axis=1)\ny = data['heart_disease']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make a prediction for the given input\nX_pred = [[35, 1, 200, 71]]  # Age, Gender, Cholesterol Level, Height\nprediction = model.predict_proba(X_pred)[0]\nprint('Probability of having heart disease: ', prediction[1])","tok_input_length":282,"tok_output_length":199,"system_prompt":"","index":17783}
{"question":"Build a recommendation system in Python to suggest movies to a user based on their previous ratings.","input":"","expected_output":"def movie_recommender_system(user):\n    \"\"\"\n    This function uses a collaborative filtering algorithm \n    to suggest movies to the given user\n    \"\"\"\n    # Get the list of rated movies by the user\n    user_movies = user.get_rated_movies()\n\n    # Get the list of ratings given by other users\n    user_ratings = user.get_ratings()\n\n    # Calculate the similarity between the user and other users\n    user_similarity = user.calculate_similarity(user_movies, user_ratings)\n\n    # Get the list of movies rated highly by other users\n    other_rated_movies = user.get_top_rated_movies(user_ratings) \n\n    # Find the movies which the user has not seen so far, but recommended by other users\n    unseen_movies = [m for m in other_rated_movies if m not in user_movies]\n    \n    # Sort the movies based on their similarity and the ratings given by other users\n    sorted_movies = sorted(unseen_movies, \n                            key=lambda m: user_similarity[m] * user_ratings[m], \n                            reverse=True)\n    \n    # Get the top 10 movies\n    top_movies = sorted_movies[:10]\n\n    return top_movies","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a recommendation system in Python to suggest movies to a user based on their previous ratings.\n\n### Input:\n\n\n### Output:\ndef movie_recommender_system(user):\n    \"\"\"\n    This function uses a collaborative filtering algorithm \n    to suggest movies to the given user\n    \"\"\"\n    # Get the list of rated movies by the user\n    user_movies = user.get_rated_movies()\n\n    # Get the list of ratings given by other users\n    user_ratings = user.get_ratings()\n\n    # Calculate the similarity between the user and other users\n    user_similarity = user.calculate_similarity(user_movies, user_ratings)\n\n    # Get the list of movies rated highly by other users\n    other_rated_movies = user.get_top_rated_movies(user_ratings) \n\n    # Find the movies which the user has not seen so far, but recommended by other users\n    unseen_movies = [m for m in other_rated_movies if m not in user_movies]\n    \n    # Sort the movies based on their similarity and the ratings given by other users\n    sorted_movies = sorted(unseen_movies, \n                            key=lambda m: user_similarity[m] * user_ratings[m], \n                            reverse=True)\n    \n    # Get the top 10 movies\n    top_movies = sorted_movies[:10]\n\n    return top_movies","tok_input_length":282,"tok_output_length":237,"system_prompt":"","index":1299}
{"question":"Generate a Python program to calculate the mean, median, mode and standard deviation of an input data set.","input":"[3, 1, 4, 5, 5, 6, 7]","expected_output":"def mean_median_mode_sd(data):\n    # calculate the mean\n    mean = sum(data) \/ len(data)\n    \n    # calculate the median\n    sorted_data = sorted(data) \n    mid = len(data) \/\/ 2\n    \n    if len(data) % 2 == 0:\n        median = (sorted_data[mid-1] + sorted_data[mid]) \/ 2\n    else:\n        median = sorted_data[mid]\n    \n    # calculate the mode\n    counts = dict()\n    for d in data:\n        if d in counts:\n            counts[d] += 1\n        else:\n            counts[d] = 1\n    mode = max(counts, key=counts.get)\n    \n    # calculate the standard deviation\n    mean_sum_sq_diff = 0\n    for d in data:\n        mean_sum_sq_diff += pow(d - mean, 2)\n    sd = pow(mean_sum_sq_diff \/ len(data), 0.5)\n    \n    # return results\n    return mean, median, mode, sd","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the mean, median, mode and standard deviation of an input data set.\n\n### Input:\n[3, 1, 4, 5, 5, 6, 7]\n\n### Output:\ndef mean_median_mode_sd(data):\n    # calculate the mean\n    mean = sum(data) \/ len(data)\n    \n    # calculate the median\n    sorted_data = sorted(data) \n    mid = len(data) \/\/ 2\n    \n    if len(data) % 2 == 0:\n        median = (sorted_data[mid-1] + sorted_data[mid]) \/ 2\n    else:\n        median = sorted_data[mid]\n    \n    # calculate the mode\n    counts = dict()\n    for d in data:\n        if d in counts:\n            counts[d] += 1\n        else:\n            counts[d] = 1\n    mode = max(counts, key=counts.get)\n    \n    # calculate the standard deviation\n    mean_sum_sq_diff = 0\n    for d in data:\n        mean_sum_sq_diff += pow(d - mean, 2)\n    sd = pow(mean_sum_sq_diff \/ len(data), 0.5)\n    \n    # return results\n    return mean, median, mode, sd","tok_input_length":283,"tok_output_length":214,"system_prompt":"","index":6775}
{"question":"Create a web scraper in Python to extract the product name, price, and availability from an online store website.","input":"","expected_output":"\"\"\"\nA web scraper to extract the product name, price, and availability from an online store website\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_products(url):\n    # Get the html content of the website\n    response = requests.get(url)\n    # Parse the html content\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # Get the products using the appropriate css class\n    products = soup.find_all(class_='product')\n    # Initialize an empty list for storing the product details\n    product_list = []\n    # Iterate over the products\n    for product in products:\n        product_details = {}\n        # Get the product name\n        product_details['name'] = product.find('h3').text\n        # Get the product price \n        product_details['price'] = product.find(class_='price').text\n        # Get the availability \n        product_details['availability'] = product.find(class_='stock').text\n        # Add the product details to the list\n        product_list.append(product_details)\n    return product_list\n\nif __name__ == '__main__':\n    print(scrape_products('https:\/\/www.example.com'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract the product name, price, and availability from an online store website.\n\n### Input:\n\n\n### Output:\n\"\"\"\nA web scraper to extract the product name, price, and availability from an online store website\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_products(url):\n    # Get the html content of the website\n    response = requests.get(url)\n    # Parse the html content\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # Get the products using the appropriate css class\n    products = soup.find_all(class_='product')\n    # Initialize an empty list for storing the product details\n    product_list = []\n    # Iterate over the products\n    for product in products:\n        product_details = {}\n        # Get the product name\n        product_details['name'] = product.find('h3').text\n        # Get the product price \n        product_details['price'] = product.find(class_='price').text\n        # Get the availability \n        product_details['availability'] = product.find(class_='stock').text\n        # Add the product details to the list\n        product_list.append(product_details)\n    return product_list\n\nif __name__ == '__main__':\n    print(scrape_products('https:\/\/www.example.com'))","tok_input_length":283,"tok_output_length":234,"system_prompt":"","index":10643}
{"question":"Write a Python program to search through a list of strings and find the longest common prefix string.","input":"[ \"panel\", \"panda\", \"paint\", \"panther\" ]","expected_output":"def longest_common_prefix(words):\n    # Sort the strings in the list\n    # so that the first string is the shortest\n    words.sort(key=len) \n    \n    # Initialize a prefix to empty string\n    prefix = \"\"\n\n    # Loop until length of prefix is less\n    # than the length of the shortest string\n    while len(prefix) < len(words[0]): \n        # Set the current character to \n        # the character at i-th index of \n        # the shortest string\n        current = words[0][len(prefix)] \n\n        # Check if the character is present \n        # in the substring of all other strings \n        for i in range(1, len(words)): \n            # Loop through all the words \n            # starting from the second string \n            if words[i][len(prefix)] != current:\n                # Return the prefix if the character \n                # is not present in the rest of the strings \n                return prefix\n        # Add the current character to the prefix\n        prefix += current \n\n    # Return the longest prefix \n    return prefix","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search through a list of strings and find the longest common prefix string.\n\n### Input:\n[ \"panel\", \"panda\", \"paint\", \"panther\" ]\n\n### Output:\ndef longest_common_prefix(words):\n    # Sort the strings in the list\n    # so that the first string is the shortest\n    words.sort(key=len) \n    \n    # Initialize a prefix to empty string\n    prefix = \"\"\n\n    # Loop until length of prefix is less\n    # than the length of the shortest string\n    while len(prefix) < len(words[0]): \n        # Set the current character to \n        # the character at i-th index of \n        # the shortest string\n        current = words[0][len(prefix)] \n\n        # Check if the character is present \n        # in the substring of all other strings \n        for i in range(1, len(words)): \n            # Loop through all the words \n            # starting from the second string \n            if words[i][len(prefix)] != current:\n                # Return the prefix if the character \n                # is not present in the rest of the strings \n                return prefix\n        # Add the current character to the prefix\n        prefix += current \n\n    # Return the longest prefix \n    return prefix","tok_input_length":284,"tok_output_length":222,"system_prompt":"","index":15870}
{"question":"Generate a Markov Chain model in Python which can produce text with a specific given style based on a sample text.","input":"Sample text: \"This is an example of a text with a specific style.\"","expected_output":"import random\n\ndef generate_markov_chain(text):\n  words = text.split()\n  markov_dict = {}\n\n  for i in range(len(words) - 1):\n    if words[i] in markov_dict:\n      markov_dict[words[i]].append(words[i + 1])\n    else:\n      markov_dict[words[i]] = [words[i + 1]]\n\n  return markov_dict\n\ndef generate_text(markov_dict, length=50):\n  current_word = random.choice(list(markov_dict.keys()))\n  text = [current_word]\n\n  for i in range(length):\n    if current_word in markov_dict:\n      current_word = random.choice(markov_dict[current_word])\n      text.append(current_word)\n    else:\n      current_word = random.choice(list(markov_dict.keys()))\n      text.append(current_word)\n  \n  return ' '.join(text)\n\nsample_text = \"This is an example of a text with a specific style.\"\nmarkov_dict = generate_markov_chain(sample_text)\ngenerated_text = generate_text(markov_dict)\n\nprint(generated_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Markov Chain model in Python which can produce text with a specific given style based on a sample text.\n\n### Input:\nSample text: \"This is an example of a text with a specific style.\"\n\n### Output:\nimport random\n\ndef generate_markov_chain(text):\n  words = text.split()\n  markov_dict = {}\n\n  for i in range(len(words) - 1):\n    if words[i] in markov_dict:\n      markov_dict[words[i]].append(words[i + 1])\n    else:\n      markov_dict[words[i]] = [words[i + 1]]\n\n  return markov_dict\n\ndef generate_text(markov_dict, length=50):\n  current_word = random.choice(list(markov_dict.keys()))\n  text = [current_word]\n\n  for i in range(length):\n    if current_word in markov_dict:\n      current_word = random.choice(markov_dict[current_word])\n      text.append(current_word)\n    else:\n      current_word = random.choice(list(markov_dict.keys()))\n      text.append(current_word)\n  \n  return ' '.join(text)\n\nsample_text = \"This is an example of a text with a specific style.\"\nmarkov_dict = generate_markov_chain(sample_text)\ngenerated_text = generate_text(markov_dict)\n\nprint(generated_text)","tok_input_length":285,"tok_output_length":219,"system_prompt":"","index":9606}
{"question":"Given a string which contains comma-separated alphabetic characters , write a program that rearranges the characters in the string so that all of the palindromic characters are placed at the beginning.","input":"\"bcqbad,bcipbp,cfgcdeh\"","expected_output":"# Python code\n\ninput_string = \"bcqbad,bcipbp,cfgcdeh\"\n\n# split the input string into list of characters\nchar_list = input_string.split(\",\")\n\n# function to check for palindrome\ndef isPalindrome(string):\n  return string == string[::-1]\n\n# empty list to store all palindromic characters\npalindromic_list = []\n\n# loop through the given list of characters\nfor char in char_list:\n  # check for palindrome\n  if isPalindrome(char):\n    # if palindrome, add to the palindromic list\n    palindromic_list.append(char)\n# remove the palindromic character from original list\nfor palindrome in palindromic_list:\n  char_list.remove(palindrome)\n# concat the palindromic list and original list\nfinal_list = palindromic_list + char_list\n# join the list and convert to string\nfinal_string = ','.join(final_list)\n\n# print the output string\nprint(final_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string which contains comma-separated alphabetic characters , write a program that rearranges the characters in the string so that all of the palindromic characters are placed at the beginning.\n\n### Input:\n\"bcqbad,bcipbp,cfgcdeh\"\n\n### Output:\n# Python code\n\ninput_string = \"bcqbad,bcipbp,cfgcdeh\"\n\n# split the input string into list of characters\nchar_list = input_string.split(\",\")\n\n# function to check for palindrome\ndef isPalindrome(string):\n  return string == string[::-1]\n\n# empty list to store all palindromic characters\npalindromic_list = []\n\n# loop through the given list of characters\nfor char in char_list:\n  # check for palindrome\n  if isPalindrome(char):\n    # if palindrome, add to the palindromic list\n    palindromic_list.append(char)\n# remove the palindromic character from original list\nfor palindrome in palindromic_list:\n  char_list.remove(palindrome)\n# concat the palindromic list and original list\nfinal_list = palindromic_list + char_list\n# join the list and convert to string\nfinal_string = ','.join(final_list)\n\n# print the output string\nprint(final_string)","tok_input_length":286,"tok_output_length":208,"system_prompt":"","index":6752}
{"question":"Write a Python program to find the optimal route for a delivery person given a set of delivery stops.","input":"Stops = [(0, 0), (1, 2), (3, 1), (3, 4)]","expected_output":"import itertools\n \ndef find_optimal_route(stops):\n # Create a list of all possible routes\n routes = list(itertools.permutations(stops))\n \n # Calculate the distance for each route\n distances = []\n for route in routes:\n total_distance = 0\n # Compute the distance from i to i+1\n for i in range(len(route) - 1):\n x1, y1 = route[i]\n x2, y2 = route[i+1]\n total_distance += ((x1-x2)**2 + (y1-y2)**2) ** 0.5\n\n distances.append(total_distance)\n \n # Return the route with the minimum distance\n min_index = distances.index(min(distances))\n return routes[min_index]\n \nstops = [(0, 0), (1, 2), (3, 1), (3, 4)]\noptimal_route = find_optimal_route(stops)\n# [(0, 0), (3, 1), (1, 2), (3, 4)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the optimal route for a delivery person given a set of delivery stops.\n\n### Input:\nStops = [(0, 0), (1, 2), (3, 1), (3, 4)]\n\n### Output:\nimport itertools\n \ndef find_optimal_route(stops):\n # Create a list of all possible routes\n routes = list(itertools.permutations(stops))\n \n # Calculate the distance for each route\n distances = []\n for route in routes:\n total_distance = 0\n # Compute the distance from i to i+1\n for i in range(len(route) - 1):\n x1, y1 = route[i]\n x2, y2 = route[i+1]\n total_distance += ((x1-x2)**2 + (y1-y2)**2) ** 0.5\n\n distances.append(total_distance)\n \n # Return the route with the minimum distance\n min_index = distances.index(min(distances))\n return routes[min_index]\n \nstops = [(0, 0), (1, 2), (3, 1), (3, 4)]\noptimal_route = find_optimal_route(stops)\n# [(0, 0), (3, 1), (1, 2), (3, 4)]","tok_input_length":287,"tok_output_length":213,"system_prompt":"","index":16341}
{"question":"Create a Python program to generate a report summarizing the results of different machine learning algorithms.","input":"The results obtained from running 5 different Machine Learning algorithms on a dataset: Logistic Regression, Linear Regression, K-Nearest Neighbors, Decision Trees, and Support Vector Machines.","expected_output":"import pandas as pd\n\n# Load the results for each algorithm\nlr = pd.read_csv('logistic_regression.csv')\nlinreg = pd.read_csv('linear_regression.csv')\nknn = pd.read_csv('knn.csv')\ndtree = pd.read_csv('dtree.csv')\nsvm = pd.read_csv('svm.csv')\n\n# Create a summary dataframe\ndata = {\n 'Algorithm': ['Logistic Regression', 'Linear Regression', 'K-Nearest Neighbors', 'Decision Trees', 'Support Vector Machines'],\n 'Accuracy': [lr['Accuracy'].mean(), linreg['Accuracy'].mean(), knn['Accuracy'].mean(), dtree['Accuracy'].mean(), svm['Accuracy'].mean()],\n 'F1-Score': [lr['F1-Score'].mean(), linreg['F1-Score'].mean(), knn['F1-Score'].mean(), dtree['F1-Score'].mean(), svm['F1-Score'].mean()]\n }\n summary = pd.DataFrame(data)\n print(summary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a report summarizing the results of different machine learning algorithms.\n\n### Input:\nThe results obtained from running 5 different Machine Learning algorithms on a dataset: Logistic Regression, Linear Regression, K-Nearest Neighbors, Decision Trees, and Support Vector Machines.\n\n### Output:\nimport pandas as pd\n\n# Load the results for each algorithm\nlr = pd.read_csv('logistic_regression.csv')\nlinreg = pd.read_csv('linear_regression.csv')\nknn = pd.read_csv('knn.csv')\ndtree = pd.read_csv('dtree.csv')\nsvm = pd.read_csv('svm.csv')\n\n# Create a summary dataframe\ndata = {\n 'Algorithm': ['Logistic Regression', 'Linear Regression', 'K-Nearest Neighbors', 'Decision Trees', 'Support Vector Machines'],\n 'Accuracy': [lr['Accuracy'].mean(), linreg['Accuracy'].mean(), knn['Accuracy'].mean(), dtree['Accuracy'].mean(), svm['Accuracy'].mean()],\n 'F1-Score': [lr['F1-Score'].mean(), linreg['F1-Score'].mean(), knn['F1-Score'].mean(), dtree['F1-Score'].mean(), svm['F1-Score'].mean()]\n }\n summary = pd.DataFrame(data)\n print(summary)","tok_input_length":288,"tok_output_length":207,"system_prompt":"","index":11812}
{"question":"Generate a Python program that fetches information from a given database table and displays it in a web page.","input":"Database Table:\n\nid | name | age\n---|------|----\n1  | Bob  | 18\n2  | Mary | 20\n3  | Carl | 19\n4  | Jane | 22","expected_output":"import sqlite3\nfrom flask import Flask, render_template\n\napp = Flask(name)\n\nconn = sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\n\n@app.route('\/')\ndef index():\n cursor.execute(\"SELECT * FROM mytable\")\n results = cursor.fetchall()\n return render_template('index.html', results=results)\n\nif name == 'main':\n app.run(debug=True)\n\n\/\/ templates\/index.html\n<html>\n <head>\n <title>Welcome to my page<\/title>\n <\/head>\n <body>\n <h1>My Database Results:<\/h1>\n <table>\n <tr>\n <th>ID<\/th>\n <th>Name<\/th>\n <th>Age<\/th>\n <\/tr>\n {% for result in results %}\n <tr>\n <td>{{ result[0] }}<\/td>\n <td>{{ result[1] }}<\/td>\n <td>{{ result[2] }}<\/td>\n <\/tr>\n {% endfor %}\n <\/table>\n <\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that fetches information from a given database table and displays it in a web page.\n\n### Input:\nDatabase Table:\n\nid | name | age\n---|------|----\n1  | Bob  | 18\n2  | Mary | 20\n3  | Carl | 19\n4  | Jane | 22\n\n### Output:\nimport sqlite3\nfrom flask import Flask, render_template\n\napp = Flask(name)\n\nconn = sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\n\n@app.route('\/')\ndef index():\n cursor.execute(\"SELECT * FROM mytable\")\n results = cursor.fetchall()\n return render_template('index.html', results=results)\n\nif name == 'main':\n app.run(debug=True)\n\n\/\/ templates\/index.html\n<html>\n <head>\n <title>Welcome to my page<\/title>\n <\/head>\n <body>\n <h1>My Database Results:<\/h1>\n <table>\n <tr>\n <th>ID<\/th>\n <th>Name<\/th>\n <th>Age<\/th>\n <\/tr>\n {% for result in results %}\n <tr>\n <td>{{ result[0] }}<\/td>\n <td>{{ result[1] }}<\/td>\n <td>{{ result[2] }}<\/td>\n <\/tr>\n {% endfor %}\n <\/table>\n <\/body>\n<\/html>","tok_input_length":289,"tok_output_length":194,"system_prompt":"","index":12087}
{"question":"Create a Django app to store and provide access to user data.","input":"Not applicable","expected_output":"# Create the project\n$ django-admin startproject myproject \n\n# Create the application\n$ cd myproject\n$ python manage.py startapp user_data\n\n# Add the app to installed apps\n# myproject\/settings.py\nINSTALLED_APPS = [\n 'user_data',\n ...\n]\n\n# Create the models\n# user_data\/models.py\nfrom django.db import models\n\nclass User(models.Model):\n name = models.CharField(max_length=100)\n email = models.EmailField()\n\nclass Data(models.Model):\n user = models.ForeignKey(User, on_delete=models.CASCADE)\n data = models.TextField()\n\n# Create the migrations\n$ python manage.py makemigrations\n$ python manage.py migrate\n\n# Create the views\n# user_data\/views.py\nfrom django.shortcuts import render\nfrom .models import User, Data\n\ndef index(request):\n users = User.objects.all()\n context = {\n  'users': users,\n }\n return render(request, 'user_data\/index.html', context)\n\ndef user_data(request, user_id):\n user = User.objects.get(id=user_id)\n data = Data.objects.filter(user=user)\n context = {\n  'user': user,\n  'data': data,\n }\n return render(request, 'user_data\/user_data.html', context)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Django app to store and provide access to user data.\n\n### Input:\nNot applicable\n\n### Output:\n# Create the project\n$ django-admin startproject myproject \n\n# Create the application\n$ cd myproject\n$ python manage.py startapp user_data\n\n# Add the app to installed apps\n# myproject\/settings.py\nINSTALLED_APPS = [\n 'user_data',\n ...\n]\n\n# Create the models\n# user_data\/models.py\nfrom django.db import models\n\nclass User(models.Model):\n name = models.CharField(max_length=100)\n email = models.EmailField()\n\nclass Data(models.Model):\n user = models.ForeignKey(User, on_delete=models.CASCADE)\n data = models.TextField()\n\n# Create the migrations\n$ python manage.py makemigrations\n$ python manage.py migrate\n\n# Create the views\n# user_data\/views.py\nfrom django.shortcuts import render\nfrom .models import User, Data\n\ndef index(request):\n users = User.objects.all()\n context = {\n  'users': users,\n }\n return render(request, 'user_data\/index.html', context)\n\ndef user_data(request, user_id):\n user = User.objects.get(id=user_id)\n data = Data.objects.filter(user=user)\n context = {\n  'user': user,\n  'data': data,\n }\n return render(request, 'user_data\/user_data.html', context)","tok_input_length":289,"tok_output_length":246,"system_prompt":"","index":6049}
{"question":"Design an algorithm in Python to sort the given list using merge sort.","input":"[4, 2, 1, 6, 7, 8, 5]","expected_output":"def merge_sort(arr):\n  if len(arr) > 1:\n    mid = len(arr) \/\/ 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    merge_sort(left)\n    merge_sort(right)\n\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n      if left[i] < right[j]:\n        arr[k] = left[i]\n        i += 1\n      else:\n        arr[k] = right[j]\n        j += 1\n      k += 1\n\n    while i < len(left):\n      arr[k] = left[i]\n      i += 1\n      k += 1\n    while j < len(right):\n      arr[k] = right[j]\n      j += 1\n      k += 1\n  \n  return arr\n\narr = [4, 2, 1, 6, 7, 8, 5]\nmerge_sort(arr)\nprint(arr) # Output [1, 2, 4, 5, 6, 7, 8]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to sort the given list using merge sort.\n\n### Input:\n[4, 2, 1, 6, 7, 8, 5]\n\n### Output:\ndef merge_sort(arr):\n  if len(arr) > 1:\n    mid = len(arr) \/\/ 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    merge_sort(left)\n    merge_sort(right)\n\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n      if left[i] < right[j]:\n        arr[k] = left[i]\n        i += 1\n      else:\n        arr[k] = right[j]\n        j += 1\n      k += 1\n\n    while i < len(left):\n      arr[k] = left[i]\n      i += 1\n      k += 1\n    while j < len(right):\n      arr[k] = right[j]\n      j += 1\n      k += 1\n  \n  return arr\n\narr = [4, 2, 1, 6, 7, 8, 5]\nmerge_sort(arr)\nprint(arr) # Output [1, 2, 4, 5, 6, 7, 8]","tok_input_length":290,"tok_output_length":228,"system_prompt":"","index":13572}
{"question":"Build a recommmendation system in Python that will recommend books to a given user based on their past reads.","input":"The user has previously read Alice in Wonderland, To Kill a Mockingbird, and Dracula.","expected_output":"import numpy as np\nimport pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n# Read in data\ndata = pd.read_csv('data.csv')\n\n# Make recommendations\nX = data.iloc[:, 2:].values\nnbrs = NearestNeighbors(n_neighbors=3).fit(X)\n\n# Test on 3 books\ntest_books = ['Alice in Wonderland', 'To Kill a Mockingbird', 'Dracula']\n\n# Find the similar books\ntest_book_index = [data[data['title'] == book_name].index[0] \n for book_name in test_books]\n\n# Get distances and indices of the similar books\ndistances, indices = nbrs.kneighbors([X[test_book_index]])\n\n# Display the recommended books\nprint('Recommendations for: {0}'.format(test_books))\nfor title, idx in zip(data.iloc[indices[0][1:]]['title'], indices[0][1:]):\n print('{0}: {1}, with a distance of {2}'.format(\n title, data.iloc[idx]['author'], distances[0][1:]\n ))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a recommmendation system in Python that will recommend books to a given user based on their past reads.\n\n### Input:\nThe user has previously read Alice in Wonderland, To Kill a Mockingbird, and Dracula.\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n# Read in data\ndata = pd.read_csv('data.csv')\n\n# Make recommendations\nX = data.iloc[:, 2:].values\nnbrs = NearestNeighbors(n_neighbors=3).fit(X)\n\n# Test on 3 books\ntest_books = ['Alice in Wonderland', 'To Kill a Mockingbird', 'Dracula']\n\n# Find the similar books\ntest_book_index = [data[data['title'] == book_name].index[0] \n for book_name in test_books]\n\n# Get distances and indices of the similar books\ndistances, indices = nbrs.kneighbors([X[test_book_index]])\n\n# Display the recommended books\nprint('Recommendations for: {0}'.format(test_books))\nfor title, idx in zip(data.iloc[indices[0][1:]]['title'], indices[0][1:]):\n print('{0}: {1}, with a distance of {2}'.format(\n title, data.iloc[idx]['author'], distances[0][1:]\n ))","tok_input_length":291,"tok_output_length":221,"system_prompt":"","index":10312}
{"question":"Create a Python script to divide a list of numbers into two sublists so that the sum of numbers in each sublist is roughly equal.","input":"[10, 2, 3, 8, 7, 6, 5, 9, 4, 1]","expected_output":"list_nums = [10, 2, 3, 8, 7, 6, 5, 9, 4, 1];\n\n# find the mid point of the list\nlist_len = len(list_nums);\nmid = list_len\/\/2\n\n# split list into two sublists\nlist_1 = list_nums[:mid]\nlist_2 = list_nums[mid:]\n\n# sum up all the numbers in each sublist\nsum_1 = 0\nsum_2 = 0\n\nfor num in list_1:\n sum_1 += num\n\nfor num in list_2:\n sum_2 += num\n\n# check if the sum of each of the two sublists is roughly equal\nif abs(sum_1 - sum_2) < 10:\n print(f'The lists {list_1} and {list_2} have a sum difference of {abs(sum_1 - sum_2)}')\n\nelse:\n print('The two sublists are not equal in sum')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to divide a list of numbers into two sublists so that the sum of numbers in each sublist is roughly equal.\n\n### Input:\n[10, 2, 3, 8, 7, 6, 5, 9, 4, 1]\n\n### Output:\nlist_nums = [10, 2, 3, 8, 7, 6, 5, 9, 4, 1];\n\n# find the mid point of the list\nlist_len = len(list_nums);\nmid = list_len\/\/2\n\n# split list into two sublists\nlist_1 = list_nums[:mid]\nlist_2 = list_nums[mid:]\n\n# sum up all the numbers in each sublist\nsum_1 = 0\nsum_2 = 0\n\nfor num in list_1:\n sum_1 += num\n\nfor num in list_2:\n sum_2 += num\n\n# check if the sum of each of the two sublists is roughly equal\nif abs(sum_1 - sum_2) < 10:\n print(f'The lists {list_1} and {list_2} have a sum difference of {abs(sum_1 - sum_2)}')\n\nelse:\n print('The two sublists are not equal in sum')","tok_input_length":292,"tok_output_length":208,"system_prompt":"","index":5485}
{"question":"Write a Python function to detect patterns in a sequence of numbers.","input":"sequence = [8, 5, 6, 4, 9, 3, 7, 8, 5, 6, 4, 9]","expected_output":"def detect_patterns(sequence):\n distinct_numbers = set(sequence)  # Distinct sequence numbers\n \n # Initialize variables\n count_flag = 0  # Number of instances for a certain consecutive sequence\n max_seq_len = 0  # Max length of a consecutive sequence\n max_seq_number = 0  # The number which had the max consecutive sequence\n \n # Loop through each distinct number to track its consecutive sequence \n for number in distinct_numbers:\n     # Initialize flag variables\n     current_count_flag = 0\n     current_seq_len = 0\n     \n     # Begin tracking the number's consecutive sequence \n     for num in sequence:\n         if number == num:\n             current_count_flag += 1\n             current_seq_len += 1\n             # Check if current count flag is greater than max count flag\n             if current_count_flag > count_flag: \n                 count_flag = current_count_flag\n                 max_seq_len = current_seq_len\n                 max_seq_number = number\n \n # Return the maximum sequence length and corresponding number \n return max_seq_len, max_seq_number","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to detect patterns in a sequence of numbers.\n\n### Input:\nsequence = [8, 5, 6, 4, 9, 3, 7, 8, 5, 6, 4, 9]\n\n### Output:\ndef detect_patterns(sequence):\n distinct_numbers = set(sequence)  # Distinct sequence numbers\n \n # Initialize variables\n count_flag = 0  # Number of instances for a certain consecutive sequence\n max_seq_len = 0  # Max length of a consecutive sequence\n max_seq_number = 0  # The number which had the max consecutive sequence\n \n # Loop through each distinct number to track its consecutive sequence \n for number in distinct_numbers:\n     # Initialize flag variables\n     current_count_flag = 0\n     current_seq_len = 0\n     \n     # Begin tracking the number's consecutive sequence \n     for num in sequence:\n         if number == num:\n             current_count_flag += 1\n             current_seq_len += 1\n             # Check if current count flag is greater than max count flag\n             if current_count_flag > count_flag: \n                 count_flag = current_count_flag\n                 max_seq_len = current_seq_len\n                 max_seq_number = number\n \n # Return the maximum sequence length and corresponding number \n return max_seq_len, max_seq_number","tok_input_length":293,"tok_output_length":215,"system_prompt":"","index":6747}
{"question":"Optimize an existing Bitcoin mining algorithm written in Python to use multiple threads so the program runs faster.","input":"import threading\nimport time\n\ndef mining(difficulty, start):\n    nonce = start\n\n    # Main mining loop\n    while True:\n        hash = generate_hash(nonce)\n \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n \n        nonce = nonce + 1","expected_output":"import threading\nimport time\n\ndef mining(difficulty, start):\n    threads = []\n    nonce = start\n\n    # Create threads\n    for _ in range(10):\n        t = threading.Thread(target=mining_thread,\n        args=(difficulty, nonce))\n        threads.append(t)\n        nonce = nonce + 100\n\n    # Start threads\n    for thread in threads:\n        thread.start()\n  \n    # Join threads\n    for thread in threads:\n        thread.join()\n\n    # Main mining loop\ndef mining_thread(difficulty, start):\n    nonce = start\n    while True:\n        hash = generate_hash(nonce)\n  \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n  \n        nonce = nonce + 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Bitcoin mining algorithm written in Python to use multiple threads so the program runs faster.\n\n### Input:\nimport threading\nimport time\n\ndef mining(difficulty, start):\n    nonce = start\n\n    # Main mining loop\n    while True:\n        hash = generate_hash(nonce)\n \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n \n        nonce = nonce + 1\n\n### Output:\nimport threading\nimport time\n\ndef mining(difficulty, start):\n    threads = []\n    nonce = start\n\n    # Create threads\n    for _ in range(10):\n        t = threading.Thread(target=mining_thread,\n        args=(difficulty, nonce))\n        threads.append(t)\n        nonce = nonce + 100\n\n    # Start threads\n    for thread in threads:\n        thread.start()\n  \n    # Join threads\n    for thread in threads:\n        thread.join()\n\n    # Main mining loop\ndef mining_thread(difficulty, start):\n    nonce = start\n    while True:\n        hash = generate_hash(nonce)\n  \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n  \n        nonce = nonce + 1","tok_input_length":294,"tok_output_length":169,"system_prompt":"","index":727}
{"question":"Produce a Huffman tree visualisation in Python.","input":"symbols = ['A', 'B', 'C', 'D', 'E', 'F']\nfrequences = [45, 13, 12, 16, 9, 5]","expected_output":"from collections import Counter\nimport pydot\nfrom collections import defaultdict \nfrom HuffmanTree import HuffmanTree\n\n# create a Huffman tree\nsymbols = ['A', 'B', 'C', 'D', 'E', 'F']\nfrequences = [45, 13, 12, 16, 9, 5]\nfrequency = Counter(zip(symbols, frequencies))\nht = HuffmanTree(frequency)\n\n# draw the tree\nnodes = defaultdict(list)\nedges = []\nfor node in ht:\n    label =  '%s\\n%s' % (node.character, node.frequency)\n    nodes[node.parent].append((node.identifier, label))\n    edges.append((node.parent, node.identifier))\n\ng = pydot.Dot(graph_type='graph')\nfor k, v in nodes.items():\n    for i, j in v:\n        n = pydot.Node(i, label=j)\n        g.add_node(n)\nfor e in edges:\n    g.add_edge(pydot.Edge(e[0], e[1]))\ng.write_png('HuffmanTree.png')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Huffman tree visualisation in Python.\n\n### Input:\nsymbols = ['A', 'B', 'C', 'D', 'E', 'F']\nfrequences = [45, 13, 12, 16, 9, 5]\n\n### Output:\nfrom collections import Counter\nimport pydot\nfrom collections import defaultdict \nfrom HuffmanTree import HuffmanTree\n\n# create a Huffman tree\nsymbols = ['A', 'B', 'C', 'D', 'E', 'F']\nfrequences = [45, 13, 12, 16, 9, 5]\nfrequency = Counter(zip(symbols, frequencies))\nht = HuffmanTree(frequency)\n\n# draw the tree\nnodes = defaultdict(list)\nedges = []\nfor node in ht:\n    label =  '%s\\n%s' % (node.character, node.frequency)\n    nodes[node.parent].append((node.identifier, label))\n    edges.append((node.parent, node.identifier))\n\ng = pydot.Dot(graph_type='graph')\nfor k, v in nodes.items():\n    for i, j in v:\n        n = pydot.Node(i, label=j)\n        g.add_node(n)\nfor e in edges:\n    g.add_edge(pydot.Edge(e[0], e[1]))\ng.write_png('HuffmanTree.png')","tok_input_length":295,"tok_output_length":216,"system_prompt":"","index":17064}
{"question":"Implement gradient descent in a Python program.","input":"","expected_output":"# Define function to compute the gradient, given a set of weights\ndef compute_gradient(weights):\n    \n    # Compute the gradient with respect to each weight in the weight vector\n    gradients = []\n    for w in weights:\n        gradients.append(2 * w)\n    \n    # Return the gradient vector\n    return gradients\n\n# Define a function to compute the cost, given a set of weights\ndef compute_cost(weights):\n    \n    # Compute the cost with given weights\n    cost = 0\n    for w in weights:\n        cost += w**2\n    \n    # Return the cost\n    return cost\n\n# Gradient descent loop\nweights = np.array([1, 2, 3]) # Initialize weights\nlearning_rate = 0.01 # Set learning rate\n\nfor i in range(1000): # Iterate for 1000 steps\n    gradients = compute_gradient(weights) # Compute gradients\n    weights -= learning_rate * np.array(gradients) # Do gradient descent step\n    cost = compute_cost(weights) # Compute cost\n    # Print cost every 100 steps \n    if i % 100 == 0:\n        print(\"Cost at iteration %d: %f\" % (i, cost))\n\n# Print the final weights\nprint(weights)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement gradient descent in a Python program.\n\n### Input:\n\n\n### Output:\n# Define function to compute the gradient, given a set of weights\ndef compute_gradient(weights):\n    \n    # Compute the gradient with respect to each weight in the weight vector\n    gradients = []\n    for w in weights:\n        gradients.append(2 * w)\n    \n    # Return the gradient vector\n    return gradients\n\n# Define a function to compute the cost, given a set of weights\ndef compute_cost(weights):\n    \n    # Compute the cost with given weights\n    cost = 0\n    for w in weights:\n        cost += w**2\n    \n    # Return the cost\n    return cost\n\n# Gradient descent loop\nweights = np.array([1, 2, 3]) # Initialize weights\nlearning_rate = 0.01 # Set learning rate\n\nfor i in range(1000): # Iterate for 1000 steps\n    gradients = compute_gradient(weights) # Compute gradients\n    weights -= learning_rate * np.array(gradients) # Do gradient descent step\n    cost = compute_cost(weights) # Compute cost\n    # Print cost every 100 steps \n    if i % 100 == 0:\n        print(\"Cost at iteration %d: %f\" % (i, cost))\n\n# Print the final weights\nprint(weights)","tok_input_length":295,"tok_output_length":260,"system_prompt":"","index":2396}
{"question":"Create a RESTful API in Python using Flask that can search a dataset of books by title or author.","input":"[\n {\n title: \"The Catcher in the Rye\",\n author: \"JD Salinger\",\n },\n {\n title: \"Lord of the Flies\",\n author: \"William Golding\",\n },\n {\n title: \"1984\",\n author: \"George Orwell\",\n }\n]","expected_output":"from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nbooks = [\n {\n \"title\": \"The Catcher in the Rye\",\n \"author\": \"JD Salinger\"\n },\n {\n \"title\": \"Lord of the Flies\",\n \"author\": \"William Golding\"\n },\n {\n \"title\": \"1984\",\n \"author\": \"George Orwell\"\n }\n]\n\n@app.route('\/books', methods=['GET'])\ndef get_books():\n args = request.args\n title = args.get('title')\n author = args.get('author')\n\n result = []\n\n for book in books:\n if title and author:\n if book['title'] == title and book['author'] == author:\n result.append(book)\n elif title:\n if book['title'] == title:\n result.append(book)\n elif author:\n if book['author'] == author:\n result.append(book)\n else:\n result.append(book)\n\n return jsonify(result)\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a RESTful API in Python using Flask that can search a dataset of books by title or author.\n\n### Input:\n[\n {\n title: \"The Catcher in the Rye\",\n author: \"JD Salinger\",\n },\n {\n title: \"Lord of the Flies\",\n author: \"William Golding\",\n },\n {\n title: \"1984\",\n author: \"George Orwell\",\n }\n]\n\n### Output:\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nbooks = [\n {\n \"title\": \"The Catcher in the Rye\",\n \"author\": \"JD Salinger\"\n },\n {\n \"title\": \"Lord of the Flies\",\n \"author\": \"William Golding\"\n },\n {\n \"title\": \"1984\",\n \"author\": \"George Orwell\"\n }\n]\n\n@app.route('\/books', methods=['GET'])\ndef get_books():\n args = request.args\n title = args.get('title')\n author = args.get('author')\n\n result = []\n\n for book in books:\n if title and author:\n if book['title'] == title and book['author'] == author:\n result.append(book)\n elif title:\n if book['title'] == title:\n result.append(book)\n elif author:\n if book['author'] == author:\n result.append(book)\n else:\n result.append(book)\n\n return jsonify(result)\n\nif __name__ == '__main__':\n app.run(debug=True)","tok_input_length":297,"tok_output_length":195,"system_prompt":"","index":3115}
{"question":"Design a Python program to solve the longest palindromic substring problem.","input":"\"babdfeffe\"","expected_output":"def longestPalindromeSubstring(str):\n\tcurrLength = 1\n\tmaxLength = 1\n\tstart = 0\n\tlen = len(str)\n\n\tfor i in range(1, len):\n\t\t# even length palindromes\n\t\tlow = i - 1\n\t\thigh = i\n\t\twhile (low >= 0 and high < len and str[low] == str[high]):\n\t\t\tif (high - low + 1 > currLength):\n\t\t\t\tstart = low\n\t\t\t\tcurrLength = high - low + 1\n\t\t\tlow -= 1\n\t\t\thigh += 1\n\n\t\t# odd length palindromes\n\t\tlow = i - 1\n\t\thigh = i + 1\n\t\twhile (low >= 0 and high < len and str[low] == str[high]):\n\t\t\tif (high - low + 1 > currLength):\n\t\t\t\tstart = low\n\t\t\t\tcurrLength = high - low + 1\n\t\t\tlow -= 1\n\t\t\thigh += 1\n\n\tif (currLength > maxLength):\n\t\tmaxLength = currLength\n\n\tprint(\"Longest palindrome substring is:\")\n\tprint(str[start:start + maxLength])\n\treturn maxLength","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to solve the longest palindromic substring problem.\n\n### Input:\n\"babdfeffe\"\n\n### Output:\ndef longestPalindromeSubstring(str):\n\tcurrLength = 1\n\tmaxLength = 1\n\tstart = 0\n\tlen = len(str)\n\n\tfor i in range(1, len):\n\t\t# even length palindromes\n\t\tlow = i - 1\n\t\thigh = i\n\t\twhile (low >= 0 and high < len and str[low] == str[high]):\n\t\t\tif (high - low + 1 > currLength):\n\t\t\t\tstart = low\n\t\t\t\tcurrLength = high - low + 1\n\t\t\tlow -= 1\n\t\t\thigh += 1\n\n\t\t# odd length palindromes\n\t\tlow = i - 1\n\t\thigh = i + 1\n\t\twhile (low >= 0 and high < len and str[low] == str[high]):\n\t\t\tif (high - low + 1 > currLength):\n\t\t\t\tstart = low\n\t\t\t\tcurrLength = high - low + 1\n\t\t\tlow -= 1\n\t\t\thigh += 1\n\n\tif (currLength > maxLength):\n\t\tmaxLength = currLength\n\n\tprint(\"Longest palindrome substring is:\")\n\tprint(str[start:start + maxLength])\n\treturn maxLength","tok_input_length":298,"tok_output_length":250,"system_prompt":"","index":7873}
{"question":"Suppose you have a dictionary of books with each containing a title and a list of page numbers that refer to the page numbers of the book. Write a Python program to create a new dictionary with only the page numbers as the keys, and their corresponding titles as the values.","input":"book_dict = {\n    \"The Lord of the Rings\": [1, 32, 54, 75], \n    \"Harry Potter and the Sorcerer's Stone\": [1, 26, 92, 132], \n    \"To Kill a Mockingbird\": [1, 15, 52, 101] \n}","expected_output":"page_dict = {\n    1: [\"The Lord of the Rings\", \"Harry Potter and the Sorcerer's Stone\", \"To Kill a Mockingbird\"],\n    32: [\"The Lord of the Rings\"],\n    54: [\"The Lord of the Rings\"],\n    75: [\"The Lord of the Rings\"],\n    26: [\"Harry Potter and the Sorcerer's Stone\"],\n    92: [\"Harry Potter and the Sorcerer's Stone\"],\n    132: [\"Harry Potter and the Sorcerer's Stone\"],\n    15: [\"To Kill a Mockingbird\"],\n    52: [\"To Kill a Mockingbird\"],\n    101: [\"To Kill a Mockingbird\"]\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuppose you have a dictionary of books with each containing a title and a list of page numbers that refer to the page numbers of the book. Write a Python program to create a new dictionary with only the page numbers as the keys, and their corresponding titles as the values.\n\n### Input:\nbook_dict = {\n    \"The Lord of the Rings\": [1, 32, 54, 75], \n    \"Harry Potter and the Sorcerer's Stone\": [1, 26, 92, 132], \n    \"To Kill a Mockingbird\": [1, 15, 52, 101] \n}\n\n### Output:\npage_dict = {\n    1: [\"The Lord of the Rings\", \"Harry Potter and the Sorcerer's Stone\", \"To Kill a Mockingbird\"],\n    32: [\"The Lord of the Rings\"],\n    54: [\"The Lord of the Rings\"],\n    75: [\"The Lord of the Rings\"],\n    26: [\"Harry Potter and the Sorcerer's Stone\"],\n    92: [\"Harry Potter and the Sorcerer's Stone\"],\n    132: [\"Harry Potter and the Sorcerer's Stone\"],\n    15: [\"To Kill a Mockingbird\"],\n    52: [\"To Kill a Mockingbird\"],\n    101: [\"To Kill a Mockingbird\"]\n}","tok_input_length":300,"tok_output_length":146,"system_prompt":"","index":7075}
{"question":"Create a SocketServer that can serve multiple clients in Python.","input":"","expected_output":"import socket\nimport threading\n\nclass SocketServer:\n    # constructor\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n\n        # create socket\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        # bind socket\n        self.sock.bind((self.host, self.port))\n\n    # accept incoming connections\n    def start(self):\n        self.sock.listen(5)\n        print(\"Server is listening...\")\n\n        while True:\n            conn, addr = self.sock.accept()\n            threading.Thread(target=self.handle_clients, args=(conn, addr)).start()\n\n    # handlerClient method to handle multiple clients\n    def handle_clients(self, conn, addr):\n        print(\"Connection established with:\" + str(addr))\n        conn.send(\"Welcome to SocketServer\".encode())\n        \n        while True:\n            data = conn.recv(4096).decode()\n            # Do something with received data\n            if not data:\n                break\n            conn.send(data.encode())\n        \n        conn.close()\n        print(\"Connection closed with:\" + str(addr))\n\nhost, port = \"localhost\", 8080 \nSocketServer(host, port).start()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a SocketServer that can serve multiple clients in Python.\n\n### Input:\n\n\n### Output:\nimport socket\nimport threading\n\nclass SocketServer:\n    # constructor\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n\n        # create socket\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        # bind socket\n        self.sock.bind((self.host, self.port))\n\n    # accept incoming connections\n    def start(self):\n        self.sock.listen(5)\n        print(\"Server is listening...\")\n\n        while True:\n            conn, addr = self.sock.accept()\n            threading.Thread(target=self.handle_clients, args=(conn, addr)).start()\n\n    # handlerClient method to handle multiple clients\n    def handle_clients(self, conn, addr):\n        print(\"Connection established with:\" + str(addr))\n        conn.send(\"Welcome to SocketServer\".encode())\n        \n        while True:\n            data = conn.recv(4096).decode()\n            # Do something with received data\n            if not data:\n                break\n            conn.send(data.encode())\n        \n        conn.close()\n        print(\"Connection closed with:\" + str(addr))\n\nhost, port = \"localhost\", 8080 \nSocketServer(host, port).start()","tok_input_length":300,"tok_output_length":261,"system_prompt":"","index":6302}
{"question":"Write a Python program to compare two strings and return the longest common substrings.","input":"String 1: abcde\nString 2: abcxyz","expected_output":"def longest_common_substring(str1, str2): \n    # a 2D array to store the comparison \n    comparison = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)] \n    \n    result = \"\" # To store the result \n    print(comparison)\n    # iterate through the 2D array comparing each character \n    for i in range(1, len(str1) + 1): \n        for j in range(1, len(str2) + 1): \n            # check if the characters match \n            if str1[i-1] == str2[j-1]: \n                comparison[i][j] = comparison[i - 1][j - 1] + 1\n                # update the result if a longer common substring is found \n                if comparison[i][j] > len(result): \n                    result = str1[i - comparison[i][j]:i] \n            else: \n                comparison[i][j] = 0\n  \n    return result \n\ncommon_str = longest_common_substring(str1, str2)  \nprint(\"The longest common substring is: \" + common_str)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compare two strings and return the longest common substrings.\n\n### Input:\nString 1: abcde\nString 2: abcxyz\n\n### Output:\ndef longest_common_substring(str1, str2): \n    # a 2D array to store the comparison \n    comparison = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)] \n    \n    result = \"\" # To store the result \n    print(comparison)\n    # iterate through the 2D array comparing each character \n    for i in range(1, len(str1) + 1): \n        for j in range(1, len(str2) + 1): \n            # check if the characters match \n            if str1[i-1] == str2[j-1]: \n                comparison[i][j] = comparison[i - 1][j - 1] + 1\n                # update the result if a longer common substring is found \n                if comparison[i][j] > len(result): \n                    result = str1[i - comparison[i][j]:i] \n            else: \n                comparison[i][j] = 0\n  \n    return result \n\ncommon_str = longest_common_substring(str1, str2)  \nprint(\"The longest common substring is: \" + common_str)","tok_input_length":301,"tok_output_length":244,"system_prompt":"","index":4868}
{"question":"Write a Python script to process user input and generate a response according to the user's query.","input":"Sample queries:\n\n\"Give me the weather in New York\"\n\n\"What is the population of China?\"","expected_output":"# Libraries\nimport requests\nimport json\n\n# Get user input\nuser_input = input('Please enter your query: ')\n\n# Process user input\nif 'weather' in user_input:\n # Get weather data\n city = user_input.split()[-1] # extract city from user query \n r = requests.get(f'http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={city}&units=metric&appid=YOUR_API_KEY')\n data = json.loads(r.text) \n\n# Output response\n if data['cod'] == '404':\n print('City not found!')\n else:\n print(f'The temperature in {city} is: {data[\"main\"][\"temp\"]} \u00b0C')\n\nelif 'population' in user_input:\n # Get population data\n country = user_input.split()[-1] # extract country from user query\n r = requests.get(f'https:\/\/restcountries.eu\/rest\/v2\/name\/{country}')\n data = json.loads(r.text)[0] # extract population from API response\n\n# Output response\n print(f'The population of {country} is: {data[\"population\"]}')\n\nelse:\n print(\"I'm sorry, I don't understand.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to process user input and generate a response according to the user's query.\n\n### Input:\nSample queries:\n\n\"Give me the weather in New York\"\n\n\"What is the population of China?\"\n\n### Output:\n# Libraries\nimport requests\nimport json\n\n# Get user input\nuser_input = input('Please enter your query: ')\n\n# Process user input\nif 'weather' in user_input:\n # Get weather data\n city = user_input.split()[-1] # extract city from user query \n r = requests.get(f'http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={city}&units=metric&appid=YOUR_API_KEY')\n data = json.loads(r.text) \n\n# Output response\n if data['cod'] == '404':\n print('City not found!')\n else:\n print(f'The temperature in {city} is: {data[\"main\"][\"temp\"]} \u00b0C')\n\nelif 'population' in user_input:\n # Get population data\n country = user_input.split()[-1] # extract country from user query\n r = requests.get(f'https:\/\/restcountries.eu\/rest\/v2\/name\/{country}')\n data = json.loads(r.text)[0] # extract population from API response\n\n# Output response\n print(f'The population of {country} is: {data[\"population\"]}')\n\nelse:\n print(\"I'm sorry, I don't understand.\")","tok_input_length":302,"tok_output_length":237,"system_prompt":"","index":1260}
{"question":"Edit an existing Python script for a text-based adventure game. The script should include additional scenarios for the game as well as functions for player movement and interaction.","input":"def move_player(new_location):\n player_location = new_location\n    print(\"You moved to the \" + player_location)","expected_output":"def move_player(new_location):\n player_location = new_location\n if new_location == \"forest\":\n  print(\"You enter the forest and find yourself surrounded by tall pine trees.\")\n elif new_location == \"cave\":\n  print(\"You take a deep breath and enter the dark cave. You hear mysterious noises as you walk into the unknown.\")\n elif new_location == \"river\":\n  print(\"You come across a small babbling brook. The water looks cool and refreshing.\")\n else:\n  print(\"You moved to the \" + player_location)\n\ndef interact():\n print(\"You can do a few things here. What do you want to do?\")\n print(\"1. Interact with the environment\")\n print(\"2. Collect items\")\n print(\"3. Talk to NPCs\")\n\nchoice = input(\"What would you like to do? \")\nif choice == \"1\":\n print(\"You interact with the environment and find some useful items.\")\nelif choice == \"2\":\n print(\"You collect some useful items from the environment.\")\nelif choice == \"3\":\n print(\"You have a short conversation with a nearby NPC.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit an existing Python script for a text-based adventure game. The script should include additional scenarios for the game as well as functions for player movement and interaction.\n\n### Input:\ndef move_player(new_location):\n player_location = new_location\n    print(\"You moved to the \" + player_location)\n\n### Output:\ndef move_player(new_location):\n player_location = new_location\n if new_location == \"forest\":\n  print(\"You enter the forest and find yourself surrounded by tall pine trees.\")\n elif new_location == \"cave\":\n  print(\"You take a deep breath and enter the dark cave. You hear mysterious noises as you walk into the unknown.\")\n elif new_location == \"river\":\n  print(\"You come across a small babbling brook. The water looks cool and refreshing.\")\n else:\n  print(\"You moved to the \" + player_location)\n\ndef interact():\n print(\"You can do a few things here. What do you want to do?\")\n print(\"1. Interact with the environment\")\n print(\"2. Collect items\")\n print(\"3. Talk to NPCs\")\n\nchoice = input(\"What would you like to do? \")\nif choice == \"1\":\n print(\"You interact with the environment and find some useful items.\")\nelif choice == \"2\":\n print(\"You collect some useful items from the environment.\")\nelif choice == \"3\":\n print(\"You have a short conversation with a nearby NPC.\")","tok_input_length":303,"tok_output_length":221,"system_prompt":"","index":18462}
{"question":"Create a program to merge two sorted arrays in Python.","input":"[3, 5, 7], [1, 2, 4]","expected_output":"def mergeSortedArrays(arr1, arr2):\n    l1 = len(arr1)\n    l2 = len(arr2)\n    l = l1 + l2\n    arr = [0] * l\n\n    i = 0\n    j = 0\n    k = 0\n\n    while (i < l1 and j < l2):\n        if (arr1[i] < arr2[j]):\n            arr[k] = arr1[i]\n            k = k + 1\n            i = i + 1\n        else:\n            arr[k] = arr2[j]\n            k = k + 1\n            j = j + 1\n\n    while (i < l1):\n        arr[k] = arr1[i]\n        k = k + 1\n        i = i + 1\n\n    while (j < l2):\n        arr[k] = arr2[j]\n        k = k + 1\n        j = j + 1\n\n    return arr\n\narr1 = [3, 5, 7] \narr2 = [1, 2, 4] \n\nprint(mergeSortedArrays(arr1, arr2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to merge two sorted arrays in Python.\n\n### Input:\n[3, 5, 7], [1, 2, 4]\n\n### Output:\ndef mergeSortedArrays(arr1, arr2):\n    l1 = len(arr1)\n    l2 = len(arr2)\n    l = l1 + l2\n    arr = [0] * l\n\n    i = 0\n    j = 0\n    k = 0\n\n    while (i < l1 and j < l2):\n        if (arr1[i] < arr2[j]):\n            arr[k] = arr1[i]\n            k = k + 1\n            i = i + 1\n        else:\n            arr[k] = arr2[j]\n            k = k + 1\n            j = j + 1\n\n    while (i < l1):\n        arr[k] = arr1[i]\n        k = k + 1\n        i = i + 1\n\n    while (j < l2):\n        arr[k] = arr2[j]\n        k = k + 1\n        j = j + 1\n\n    return arr\n\narr1 = [3, 5, 7] \narr2 = [1, 2, 4] \n\nprint(mergeSortedArrays(arr1, arr2))","tok_input_length":304,"tok_output_length":248,"system_prompt":"","index":12720}
{"question":"Build a tree structure for an online course program using HTML, CSS and JavaScript.","input":"","expected_output":"<html>\n  <head>\n    <title>Course Tree<\/title>\n    <style>\n      ul {\n        list-style: none;\n      }\n    <\/style>\n  <\/head>\n  <body>\n    <ul>\n      <li>Programming\n        <ul>\n          <li>Python\n            <ul>\n              <li>Basics<\/li>\n              <li>Data Structures<\/li>\n              <li>Advanced Topics<\/li>\n            <\/ul>\n          <\/li>\n          <li>Javascript\n            <ul>\n              <li>Basics<\/li>\n              <li>Object Oriented Programming<\/li>\n            <\/ul>\n          <\/li>\n        <\/ul>\n      <\/li>\n      <li>Design \n        <ul>\n          <li>UI\/UX Design\n            <ul>\n              <li>Wireframing<\/li>\n              <li>Prototyping<\/li>\n              <li>Visual Design<\/li>\n            <\/ul>\n          <\/li>\n          <li>Graphic Design\n            <ul>\n              <li>Logo Design<\/li>\n              <li>Illustration<\/li>\n            <\/ul>\n          <\/li>\n        <\/ul>\n      <\/li>\n    <\/ul>\n  <\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a tree structure for an online course program using HTML, CSS and JavaScript.\n\n### Input:\n\n\n### Output:\n<html>\n  <head>\n    <title>Course Tree<\/title>\n    <style>\n      ul {\n        list-style: none;\n      }\n    <\/style>\n  <\/head>\n  <body>\n    <ul>\n      <li>Programming\n        <ul>\n          <li>Python\n            <ul>\n              <li>Basics<\/li>\n              <li>Data Structures<\/li>\n              <li>Advanced Topics<\/li>\n            <\/ul>\n          <\/li>\n          <li>Javascript\n            <ul>\n              <li>Basics<\/li>\n              <li>Object Oriented Programming<\/li>\n            <\/ul>\n          <\/li>\n        <\/ul>\n      <\/li>\n      <li>Design \n        <ul>\n          <li>UI\/UX Design\n            <ul>\n              <li>Wireframing<\/li>\n              <li>Prototyping<\/li>\n              <li>Visual Design<\/li>\n            <\/ul>\n          <\/li>\n          <li>Graphic Design\n            <ul>\n              <li>Logo Design<\/li>\n              <li>Illustration<\/li>\n            <\/ul>\n          <\/li>\n        <\/ul>\n      <\/li>\n    <\/ul>\n  <\/body>\n<\/html>","tok_input_length":305,"tok_output_length":262,"system_prompt":"","index":17736}
{"question":"Create an AI model in Python to classify whether a given text is in English or not.","input":"Not applicable","expected_output":"import pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the datasets\ndf_en = pd.read_csv('english.csv')\ndf_non_en = pd.read_csv('non_english.csv')\n\n# Encode labels\nle = preprocessing.LabelEncoder()\nle.fit(['en', 'non_en'])\ny_en = le.transform(df_en['language'])\ny_non_en = le.transform(df_non_en['language'])\n\n# Vectorize text\nvectorizer = CountVectorizer()\nX_en = vectorizer.fit_transform(df_en.text)\nX_non_en = vectorizer.fit_transform(df_non_en.text)\n\n# Split the data into train\/test sets\nX_train, X_test, y_train, y_test = train_test_split(\n X_en.toarray() + X_non_en.toarray(),\n y_en.tolist() + y_non_en.tolist(),\n test_size=0.25,\nrandom_state=0,\n)\n\n# Train the model\nclf = MultinomialNB().fit(X_train, y_train)\n\n# Evaluate the model\npredicted = clf.predict(X_test)\nprint(\"Classification report: \n %s\" % (metrics.classification_report(y_test, predicted)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI model in Python to classify whether a given text is in English or not.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the datasets\ndf_en = pd.read_csv('english.csv')\ndf_non_en = pd.read_csv('non_english.csv')\n\n# Encode labels\nle = preprocessing.LabelEncoder()\nle.fit(['en', 'non_en'])\ny_en = le.transform(df_en['language'])\ny_non_en = le.transform(df_non_en['language'])\n\n# Vectorize text\nvectorizer = CountVectorizer()\nX_en = vectorizer.fit_transform(df_en.text)\nX_non_en = vectorizer.fit_transform(df_non_en.text)\n\n# Split the data into train\/test sets\nX_train, X_test, y_train, y_test = train_test_split(\n X_en.toarray() + X_non_en.toarray(),\n y_en.tolist() + y_non_en.tolist(),\n test_size=0.25,\nrandom_state=0,\n)\n\n# Train the model\nclf = MultinomialNB().fit(X_train, y_train)\n\n# Evaluate the model\npredicted = clf.predict(X_test)\nprint(\"Classification report: \n %s\" % (metrics.classification_report(y_test, predicted)))","tok_input_length":306,"tok_output_length":258,"system_prompt":"","index":11306}
{"question":"Implement an AI-driven chatbot that can answer questions about programming languages.","input":"Not applicable","expected_output":"import taiko\n\n# Define the intents\nintents = {\n    'greeting': [\"Hi, I'm here to answer any questions you have about programming languages.\"],\n    'python': [\"Python is a high-level programming language, often used for creating dynamic web applications and data science.\"],\n    'javascript': [\"JavaScript is a scripting language for browsers used for creating dynamic web applications.\"],\n    'java': [\"Java is a general-purpose, object-oriented programming language often used for creating large-scale enterprise applications.\"]\n}\n\n# Define a function to check if an intent is present\ndef check_intent(message):\n    for intent, phrases in intents.items():\n        for phrase in phrases:\n            if phrase.lower() in message.lower():\n                return intent\n    return None\n\n# Initialize the Taiko bot\nbot = taiko.Bot()\nbot.set_greeting_message(\"Hello, I'm a chatbot that can answer questions about programming languages! What do you want to know about?\")\n\n# Set the response handler\n@bot.handle\ndef handle_message(message):\n    intent = check_intent(message)\n    if intent in intents:\n        return intents[intent]\n    else:\n        return \"I'm sorry, I didn't understand that. Could you please rephrase your question?\"\n\n# Run the bot\nbot.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an AI-driven chatbot that can answer questions about programming languages.\n\n### Input:\nNot applicable\n\n### Output:\nimport taiko\n\n# Define the intents\nintents = {\n    'greeting': [\"Hi, I'm here to answer any questions you have about programming languages.\"],\n    'python': [\"Python is a high-level programming language, often used for creating dynamic web applications and data science.\"],\n    'javascript': [\"JavaScript is a scripting language for browsers used for creating dynamic web applications.\"],\n    'java': [\"Java is a general-purpose, object-oriented programming language often used for creating large-scale enterprise applications.\"]\n}\n\n# Define a function to check if an intent is present\ndef check_intent(message):\n    for intent, phrases in intents.items():\n        for phrase in phrases:\n            if phrase.lower() in message.lower():\n                return intent\n    return None\n\n# Initialize the Taiko bot\nbot = taiko.Bot()\nbot.set_greeting_message(\"Hello, I'm a chatbot that can answer questions about programming languages! What do you want to know about?\")\n\n# Set the response handler\n@bot.handle\ndef handle_message(message):\n    intent = check_intent(message)\n    if intent in intents:\n        return intents[intent]\n    else:\n        return \"I'm sorry, I didn't understand that. Could you please rephrase your question?\"\n\n# Run the bot\nbot.run()","tok_input_length":308,"tok_output_length":264,"system_prompt":"","index":17966}
{"question":"Create a Python Flask API that stores users\u2019 information in the database.","input":"The API should include an endpoint for registering users with fields for username, email, first name, last name and password.","expected_output":"from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/users.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n username = db.Column(db.String(80), unique=True, nullable=False)\n email = db.Column(db.String(120), unique=True, nullable=False)\n first_name = db.Column(db.String(80))\n last_name = db.Column(db.String(80))\n password = db.Column(db.String(120))\n\n def __repr__(self):\n return '<User %r>' % self.username\n\ndb.create_all()\n\n@app.route('\/register', methods=['POST'])\ndef register():\n data = request.get_json()\n\nusername = data['username']\nemail = data['email']\nfirst_name = data['first_name']\nlast_name = data['last_name']\npassword = data['password']\n\nnew_user = User(username=username, email=email, first_name=first_name, last_name=last_name, password=password)\ndb.session.add(new_user)\ndb.session.commit()\n\nreturn 'User %s is created.' % username\n\nif __name__ == '__main__':\n app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Flask API that stores users\u2019 information in the database.\n\n### Input:\nThe API should include an endpoint for registering users with fields for username, email, first name, last name and password.\n\n### Output:\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/users.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n username = db.Column(db.String(80), unique=True, nullable=False)\n email = db.Column(db.String(120), unique=True, nullable=False)\n first_name = db.Column(db.String(80))\n last_name = db.Column(db.String(80))\n password = db.Column(db.String(120))\n\n def __repr__(self):\n return '<User %r>' % self.username\n\ndb.create_all()\n\n@app.route('\/register', methods=['POST'])\ndef register():\n data = request.get_json()\n\nusername = data['username']\nemail = data['email']\nfirst_name = data['first_name']\nlast_name = data['last_name']\npassword = data['password']\n\nnew_user = User(username=username, email=email, first_name=first_name, last_name=last_name, password=password)\ndb.session.add(new_user)\ndb.session.commit()\n\nreturn 'User %s is created.' % username\n\nif __name__ == '__main__':\n app.run()","tok_input_length":310,"tok_output_length":245,"system_prompt":"","index":16716}
{"question":"Write a Python program to preprocess and clean a given dataset.","input":"The dataset has been collected from an online survey by a company about the customer satisfaction. The dataset contains 500 rows and 7 columns about age, job type, region, gender, salary, satisfaction and feedback from the survey.","expected_output":"import pandas as pd\n\n# loading dataset\ndata = pd.read_csv('data.csv')\n\n# preprocessing age column\ndata['age'] = data['age'].apply(lambda x: int(x))\n\n# preprocessing job type\ndata['job type'].replace({\n 'manager': 1,\n 'clerk': 2,\n 'data analyst': 3\n}, inplace=True)\n\n# preprocessing region\ndata['region'].replace({\n 'east': 1,\n 'west': 2,\n 'south': 3,\n 'north': 4\n}, inplace=True)\n\n# preprocessing gender\ndata['gender'].replace({\n 'male': 1,\n 'female': 0\n}, inplace=True)\n\n# preprocessing salary \ndata['salary'].replace({\n 'low': 1,\n 'medium': 2,\n 'high': 3\n}, inplace=True)\n\n# preprocessing satisfaction\ndata['satisfaction'].replace({\n 'no': 0,\n 'yes': 1 \n}, inplace=True)\n\n# preprocessing feedback\ndata['feedback'] = data['feedback'].str.lower()\n\n# drop NA values\ndata.dropna(inplace=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to preprocess and clean a given dataset.\n\n### Input:\nThe dataset has been collected from an online survey by a company about the customer satisfaction. The dataset contains 500 rows and 7 columns about age, job type, region, gender, salary, satisfaction and feedback from the survey.\n\n### Output:\nimport pandas as pd\n\n# loading dataset\ndata = pd.read_csv('data.csv')\n\n# preprocessing age column\ndata['age'] = data['age'].apply(lambda x: int(x))\n\n# preprocessing job type\ndata['job type'].replace({\n 'manager': 1,\n 'clerk': 2,\n 'data analyst': 3\n}, inplace=True)\n\n# preprocessing region\ndata['region'].replace({\n 'east': 1,\n 'west': 2,\n 'south': 3,\n 'north': 4\n}, inplace=True)\n\n# preprocessing gender\ndata['gender'].replace({\n 'male': 1,\n 'female': 0\n}, inplace=True)\n\n# preprocessing salary \ndata['salary'].replace({\n 'low': 1,\n 'medium': 2,\n 'high': 3\n}, inplace=True)\n\n# preprocessing satisfaction\ndata['satisfaction'].replace({\n 'no': 0,\n 'yes': 1 \n}, inplace=True)\n\n# preprocessing feedback\ndata['feedback'] = data['feedback'].str.lower()\n\n# drop NA values\ndata.dropna(inplace=True)","tok_input_length":311,"tok_output_length":226,"system_prompt":"","index":9432}
{"question":"Create a program in Python to find the longest common sequence from two given strings.","input":"string1 = \"ABCD\"\nstring2 = \"BCDE\"","expected_output":"def LongestCommonSequence(string1, string2):\n \n n = len(string1)\n m = len(string2)\n \n LCS = [[0 for x in range(m+1)] for y in range(n+1)]\n \n for i in range(n):\n for j in range(m):\n if (string1[i] == string2[j]):\n LCS[i][j] = LCS[i-1][j-1] + 1\n else:\n LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n \n#return the longest common sequence\n index = LCS[n][m]\n lcs = [\"\"] * (index+1)\n lcs[index] = \"\"\n i = n\n j = m\n while i > 0 and j > 0:\n if (string1[i-1] == string2[j-1]):\n lcs[index-1] = string1[i-1]\n i -= 1\n j -= 1\n index -= 1\n \n elif (LCS[i-1][j] > LCS[i][j-1]):\n i -= 1\n else:\n j -= 1\n \n return \"\".join(lcs)\n \n print(LongestCommonSequence(string1, string2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find the longest common sequence from two given strings.\n\n### Input:\nstring1 = \"ABCD\"\nstring2 = \"BCDE\"\n\n### Output:\ndef LongestCommonSequence(string1, string2):\n \n n = len(string1)\n m = len(string2)\n \n LCS = [[0 for x in range(m+1)] for y in range(n+1)]\n \n for i in range(n):\n for j in range(m):\n if (string1[i] == string2[j]):\n LCS[i][j] = LCS[i-1][j-1] + 1\n else:\n LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n \n#return the longest common sequence\n index = LCS[n][m]\n lcs = [\"\"] * (index+1)\n lcs[index] = \"\"\n i = n\n j = m\n while i > 0 and j > 0:\n if (string1[i-1] == string2[j-1]):\n lcs[index-1] = string1[i-1]\n i -= 1\n j -= 1\n index -= 1\n \n elif (LCS[i-1][j] > LCS[i][j-1]):\n i -= 1\n else:\n j -= 1\n \n return \"\".join(lcs)\n \n print(LongestCommonSequence(string1, string2))","tok_input_length":312,"tok_output_length":255,"system_prompt":"","index":18356}
{"question":"Create a Python script for creating a GUI app with a login page.","input":"Not applicable","expected_output":"from tkinter import *\n\nroot = Tk()\nroot.title(\"Login Page\")\n\n# Create window\n\nwindow_width = 400\nwindow_height = 350\nscreen_width = root.winfo_screenwidth()\nscreen_height = root.winfo_screenheight()\nx_cord = int((screen_width\/2) - (window_width\/2))\ny_cord = int((screen_height\/2) - (window_height\/2))\n\n# Set window geometry\n\nroot.geometry(\"{}x{}+{}+{}\".format(window_width, window_height, x_cord, y_cord))\n\n# Create widgets\n\nuser_label = Label(root, text=\"Username:\")\nuser_label.place(x=50, y=150)\n\nusername_input = Entry(root, width=30)\nusername_input.place(x=130, y=150)\n\npassword_label = Label(root, text=\"Password:\")\npassword_label.place(x=50, y=200)\n\npassword_input = Entry(root, width=30, show=\"*\")\npassword_input.place(x=130, y=200)\n\ndef login():\n   #Verify input and authenticate user\n   print(\"Username: {}\\nPassword: {}\".format(username_input.get(),password_input.get()))\n\nlogin_button = Button(root, text=\"Login\", command=login)\nlogin_button.place(x=180, y=230)\n\n# Create event loop\n\nroot.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for creating a GUI app with a login page.\n\n### Input:\nNot applicable\n\n### Output:\nfrom tkinter import *\n\nroot = Tk()\nroot.title(\"Login Page\")\n\n# Create window\n\nwindow_width = 400\nwindow_height = 350\nscreen_width = root.winfo_screenwidth()\nscreen_height = root.winfo_screenheight()\nx_cord = int((screen_width\/2) - (window_width\/2))\ny_cord = int((screen_height\/2) - (window_height\/2))\n\n# Set window geometry\n\nroot.geometry(\"{}x{}+{}+{}\".format(window_width, window_height, x_cord, y_cord))\n\n# Create widgets\n\nuser_label = Label(root, text=\"Username:\")\nuser_label.place(x=50, y=150)\n\nusername_input = Entry(root, width=30)\nusername_input.place(x=130, y=150)\n\npassword_label = Label(root, text=\"Password:\")\npassword_label.place(x=50, y=200)\n\npassword_input = Entry(root, width=30, show=\"*\")\npassword_input.place(x=130, y=200)\n\ndef login():\n   #Verify input and authenticate user\n   print(\"Username: {}\\nPassword: {}\".format(username_input.get(),password_input.get()))\n\nlogin_button = Button(root, text=\"Login\", command=login)\nlogin_button.place(x=180, y=230)\n\n# Create event loop\n\nroot.mainloop()","tok_input_length":313,"tok_output_length":269,"system_prompt":"","index":6737}
{"question":"Create a Python script to run the Knapsack Problem using brute force approach.","input":"capacity = 6\nitems = [\n{\n'name': 'item 1',\n'weight': 2,\n'value': 40\n},\n{\n'name': 'item 2',\n'weight': 3,\n'value': 50\n},\n{\n'name': 'item 3',\n'weight': 4,\n'value': 60\n},\n{\n'name': 'item 4',\n'weight': 5,\n'value': 70\n}\n]","expected_output":"def knapsack_brute_force(capacity, items):\n max_value = 0\n\n # the number of items\n num_items = len(items)\n\n # Iterate through the items.\n for i in range(2**num_items):\n\n # Create a subset.\n subset = [items[item] for item in range(num_items) if i & (1 << item)]\n\n # Calculate the total weight of the subset.\n subset_weight = sum([item['weight'] for item in subset])\n\n # Skip the subset if it exceeds the capacity.\n if subset_weight > capacity:\n continue\n\n # Otherwise, add the subset's total value to the max value.\n subset_value = sum([item['value'] for item in subset])\n max_value = max(subset_value, max_value)\n\nreturn max_value\n\n# Execute the function.\nmax_value = knapsack_brute_force(capacity, items)\nprint(max_value) # 120","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to run the Knapsack Problem using brute force approach.\n\n### Input:\ncapacity = 6\nitems = [\n{\n'name': 'item 1',\n'weight': 2,\n'value': 40\n},\n{\n'name': 'item 2',\n'weight': 3,\n'value': 50\n},\n{\n'name': 'item 3',\n'weight': 4,\n'value': 60\n},\n{\n'name': 'item 4',\n'weight': 5,\n'value': 70\n}\n]\n\n### Output:\ndef knapsack_brute_force(capacity, items):\n max_value = 0\n\n # the number of items\n num_items = len(items)\n\n # Iterate through the items.\n for i in range(2**num_items):\n\n # Create a subset.\n subset = [items[item] for item in range(num_items) if i & (1 << item)]\n\n # Calculate the total weight of the subset.\n subset_weight = sum([item['weight'] for item in subset])\n\n # Skip the subset if it exceeds the capacity.\n if subset_weight > capacity:\n continue\n\n # Otherwise, add the subset's total value to the max value.\n subset_value = sum([item['value'] for item in subset])\n max_value = max(subset_value, max_value)\n\nreturn max_value\n\n# Execute the function.\nmax_value = knapsack_brute_force(capacity, items)\nprint(max_value) # 120","tok_input_length":315,"tok_output_length":183,"system_prompt":"","index":5932}
{"question":"Create a TensorFlow model in Python to classify hand-written numbers.","input":"Not applicable","expected_output":"import tensorflow as tf\n\n# load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# reshape and rescale the data\nx_train = x_train.reshape(x_train.shape[0], 28, 28, 1).astype('float32')\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1).astype('float32')\nx_train = x_train \/ 255.0\nx_test = x_test \/ 255.\n\n# build the model\nmodel = tf.keras.models.Sequential([\ntf.keras.layers.Conv2D(32, (3, 3), input_shape=(28, 28 ,1), activation='relu'),\ntf.keras.layers.MaxPooling2D(2, 2),\ntf.keras.layers.Dropout(0.2),\ntf.keras.layers.Flatten(),\ntf.keras.layers.Dense(128, activation='relu'),\ntf.keras.layers.Dense(10, activation='softmax')])\n\n# compile and train the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10)\n\n# evaluate the model\ntest_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=1)\nprint('Test Accuracy:', test_accuracy)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a TensorFlow model in Python to classify hand-written numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport tensorflow as tf\n\n# load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# reshape and rescale the data\nx_train = x_train.reshape(x_train.shape[0], 28, 28, 1).astype('float32')\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1).astype('float32')\nx_train = x_train \/ 255.0\nx_test = x_test \/ 255.\n\n# build the model\nmodel = tf.keras.models.Sequential([\ntf.keras.layers.Conv2D(32, (3, 3), input_shape=(28, 28 ,1), activation='relu'),\ntf.keras.layers.MaxPooling2D(2, 2),\ntf.keras.layers.Dropout(0.2),\ntf.keras.layers.Flatten(),\ntf.keras.layers.Dense(128, activation='relu'),\ntf.keras.layers.Dense(10, activation='softmax')])\n\n# compile and train the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10)\n\n# evaluate the model\ntest_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=1)\nprint('Test Accuracy:', test_accuracy)","tok_input_length":315,"tok_output_length":273,"system_prompt":"","index":13449}
{"question":"Design a data structure in Python for a deck of cards.","input":"","expected_output":"class Card:\n    suits = (\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\")\n    values = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n              \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\n    \n    def __init__(self, suit, value):\n        self.suit = suit\n        self.value = value\n    \n    def __repr__(self):\n        return f\"{self.value} of {self.suit}\"\n\nclass Deck:\n    def __init__(self):\n        self.cards = [Card(suit, value) for suit in Card.suits\n                                       for value in Card.values]\n    \n    def __repr__(self):\n        return f\"Deck of {self.count()} cards\"\n    \n    def count(self):\n        return len(self.cards)\n    \n    def _deal(self, num):\n        count = self.count()\n        actual = min([count,num])\n        if count == 0:\n            raise ValueError(\"All cards have been dealt\")\n        else:\n            cards = self.cards[-actual:]\n            self.cards = self.cards[:-actual]\n            return cards\n    \n    def deal_card(self):\n        return self._deal(1)[0]\n    \n    def deal_hand(self, hand_size):\n        return self._deal(hand_size)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python for a deck of cards.\n\n### Input:\n\n\n### Output:\nclass Card:\n    suits = (\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\")\n    values = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n              \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\n    \n    def __init__(self, suit, value):\n        self.suit = suit\n        self.value = value\n    \n    def __repr__(self):\n        return f\"{self.value} of {self.suit}\"\n\nclass Deck:\n    def __init__(self):\n        self.cards = [Card(suit, value) for suit in Card.suits\n                                       for value in Card.values]\n    \n    def __repr__(self):\n        return f\"Deck of {self.count()} cards\"\n    \n    def count(self):\n        return len(self.cards)\n    \n    def _deal(self, num):\n        count = self.count()\n        actual = min([count,num])\n        if count == 0:\n            raise ValueError(\"All cards have been dealt\")\n        else:\n            cards = self.cards[-actual:]\n            self.cards = self.cards[:-actual]\n            return cards\n    \n    def deal_card(self):\n        return self._deal(1)[0]\n    \n    def deal_hand(self, hand_size):\n        return self._deal(hand_size)","tok_input_length":316,"tok_output_length":277,"system_prompt":"","index":17352}
{"question":"Create an AI-powered Python script to optimize any given code.","input":"Example code:\nfunction getResult(a, b, c) {\n return a + b + c;\n}","expected_output":"# Import the required libraries\nfrom dataclasses import dataclass\n\n@dataclass\nclass Params:\n a: int\n b: int\n c: int\n\ndef get_result(params: Params) -> int:\n \"\"\"Returns the sum of the three given numbers\"\"\"\n return params.a + params.b + params.c\n\n# Optimize the code\ndef optimize(fn, params):\n best_score = 0\n best_params = None\n for a in range(params.a - 10, params.a + 10):\n for b in range(params.b - 10, params.b + 10):\n for c in range(params.c - 10, params.c + 10):\n score = fn(Params(a, b , c))\n if score > best_score:\n best_score = score\n best_params = {\n 'a': a,\n 'b': b,\n 'c': c\n }\n return best_params\n\nif __name__ == '__main__':\n # Initialize the parameters\n params = Params(a=1, b=2, c=3)\n # Get the optimized params\n best_params = optimize(get_result, params)\n # Print the optimized result\n print(\"Optimized result: %d\" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI-powered Python script to optimize any given code.\n\n### Input:\nExample code:\nfunction getResult(a, b, c) {\n return a + b + c;\n}\n\n### Output:\n# Import the required libraries\nfrom dataclasses import dataclass\n\n@dataclass\nclass Params:\n a: int\n b: int\n c: int\n\ndef get_result(params: Params) -> int:\n \"\"\"Returns the sum of the three given numbers\"\"\"\n return params.a + params.b + params.c\n\n# Optimize the code\ndef optimize(fn, params):\n best_score = 0\n best_params = None\n for a in range(params.a - 10, params.a + 10):\n for b in range(params.b - 10, params.b + 10):\n for c in range(params.c - 10, params.c + 10):\n score = fn(Params(a, b , c))\n if score > best_score:\n best_score = score\n best_params = {\n 'a': a,\n 'b': b,\n 'c': c\n }\n return best_params\n\nif __name__ == '__main__':\n # Initialize the parameters\n params = Params(a=1, b=2, c=3)\n # Get the optimized params\n best_params = optimize(get_result, params)\n # Print the optimized result\n print(\"Optimized result: %d\" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))","tok_input_length":318,"tok_output_length":259,"system_prompt":"","index":196}
{"question":"Create a code generator that creates a simple API using Django Rest Framework.","input":"Model name: Item\nModel fields: name (string), amount (integer)","expected_output":"# create a new Django project\ndjango-admin startproject sample_project\n\n# creating a new app\npython manage.py startapp items\n\n# add app to project\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'items',\n]\n\n# create models\nclass Item(models.Model):\n    name = models.CharField(max_length=100)\n    amount = models.IntegerField()\n\n# create serializer\nclass ItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Item\n        fields = ('name', 'amount')\n\n# create views\nclass ItemList(APIView):\n    def get(self, request):\n        items = Item.objects.all()\n        serializer = ItemSerializer(items, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = ItemSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n# urls route\nurlpatterns = [\n    path('items\/', ItemList.as_view()),\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code generator that creates a simple API using Django Rest Framework.\n\n### Input:\nModel name: Item\nModel fields: name (string), amount (integer)\n\n### Output:\n# create a new Django project\ndjango-admin startproject sample_project\n\n# creating a new app\npython manage.py startapp items\n\n# add app to project\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'items',\n]\n\n# create models\nclass Item(models.Model):\n    name = models.CharField(max_length=100)\n    amount = models.IntegerField()\n\n# create serializer\nclass ItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Item\n        fields = ('name', 'amount')\n\n# create views\nclass ItemList(APIView):\n    def get(self, request):\n        items = Item.objects.all()\n        serializer = ItemSerializer(items, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = ItemSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n# urls route\nurlpatterns = [\n    path('items\/', ItemList.as_view()),\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)","tok_input_length":319,"tok_output_length":262,"system_prompt":"","index":17264}
{"question":"Create an algorithm in Python to sort a given array using Heap sort.","input":"","expected_output":"def heapSort(arr):\n    n = len(arr)\n  \n    # Build heap (rearrange array)\n    for i in range(n\/\/2 - 1, -1, -1):\n        heapify(arr, n, i)\n  \n    # One by one extract an element from heap\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0] # swap\n        heapify(arr, i, 0)\n  \n# To heapify subtree rooted at index i\ndef heapify(arr, n, i):\n    largest = i # Initialize largest as root\n    l = 2 * i + 1\n    r = 2 * i + 2\n  \n    # See if left child of root exists and is\n    # greater than root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n  \n    # See if right child of root exists and is\n    # greater than root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n  \n    # Change root, if needed\n    if largest != i:\n        arr[i],arr[largest] = arr[largest],arr[i]\n  \n        # Heapify the root.\n        heapify(arr, n, largest)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to sort a given array using Heap sort.\n\n### Input:\n\n\n### Output:\ndef heapSort(arr):\n    n = len(arr)\n  \n    # Build heap (rearrange array)\n    for i in range(n\/\/2 - 1, -1, -1):\n        heapify(arr, n, i)\n  \n    # One by one extract an element from heap\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0] # swap\n        heapify(arr, i, 0)\n  \n# To heapify subtree rooted at index i\ndef heapify(arr, n, i):\n    largest = i # Initialize largest as root\n    l = 2 * i + 1\n    r = 2 * i + 2\n  \n    # See if left child of root exists and is\n    # greater than root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n  \n    # See if right child of root exists and is\n    # greater than root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n  \n    # Change root, if needed\n    if largest != i:\n        arr[i],arr[largest] = arr[largest],arr[i]\n  \n        # Heapify the root.\n        heapify(arr, n, largest)","tok_input_length":319,"tok_output_length":278,"system_prompt":"","index":12356}
{"question":"Implement a starter K-means clustering algorithm in Python.","input":"","expected_output":"import numpy as np\n\ndef kmeans(X, k, tol = 0.001, max_iter = 300):\n    m = X.shape[0] # number of training examples\n    n = X.shape[1] # number of features\n\n    ## initialize the centroids\n    centroids = np.zeros((k, n))\n\n    ## randomly select k data points as centroids\n    for i in range(k):\n        centroids[i] = X[np.random.choice(m),:]\n\n    ## initialize the cluster index\n    cluster_index = np.zeros(m)\n    pre_cluster_index = np.zeros(m)\n\n    for it in range(max_iter):\n\n        ## calculate the distance with each centroids \n        for i in range(m):\n            min_distance = float('inf')\n            for j in range(k):\n                d = np.sum((X[i]-centroids[j])**2)\n                if d < min_distance:\n                    min_distance = d\n                    cluster_index[i] = j\n\n        ## check converging or not\n        if np.array_equal(pre_cluster_index, cluster_index):\n            break\n        pre_cluster_index = cluster_index\n\n        ## move the centroid to the average of points in the cluster\n        for i in range(k):\n            points_in_cluster =X[cluster_index == i]\n            centroids[i] = np.mean(points_in_cluster, axis=0)\n\n    return centroids, cluster_index","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a starter K-means clustering algorithm in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef kmeans(X, k, tol = 0.001, max_iter = 300):\n    m = X.shape[0] # number of training examples\n    n = X.shape[1] # number of features\n\n    ## initialize the centroids\n    centroids = np.zeros((k, n))\n\n    ## randomly select k data points as centroids\n    for i in range(k):\n        centroids[i] = X[np.random.choice(m),:]\n\n    ## initialize the cluster index\n    cluster_index = np.zeros(m)\n    pre_cluster_index = np.zeros(m)\n\n    for it in range(max_iter):\n\n        ## calculate the distance with each centroids \n        for i in range(m):\n            min_distance = float('inf')\n            for j in range(k):\n                d = np.sum((X[i]-centroids[j])**2)\n                if d < min_distance:\n                    min_distance = d\n                    cluster_index[i] = j\n\n        ## check converging or not\n        if np.array_equal(pre_cluster_index, cluster_index):\n            break\n        pre_cluster_index = cluster_index\n\n        ## move the centroid to the average of points in the cluster\n        for i in range(k):\n            points_in_cluster =X[cluster_index == i]\n            centroids[i] = np.mean(points_in_cluster, axis=0)\n\n    return centroids, cluster_index","tok_input_length":320,"tok_output_length":282,"system_prompt":"","index":8321}
{"question":"Write a python program to print the elements of a matrix in spiral form","input":"","expected_output":"def spiralPrint(m, n, a) :\n    k = 0; l = 0\n\n    ''' k - starting row index \n        m - ending row index \n        l - starting column index \n        n - ending column index \n        i - iterator '''\n        \n    while (k < m and l < n) : \n    \n        # Print the first row from  the remaining rows  \n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 1\n    \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n    \n        # Print the last row from the remaining rows  \n        if ( k < m) : \n              \n            for i in range(n - 1, (l - 1), -1) : \n                print(a[m - 1][i], end = \" \") \n              \n            m -= 1\n          \n        # Print the first column from the remaining columns  \n        if (l < n) : \n            for i in range(m - 1, k - 1, -1) : \n                print(a[i][l], end = \" \") \n              \n            l += 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print the elements of a matrix in spiral form\n\n### Input:\n\n\n### Output:\ndef spiralPrint(m, n, a) :\n    k = 0; l = 0\n\n    ''' k - starting row index \n        m - ending row index \n        l - starting column index \n        n - ending column index \n        i - iterator '''\n        \n    while (k < m and l < n) : \n    \n        # Print the first row from  the remaining rows  \n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 1\n    \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n    \n        # Print the last row from the remaining rows  \n        if ( k < m) : \n              \n            for i in range(n - 1, (l - 1), -1) : \n                print(a[m - 1][i], end = \" \") \n              \n            m -= 1\n          \n        # Print the first column from the remaining columns  \n        if (l < n) : \n            for i in range(m - 1, k - 1, -1) : \n                print(a[i][l], end = \" \") \n              \n            l += 1","tok_input_length":321,"tok_output_length":279,"system_prompt":"","index":6567}
{"question":"Create a python script that parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of the data for each attribute.","input":"","expected_output":"\"\"\"\nParses a CSV and generates a new CSV that adds the total number of rows, total \nnumber of columns, and total amount of data for each attribute.\n\"\"\"\n\nimport csv\n\ndef parse_csv(filename):\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        rows =0\n        cols = 0\n        data_totals = []\n        for row in reader:\n            rows += 1\n            cols = len(row)\n            for col in row:\n                if len(data_totals) < cols:\n                    data_totals.append([row[col],1])\n                else:\n                    existing_total = data_totals[cols - 1]\n                    new_total = [existing_total[0] + float(row[col]), existing_total[1] + 1]\n                    data_totals.append(new_total)\n        #write to new csv\n        with open('new_csv.csv', mode='w') as new_csv_file:\n            writer = csv.writer(new_csv_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n            writer.writerow(['Rows', 'Columns', 'Data Totals'])\n            writer.writerow([rows, cols, data_totals])\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    parse_csv(filename)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of the data for each attribute.\n\n### Input:\n\n\n### Output:\n\"\"\"\nParses a CSV and generates a new CSV that adds the total number of rows, total \nnumber of columns, and total amount of data for each attribute.\n\"\"\"\n\nimport csv\n\ndef parse_csv(filename):\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        rows =0\n        cols = 0\n        data_totals = []\n        for row in reader:\n            rows += 1\n            cols = len(row)\n            for col in row:\n                if len(data_totals) < cols:\n                    data_totals.append([row[col],1])\n                else:\n                    existing_total = data_totals[cols - 1]\n                    new_total = [existing_total[0] + float(row[col]), existing_total[1] + 1]\n                    data_totals.append(new_total)\n        #write to new csv\n        with open('new_csv.csv', mode='w') as new_csv_file:\n            writer = csv.writer(new_csv_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n            writer.writerow(['Rows', 'Columns', 'Data Totals'])\n            writer.writerow([rows, cols, data_totals])\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    parse_csv(filename)","tok_input_length":323,"tok_output_length":260,"system_prompt":"","index":334}
{"question":"Write a python program that calculates the driving distance between two locations given their latitudes and longitudes.","input":"Location 1: [48.8606, 2.33619]\nLocation 2: [48.8644, 2.32883]","expected_output":"import math\n\ndef distance_between_locations(lat1, long1, lat2, long2):\n    degrees_to_radians = math.pi\/180.0\n    # phi = 90 - latitude\n    phi1 = (90.0 - lat1)*degrees_to_radians\n    phi2 = (90.0 - lat2)*degrees_to_radians\n    # theta = longitude\n    theta1 = long1*degrees_to_radians\n    theta2 = long2*degrees_to_radians\n    cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + math.cos(phi1)*math.cos(phi2))\n    # arccos, distance in radians\n    arc = math.acos( cos )\n    # Earth's radius (km)\n    earth_radius Km = 6371\n    # Distance in km\n    distance = arc * earth_radius\n    return distance\n\n# Calculate distance between two locations\ndist = distance_between_locations(48.8606, 2.33619, 48.8644, 2.32883)\nprint(\"Distance Between Locations is: \" + str(dist) + \" Km\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that calculates the driving distance between two locations given their latitudes and longitudes.\n\n### Input:\nLocation 1: [48.8606, 2.33619]\nLocation 2: [48.8644, 2.32883]\n\n### Output:\nimport math\n\ndef distance_between_locations(lat1, long1, lat2, long2):\n    degrees_to_radians = math.pi\/180.0\n    # phi = 90 - latitude\n    phi1 = (90.0 - lat1)*degrees_to_radians\n    phi2 = (90.0 - lat2)*degrees_to_radians\n    # theta = longitude\n    theta1 = long1*degrees_to_radians\n    theta2 = long2*degrees_to_radians\n    cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + math.cos(phi1)*math.cos(phi2))\n    # arccos, distance in radians\n    arc = math.acos( cos )\n    # Earth's radius (km)\n    earth_radius Km = 6371\n    # Distance in km\n    distance = arc * earth_radius\n    return distance\n\n# Calculate distance between two locations\ndist = distance_between_locations(48.8606, 2.33619, 48.8644, 2.32883)\nprint(\"Distance Between Locations is: \" + str(dist) + \" Km\")","tok_input_length":324,"tok_output_length":245,"system_prompt":"","index":11716}
{"question":"Create a Python program to generate a dataset with the following structure: 20 rows, 2 columns (name and age).","input":"Not applicable","expected_output":"import random\n\n# Create an empty list\ndata = []\n\n# Generate 20 names and ages\nfor i in range(20):\n name = 'Name ' + str(i)\n age = random.randint(18, 70)\n\n# Append the data to the list\n data.append([name, age])\n\n# Print out the list\nprint(data)\n\n# [['Name 0', 64],\n#  ['Name 1', 18],\n#  ['Name 2', 24],\n#  ['Name 3', 36],\n#  ['Name 4', 34],\n#  ['Name 5', 28],\n#  ['Name 6', 56],\n#  ['Name 7', 42],\n#  ['Name 8', 68],\n#  ['Name 9', 24],\n#  ['Name 10', 50],\n#  ['Name 11', 20],\n#  ['Name 12', 54],\n#  ['Name 13', 40],\n#  ['Name 14', 61],\n#  ['Name 15', 40],\n#  ['Name 16', 41],\n#  ['Name 17', 38],\n#  ['Name 18', 56],\n#  ['Name 19', 41]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a dataset with the following structure: 20 rows, 2 columns (name and age).\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# Create an empty list\ndata = []\n\n# Generate 20 names and ages\nfor i in range(20):\n name = 'Name ' + str(i)\n age = random.randint(18, 70)\n\n# Append the data to the list\n data.append([name, age])\n\n# Print out the list\nprint(data)\n\n# [['Name 0', 64],\n#  ['Name 1', 18],\n#  ['Name 2', 24],\n#  ['Name 3', 36],\n#  ['Name 4', 34],\n#  ['Name 5', 28],\n#  ['Name 6', 56],\n#  ['Name 7', 42],\n#  ['Name 8', 68],\n#  ['Name 9', 24],\n#  ['Name 10', 50],\n#  ['Name 11', 20],\n#  ['Name 12', 54],\n#  ['Name 13', 40],\n#  ['Name 14', 61],\n#  ['Name 15', 40],\n#  ['Name 16', 41],\n#  ['Name 17', 38],\n#  ['Name 18', 56],\n#  ['Name 19', 41]]","tok_input_length":325,"tok_output_length":270,"system_prompt":"","index":1423}
{"question":"Create a Python module to encrypt a given string using the AES symmetric cipher.","input":"\"My Secret Message\"","expected_output":"from Cryptodome.Cipher import AES\n\ndef encrypt(message, key):\n    # Block size should match the chosen AES mode\n    block_size = 16\n    padding_length = block_size - len(message) % block_size\n\n    # Padding must always be present per the AES spec\n    if padding_length:\n        padded_message = message + (chr(padding_length) * padding_length)\n    else:\n        padded_message = message\n\n    # CBC Mode always works with 16 byte blocks\n    iv = b'\\x16\\x87r\\xb9\\x1b\\x8bho\\x04u\\x16\\xdb\\xbc\\x98\\x87\\xb7Y\\xc0'\n\n    # Create cipher and encrypt data\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypted_message = cipher.encrypt(padded_message.encode('utf-8'))\n\n    return encrypted_message\n\nkey = b'#1\\x84\\xdc\\x06\\x0c\\x12\\xe8\\x0c\\xd7 \\x9d\\x03\\xd4*\\xdd[\\x85'\n\nencrypted_message = encrypt(\"My Secret Message\",key)\n\nprint(encrypted_message)\n# b\"B\\xf5{5<\\xec~\\xf9\\xc9\\x8f_3\\x04\\x95\\x15'\\x90\\xd2\\\\\\xfc\\xd9\\x03\\xdc\\x1dr\\x1b\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module to encrypt a given string using the AES symmetric cipher.\n\n### Input:\n\"My Secret Message\"\n\n### Output:\nfrom Cryptodome.Cipher import AES\n\ndef encrypt(message, key):\n    # Block size should match the chosen AES mode\n    block_size = 16\n    padding_length = block_size - len(message) % block_size\n\n    # Padding must always be present per the AES spec\n    if padding_length:\n        padded_message = message + (chr(padding_length) * padding_length)\n    else:\n        padded_message = message\n\n    # CBC Mode always works with 16 byte blocks\n    iv = b'\\x16\\x87r\\xb9\\x1b\\x8bho\\x04u\\x16\\xdb\\xbc\\x98\\x87\\xb7Y\\xc0'\n\n    # Create cipher and encrypt data\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypted_message = cipher.encrypt(padded_message.encode('utf-8'))\n\n    return encrypted_message\n\nkey = b'#1\\x84\\xdc\\x06\\x0c\\x12\\xe8\\x0c\\xd7 \\x9d\\x03\\xd4*\\xdd[\\x85'\n\nencrypted_message = encrypt(\"My Secret Message\",key)\n\nprint(encrypted_message)\n# b\"B\\xf5{5<\\xec~\\xf9\\xc9\\x8f_3\\x04\\x95\\x15'\\x90\\xd2\\\\\\xfc\\xd9\\x03\\xdc\\x1dr\\x1b\"","tok_input_length":326,"tok_output_length":280,"system_prompt":"","index":4376}
{"question":"Use the following data and develop a random forest classifier in Python to predict the species type.","input":"[5, 2, 4, 1, 3]\tiris-setosa\n[7, 3, 5, 1, 2]\tiris-versicolor\n[9, 5, 4, 2, 3]\tiris-virginica","expected_output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\ndata = [[5,2,4,1,3], [7,3,5,1,2], [9,5,4,2,3]]\nlabels = ['iris-setosa', 'iris-versicolor', 'iris-virginica']\n\ndf = pd.DataFrame(data, columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class'])\nX = df.iloc[:, :4]\ny = df['class']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, \n    y,\n    train_size=0.8, \n    test_size=0.2, \n    random_state=0\n)\n\nclf = RandomForestClassifier(n_estimators=100, random_state=0, max_depth=2)\nclf.fit(X_train, y_train)\nprint(\"Accuracy of Random Forest classifier on training set:{:.2f}\".format(clf.score(X_test, y_test)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the following data and develop a random forest classifier in Python to predict the species type.\n\n### Input:\n[5, 2, 4, 1, 3]\tiris-setosa\n[7, 3, 5, 1, 2]\tiris-versicolor\n[9, 5, 4, 2, 3]\tiris-virginica\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\ndata = [[5,2,4,1,3], [7,3,5,1,2], [9,5,4,2,3]]\nlabels = ['iris-setosa', 'iris-versicolor', 'iris-virginica']\n\ndf = pd.DataFrame(data, columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class'])\nX = df.iloc[:, :4]\ny = df['class']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, \n    y,\n    train_size=0.8, \n    test_size=0.2, \n    random_state=0\n)\n\nclf = RandomForestClassifier(n_estimators=100, random_state=0, max_depth=2)\nclf.fit(X_train, y_train)\nprint(\"Accuracy of Random Forest classifier on training set:{:.2f}\".format(clf.score(X_test, y_test)))","tok_input_length":328,"tok_output_length":221,"system_prompt":"","index":9921}
{"question":"Transform a Gradient Descent algorithm in Python to work with First Order Updates instead.","input":"def gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    for i in range(iters):\n        y_pred = m * x + b\n        dm = -(2\/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2\/n) * sum([y[i] - y_pred[i] for i in range(n)])\n        m -= lr * dm\n        b -= lr * db","expected_output":"def gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    # First-order Update\n    m_update = 0\n    b_update = 0\n\n    for i in range(iters):\n        y_pred = m * x + b\n\n        # Gradient\n        dm = -(2\/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2\/n) * sum([y[i] - y_pred[i] for i in range(n)])\n\n        # Updates\n        m_update -= lr * dm\n        b_update -= lr * db\n\n        # Update the parameters\n        m += m_update\n        b += b_update","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform a Gradient Descent algorithm in Python to work with First Order Updates instead.\n\n### Input:\ndef gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    for i in range(iters):\n        y_pred = m * x + b\n        dm = -(2\/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2\/n) * sum([y[i] - y_pred[i] for i in range(n)])\n        m -= lr * dm\n        b -= lr * db\n\n### Output:\ndef gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    # First-order Update\n    m_update = 0\n    b_update = 0\n\n    for i in range(iters):\n        y_pred = m * x + b\n\n        # Gradient\n        dm = -(2\/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2\/n) * sum([y[i] - y_pred[i] for i in range(n)])\n\n        # Updates\n        m_update -= lr * dm\n        b_update -= lr * db\n\n        # Update the parameters\n        m += m_update\n        b += b_update","tok_input_length":329,"tok_output_length":167,"system_prompt":"","index":18191}
{"question":"Generate a Python code snippet to calculate the Levenshtein distance between two strings.","input":"Not applicable","expected_output":"# Calculate the Levenshtein Distance between two strings\ndef levenshteinDistance(str1, str2):\n    # Make sure they are the same length\n    if len(str1) > len(str2):\n        str1, str2 = str2, str1\n\n    # Initialize an empty matrix\n    matrix = [[0] * (len(str2) + 1)] * (len(str1) + 1)\n\n    # Fill in the first row and column\n    for i in range(len(str1) + 1):\n        matrix[i][0] = i\n    for j in range(len(str2) + 1):\n        matrix[0][j] = j\n\n    # Calculate the rest of the matrix \n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i - 1] == str2[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            matrix[i][j] = min(matrix[i - 1][j] + 1, matrix[i][j - 1] + 1, \n                         matrix[i - 1][j - 1] + cost)\n\n    # Return the resultant matrix\n    return matrix[-1][-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code snippet to calculate the Levenshtein distance between two strings.\n\n### Input:\nNot applicable\n\n### Output:\n# Calculate the Levenshtein Distance between two strings\ndef levenshteinDistance(str1, str2):\n    # Make sure they are the same length\n    if len(str1) > len(str2):\n        str1, str2 = str2, str1\n\n    # Initialize an empty matrix\n    matrix = [[0] * (len(str2) + 1)] * (len(str1) + 1)\n\n    # Fill in the first row and column\n    for i in range(len(str1) + 1):\n        matrix[i][0] = i\n    for j in range(len(str2) + 1):\n        matrix[0][j] = j\n\n    # Calculate the rest of the matrix \n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i - 1] == str2[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            matrix[i][j] = min(matrix[i - 1][j] + 1, matrix[i][j - 1] + 1, \n                         matrix[i - 1][j - 1] + cost)\n\n    # Return the resultant matrix\n    return matrix[-1][-1]","tok_input_length":330,"tok_output_length":283,"system_prompt":"","index":3557}
{"question":"Create a Python program for encoding and decoding a text string. The program should be able to accept a text string, encode it with a custom encoding scheme, and then decode it to the original text string.","input":"\"Hello World\"","expected_output":"# Alphabet string \nalphabets = 'abcdefghijklmnopqrstuvwxyz'\n\n# Function to encode \ndef encoding(text): \n\t\n\t# Empty string to store encoded string \n\tencoded_string = \"\" \n\n\t# iterate through all characters of text \n\tfor i in range(len(text)): \n\n\t\t# store the corresponding index \n\t\t# of current character \n\t\tc = alphabets.index(text[i]) \n\n\t\t# append the corresponding alphabet \n\t\t# from alphabet string \n\t\tencoded_string += alphabets[25-c] \n\t\n\t# Return the encoded string \n\treturn encoded_string \n\n# Function to decode \ndef decoding(encoded_string): \n\n\t# Empty string to store decoded string \n\tdecoded_string = \"\" \n\n\t# iterate through all characters of encoded string \n\tfor i in range(len(encoded_string)): \n\n\t\t# store the corresponding index \n\t\t# of current character \n\t\tc = alphabets.index(encoded_string[i]) \n\n\t\t# append the corresponding alphabet \n\t\t# from alphabet string \n\t\tdecoded_string += alphabets[25-c] \n\t\n\t# Return the decoded string \n\treturn decoded_string \n\n# Driver code \nencoded_string = encoding(\"Hello World\") \nprint(encoded_string) \n\ndecoded_string = decoding(encoded_string) \nprint(decoded_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for encoding and decoding a text string. The program should be able to accept a text string, encode it with a custom encoding scheme, and then decode it to the original text string.\n\n### Input:\n\"Hello World\"\n\n### Output:\n# Alphabet string \nalphabets = 'abcdefghijklmnopqrstuvwxyz'\n\n# Function to encode \ndef encoding(text): \n\t\n\t# Empty string to store encoded string \n\tencoded_string = \"\" \n\n\t# iterate through all characters of text \n\tfor i in range(len(text)): \n\n\t\t# store the corresponding index \n\t\t# of current character \n\t\tc = alphabets.index(text[i]) \n\n\t\t# append the corresponding alphabet \n\t\t# from alphabet string \n\t\tencoded_string += alphabets[25-c] \n\t\n\t# Return the encoded string \n\treturn encoded_string \n\n# Function to decode \ndef decoding(encoded_string): \n\n\t# Empty string to store decoded string \n\tdecoded_string = \"\" \n\n\t# iterate through all characters of encoded string \n\tfor i in range(len(encoded_string)): \n\n\t\t# store the corresponding index \n\t\t# of current character \n\t\tc = alphabets.index(encoded_string[i]) \n\n\t\t# append the corresponding alphabet \n\t\t# from alphabet string \n\t\tdecoded_string += alphabets[25-c] \n\t\n\t# Return the decoded string \n\treturn decoded_string \n\n# Driver code \nencoded_string = encoding(\"Hello World\") \nprint(encoded_string) \n\ndecoded_string = decoding(encoded_string) \nprint(decoded_string)","tok_input_length":332,"tok_output_length":260,"system_prompt":"","index":5549}
{"question":"Create a Python program that will take two lists of integers as input and merge them in sorted order.","input":"list1 = [1, 4, 5, 6]\nlist2 = [2, 3, 7, 8]","expected_output":"list1 = [1, 4, 5, 6]\nlist2 = [2, 3, 7, 8]\n\ndef merge_lists(list1, list2):\n    # sorted list to store the result\n    sorted_list = []\n\n    # counts to iterate over each list\n    i = 0 \n    j = 0\n\n    # loop through both lists until one list ends\n    while i < len(list1) and j < len(list2):\n        # if first list has a smaller element, add it to the result\n        if list1[i] < list2[j]:\n            sorted_list.append(list1[i])\n            i += 1\n        # if second list has a smaller element, add it to the result\n        else:\n            sorted_list.append(list2[j])\n            j += 1\n\n    # if there are elements remaining in any of the lists, append them\n    sorted_list.extend(list1[i:])\n    sorted_list.extend(list2[j:])\n\n    return sorted_list\n\nlist1 = [1, 4, 5, 6]\nlist2 = [2, 3, 7, 8]\n\nresult = merge_lists(list1, list2)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that will take two lists of integers as input and merge them in sorted order.\n\n### Input:\nlist1 = [1, 4, 5, 6]\nlist2 = [2, 3, 7, 8]\n\n### Output:\nlist1 = [1, 4, 5, 6]\nlist2 = [2, 3, 7, 8]\n\ndef merge_lists(list1, list2):\n    # sorted list to store the result\n    sorted_list = []\n\n    # counts to iterate over each list\n    i = 0 \n    j = 0\n\n    # loop through both lists until one list ends\n    while i < len(list1) and j < len(list2):\n        # if first list has a smaller element, add it to the result\n        if list1[i] < list2[j]:\n            sorted_list.append(list1[i])\n            i += 1\n        # if second list has a smaller element, add it to the result\n        else:\n            sorted_list.append(list2[j])\n            j += 1\n\n    # if there are elements remaining in any of the lists, append them\n    sorted_list.extend(list1[i:])\n    sorted_list.extend(list2[j:])\n\n    return sorted_list\n\nlist1 = [1, 4, 5, 6]\nlist2 = [2, 3, 7, 8]\n\nresult = merge_lists(list1, list2)\nprint(result)","tok_input_length":333,"tok_output_length":256,"system_prompt":"","index":4203}
{"question":"Implement a text classification model in Python using the Keras library. The model should be able to classify a sentence as expressing positive or negative sentiment.","input":"corpus = [\"It is a wonderful day today\",\"the weather is extremely bad today\"]\nlabels = [1, 0]","expected_output":"import numpy as np\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\n\ncorpus = [\"It is a wonderful day today\",\n\"the weather is extremely bad today\"]\nlabels = np.array([1, 0])\n\n# tokenize corpus\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(corpus)\nX = tokenizer.texts_to_sequences(corpus)\nX = sequence.pad_sequences(X, maxlen=10)\n\n# build model\nmodel = Sequential()\nmodel.add(Embedding(len(tokenizer.word_index)+1, 100, input_length=10))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# train the model\nmodel.fit(X, labels, batch_size=1, epochs=20)\n\n# test the model\ntest_sentence = \"today the weather is horrible\"\ntest_tokenized = tokenizer.texts_to_sequences([test_sentence])\ntest_tokenized = sequence.pad_sequences(test_tokenized, maxlen=10)\npredict = model.predict(test_tokenized)\nprint(predict[0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a text classification model in Python using the Keras library. The model should be able to classify a sentence as expressing positive or negative sentiment.\n\n### Input:\ncorpus = [\"It is a wonderful day today\",\"the weather is extremely bad today\"]\nlabels = [1, 0]\n\n### Output:\nimport numpy as np\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\n\ncorpus = [\"It is a wonderful day today\",\n\"the weather is extremely bad today\"]\nlabels = np.array([1, 0])\n\n# tokenize corpus\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(corpus)\nX = tokenizer.texts_to_sequences(corpus)\nX = sequence.pad_sequences(X, maxlen=10)\n\n# build model\nmodel = Sequential()\nmodel.add(Embedding(len(tokenizer.word_index)+1, 100, input_length=10))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# train the model\nmodel.fit(X, labels, batch_size=1, epochs=20)\n\n# test the model\ntest_sentence = \"today the weather is horrible\"\ntest_tokenized = tokenizer.texts_to_sequences([test_sentence])\ntest_tokenized = sequence.pad_sequences(test_tokenized, maxlen=10)\npredict = model.predict(test_tokenized)\nprint(predict[0])","tok_input_length":335,"tok_output_length":253,"system_prompt":"","index":2904}
{"question":"Create a Python program using PyTorch to categorize the sentiment of a sentence into either positive, negative, or neutral.","input":"Sentence: The movie was critically acclaimed.","expected_output":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SentimentClassifier(nn.Module):\n def __init__(self):\n  super().__init__()\n  self.embedding = nn.EmbeddingBag(1000, 16, sparse=True)\n  self.fc = nn.Linear(16, 3)\n \n def forward(self, x):\n  x = self.embedding(x)\n  x = self.fc(x)\n  return x\n\n# instantiate the model\nmodel = SentimentClassifier()\n\n# define the loss and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# train the model\nmodel.train()\nfor i in range(num_epochs):\n # iterate over the data\n for x,y in train_iter:\n  # predict\n  y_pred = model(x)\n \n  # calculate the loss\n  loss = criterion(y_pred, y)\n \n  # backpropagate the loss\n  loss.backward()\n \n  # update weights\n  optimizer.step()\n \n  # zero grad\n  optimizer.zero_grad()\n\n# Test the model\nmodel.eval()\nwith torch.no_grad():\n for x,y in test_iter:\n  y_pred = model(x)\n \n  # calculate the accuracy\n  correct = (y == y_pred.argmax(dim=1)).float().sum()\n  acc = correct\/len(y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using PyTorch to categorize the sentiment of a sentence into either positive, negative, or neutral.\n\n### Input:\nSentence: The movie was critically acclaimed.\n\n### Output:\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SentimentClassifier(nn.Module):\n def __init__(self):\n  super().__init__()\n  self.embedding = nn.EmbeddingBag(1000, 16, sparse=True)\n  self.fc = nn.Linear(16, 3)\n \n def forward(self, x):\n  x = self.embedding(x)\n  x = self.fc(x)\n  return x\n\n# instantiate the model\nmodel = SentimentClassifier()\n\n# define the loss and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# train the model\nmodel.train()\nfor i in range(num_epochs):\n # iterate over the data\n for x,y in train_iter:\n  # predict\n  y_pred = model(x)\n \n  # calculate the loss\n  loss = criterion(y_pred, y)\n \n  # backpropagate the loss\n  loss.backward()\n \n  # update weights\n  optimizer.step()\n \n  # zero grad\n  optimizer.zero_grad()\n\n# Test the model\nmodel.eval()\nwith torch.no_grad():\n for x,y in test_iter:\n  y_pred = model(x)\n \n  # calculate the accuracy\n  correct = (y == y_pred.argmax(dim=1)).float().sum()\n  acc = correct\/len(y)","tok_input_length":336,"tok_output_length":276,"system_prompt":"","index":4907}
{"question":"Design a genetic algorithm for a travelling salesman problem in Python.","input":"","expected_output":"import numpy as np\ndef geneticAlgorithm(population, iter):\n    for i in range(iter):\n        new_population = []\n        \n        for chromosome in population:\n            cost = getCost(chromosome)\n            fitness = 1\/cost\n            parent1, parent2 = selectParents(population)\n            offspring = crossover(parent1, parent2)\n            offspring = mutation(offspring)\n            new_population.append(offspring)\n            \n        population = new_population\n    return population\n    \ndef selectParents(population):\n    parent1, parent2 = getRandomParents(population)\n    fitness1 = getCost(parent1)\n    fitness2 = getCost(parent2)\n    if (fitness1 < fitness2):\n        return parent1, parent2\n    else:\n        return parent2, parent1\n        \ndef getRandomParents(population):\n    parent1 = population[np.random.randint(0, len(population))]\n    parent2 = population[np.random.randint(0, len(population))]\n    while (parent1 == parent2):\n        parent2 = population[np.random.randint(0, len(population))]\n    return parent1, parent2\n    \ndef crossover(parent1, parent2):\n    '''\n    Insert code to perform crossover here\n    '''\n    return offspring\n    \ndef mutation(offspring):\n    '''\n    Insert code to perform mutation here\n    '''\n    return offspring\n    \ndef getCost(chromosome):\n    '''\n    Insert code to compute the cost for a chromosome here\n    '''\n    return cost","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a genetic algorithm for a travelling salesman problem in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\ndef geneticAlgorithm(population, iter):\n    for i in range(iter):\n        new_population = []\n        \n        for chromosome in population:\n            cost = getCost(chromosome)\n            fitness = 1\/cost\n            parent1, parent2 = selectParents(population)\n            offspring = crossover(parent1, parent2)\n            offspring = mutation(offspring)\n            new_population.append(offspring)\n            \n        population = new_population\n    return population\n    \ndef selectParents(population):\n    parent1, parent2 = getRandomParents(population)\n    fitness1 = getCost(parent1)\n    fitness2 = getCost(parent2)\n    if (fitness1 < fitness2):\n        return parent1, parent2\n    else:\n        return parent2, parent1\n        \ndef getRandomParents(population):\n    parent1 = population[np.random.randint(0, len(population))]\n    parent2 = population[np.random.randint(0, len(population))]\n    while (parent1 == parent2):\n        parent2 = population[np.random.randint(0, len(population))]\n    return parent1, parent2\n    \ndef crossover(parent1, parent2):\n    '''\n    Insert code to perform crossover here\n    '''\n    return offspring\n    \ndef mutation(offspring):\n    '''\n    Insert code to perform mutation here\n    '''\n    return offspring\n    \ndef getCost(chromosome):\n    '''\n    Insert code to compute the cost for a chromosome here\n    '''\n    return cost","tok_input_length":337,"tok_output_length":298,"system_prompt":"","index":5194}
{"question":"Generate a Python function that takes a number less than 1000 and returns it written in words.","input":"213","expected_output":"def num2words(number): \n    ones = [\"\", \"one \",\"two \", \"three \", \"four \", \n            \"five \", \"six \", \"seven \", \"eight \", \n            \"nine \", \"ten \", \"eleven \", \"twelve \", \n            \"thirteen \", \"fourteen \", \"fifteen \", \n            \"sixteen \", \"seventeen \", \"eighteen \", \n            \"nineteen \"] \n    tens = [\"\", \"\", \"twenty \", \"thirty \", \"forty \", \n            \"fifty \", \"sixty \", \"seventy \", \"eighty \", \n            \"ninety \"] \n    if(number == 0): \n        return \"zero\"\n    if(number < 0): \n        return \"minus \" + num2words(-1 * number) \n    if((number\/1000) > 0): \n        return num2words(number\/1000) + \"thousand \" + num2words(number%1000) \n    if((number \/ 100) > 0): \n        return num2words(number\/100) + \"hundred \" + num2words(number%100) \n    if((number\/10) > 1):\n        return tens[int(number\/\/10)] + num2words(number % 10) \n    else:\n        return ones[int(number)]\n\nprint(num2words(213))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes a number less than 1000 and returns it written in words.\n\n### Input:\n213\n\n### Output:\ndef num2words(number): \n    ones = [\"\", \"one \",\"two \", \"three \", \"four \", \n            \"five \", \"six \", \"seven \", \"eight \", \n            \"nine \", \"ten \", \"eleven \", \"twelve \", \n            \"thirteen \", \"fourteen \", \"fifteen \", \n            \"sixteen \", \"seventeen \", \"eighteen \", \n            \"nineteen \"] \n    tens = [\"\", \"\", \"twenty \", \"thirty \", \"forty \", \n            \"fifty \", \"sixty \", \"seventy \", \"eighty \", \n            \"ninety \"] \n    if(number == 0): \n        return \"zero\"\n    if(number < 0): \n        return \"minus \" + num2words(-1 * number) \n    if((number\/1000) > 0): \n        return num2words(number\/1000) + \"thousand \" + num2words(number%1000) \n    if((number \/ 100) > 0): \n        return num2words(number\/100) + \"hundred \" + num2words(number%100) \n    if((number\/10) > 1):\n        return tens[int(number\/\/10)] + num2words(number % 10) \n    else:\n        return ones[int(number)]\n\nprint(num2words(213))","tok_input_length":339,"tok_output_length":290,"system_prompt":"","index":8761}
{"question":"Develop a Python program to find the longest common sub-sequence between two string.","input":"\"lmnopq\"\n\"abclmnopq\"","expected_output":"def lcs(X, Y): \n    # find the length of the strings\n    m = len(X)\n    n = len(Y)\n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n\n# Driver program \nX = \"lmnopq\"\nY = \"abclmnopq\"\nprint(\"Length of LCS is \", lcs(X, Y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to find the longest common sub-sequence between two string.\n\n### Input:\n\"lmnopq\"\n\"abclmnopq\"\n\n### Output:\ndef lcs(X, Y): \n    # find the length of the strings\n    m = len(X)\n    n = len(Y)\n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n\n# Driver program \nX = \"lmnopq\"\nY = \"abclmnopq\"\nprint(\"Length of LCS is \", lcs(X, Y))","tok_input_length":341,"tok_output_length":287,"system_prompt":"","index":8748}
{"question":"Create an interactive chatbot in Python using Natural Language Processing that can answer any questions related to the world of programming.","input":"Not applicable","expected_output":"import nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\n#Define preprocessor\ndef preprocess(sentence):\n lemmatizer = WordNetLemmatizer()\n tokens = nltk.word_tokenize(sentence)\n tokens = [lemmatizer.lemmatize(token, get_wordnet_pos(token)) for token in tokens]\n return ' '.join(tokens)\n\n#Define helper function for getting part-of-speech\ndef get_wordnet_pos(word):\n tag = nltk.pos_tag([word])[0][1][0].upper()\n tag_dict = {\n 'J': wordnet.ADJ,\n 'N': wordnet.NOUN,\n 'V': wordnet.VERB,\n 'R': wordnet.ADV\n }\n return tag_dict.get(tag, wordnet.NOUN)\n\n#Define helper function for getting response\ndef get_response(sentence):\n return responses.get(preprocess(sentence), 'I am not sure about that. Can you Ask me a different question?')\n\n#Define responses\nresponses = {\n 'what programming language': 'I use Python, but there are many programming languages to choose from.',\n 'what programming language should i use': 'It depends on what you are trying to achieve, so you should research what language best suits your purpose.'\n}\n\n#Get user input\nquery = input('Ask me about programming: ')\n\n#Get response\nresponse = get_response(query)\n\n#Print response\nprint(response)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an interactive chatbot in Python using Natural Language Processing that can answer any questions related to the world of programming.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\n#Define preprocessor\ndef preprocess(sentence):\n lemmatizer = WordNetLemmatizer()\n tokens = nltk.word_tokenize(sentence)\n tokens = [lemmatizer.lemmatize(token, get_wordnet_pos(token)) for token in tokens]\n return ' '.join(tokens)\n\n#Define helper function for getting part-of-speech\ndef get_wordnet_pos(word):\n tag = nltk.pos_tag([word])[0][1][0].upper()\n tag_dict = {\n 'J': wordnet.ADJ,\n 'N': wordnet.NOUN,\n 'V': wordnet.VERB,\n 'R': wordnet.ADV\n }\n return tag_dict.get(tag, wordnet.NOUN)\n\n#Define helper function for getting response\ndef get_response(sentence):\n return responses.get(preprocess(sentence), 'I am not sure about that. Can you Ask me a different question?')\n\n#Define responses\nresponses = {\n 'what programming language': 'I use Python, but there are many programming languages to choose from.',\n 'what programming language should i use': 'It depends on what you are trying to achieve, so you should research what language best suits your purpose.'\n}\n\n#Get user input\nquery = input('Ask me about programming: ')\n\n#Get response\nresponse = get_response(query)\n\n#Print response\nprint(response)","tok_input_length":343,"tok_output_length":290,"system_prompt":"","index":14337}
{"question":"Build a convolutional neural network in Python to classify the MNIST dataset.","input":"","expected_output":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras import Model\n\n# Load MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\n# Reshape images to (28, 28, 1)\nx_train = x_train.reshape(-1, 28, 28, 1)\nx_test = x_test.reshape(-1, 28, 28, 1)\n\n# Build convolutional neural network\nclass CNN(Model):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = Conv2D(32, (3, 3), activation='relu')\n        self.flatten = Flatten()\n        self.d1 = Dense(128, activation='relu')\n        self.d2 = Dense(10, activation='softmax')\n\n    def call(self, x):\n        x = self.conv1(x)\n        x = self.flatten(x)\n        x = self.d1(x)\n        return self.d2(x)\n\n# Build and compile model\nmodel = CNN()\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train model\nmodel.fit(x_train, y_train, epochs=10)\n\n# Test model\nmodel.evaluate(x_test, y_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a convolutional neural network in Python to classify the MNIST dataset.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras import Model\n\n# Load MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\n# Reshape images to (28, 28, 1)\nx_train = x_train.reshape(-1, 28, 28, 1)\nx_test = x_test.reshape(-1, 28, 28, 1)\n\n# Build convolutional neural network\nclass CNN(Model):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = Conv2D(32, (3, 3), activation='relu')\n        self.flatten = Flatten()\n        self.d1 = Dense(128, activation='relu')\n        self.d2 = Dense(10, activation='softmax')\n\n    def call(self, x):\n        x = self.conv1(x)\n        x = self.flatten(x)\n        x = self.d1(x)\n        return self.d2(x)\n\n# Build and compile model\nmodel = CNN()\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train model\nmodel.fit(x_train, y_train, epochs=10)\n\n# Test model\nmodel.evaluate(x_test, y_test)","tok_input_length":345,"tok_output_length":303,"system_prompt":"","index":12317}
{"question":"Write a Python function to sort list of tuples using custom sorting algorithm. Your sorting algorithm should use last tuple element to sort a given list of tuples in ascending or descending order.","input":"[(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)]","expected_output":"def sort_list_of_tuples(list_of_tuples, key, reverse=False):\n    '''This function sorts a list of tuples based on the specified key\n    in ascending or descending order\n\n    Parameters: \n       list_of_tuples (list): list of tuples\n       key: the index of the tuple that should be used to sort\n       reverse (bool): flag to decide sorting order, \n                        False for ascending, True for descending\n\n    Returns:\n        list: A sorted list of tuples\n    '''\n\n    # sort using specified key\n    sorted_list = sorted(list_of_tuples, key=lambda x: x[key], reverse=reverse)\n\n    return sorted_list\n\nlist_of_tuples = [(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)]\nkey = 2\n\n# Sort in ascending order\nsorted_list_asc = sort_list_of_tuples(list_of_tuples, key, reverse=False)\n\n# Sort in descending order\nsorted_list_desc = sort_list_of_tuples(list_of_tuples, key, reverse=True)\n\nprint(\"Sorted list in ascending order:\", sorted_list_asc)\nprint(\"Sorted list in descending order:\", sorted_list_desc)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to sort list of tuples using custom sorting algorithm. Your sorting algorithm should use last tuple element to sort a given list of tuples in ascending or descending order.\n\n### Input:\n[(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)]\n\n### Output:\ndef sort_list_of_tuples(list_of_tuples, key, reverse=False):\n    '''This function sorts a list of tuples based on the specified key\n    in ascending or descending order\n\n    Parameters: \n       list_of_tuples (list): list of tuples\n       key: the index of the tuple that should be used to sort\n       reverse (bool): flag to decide sorting order, \n                        False for ascending, True for descending\n\n    Returns:\n        list: A sorted list of tuples\n    '''\n\n    # sort using specified key\n    sorted_list = sorted(list_of_tuples, key=lambda x: x[key], reverse=reverse)\n\n    return sorted_list\n\nlist_of_tuples = [(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)]\nkey = 2\n\n# Sort in ascending order\nsorted_list_asc = sort_list_of_tuples(list_of_tuples, key, reverse=False)\n\n# Sort in descending order\nsorted_list_desc = sort_list_of_tuples(list_of_tuples, key, reverse=True)\n\nprint(\"Sorted list in ascending order:\", sorted_list_asc)\nprint(\"Sorted list in descending order:\", sorted_list_desc)","tok_input_length":347,"tok_output_length":249,"system_prompt":"","index":9982}
{"question":"Generate a classification tree from the given dataset.","input":"x1\tx2\tx3\tY\n0\t0\t0\t0\n1\t1\t1\t1\n1\t0\t0\t0\n0\t1\t1\t1","expected_output":"# Python program to generate a classification tree\n# from a given dataset\n\n# Importing the required library\nimport pandas as pd\n\n# Creating a dataframe\ndf = pd.DataFrame({'X1': [0, 1, 1, 0],\n                   'X2': [0, 1, 0, 1],\n                   'X3': [0, 1, 0, 1],\n                   'Y': [0, 1, 0, 1]})\n\n# Traversing all columns except 'Y'\nfor col in df.columns[:-1]:\n\n    # Select 1st row from df\n    first_row = df[col][0]\n\n    # Creating a temporary dataframe\n    df_temp = df[[col, 'Y']]\n\n    # Grouping the dataframe based on the 1st row\n    if first_row == 0:\n        df_grouped = df_temp.groupby([col]).sum().reset_index()\n    else:\n        df_grouped = df_temp.groupby([col]).count().reset_index()\n\n    # Check condition on grouped dataframe\n    condition = (df_grouped['Y'] == 0).all()\n\n    # Traverse through grouped dataframe\n    if condition:\n        print(col + ' - 0')\n    else:\n        print(col + ' - 1')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a classification tree from the given dataset.\n\n### Input:\nx1\tx2\tx3\tY\n0\t0\t0\t0\n1\t1\t1\t1\n1\t0\t0\t0\n0\t1\t1\t1\n\n### Output:\n# Python program to generate a classification tree\n# from a given dataset\n\n# Importing the required library\nimport pandas as pd\n\n# Creating a dataframe\ndf = pd.DataFrame({'X1': [0, 1, 1, 0],\n                   'X2': [0, 1, 0, 1],\n                   'X3': [0, 1, 0, 1],\n                   'Y': [0, 1, 0, 1]})\n\n# Traversing all columns except 'Y'\nfor col in df.columns[:-1]:\n\n    # Select 1st row from df\n    first_row = df[col][0]\n\n    # Creating a temporary dataframe\n    df_temp = df[[col, 'Y']]\n\n    # Grouping the dataframe based on the 1st row\n    if first_row == 0:\n        df_grouped = df_temp.groupby([col]).sum().reset_index()\n    else:\n        df_grouped = df_temp.groupby([col]).count().reset_index()\n\n    # Check condition on grouped dataframe\n    condition = (df_grouped['Y'] == 0).all()\n\n    # Traverse through grouped dataframe\n    if condition:\n        print(col + ' - 0')\n    else:\n        print(col + ' - 1')","tok_input_length":349,"tok_output_length":273,"system_prompt":"","index":11264}
{"question":"Develop a reinforcement learning solution in Python to balance a pole on a cart using OpenAI Gym.","input":"The environment consists of a 4 dimensional state space and 2 dimensional action space.","expected_output":"import gym\nimport numpy as np\n \n# Initialize the environment\nenv = gym.make('CartPole-v0')\n\n# Initialize the Q-Learning neural network\nnum_states = env.observation_space.shape[0]\nnum_actions = env.action_space.n\nQ = np.zeros([num_states, num_actions])\n \n# Set training hyperparameters\nnum_episodes = 500\ndiscount_rate = 0.95\nalpha = 0.1\n \n# Train the neural network\nfor i in range(num_episodes):\n    # Reset the environment\n    s = env.reset()\n    total_reward = 0\n \n    # Iterate until episode is over\n    done = False\n    while not done:\n \n        # Choose an action\n        a = np.argmax(Q[s, :] + np.random.randn(1, env.action_space.n) * (1.\/(i+1)))\n \n        # Get the reward and new state\n        s1, reward, done, _ = env.step(a)\n \n        # Update the Q-table\n        Q[s, a] = Q[s, a] + alpha * (reward + discount_rate * np.max(Q[s1, :]) - Q[s, a])\n \n        total_reward += reward\n        s = s1\n \n    # Print training progress\n    print(\"Episodes: {}\/{}. Score: {}\".format(i+1, num_episodes, total_reward))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a reinforcement learning solution in Python to balance a pole on a cart using OpenAI Gym.\n\n### Input:\nThe environment consists of a 4 dimensional state space and 2 dimensional action space.\n\n### Output:\nimport gym\nimport numpy as np\n \n# Initialize the environment\nenv = gym.make('CartPole-v0')\n\n# Initialize the Q-Learning neural network\nnum_states = env.observation_space.shape[0]\nnum_actions = env.action_space.n\nQ = np.zeros([num_states, num_actions])\n \n# Set training hyperparameters\nnum_episodes = 500\ndiscount_rate = 0.95\nalpha = 0.1\n \n# Train the neural network\nfor i in range(num_episodes):\n    # Reset the environment\n    s = env.reset()\n    total_reward = 0\n \n    # Iterate until episode is over\n    done = False\n    while not done:\n \n        # Choose an action\n        a = np.argmax(Q[s, :] + np.random.randn(1, env.action_space.n) * (1.\/(i+1)))\n \n        # Get the reward and new state\n        s1, reward, done, _ = env.step(a)\n \n        # Update the Q-table\n        Q[s, a] = Q[s, a] + alpha * (reward + discount_rate * np.max(Q[s1, :]) - Q[s, a])\n \n        total_reward += reward\n        s = s1\n \n    # Print training progress\n    print(\"Episodes: {}\/{}. Score: {}\".format(i+1, num_episodes, total_reward))","tok_input_length":350,"tok_output_length":287,"system_prompt":"","index":9209}
{"question":"Create an AI chatbot in Python using Dialogflow which returns a web search result when a user asks \"How do I fix my broken window?\".","input":"Not applicable","expected_output":"import dialogflow\nimport json\nimport requests\n\n# Define the Dialogflow intent\ndef detect_intent_from_text(text, language_code, project_id, session_id):\n session_client = dialogflow.SessionsClient()\n session = session_client.session_path(project_id, session_id)\n text_input = dialogflow.types.TextInput(text=text, language_code=language_code)\n query_input = dialogflow.types.QueryInput(text=text_input)\n response = session_client.detect_intent(session=session, query_input=query_input)\n return response.query_result\n\n# Define web search logic\ndef search_web(query):\n URL = \"https:\/\/www.google.com\/search\"\n PARAMS = {'q': query}\n response = requests.get(url=URL, params=PARAMS)\n result = response.text\n return result\n\n# Define the main function\ndef main():\n # Setup Dialogflow parameters\n language_code = 'en-US'\n project_id = 'dialogflowproject-ghyvgx'\n session_id = 'test'\n\n# Pass user query to Dialogflow\n text = 'How do I fix my broken window?'\n response = detect_intent_from_text(text, language_code, project_id, session_id)\n intent = response.intent.display_name\n parameters = response.parameters\n\n# If intent is web search, search the web\n if intent == 'web search':\n query = parameters.get('query')\n result = search_web(query)\n print(result)\n\n# Call the main function\nif __name__ == '__main__':\n main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI chatbot in Python using Dialogflow which returns a web search result when a user asks \"How do I fix my broken window?\".\n\n### Input:\nNot applicable\n\n### Output:\nimport dialogflow\nimport json\nimport requests\n\n# Define the Dialogflow intent\ndef detect_intent_from_text(text, language_code, project_id, session_id):\n session_client = dialogflow.SessionsClient()\n session = session_client.session_path(project_id, session_id)\n text_input = dialogflow.types.TextInput(text=text, language_code=language_code)\n query_input = dialogflow.types.QueryInput(text=text_input)\n response = session_client.detect_intent(session=session, query_input=query_input)\n return response.query_result\n\n# Define web search logic\ndef search_web(query):\n URL = \"https:\/\/www.google.com\/search\"\n PARAMS = {'q': query}\n response = requests.get(url=URL, params=PARAMS)\n result = response.text\n return result\n\n# Define the main function\ndef main():\n # Setup Dialogflow parameters\n language_code = 'en-US'\n project_id = 'dialogflowproject-ghyvgx'\n session_id = 'test'\n\n# Pass user query to Dialogflow\n text = 'How do I fix my broken window?'\n response = detect_intent_from_text(text, language_code, project_id, session_id)\n intent = response.intent.display_name\n parameters = response.parameters\n\n# If intent is web search, search the web\n if intent == 'web search':\n query = parameters.get('query')\n result = search_web(query)\n print(result)\n\n# Call the main function\nif __name__ == '__main__':\n main()","tok_input_length":352,"tok_output_length":292,"system_prompt":"","index":8947}
{"question":"Using Python, design a function which takes the input string and checks for an anagram.","input":"string1 = \"star\" , string2 = \"rats\"","expected_output":"def is_anagram(str1,str2):\n\u00a0\u00a0# remove all white space\n\u00a0\u00a0str1\u00a0=\u00a0str1.replace(' ','')\n\u00a0\u00a0str2\u00a0=\u00a0str2.replace(' ','')\n\n\u00a0\u00a0# check if length of strings are equal\n\u00a0\u00a0if len(str1) != len(str2):\n\u00a0\u00a0\u00a0\u00a0return\u00a0False\n\n\u00a0\u00a0# create a dictionary to store the frequency of each letter\n\u00a0\u00a0freq_dict\u00a0=\u00a0{}\n\n\u00a0\u00a0# calculate of each letter in the first string to the dictionary\n\u00a0\u00a0for letter in str1:\n\u00a0\u00a0\u00a0\u00a0if\u00a0letter\u00a0in\u00a0freq_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_dict[letter]\u00a0+=\u00a01\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_dict[letter]\u00a0=\u00a01\n\n\u00a0\u00a0# check if the frequency of each letter in the second string is in the dictionary\n\u00a0\u00a0for letter in str2:\n\u00a0\u00a0\u00a0\u00a0if\u00a0letter\u00a0not\u00a0in\u00a0freq_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0False\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_dict[letter]\u00a0-=\u00a01\n\n\u00a0\u00a0# check if each letter in the dictionary has a frequency of zero\n\u00a0\u00a0for\u00a0letter\u00a0in\u00a0freq_dict:\n\u00a0\u00a0\u00a0\u00a0if\u00a0freq_dict[letter]\u00a0!=\u00a00:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0False\n\n\u00a0\u00a0return\u00a0True\n\nstring1 = \"star\" \nstring2 = \"rats\"\n\nprint(is_anagram(string1, string2))\n# Output : True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, design a function which takes the input string and checks for an anagram.\n\n### Input:\nstring1 = \"star\" , string2 = \"rats\"\n\n### Output:\ndef is_anagram(str1,str2):\n\u00a0\u00a0# remove all white space\n\u00a0\u00a0str1\u00a0=\u00a0str1.replace(' ','')\n\u00a0\u00a0str2\u00a0=\u00a0str2.replace(' ','')\n\n\u00a0\u00a0# check if length of strings are equal\n\u00a0\u00a0if len(str1) != len(str2):\n\u00a0\u00a0\u00a0\u00a0return\u00a0False\n\n\u00a0\u00a0# create a dictionary to store the frequency of each letter\n\u00a0\u00a0freq_dict\u00a0=\u00a0{}\n\n\u00a0\u00a0# calculate of each letter in the first string to the dictionary\n\u00a0\u00a0for letter in str1:\n\u00a0\u00a0\u00a0\u00a0if\u00a0letter\u00a0in\u00a0freq_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_dict[letter]\u00a0+=\u00a01\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_dict[letter]\u00a0=\u00a01\n\n\u00a0\u00a0# check if the frequency of each letter in the second string is in the dictionary\n\u00a0\u00a0for letter in str2:\n\u00a0\u00a0\u00a0\u00a0if\u00a0letter\u00a0not\u00a0in\u00a0freq_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0False\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_dict[letter]\u00a0-=\u00a01\n\n\u00a0\u00a0# check if each letter in the dictionary has a frequency of zero\n\u00a0\u00a0for\u00a0letter\u00a0in\u00a0freq_dict:\n\u00a0\u00a0\u00a0\u00a0if\u00a0freq_dict[letter]\u00a0!=\u00a00:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0False\n\n\u00a0\u00a0return\u00a0True\n\nstring1 = \"star\" \nstring2 = \"rats\"\n\nprint(is_anagram(string1, string2))\n# Output : True","tok_input_length":354,"tok_output_length":296,"system_prompt":"","index":8849}
{"question":"Generate a function for multiplying two matrices in Python.","input":"matrix1 = [ [1, 2],         \n            [3, 4]\n          ]  \nmatrix2 = [ [5, 6],  \n            [7, 8]\n          ]","expected_output":"def multiply_matrices(matrix1, matrix2):\n  # Calculates the number of rows and columns of the matrices\n  rows_A = len(matrix1)\n  cols_A = len(matrix1[0])\n  rows_B = len(matrix2)\n  cols_B = len(matrix2[0])\n\n  # Check if the matrices have valid dimensions\n  if cols_A != rows_B:\n   print(\"Error! The matrices have invalid dimensions\")\n\n  # Initialize a new matrix as result\n  result = [[0 for row in range(cols_B)] for col in range(rows_A)]\n\n  # Iterate over the rows of the first matrix\n  for i in range(rows_A):\n   # Iterate over the columns of the second matrix\n   for j in range(cols_B):\n    # Iterate over the columns of the first matrix\n    for k in range(cols_A): \n     result[i][j] += matrix1[i][k] * matrix2[k][j]\n\n  return result\n\n# Input matrices  \nmatrix1 = [ [1, 2],         \n            [3, 4]\n          ]  \nmatrix2 = [ [5, 6],  \n            [7, 8]\n          ]\n\n# Call the function and print the result\nresult = multiply_matrices(matrix1, matrix2) \nprint(result) \/\/ [[19, 22], [43, 50]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function for multiplying two matrices in Python.\n\n### Input:\nmatrix1 = [ [1, 2],         \n            [3, 4]\n          ]  \nmatrix2 = [ [5, 6],  \n            [7, 8]\n          ]\n\n### Output:\ndef multiply_matrices(matrix1, matrix2):\n  # Calculates the number of rows and columns of the matrices\n  rows_A = len(matrix1)\n  cols_A = len(matrix1[0])\n  rows_B = len(matrix2)\n  cols_B = len(matrix2[0])\n\n  # Check if the matrices have valid dimensions\n  if cols_A != rows_B:\n   print(\"Error! The matrices have invalid dimensions\")\n\n  # Initialize a new matrix as result\n  result = [[0 for row in range(cols_B)] for col in range(rows_A)]\n\n  # Iterate over the rows of the first matrix\n  for i in range(rows_A):\n   # Iterate over the columns of the second matrix\n   for j in range(cols_B):\n    # Iterate over the columns of the first matrix\n    for k in range(cols_A): \n     result[i][j] += matrix1[i][k] * matrix2[k][j]\n\n  return result\n\n# Input matrices  \nmatrix1 = [ [1, 2],         \n            [3, 4]\n          ]  \nmatrix2 = [ [5, 6],  \n            [7, 8]\n          ]\n\n# Call the function and print the result\nresult = multiply_matrices(matrix1, matrix2) \nprint(result) \/\/ [[19, 22], [43, 50]]","tok_input_length":357,"tok_output_length":279,"system_prompt":"","index":13264}
{"question":"Create a classification decision tree using Python to predict the likelihood of a online customer buying a product.","input":"Sample Customer Data\nID   Age Gender Occupation Type City Member since  Months on Site Purchase\n1    23  Female  Manager    Large    London    7\/12\/2011 36     No\n2    40   Male   Teacher   Rural   Leeds    11\/2\/2013    12     Yes\n3    57  Female  Engineer  Large    London    4\/4\/2015    3      No\n4    28   Male   Cook     Urban   Cardiff  1\/3\/2016    9      Yes\n5    45  Female  Nurse    Urban   Liverpool 11\/11\/2016  18     No","expected_output":"import pandas as pd \nfrom sklearn import tree \ndata = pd.read_csv('customer_data.csv') \nfeature_names = ['Age','Gender','Occupation','Type','City','Member since','Months on Site'] \ntarget_names = ['No','Yes'] \nX = data[feature_names].values \ny = data['Purchase'].values \n\n# Create decision tree classifier \nclf = tree.DecisionTreeClassifier() \n\n# Train the decision tree classifier \nclf = clf.fit(X, y) \n\n# Visualize the decision tree \ndot_data = tree.export_graphviz(clf, out_file=None, \n                     feature_names=feature_names,  \n                     class_names=target_names,  \n                     filled=True, rounded=True,  \n                     special_characters=True)  \nimport graphviz \ngraph = graphviz.Source(dot_data)  \ngraph","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a classification decision tree using Python to predict the likelihood of a online customer buying a product.\n\n### Input:\nSample Customer Data\nID   Age Gender Occupation Type City Member since  Months on Site Purchase\n1    23  Female  Manager    Large    London    7\/12\/2011 36     No\n2    40   Male   Teacher   Rural   Leeds    11\/2\/2013    12     Yes\n3    57  Female  Engineer  Large    London    4\/4\/2015    3      No\n4    28   Male   Cook     Urban   Cardiff  1\/3\/2016    9      Yes\n5    45  Female  Nurse    Urban   Liverpool 11\/11\/2016  18     No\n\n### Output:\nimport pandas as pd \nfrom sklearn import tree \ndata = pd.read_csv('customer_data.csv') \nfeature_names = ['Age','Gender','Occupation','Type','City','Member since','Months on Site'] \ntarget_names = ['No','Yes'] \nX = data[feature_names].values \ny = data['Purchase'].values \n\n# Create decision tree classifier \nclf = tree.DecisionTreeClassifier() \n\n# Train the decision tree classifier \nclf = clf.fit(X, y) \n\n# Visualize the decision tree \ndot_data = tree.export_graphviz(clf, out_file=None, \n                     feature_names=feature_names,  \n                     class_names=target_names,  \n                     filled=True, rounded=True,  \n                     special_characters=True)  \nimport graphviz \ngraph = graphviz.Source(dot_data)  \ngraph","tok_input_length":360,"tok_output_length":167,"system_prompt":"","index":2936}
{"question":"Visualize the number of sales a retail shop has made over the last 3 months in Python.","input":"Quantity of Sales in each Month","expected_output":"import matplotlib.pyplot as plt\n\n# Data for plotting\nmonth1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales1 = [10, 40, 20, 30, 45, 55, 36, 27, 28, 20]\n\nmonth2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales2 = [2, 32, 15, 12, 18, 50, 46, 34, 28, 25]\n\nmonth3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales3 = [20, 15, 18, 17, 33, 55, 65, 64, 45, 35]\n\n# Visualizing data\nfig, ax = plt.subplots(1, 1)\n\nax.plot(month1, sales1, color='blue', label='Month 1')\nax.plot(month2, sales2, color='red', label='Month 2')\nax.plot(month3, sales3, color='green', label='Month 3')\n\nplt.title('Retail Shop Sales Data')\nplt.xlabel('Month')\nplt.ylabel('Quantity of Sales')\nplt.legend()\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nVisualize the number of sales a retail shop has made over the last 3 months in Python.\n\n### Input:\nQuantity of Sales in each Month\n\n### Output:\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nmonth1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales1 = [10, 40, 20, 30, 45, 55, 36, 27, 28, 20]\n\nmonth2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales2 = [2, 32, 15, 12, 18, 50, 46, 34, 28, 25]\n\nmonth3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales3 = [20, 15, 18, 17, 33, 55, 65, 64, 45, 35]\n\n# Visualizing data\nfig, ax = plt.subplots(1, 1)\n\nax.plot(month1, sales1, color='blue', label='Month 1')\nax.plot(month2, sales2, color='red', label='Month 2')\nax.plot(month3, sales3, color='green', label='Month 3')\n\nplt.title('Retail Shop Sales Data')\nplt.xlabel('Month')\nplt.ylabel('Quantity of Sales')\nplt.legend()\nplt.show()","tok_input_length":361,"tok_output_length":307,"system_prompt":"","index":15859}
{"question":"Can you provide a Python code snippet to detect the collinear points given N points in an array?","input":"points = [[1,1],[2,-1],[3,0],[4,1],[5,0]]","expected_output":"# Check if point p3 lies on the line joining p1 and p2\ndef checkCollinearity(p1, p2, p3): \n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    x3 = p3[0]\n    y3 = p3[1]\n  \n    # Calculating position of the point wrt the line joining the other two points. \n    position = ((y2 - y1) * (x3 - x1)) - ((y3 - y1) * (x2 - x1))\n\n    # Checking if collinear. If position is 0 then points are collinear.\n    if (position == 0): \n        return True\n    else: \n        return False\n\n# Counting collinear point pairs \ncollinear_pairs = 0\nfor i in range(len(points)): \n    for j in range(i+1, len(points)): \n        for k in range(j+1, len(points)): \n            p1 = points[i]\n            p2 = points[j]\n            p3 = points[k]\n\n            # Checking condition \n            if checkCollinearity(p1, p2, p3): \n                collinear_pairs = collinear_pairs + 1\n\nprint(\"Collinear Pairs = \", collinear_pairs)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a Python code snippet to detect the collinear points given N points in an array?\n\n### Input:\npoints = [[1,1],[2,-1],[3,0],[4,1],[5,0]]\n\n### Output:\n# Check if point p3 lies on the line joining p1 and p2\ndef checkCollinearity(p1, p2, p3): \n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    x3 = p3[0]\n    y3 = p3[1]\n  \n    # Calculating position of the point wrt the line joining the other two points. \n    position = ((y2 - y1) * (x3 - x1)) - ((y3 - y1) * (x2 - x1))\n\n    # Checking if collinear. If position is 0 then points are collinear.\n    if (position == 0): \n        return True\n    else: \n        return False\n\n# Counting collinear point pairs \ncollinear_pairs = 0\nfor i in range(len(points)): \n    for j in range(i+1, len(points)): \n        for k in range(j+1, len(points)): \n            p1 = points[i]\n            p2 = points[j]\n            p3 = points[k]\n\n            # Checking condition \n            if checkCollinearity(p1, p2, p3): \n                collinear_pairs = collinear_pairs + 1\n\nprint(\"Collinear Pairs = \", collinear_pairs)","tok_input_length":365,"tok_output_length":295,"system_prompt":"","index":11540}
{"question":"Implement a Binary Search Tree (BST) in Python. The BST should have  methods for insertion, search and traversal.","input":"Not applicable","expected_output":"class Node:\n def __init__(self, data):\n self.left = None\n self.right = None\n self.data = data\n\n    \nclass BST:\n def __init__(self):\n self.root = None\n \n def insert(self, data):\n if self.root == None:\n self.root = Node(data)\n else:\n self._insert(data, self.root)\n \n def _insert(self, data, curr_node):\n if data < curr_node.data:\n if curr_node.left == None:\n curr_node.left = Node(data)\n else:\n self._insert(data, curr_node.left)\n \n elif data > curr_node.data:\n if curr_node.right == None:\n curr_node.right = Node(data)\n else:\n self._insert(data, curr_node.right)\n else:\n print(\"Value already present in tree\")\n \n def search(self, data):\n if self.root != None:\n return self._search(data, self.root)\n else:\n return False\n \n def _search(self, data, curr_node):\n if data == curr_node.data:\n return True\n elif data < curr_node.data and curr_node.left != None:\n return self._search(data, curr_node.left)\n elif data > curr_node.data and curr_node.right != None:\n return self._search(data, curr_node.right)\n \n def traverse(self):\n if self.root != None:\n self._traverse(self.root)\n \n def _traverse(self, curr_node):\n if curr_node.left != None:\n self._traverse(curr_node.left)\n \n print(curr_node.data)\n \n if curr_node.right != None:\n self._traverse(curr_node.right)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Binary Search Tree (BST) in Python. The BST should have  methods for insertion, search and traversal.\n\n### Input:\nNot applicable\n\n### Output:\nclass Node:\n def __init__(self, data):\n self.left = None\n self.right = None\n self.data = data\n\n    \nclass BST:\n def __init__(self):\n self.root = None\n \n def insert(self, data):\n if self.root == None:\n self.root = Node(data)\n else:\n self._insert(data, self.root)\n \n def _insert(self, data, curr_node):\n if data < curr_node.data:\n if curr_node.left == None:\n curr_node.left = Node(data)\n else:\n self._insert(data, curr_node.left)\n \n elif data > curr_node.data:\n if curr_node.right == None:\n curr_node.right = Node(data)\n else:\n self._insert(data, curr_node.right)\n else:\n print(\"Value already present in tree\")\n \n def search(self, data):\n if self.root != None:\n return self._search(data, self.root)\n else:\n return False\n \n def _search(self, data, curr_node):\n if data == curr_node.data:\n return True\n elif data < curr_node.data and curr_node.left != None:\n return self._search(data, curr_node.left)\n elif data > curr_node.data and curr_node.right != None:\n return self._search(data, curr_node.right)\n \n def traverse(self):\n if self.root != None:\n self._traverse(self.root)\n \n def _traverse(self, curr_node):\n if curr_node.left != None:\n self._traverse(curr_node.left)\n \n print(curr_node.data)\n \n if curr_node.right != None:\n self._traverse(curr_node.right)","tok_input_length":367,"tok_output_length":313,"system_prompt":"","index":8592}
{"question":"Design a Python class to represent a Binary Search Tree.","input":"","expected_output":"class BinarySearchTree:\n    '''\n    A binary search tree is a Tree Data Structure \n    in which each node has at most two children which \n    are referred to as the left child and the right child.\n    '''\n\n    #defining a constructor to initialize the root node of a BST\n    def __init__(self, value): \n        self.value = value \n        self.left = None\n        self.right = None\n        \n    #method to insert a node at its correct position in BST\n    def insert(self, value): \n        #compare the new element with the root node\n        if self.value > value:\n            #if the new element is smaller than root node,\n            #it has to be inserted in left subtree\n            if self.left is None: \n                self.left = BinarySearchTree(value) \n            else: \n                self.left.insert(value) \n        else:\n            #if the new element is greater than root node,\n            #it has to be inserted in right subtree\n            if self.right is None: \n                self.right = BinarySearchTree(value) \n            else: \n                self.right.insert(value) \n    \n    #method to search an element in the tree\n    def search(self, value): \n        if self.value == value:\n            return True\n        #search in left subtree\n        if value < self.value: \n            if self.left is None: \n                return False\n            return self.left.search(value)\n        #search in right subtree\n        if value > self.value: \n            if self.right is None: \n                return False\n            return self.right.search(value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a Binary Search Tree.\n\n### Input:\n\n\n### Output:\nclass BinarySearchTree:\n    '''\n    A binary search tree is a Tree Data Structure \n    in which each node has at most two children which \n    are referred to as the left child and the right child.\n    '''\n\n    #defining a constructor to initialize the root node of a BST\n    def __init__(self, value): \n        self.value = value \n        self.left = None\n        self.right = None\n        \n    #method to insert a node at its correct position in BST\n    def insert(self, value): \n        #compare the new element with the root node\n        if self.value > value:\n            #if the new element is smaller than root node,\n            #it has to be inserted in left subtree\n            if self.left is None: \n                self.left = BinarySearchTree(value) \n            else: \n                self.left.insert(value) \n        else:\n            #if the new element is greater than root node,\n            #it has to be inserted in right subtree\n            if self.right is None: \n                self.right = BinarySearchTree(value) \n            else: \n                self.right.insert(value) \n    \n    #method to search an element in the tree\n    def search(self, value): \n        if self.value == value:\n            return True\n        #search in left subtree\n        if value < self.value: \n            if self.left is None: \n                return False\n            return self.left.search(value)\n        #search in right subtree\n        if value > self.value: \n            if self.right is None: \n                return False\n            return self.right.search(value)","tok_input_length":369,"tok_output_length":331,"system_prompt":"","index":7936}
{"question":"Implement a doubly linked list in Python.","input":"","expected_output":"class Node(object):\n    def __init__(self, value, prev, next):\n        self.value = value\n        self.prev = prev\n        self.next = next\n\n\nclass LinkedList(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.length = 0\n\n    def append(self, value):\n        node = Node(value, None, None)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            self.tail.next = node\n            node.prev = self.tail\n            self.tail = node\n        self.length += 1\n\n    def prepend(self, value):\n        node = Node(value, None, None)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            node.next = self.head\n            self.head.prev = node\n            self.head = node\n        self.length += 1\n\n    def get_at_index(self, index):\n        if index < 0 or index > self.length - 1:\n            return None\n        else:\n            current_node = self.head\n            for _ in range(index):\n                current_node = current_node.next\n            return current_node.value\n\n    def remove_at_index(self, index):\n        if index < 0 or index > self.length - 1:\n            return None\n        else:\n            current_node = self.head\n            for _ in range(index):\n                current_node = current_node.next\n            current_node.prev.next = current_node.next\n            current_node.next.prev = current_node.prev\n            self.length -= 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a doubly linked list in Python.\n\n### Input:\n\n\n### Output:\nclass Node(object):\n    def __init__(self, value, prev, next):\n        self.value = value\n        self.prev = prev\n        self.next = next\n\n\nclass LinkedList(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.length = 0\n\n    def append(self, value):\n        node = Node(value, None, None)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            self.tail.next = node\n            node.prev = self.tail\n            self.tail = node\n        self.length += 1\n\n    def prepend(self, value):\n        node = Node(value, None, None)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            node.next = self.head\n            self.head.prev = node\n            self.head = node\n        self.length += 1\n\n    def get_at_index(self, index):\n        if index < 0 or index > self.length - 1:\n            return None\n        else:\n            current_node = self.head\n            for _ in range(index):\n                current_node = current_node.next\n            return current_node.value\n\n    def remove_at_index(self, index):\n        if index < 0 or index > self.length - 1:\n            return None\n        else:\n            current_node = self.head\n            for _ in range(index):\n                current_node = current_node.next\n            current_node.prev.next = current_node.next\n            current_node.next.prev = current_node.prev\n            self.length -= 1","tok_input_length":371,"tok_output_length":336,"system_prompt":"","index":11473}
{"question":"Design a Python algorithm to identify the longest common subsequence from two strings.","input":"","expected_output":"def lcs(a, b):\n    # Generate a 2D matrix from the two strings\n    arr = [[0 for x in range(len(b)+1)] for x in range(len(a)+1)]\n    # Initialize the matrix\n    for i in range(len(a) + 1): \n        for j in range(len(b) + 1): \n            if i == 0 or j == 0: \n                arr[i][j] = 0\n            # If the characters at i and j match \n            elif a[i-1] == b[j-1]: \n                arr[i][j] = arr[i-1][j-1] + 1\n            # If the characters dont match \n            else: \n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n    # Traverse the 2D matrix and find the longest common subsequence\n    index = arr[len(a)][len(b)]\n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n    i = len(a) \n    j = len(b)\n    while i > 0 and j > 0: \n        if a[i-1] == b[j-1]: \n            lcs[index-1] = a[i-1]\n            i-=1\n            j-=1\n            index-=1\n        elif arr[i-1][j] > arr[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    return \"\".join(lcs)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm to identify the longest common subsequence from two strings.\n\n### Input:\n\n\n### Output:\ndef lcs(a, b):\n    # Generate a 2D matrix from the two strings\n    arr = [[0 for x in range(len(b)+1)] for x in range(len(a)+1)]\n    # Initialize the matrix\n    for i in range(len(a) + 1): \n        for j in range(len(b) + 1): \n            if i == 0 or j == 0: \n                arr[i][j] = 0\n            # If the characters at i and j match \n            elif a[i-1] == b[j-1]: \n                arr[i][j] = arr[i-1][j-1] + 1\n            # If the characters dont match \n            else: \n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n    # Traverse the 2D matrix and find the longest common subsequence\n    index = arr[len(a)][len(b)]\n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n    i = len(a) \n    j = len(b)\n    while i > 0 and j > 0: \n        if a[i-1] == b[j-1]: \n            lcs[index-1] = a[i-1]\n            i-=1\n            j-=1\n            index-=1\n        elif arr[i-1][j] > arr[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    return \"\".join(lcs)","tok_input_length":374,"tok_output_length":332,"system_prompt":"","index":18015}
{"question":"Generate a python program to print all possible paths from top left to bottom right of a mXn matrix both the row and column indices of the matrix should be numbered starting from 0.","input":"","expected_output":"def print_all_paths(m, n): \n    # create a two dimensional array to store the path \n    path = [[0 for i in range(m)] for j in range(n)] \n    print_all_paths_util(m, n, 0, 0, path) \n  \n# utility function to print all paths  \ndef print_all_paths_util(m, n, row, col, path): \n    # if we reach the bottommost row, then append the  \n    # current position to the path array  \n    if (row == m-1): \n        for i in range(col, n): \n            path[row][i] = 1\n        print(path)\n\n    # If we reach the rightmost column, then append the  \n    # current position to the path array  \n    elif (col == n-1): \n        for i in range(row, m): \n            path[i][col] = 1\n        print(path)\n\n    # When neither row or the column indices  \n    # have reached the bottom or rightmost  \n    else:\n        # mark the current cell 1 \n        path[row][col] = 1\n  \n        # print all paths by exploring right \n        print_all_paths_util(m, n, row, col + 1, path) \n        # print all paths by exploring down \n        print_all_paths_util(m, n, row + 1, col, path) \n  \n        # mark the current cell 0  \n        path[row][col] = 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to print all possible paths from top left to bottom right of a mXn matrix both the row and column indices of the matrix should be numbered starting from 0.\n\n### Input:\n\n\n### Output:\ndef print_all_paths(m, n): \n    # create a two dimensional array to store the path \n    path = [[0 for i in range(m)] for j in range(n)] \n    print_all_paths_util(m, n, 0, 0, path) \n  \n# utility function to print all paths  \ndef print_all_paths_util(m, n, row, col, path): \n    # if we reach the bottommost row, then append the  \n    # current position to the path array  \n    if (row == m-1): \n        for i in range(col, n): \n            path[row][i] = 1\n        print(path)\n\n    # If we reach the rightmost column, then append the  \n    # current position to the path array  \n    elif (col == n-1): \n        for i in range(row, m): \n            path[i][col] = 1\n        print(path)\n\n    # When neither row or the column indices  \n    # have reached the bottom or rightmost  \n    else:\n        # mark the current cell 1 \n        path[row][col] = 1\n  \n        # print all paths by exploring right \n        print_all_paths_util(m, n, row, col + 1, path) \n        # print all paths by exploring down \n        print_all_paths_util(m, n, row + 1, col, path) \n  \n        # mark the current cell 0  \n        path[row][col] = 0","tok_input_length":377,"tok_output_length":312,"system_prompt":"","index":13297}
{"question":"Write a Python program to calculate a PageRank score for a given set of web pages.","input":"webpages = [\n {\n \"url\": \"page1.html\",\n \"nodes\": [ \"page2.html\", \"page4.html\" ]\n },\n {\n \"url\": \"page2.html\",\n \"nodes\": [ \"page3.html\", \"page4.html\", \"page5.html\" ]\n },\n {\n \"url\": \"page3.html\",\n \"nodes\": [ \"page1.html\", \"page4.html\" ]\n },\n {\n \"url\": \"page4.html\",\n \"nodes\": [ \"page2.html\", \"page3.html\", \"page5.html\" ]\n },\n {\n \"url\": \"page5.html\",\n \"nodes\": [ \"page4.html\" ]\n }\n]","expected_output":"# Define the pages\npages = {}\nfor page in webpages:\n pages[page[\"url\"]] = page[\"nodes\"]\n\n# Calculate page rank\nd = 0.85 # damping factor\nN = len(pages) # number of webpages\nr = [1\/N] * N # page rank values (initialized to 1\/N)\n\n# iterate until convergence\nwhile True:\n new_r = [0] * N\n for i, node in enumerate(pages):\n for neighbor in pages[node]:\n new_r[i] += r[pages[node].index(neighbor)] \/ len(pages[neighbor])\n new_r[i] *= d\n new_r[i] += (1 - d) \/ N\n if sum([abs(new_r[i] - r[i]) for i in range(N)]) < 0.001:\n break\n else:\n r = new_r\n\n# Print the results\nfor url, page_rank in zip(pages.keys(), r):\n print(url, \":\", page_rank)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate a PageRank score for a given set of web pages.\n\n### Input:\nwebpages = [\n {\n \"url\": \"page1.html\",\n \"nodes\": [ \"page2.html\", \"page4.html\" ]\n },\n {\n \"url\": \"page2.html\",\n \"nodes\": [ \"page3.html\", \"page4.html\", \"page5.html\" ]\n },\n {\n \"url\": \"page3.html\",\n \"nodes\": [ \"page1.html\", \"page4.html\" ]\n },\n {\n \"url\": \"page4.html\",\n \"nodes\": [ \"page2.html\", \"page3.html\", \"page5.html\" ]\n },\n {\n \"url\": \"page5.html\",\n \"nodes\": [ \"page4.html\" ]\n }\n]\n\n### Output:\n# Define the pages\npages = {}\nfor page in webpages:\n pages[page[\"url\"]] = page[\"nodes\"]\n\n# Calculate page rank\nd = 0.85 # damping factor\nN = len(pages) # number of webpages\nr = [1\/N] * N # page rank values (initialized to 1\/N)\n\n# iterate until convergence\nwhile True:\n new_r = [0] * N\n for i, node in enumerate(pages):\n for neighbor in pages[node]:\n new_r[i] += r[pages[node].index(neighbor)] \/ len(pages[neighbor])\n new_r[i] *= d\n new_r[i] += (1 - d) \/ N\n if sum([abs(new_r[i] - r[i]) for i in range(N)]) < 0.001:\n break\n else:\n r = new_r\n\n# Print the results\nfor url, page_rank in zip(pages.keys(), r):\n print(url, \":\", page_rank)","tok_input_length":380,"tok_output_length":200,"system_prompt":"","index":4379}
{"question":"Create a python program to simulate a race between two cars.","input":"","expected_output":"import random \n\n# Initialize cars \nclass Car: \n    def __init__(self, name): \n        self.name = name \n        self.speed = 0\n        self.distance_travelled = 0\n\n# Create cars \ncar1 = Car('Red') \ncar2 = Car('Black') \n\n# Simulation loop \nwhile(True): \n    # Increase speed for each car \n    car1.speed = round(random.uniform(0, 100), 2) \n    car2.speed = round(random.uniform(0, 100), 2) \n    \n    # If any car has higher speed, increase its distance \n    if car1.speed > car2.speed: \n        car1.distance_travelled += car1.speed \n    else: \n        car2.distance_travelled += car2.speed \n        \n    # Display the current state \n    print('Car 1 Speed: ', car1.speed, ' km\/h', \n          '\\tCar 1 Distance Travelled:', car1.distance_travelled,\n          '\\nCar 2 Speed: ', car2.speed, ' km\/h', \n          '\\tCar 2 Distance Travelled:', car2.distance_travelled) \n    \n    # End the loop if either car has travelled 1000 km or more \n    if car1.distance_travelled >= 1000 or car2.distance_travelled >= 1000: \n        break\n\n# Print the final winner of the race \nif car1.distance_travelled > car2.distance_travelled: \n    print('\\n{} won the race!'.format(car1.name)) \nelse: \n    print('\\n{} won the race!'.format(car2.name))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to simulate a race between two cars.\n\n### Input:\n\n\n### Output:\nimport random \n\n# Initialize cars \nclass Car: \n    def __init__(self, name): \n        self.name = name \n        self.speed = 0\n        self.distance_travelled = 0\n\n# Create cars \ncar1 = Car('Red') \ncar2 = Car('Black') \n\n# Simulation loop \nwhile(True): \n    # Increase speed for each car \n    car1.speed = round(random.uniform(0, 100), 2) \n    car2.speed = round(random.uniform(0, 100), 2) \n    \n    # If any car has higher speed, increase its distance \n    if car1.speed > car2.speed: \n        car1.distance_travelled += car1.speed \n    else: \n        car2.distance_travelled += car2.speed \n        \n    # Display the current state \n    print('Car 1 Speed: ', car1.speed, ' km\/h', \n          '\\tCar 1 Distance Travelled:', car1.distance_travelled,\n          '\\nCar 2 Speed: ', car2.speed, ' km\/h', \n          '\\tCar 2 Distance Travelled:', car2.distance_travelled) \n    \n    # End the loop if either car has travelled 1000 km or more \n    if car1.distance_travelled >= 1000 or car2.distance_travelled >= 1000: \n        break\n\n# Print the final winner of the race \nif car1.distance_travelled > car2.distance_travelled: \n    print('\\n{} won the race!'.format(car1.name)) \nelse: \n    print('\\n{} won the race!'.format(car2.name))","tok_input_length":381,"tok_output_length":342,"system_prompt":"","index":12264}
{"question":"Write a Python program to classify a given set of features as convex or non-convex.","input":"[(1,0), (2,3), (3,1), (4,3)]","expected_output":"def classify_features(features):\n    #number of edges\n    edges = len(features)\n    polygon_corners = 0\n    convex_count = 0\n    non_convex_count = 0\n    # iterate through the list to check if the polygon is convex or non-convex\n    for i in range(edges):\n        polygon_corners += 1\n        next_i = i+1\n        if next_i >= edges:\n            next_i = 0\n        # use the vector cross product to calculate the angle between the two given points\n        x1 = features[i][0]\n        y1 = features[i][1]\n        x2 = features[next_i][0]\n        y2 = features[next_i][1]\n        angle = (x2-x1)*(y2-y1)\n\n        # if angle is positive, the polygon formed is considered convex\n        if angle > 0:\n            convex_count += 1\n        # else, the polygon is considered non-convex\n        else:\n            non_convex_count += 1\n\n    # check the results\n    if convex_count == polygon_corners:\n        return \"convex\"\n    elif non_convex_count == polygon_corners:\n        return \"non-convex\"\n    # the polygon formed is neither convex nor non-convex\n    else:\n        return \"neither convex nor non-convex\"\n\nprint(classify_features([(1,0), (2,3), (3,1), (4,3)])) # prints \"non-convex\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify a given set of features as convex or non-convex.\n\n### Input:\n[(1,0), (2,3), (3,1), (4,3)]\n\n### Output:\ndef classify_features(features):\n    #number of edges\n    edges = len(features)\n    polygon_corners = 0\n    convex_count = 0\n    non_convex_count = 0\n    # iterate through the list to check if the polygon is convex or non-convex\n    for i in range(edges):\n        polygon_corners += 1\n        next_i = i+1\n        if next_i >= edges:\n            next_i = 0\n        # use the vector cross product to calculate the angle between the two given points\n        x1 = features[i][0]\n        y1 = features[i][1]\n        x2 = features[next_i][0]\n        y2 = features[next_i][1]\n        angle = (x2-x1)*(y2-y1)\n\n        # if angle is positive, the polygon formed is considered convex\n        if angle > 0:\n            convex_count += 1\n        # else, the polygon is considered non-convex\n        else:\n            non_convex_count += 1\n\n    # check the results\n    if convex_count == polygon_corners:\n        return \"convex\"\n    elif non_convex_count == polygon_corners:\n        return \"non-convex\"\n    # the polygon formed is neither convex nor non-convex\n    else:\n        return \"neither convex nor non-convex\"\n\nprint(classify_features([(1,0), (2,3), (3,1), (4,3)])) # prints \"non-convex\"","tok_input_length":384,"tok_output_length":318,"system_prompt":"","index":7268}
{"question":"Create a Machine Learning algorithm in Python to predict the number of riders for a bus route given the data about the route.","input":"Example data for training: \n\nRoute 1: \nMonday: 10 riders \nTuesday: 15 riders \nWednesday: 20 riders\nThursday: 25 riders\nFriday: 35 riders\nSaturday: 50 riders\n\nRoute 2: \nMonday: 12 riders \nTuesday: 18 riders \nWednesday: 15 riders \nThursday: 24 riders \nFriday: 40 riders \nSaturday: 57 riders","expected_output":"# Import necessary libraries\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Construct feature and label data\n# Feature (independent variable): days of the week\nfeatures = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]\n# Label (dependent vaiable): number of riders\nlabels = [[10, 15, 20, 25, 35, 50], [12, 18, 15, 24, 40, 57]]\n# Reformat data as arrays\nX = np.array(features)\ny = np.array(labels)\n# Split train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create model\nmodel = LinearRegression()\n# Train model\nmodel.fit(X_train, y_train)\n# Make predictions\ny_pred = model.predict(X_test)\n# Evaluate model\nscore = model.score(X_test, y_test)\nprint(f'Model score: {score}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Machine Learning algorithm in Python to predict the number of riders for a bus route given the data about the route.\n\n### Input:\nExample data for training: \n\nRoute 1: \nMonday: 10 riders \nTuesday: 15 riders \nWednesday: 20 riders\nThursday: 25 riders\nFriday: 35 riders\nSaturday: 50 riders\n\nRoute 2: \nMonday: 12 riders \nTuesday: 18 riders \nWednesday: 15 riders \nThursday: 24 riders \nFriday: 40 riders \nSaturday: 57 riders\n\n### Output:\n# Import necessary libraries\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Construct feature and label data\n# Feature (independent variable): days of the week\nfeatures = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]\n# Label (dependent vaiable): number of riders\nlabels = [[10, 15, 20, 25, 35, 50], [12, 18, 15, 24, 40, 57]]\n# Reformat data as arrays\nX = np.array(features)\ny = np.array(labels)\n# Split train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create model\nmodel = LinearRegression()\n# Train model\nmodel.fit(X_train, y_train)\n# Make predictions\ny_pred = model.predict(X_test)\n# Evaluate model\nscore = model.score(X_test, y_test)\nprint(f'Model score: {score}')","tok_input_length":386,"tok_output_length":247,"system_prompt":"","index":3371}
{"question":"Write python code to calculate distance between two points with latitude, longitude","input":"Point A: (51.509865, -0.118092)  \nPoint B: (40.730610, -73.935242)","expected_output":"\"\"\"\nCalculating the distance between two points with latitude and longitude\n\"\"\"\nimport math\n\ndef calc_dist(x1,y1,x2,y2):\n    \"\"\"\n    Calculates the distance between two points given their latitude and longitude.\n    Input: \n        x1, y1 - the latitude and longitude of the first point\n        x2, y2 - the latitude and longitude of the second point\n    Output:\n        distance - the distance between the two points\n    \"\"\"\n    # convert the latitude and longitude to radians\n    x1, y1, x2, y2 = map(math.radians, [x1, y1, x2, y2])\n    \n    # calculate the great circle distance\n    dlon = y2-y1\n    dlat = x2-x1\n    a = math.sin(dlat\/2)**2 + math.cos(x1) * math.cos(x2)* math.sin(dlon\/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371 # radius of Earth in kilometers\n    return c * r\n\n# the coordinates of point A and point B\nx1 = 51.509865\ny1 = -0.118092\nx2 = 40.730610\ny2 = -73.935242\n\n# calculate the distance between the two points\ndist = calc_dist(x1, y1, x2, y2)\nprint(\"The distance between two points is \" + str(dist) + \" kilometers\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite python code to calculate distance between two points with latitude, longitude\n\n### Input:\nPoint A: (51.509865, -0.118092)  \nPoint B: (40.730610, -73.935242)\n\n### Output:\n\"\"\"\nCalculating the distance between two points with latitude and longitude\n\"\"\"\nimport math\n\ndef calc_dist(x1,y1,x2,y2):\n    \"\"\"\n    Calculates the distance between two points given their latitude and longitude.\n    Input: \n        x1, y1 - the latitude and longitude of the first point\n        x2, y2 - the latitude and longitude of the second point\n    Output:\n        distance - the distance between the two points\n    \"\"\"\n    # convert the latitude and longitude to radians\n    x1, y1, x2, y2 = map(math.radians, [x1, y1, x2, y2])\n    \n    # calculate the great circle distance\n    dlon = y2-y1\n    dlat = x2-x1\n    a = math.sin(dlat\/2)**2 + math.cos(x1) * math.cos(x2)* math.sin(dlon\/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371 # radius of Earth in kilometers\n    return c * r\n\n# the coordinates of point A and point B\nx1 = 51.509865\ny1 = -0.118092\nx2 = 40.730610\ny2 = -73.935242\n\n# calculate the distance between the two points\ndist = calc_dist(x1, y1, x2, y2)\nprint(\"The distance between two points is \" + str(dist) + \" kilometers\")","tok_input_length":387,"tok_output_length":315,"system_prompt":"","index":8868}
{"question":"Create an online quiz application with three levels of difficulty. The application should be written in Python using Flask and it should have an endpoint for GET, POST, and PUT requests.","input":"Not applicable","expected_output":"import flask\n\napp = flask.Flask(__name__)\n\nquestions = {\n 'level_1': [\n {\"question\": \"What color is the sky?\",\n \"answers\" : [\"blue\", \"red\", \"green\"],\n \"correct\" : \"blue\"\n },\n {\"question\": \"What color is the grass?\",\n \"answers\" : [\"blue\", \"red\", \"green\"],\n \"correct\" : \"green\"\n }\n ],\n 'level_2': [\n {\"question\": \"What is the capital of France?\",\n \"answers\" : [\"London\", \"Paris\", \"Rome\"],\n \"correct\" : \"Paris\"\n },\n {\"question\": \"What is the capital of Germany?\",\n \"answers\" : [\"Berlin\", \"Hamburg\", \"Munich\"],\n \"correct\" : \"Berlin\"\n }\n ],\n 'level_3': [\n {\"question\": \"What is the third largest country by area?\",\n \"answers\" : [\"China\", \"Russia\", \"United States\"],\n \"correct\" : \"United States\"\n },\n {\"question\": \"What is the fifth largest country by population?\",\n \"answers\" : [\"Brazil\", \"Germany\", \"Japan\"],\n \"correct\" : \"Brazil\"\n }\n ]\n}\n\n@app.route('\/api\/quiz', methods=['GET', 'POST', 'PUT'])\ndef handle_requests():\n if request.method == \"GET\":\n # Return a list of all questions\n return questions\n \n elif request.method == \"POST\":\n # Add a new question\n return \"Successfully added question\"\n \n elif request.method == \"PUT\":\n # Update an existing question\n return \"Updated question\"\n\nif __name__ == '__main__':\n app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an online quiz application with three levels of difficulty. The application should be written in Python using Flask and it should have an endpoint for GET, POST, and PUT requests.\n\n### Input:\nNot applicable\n\n### Output:\nimport flask\n\napp = flask.Flask(__name__)\n\nquestions = {\n 'level_1': [\n {\"question\": \"What color is the sky?\",\n \"answers\" : [\"blue\", \"red\", \"green\"],\n \"correct\" : \"blue\"\n },\n {\"question\": \"What color is the grass?\",\n \"answers\" : [\"blue\", \"red\", \"green\"],\n \"correct\" : \"green\"\n }\n ],\n 'level_2': [\n {\"question\": \"What is the capital of France?\",\n \"answers\" : [\"London\", \"Paris\", \"Rome\"],\n \"correct\" : \"Paris\"\n },\n {\"question\": \"What is the capital of Germany?\",\n \"answers\" : [\"Berlin\", \"Hamburg\", \"Munich\"],\n \"correct\" : \"Berlin\"\n }\n ],\n 'level_3': [\n {\"question\": \"What is the third largest country by area?\",\n \"answers\" : [\"China\", \"Russia\", \"United States\"],\n \"correct\" : \"United States\"\n },\n {\"question\": \"What is the fifth largest country by population?\",\n \"answers\" : [\"Brazil\", \"Germany\", \"Japan\"],\n \"correct\" : \"Brazil\"\n }\n ]\n}\n\n@app.route('\/api\/quiz', methods=['GET', 'POST', 'PUT'])\ndef handle_requests():\n if request.method == \"GET\":\n # Return a list of all questions\n return questions\n \n elif request.method == \"POST\":\n # Add a new question\n return \"Successfully added question\"\n \n elif request.method == \"PUT\":\n # Update an existing question\n return \"Updated question\"\n\nif __name__ == '__main__':\n app.run()","tok_input_length":390,"tok_output_length":325,"system_prompt":"","index":15537}
{"question":"Create an object-oriented structure to solve a maze by using python.","input":"","expected_output":"import collections\n\nclass Maze:\n    def __init__(self, n, m):\n        self._n, self._m = n, m\n        self._grid = [[None] * m for _ in range(n)]\n\n    def solve_maze(self):\n        result, found = [], False\n        start, end = (0, 0), (self._n-1, self._m-1)\n\n        for i in range(self._n):\n            for j in range(self._m):\n                if self._grid[i][j] == 1:\n                    value = 0\n                    self._find_omega(i, j, value, result, start, end,\n                                     found)\n                    return result\n\n    def _find_omega(self, i, j, value,\n                    result, start, end, found):\n        rowNbr, colNbr = [-1, 0, 0, 1], [0, -1, 1, 0]\n\n        if (i, j) == end:\n            found = True\n            result.append(value)\n            return\n\n        if found == True:\n            return\n\n        self._grid[i][j] = 0\n        for k in range(4):\n            if self._on_board(i + rowNbr[k], j + colNbr[k]):\n                self._find_omega(i + rowNbr[k], j + colNbr[k],\n                                 value + 1, result,\n                                 start, end, found)\n\n    def _on_board(self, i, j):\n        return 0 <= i < self._n and 0 <= j < self._m and self._grid[i][j] == 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented structure to solve a maze by using python.\n\n### Input:\n\n\n### Output:\nimport collections\n\nclass Maze:\n    def __init__(self, n, m):\n        self._n, self._m = n, m\n        self._grid = [[None] * m for _ in range(n)]\n\n    def solve_maze(self):\n        result, found = [], False\n        start, end = (0, 0), (self._n-1, self._m-1)\n\n        for i in range(self._n):\n            for j in range(self._m):\n                if self._grid[i][j] == 1:\n                    value = 0\n                    self._find_omega(i, j, value, result, start, end,\n                                     found)\n                    return result\n\n    def _find_omega(self, i, j, value,\n                    result, start, end, found):\n        rowNbr, colNbr = [-1, 0, 0, 1], [0, -1, 1, 0]\n\n        if (i, j) == end:\n            found = True\n            result.append(value)\n            return\n\n        if found == True:\n            return\n\n        self._grid[i][j] = 0\n        for k in range(4):\n            if self._on_board(i + rowNbr[k], j + colNbr[k]):\n                self._find_omega(i + rowNbr[k], j + colNbr[k],\n                                 value + 1, result,\n                                 start, end, found)\n\n    def _on_board(self, i, j):\n        return 0 <= i < self._n and 0 <= j < self._m and self._grid[i][j] == 1","tok_input_length":392,"tok_output_length":352,"system_prompt":"","index":151}
{"question":"Write a Python program to perform linear regression with gradient descent. The program should output the regression line equation.","input":"x_data = [1,2,3,4,5]\ny_data = [5,7,9,11,13]","expected_output":"import numpy as np\n\ndef compute_cost(x, y, parameters):\n    m = len(y)\n    h = x @ parameters\n    return (1\/(2*m)) * np.sum(np.square(h - y))\n\ndef gradient_descent(x, y, parameters, alpha, num_iter):\n    m = len(y)\n    cost_graph = np.zeros(num_iter)\n    parameters_history = np.zeros((num_iter, parameters.shape[0]))\n    \n    for iteration in range(num_iter):\n        h = x @ parameters\n        error = h - y\n        gradient = (1\/m) * x.T @ error\n        parameters = parameters - alpha * gradient\n        \n        cost = compute_cost(x, y, parameters)\n        cost_graph[iteration] = cost\n        parameters_history[iteration] = parameters.flatten()\n    \n    return parameters, parameters_history, cost_graph\n\n# Data\nx_data = np.array([1,2,3,4,5])\ny_data = np.array([5,7,9,11,13])\n\n# Parameters\nparameters = np.array([1.0, 1.0])\n\n# Hyperparameters\nalpha = 0.01 #Learning rate\nnum_iter = 1000 # Number of iterations\n\n# Regression with Gradient Descent\nparameters, parameters_history, cost_graph = gradient_descent(x_data, y_data, parameters, alpha, num_iter)\n\n# Print the results\nprint(\"Equation of the regression line = y = {:.2f} + {:.2f}x\".format(parameters[0], parameters[1]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to perform linear regression with gradient descent. The program should output the regression line equation.\n\n### Input:\nx_data = [1,2,3,4,5]\ny_data = [5,7,9,11,13]\n\n### Output:\nimport numpy as np\n\ndef compute_cost(x, y, parameters):\n    m = len(y)\n    h = x @ parameters\n    return (1\/(2*m)) * np.sum(np.square(h - y))\n\ndef gradient_descent(x, y, parameters, alpha, num_iter):\n    m = len(y)\n    cost_graph = np.zeros(num_iter)\n    parameters_history = np.zeros((num_iter, parameters.shape[0]))\n    \n    for iteration in range(num_iter):\n        h = x @ parameters\n        error = h - y\n        gradient = (1\/m) * x.T @ error\n        parameters = parameters - alpha * gradient\n        \n        cost = compute_cost(x, y, parameters)\n        cost_graph[iteration] = cost\n        parameters_history[iteration] = parameters.flatten()\n    \n    return parameters, parameters_history, cost_graph\n\n# Data\nx_data = np.array([1,2,3,4,5])\ny_data = np.array([5,7,9,11,13])\n\n# Parameters\nparameters = np.array([1.0, 1.0])\n\n# Hyperparameters\nalpha = 0.01 #Learning rate\nnum_iter = 1000 # Number of iterations\n\n# Regression with Gradient Descent\nparameters, parameters_history, cost_graph = gradient_descent(x_data, y_data, parameters, alpha, num_iter)\n\n# Print the results\nprint(\"Equation of the regression line = y = {:.2f} + {:.2f}x\".format(parameters[0], parameters[1]))","tok_input_length":396,"tok_output_length":320,"system_prompt":"","index":5914}
{"question":"Design a board game in Python.","input":"Not applicable","expected_output":"import random\n\nboard = [[0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0]]\n\nplayers = ['player1', 'player2']\n\ndef draw_board(board):\n for row in board:\n print(row)\n\ndef check_win(board):\n for row in board:\n if row.count(row[0]) == len(row) and row[0] != 0:\n return True\n\ndiag1 = []\ndiag2 = []\nfor i, row in enumerate(board):\n diag1.append(row[i])\n diag2.append(row[len(board)-i-1])\n\nif diag1.count(diag1[0]) == len(diag1) and diag1[0] != 0:\n return True\nif diag2.count(diag2[0]) == len(diag2) and diag2[0] != 0:\n return True\nreturn False\n\ndef check_draw(board):\n for row in board:\n for elem in row:\n if elem == 0:\n return False\nreturn True\n\ndef play_game():\n current_player = players[random.randint(0, len(players)-1)]\n game_is_over = False\n while not game_is_over:\n draw_board(board)\n print(\"It's your turn, \" + current_player)\n row = input(\"Row: \")\n column = input(\"Column: \")\n board[int(row)][int(column)]=current_player\n game_is_over = check_win(board)\n if game_is_over:\n print(\"Congrats, \" + current_player + \"! You win! \ud83c\udf89\")\n else:\n if check_draw(board):\n print(\"It's a draw!\")\n game_is_over = True\n else:\n if current_player == players[0]:\n current_player = players[1]\n else:\n current_player = players[0]\n\nplay_game()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a board game in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nboard = [[0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0]]\n\nplayers = ['player1', 'player2']\n\ndef draw_board(board):\n for row in board:\n print(row)\n\ndef check_win(board):\n for row in board:\n if row.count(row[0]) == len(row) and row[0] != 0:\n return True\n\ndiag1 = []\ndiag2 = []\nfor i, row in enumerate(board):\n diag1.append(row[i])\n diag2.append(row[len(board)-i-1])\n\nif diag1.count(diag1[0]) == len(diag1) and diag1[0] != 0:\n return True\nif diag2.count(diag2[0]) == len(diag2) and diag2[0] != 0:\n return True\nreturn False\n\ndef check_draw(board):\n for row in board:\n for elem in row:\n if elem == 0:\n return False\nreturn True\n\ndef play_game():\n current_player = players[random.randint(0, len(players)-1)]\n game_is_over = False\n while not game_is_over:\n draw_board(board)\n print(\"It's your turn, \" + current_player)\n row = input(\"Row: \")\n column = input(\"Column: \")\n board[int(row)][int(column)]=current_player\n game_is_over = check_win(board)\n if game_is_over:\n print(\"Congrats, \" + current_player + \"! You win! \ud83c\udf89\")\n else:\n if check_draw(board):\n print(\"It's a draw!\")\n game_is_over = True\n else:\n if current_player == players[0]:\n current_player = players[1]\n else:\n current_player = players[0]\n\nplay_game()","tok_input_length":400,"tok_output_length":363,"system_prompt":"","index":12230}
{"question":"Create a Python program to convert user entered infix expression to postfix expression.","input":"A * B + C","expected_output":"class Conversion: \n      \n    def __init__(self, capacity): \n        self.top = -1\n        self.capacity = capacity \n        self.array = [] \n        self.output = [] \n        self.precedence = {'+':1, '-':1, '*':2, '\/':2, '^':3} \n      \n    def isEmpty(self): \n        return True if self.top == -1 else False\n      \n    def peek(self): \n        return self.array[-1]\n      \n    def pop(self): \n        if not self.isEmpty(): \n            self.top -= 1\n            return self.array.pop() \n        elsE: \n            return \"$\"\n      \n    def push(self, op): \n        self.top += 1\n        self.array.append(op)\n      \n    def infixToPostfix(self, exp):\n        for i in exp: \n            if i.isalpha(): \n                self.output.append(i)\n            elif i == '(': \n                self.push(i)\n            elif i == ')': \n                while( (not self.isEmpty()) and self.peek() != '('): \n                    a = self.pop() \n                    self.output.append(a) \n                if (not self.isEmpty() and self.peek() != '('): \n                    return -1\n                else: \n                    self.pop()\n            else: \n                while(not self.isEmpty() and self.precedence[i] <= self.precedence[self.peek()]):\n                    self.output.append(self.pop())\n                self.push(i)\n        while not self.isEmpty():\n            self.output.append(self.pop())\n        return \"\".join(self.output)\n\nexp = \"A * B + C\"\nconversion = Conversion(len(exp)) \nresult = conversion.infixToPostfix(exp) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert user entered infix expression to postfix expression.\n\n### Input:\nA * B + C\n\n### Output:\nclass Conversion: \n      \n    def __init__(self, capacity): \n        self.top = -1\n        self.capacity = capacity \n        self.array = [] \n        self.output = [] \n        self.precedence = {'+':1, '-':1, '*':2, '\/':2, '^':3} \n      \n    def isEmpty(self): \n        return True if self.top == -1 else False\n      \n    def peek(self): \n        return self.array[-1]\n      \n    def pop(self): \n        if not self.isEmpty(): \n            self.top -= 1\n            return self.array.pop() \n        elsE: \n            return \"$\"\n      \n    def push(self, op): \n        self.top += 1\n        self.array.append(op)\n      \n    def infixToPostfix(self, exp):\n        for i in exp: \n            if i.isalpha(): \n                self.output.append(i)\n            elif i == '(': \n                self.push(i)\n            elif i == ')': \n                while( (not self.isEmpty()) and self.peek() != '('): \n                    a = self.pop() \n                    self.output.append(a) \n                if (not self.isEmpty() and self.peek() != '('): \n                    return -1\n                else: \n                    self.pop()\n            else: \n                while(not self.isEmpty() and self.precedence[i] <= self.precedence[self.peek()]):\n                    self.output.append(self.pop())\n                self.push(i)\n        while not self.isEmpty():\n            self.output.append(self.pop())\n        return \"\".join(self.output)\n\nexp = \"A * B + C\"\nconversion = Conversion(len(exp)) \nresult = conversion.infixToPostfix(exp) \nprint(result)","tok_input_length":403,"tok_output_length":356,"system_prompt":"","index":13577}
{"question":"Design a linear regression algorithm in Python to fit a set of data.","input":"X = [1,2,3,4,5], Y = [1,4,9,16,25]","expected_output":"import numpy as np\n\nX = np.array([1,2,3,4,5])\nY = np.array([1,4,9,16,25])\n\n# calculate coefficients\ndef coefficients(x,y):\n    # number of observations\/points\n    n = np.size(x)\n \n    # mean of x and y vector\n    m_x, m_y = np.mean(x), np.mean(y)\n \n    # calculating cross-deviation and deviation about x\n    SS_xy = np.sum(y*x) - n*m_y*m_x\n    SS_xx = np.sum(x*x) - n*m_x*m_x\n \n    # calculating regression coefficients\n    b_1 = SS_xy \/ SS_xx\n    b_0 = m_y - b_1*m_x\n \n    return(b_0, b_1)\n \n# function to plot regression line\ndef regression_line(x, y, b):\n    # plotting the actual points as scatter plot\n    plt.scatter(x, y, color = \"m\",\n               marker = \"o\", s = 30)\n \n    # predicted response vector\n    y_pred = b[0] + b[1]*x\n \n    # plotting the regression line\n    plt.plot(x, y_pred, color = \"g\")\n \n    # putting labels\n    plt.xlabel('x')\n    plt.ylabel('y')\n \n    # function to show plot\n    plt.show()\n\n# coefficients\nb = coefficients(X,Y)\nprint(\"Coefficients:\\nb_0 = {} \\nb_1 = {}\".format(b[0],b[1]))\n \n# plotting regression line\nregression_line(X,Y,b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a linear regression algorithm in Python to fit a set of data.\n\n### Input:\nX = [1,2,3,4,5], Y = [1,4,9,16,25]\n\n### Output:\nimport numpy as np\n\nX = np.array([1,2,3,4,5])\nY = np.array([1,4,9,16,25])\n\n# calculate coefficients\ndef coefficients(x,y):\n    # number of observations\/points\n    n = np.size(x)\n \n    # mean of x and y vector\n    m_x, m_y = np.mean(x), np.mean(y)\n \n    # calculating cross-deviation and deviation about x\n    SS_xy = np.sum(y*x) - n*m_y*m_x\n    SS_xx = np.sum(x*x) - n*m_x*m_x\n \n    # calculating regression coefficients\n    b_1 = SS_xy \/ SS_xx\n    b_0 = m_y - b_1*m_x\n \n    return(b_0, b_1)\n \n# function to plot regression line\ndef regression_line(x, y, b):\n    # plotting the actual points as scatter plot\n    plt.scatter(x, y, color = \"m\",\n               marker = \"o\", s = 30)\n \n    # predicted response vector\n    y_pred = b[0] + b[1]*x\n \n    # plotting the regression line\n    plt.plot(x, y_pred, color = \"g\")\n \n    # putting labels\n    plt.xlabel('x')\n    plt.ylabel('y')\n \n    # function to show plot\n    plt.show()\n\n# coefficients\nb = coefficients(X,Y)\nprint(\"Coefficients:\\nb_0 = {} \\nb_1 = {}\".format(b[0],b[1]))\n \n# plotting regression line\nregression_line(X,Y,b)","tok_input_length":406,"tok_output_length":339,"system_prompt":"","index":9341}
{"question":"Develop an AI solution for object recognition using Python.","input":"","expected_output":"import cv2\nimport numpy as np\nimport tensorflow as tf\n\n# Load the COCO class labels .txt file\nlabels_file_path = tf.keras.utils.get_file('label.txt', 'https:\/\/raw.githubusercontent.com\/qw3081020\/models\/master\/label.txt')\nwith open(labels_file_path, 'r') as f:\n    labels = [line.strip() for line in f.readlines()]\n\n# Initialize the recognition model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1), input_shape=(300, 300, 3)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D((2, 2), strides=(2, 2)))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(len(labels), activation='softmax'))\n\n# Load model weights\nmodel.load_weights('model.h5')\n\n# Load the input image\nimage = cv2.imread('input_image.jpg')\nimage = cv2.resize(image, (300, 300))\n\n# Use the model to predict the labels\nlabels_predicted = model.predict(np.expand_dims(image, axis=0))[0]\n\n# Sort the labels by confidence\nlabels_sorted_by_confidence = [\n    label for label, confidence in \n    sorted(zip(labels, labels_predicted), key=lambda x: x[1], reverse=True)\n]\n\n# Print the predicted labels\nprint(labels_sorted_by_confidence)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI solution for object recognition using Python.\n\n### Input:\n\n\n### Output:\nimport cv2\nimport numpy as np\nimport tensorflow as tf\n\n# Load the COCO class labels .txt file\nlabels_file_path = tf.keras.utils.get_file('label.txt', 'https:\/\/raw.githubusercontent.com\/qw3081020\/models\/master\/label.txt')\nwith open(labels_file_path, 'r') as f:\n    labels = [line.strip() for line in f.readlines()]\n\n# Initialize the recognition model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1), input_shape=(300, 300, 3)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D((2, 2), strides=(2, 2)))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(len(labels), activation='softmax'))\n\n# Load model weights\nmodel.load_weights('model.h5')\n\n# Load the input image\nimage = cv2.imread('input_image.jpg')\nimage = cv2.resize(image, (300, 300))\n\n# Use the model to predict the labels\nlabels_predicted = model.predict(np.expand_dims(image, axis=0))[0]\n\n# Sort the labels by confidence\nlabels_sorted_by_confidence = [\n    label for label, confidence in \n    sorted(zip(labels, labels_predicted), key=lambda x: x[1], reverse=True)\n]\n\n# Print the predicted labels\nprint(labels_sorted_by_confidence)","tok_input_length":407,"tok_output_length":370,"system_prompt":"","index":13430}
{"question":"Create a Python code generator for drawing a 3D cube using Pyglet.","input":"","expected_output":"import pyglet\n#cube window\nwindow = pyglet.window.Window()\n\norigin_x = window.width\/2\norigin_y = window.height\/2\n\n#cube sides \nwidth = 400\nheight = 400\ndepth = 400\n\n#vertices\nx1,y1,z1 = origin_x - width\/2, origin_y - height\/2, 0\nx2,y2,z2 = origin_x + width\/2, origin_y - height\/2, 0\nx3,y3,z3 = origin_x - width\/2, origin_y + height\/2, 0\nx4,y4,z4 = origin_x + width\/2, origin_y + height\/2, 0\nx5,y5,z5 = origin_x - width\/2, origin_y - height\/2, depth\nx6,y6,z6 = origin_x + width\/2, origin_y - height\/2, depth\nx7,y7,z7 = origin_x - width\/2, origin_y + height\/2, depth\nx8,y8,z8 = origin_x + width\/2, origin_y + height\/2, depth\n\n# defining the vertices\nvertices = [x1,y1,z1, x2,y2,z2, x3,y3,z3, x4,y4,z4, x5,y5,z5, x6,y6,z6, x7,y7,z7, x8,y8,z8]\n\n#drawing the cube\npolygon=pyglet.graphics.vertex_list(36,\n    ('v3f\/static',vertices)\n)\n\n#clear the window\n@window.event\ndef on_draw():\n    window.clear()\n    polygon.draw(pyglet.gl.GL_QUADS)\n\npyglet.app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code generator for drawing a 3D cube using Pyglet.\n\n### Input:\n\n\n### Output:\nimport pyglet\n#cube window\nwindow = pyglet.window.Window()\n\norigin_x = window.width\/2\norigin_y = window.height\/2\n\n#cube sides \nwidth = 400\nheight = 400\ndepth = 400\n\n#vertices\nx1,y1,z1 = origin_x - width\/2, origin_y - height\/2, 0\nx2,y2,z2 = origin_x + width\/2, origin_y - height\/2, 0\nx3,y3,z3 = origin_x - width\/2, origin_y + height\/2, 0\nx4,y4,z4 = origin_x + width\/2, origin_y + height\/2, 0\nx5,y5,z5 = origin_x - width\/2, origin_y - height\/2, depth\nx6,y6,z6 = origin_x + width\/2, origin_y - height\/2, depth\nx7,y7,z7 = origin_x - width\/2, origin_y + height\/2, depth\nx8,y8,z8 = origin_x + width\/2, origin_y + height\/2, depth\n\n# defining the vertices\nvertices = [x1,y1,z1, x2,y2,z2, x3,y3,z3, x4,y4,z4, x5,y5,z5, x6,y6,z6, x7,y7,z7, x8,y8,z8]\n\n#drawing the cube\npolygon=pyglet.graphics.vertex_list(36,\n    ('v3f\/static',vertices)\n)\n\n#clear the window\n@window.event\ndef on_draw():\n    window.clear()\n    polygon.draw(pyglet.gl.GL_QUADS)\n\npyglet.app.run()","tok_input_length":412,"tok_output_length":368,"system_prompt":"","index":9821}
{"question":"Build a Python program to detect credit card fraud. The program should ingest a batch of transactions, analyze the data, and output the predicted probability of each transaction being fraudulent.","input":"Not applicable","expected_output":"import pandas as pd\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create a dataframe of the transactions\ntransactions = pd.DataFrame({\n    'amount': [3.23, 5.41, 2.34, 8.45, 10.67, 16.23, 7.68, 18.9],\n    'from_account': ['A', 'B', 'B', 'A', 'A', 'C', 'A', 'C'],\n    'to_account': ['B', 'A', 'C', 'C', 'B', 'B', 'A', 'A'],\n    'timestamp': [1523443123, 1523443642, 1523440452, 1523443167, 1523437395, 1523440491, 1523438586, 1523441126],\n})\n\n# Split the data into training and testing\nX = transactions[['amount', 'from_account', 'to_account']]\ny = transactions['timestamp']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a Random Forest Classifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)\n\n# Make predictions for the test data\npredictions = rfc.predict(X_test)\n\n# Calculate the accuracy of our predictions\naccuracy = confusion_matrix(y_test, predictions)\nprint(\"Accuracy:\", accuracy)\n\n# Calculate the probability of each transaction being fraudulent\npred_proba = rfc.predict_proba(X_test)\nprint(\"Fraud Probability:\", pred_proba)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to detect credit card fraud. The program should ingest a batch of transactions, analyze the data, and output the predicted probability of each transaction being fraudulent.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create a dataframe of the transactions\ntransactions = pd.DataFrame({\n    'amount': [3.23, 5.41, 2.34, 8.45, 10.67, 16.23, 7.68, 18.9],\n    'from_account': ['A', 'B', 'B', 'A', 'A', 'C', 'A', 'C'],\n    'to_account': ['B', 'A', 'C', 'C', 'B', 'B', 'A', 'A'],\n    'timestamp': [1523443123, 1523443642, 1523440452, 1523443167, 1523437395, 1523440491, 1523438586, 1523441126],\n})\n\n# Split the data into training and testing\nX = transactions[['amount', 'from_account', 'to_account']]\ny = transactions['timestamp']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a Random Forest Classifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)\n\n# Make predictions for the test data\npredictions = rfc.predict(X_test)\n\n# Calculate the accuracy of our predictions\naccuracy = confusion_matrix(y_test, predictions)\nprint(\"Accuracy:\", accuracy)\n\n# Calculate the probability of each transaction being fraudulent\npred_proba = rfc.predict_proba(X_test)\nprint(\"Fraud Probability:\", pred_proba)","tok_input_length":416,"tok_output_length":352,"system_prompt":"","index":6808}
{"question":"Implement a Heap Sort algorithm in Python.","input":"[9, 8, 7, 6, 5, 4, 3, 2, 1]","expected_output":"def heapify(arr, n, i): \n\tlargest = i # Initialize largest as root \n\tl = 2 * i + 1\t # left = 2*i + 1 \n\tr = 2 * i + 2\t # right = 2*i + 2 \n\n\t# See if left child of root exists and is \n\t# greater than root \n\tif l < n and arr[i] < arr[l]: \n\t\tlargest = l \n\n\t# See if right child of root exists and is \n\t# greater than root \n\tif r < n and arr[largest] < arr[r]: \n\t\tlargest = r \n\n\t# Change root, if needed \n\tif largest != i: \n\t\tarr[i],arr[largest] = arr[largest],arr[i] # swap \n\n\t\t# Heapify the root. \n\t\theapify(arr, n, largest) \n\ndef heapSort(arr): \n\tn = len(arr) \n\n\t# Build a maxheap. \n\tfor i in range(n, -1, -1): \n\t\theapify(arr, n, i) \n\n\t# One by one extract elements \n\tfor i in range(n-1, 0, -1): \n\t\tarr[i], arr[0] = arr[0], arr[i] # swap \n\t\theapify(arr, i, 0) \n\n# Driver code to test above \narr = [9, 8, 7, 6, 5, 4, 3, 2, 1] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]),","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Heap Sort algorithm in Python.\n\n### Input:\n[9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n### Output:\ndef heapify(arr, n, i): \n\tlargest = i # Initialize largest as root \n\tl = 2 * i + 1\t # left = 2*i + 1 \n\tr = 2 * i + 2\t # right = 2*i + 2 \n\n\t# See if left child of root exists and is \n\t# greater than root \n\tif l < n and arr[i] < arr[l]: \n\t\tlargest = l \n\n\t# See if right child of root exists and is \n\t# greater than root \n\tif r < n and arr[largest] < arr[r]: \n\t\tlargest = r \n\n\t# Change root, if needed \n\tif largest != i: \n\t\tarr[i],arr[largest] = arr[largest],arr[i] # swap \n\n\t\t# Heapify the root. \n\t\theapify(arr, n, largest) \n\ndef heapSort(arr): \n\tn = len(arr) \n\n\t# Build a maxheap. \n\tfor i in range(n, -1, -1): \n\t\theapify(arr, n, i) \n\n\t# One by one extract elements \n\tfor i in range(n-1, 0, -1): \n\t\tarr[i], arr[0] = arr[0], arr[i] # swap \n\t\theapify(arr, i, 0) \n\n# Driver code to test above \narr = [9, 8, 7, 6, 5, 4, 3, 2, 1] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]),","tok_input_length":419,"tok_output_length":357,"system_prompt":"","index":2380}
{"question":"Construct a web-application with HTML and JavaScript to display your resume.","input":"","expected_output":"<!DOCTYPE html>\n<html>\n<head>\n  <title>My Resume<\/title>\n  <style>\n    body { font-family: sans-serif; }\n    #resume_container {\n      width: 70%;\n      max-width: 600px;\n      margin: 0 auto;\n      padding: 20px;\n      border: 1px solid #ccc;\n      box-shadow: 3px 3px 8px #ccc;\n    }\n    .resume_item {\n      padding: 15px 0;\n      border-bottom: 1px solid #ccc;\n    }\n  <\/style>\n<\/head>\n<body>\n\n<div id=\"resume_container\">\n  <div class=\"resume_item\">\n   <h1>John Doe<\/h1>\n   <h2>Software Developer<\/h2>\n  <\/div>\n \n  <div class=\"resume_item\">\n   <h3>Education<\/h3>\n   <ul>\n    <li>University of XYZ, 2018 - 2021<\/li>\n   <\/ul>\n  <\/div>\n\n  <div class=\"resume_item\">\n   <h3>Professional Experience<\/h3>\n   <ul>\n    <li>Company ABC, Software Developer, 2020 - Present<\/li>\n    <li>Company XYZ, Software Developer Intern, 2019 - 2020<\/li>\n   <\/ul>\n  <\/div>\n \n  <div class=\"resume_item\">\n   <h3>Skills &amp; Tools<\/h3>\n   <ul>\n    <li>Python, SQL, JavaScript<\/li>\n    <li>HTML\/CSS<\/li>\n   <\/ul>\n  <\/div>\n\n  <div class=\"resume_item\">\n   <h3>Achievements<\/h3>\n   <ul>\n    <li>Awarded \"Software Developer of the Year\" in 20","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a web-application with HTML and JavaScript to display your resume.\n\n### Input:\n\n\n### Output:\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Resume<\/title>\n  <style>\n    body { font-family: sans-serif; }\n    #resume_container {\n      width: 70%;\n      max-width: 600px;\n      margin: 0 auto;\n      padding: 20px;\n      border: 1px solid #ccc;\n      box-shadow: 3px 3px 8px #ccc;\n    }\n    .resume_item {\n      padding: 15px 0;\n      border-bottom: 1px solid #ccc;\n    }\n  <\/style>\n<\/head>\n<body>\n\n<div id=\"resume_container\">\n  <div class=\"resume_item\">\n   <h1>John Doe<\/h1>\n   <h2>Software Developer<\/h2>\n  <\/div>\n \n  <div class=\"resume_item\">\n   <h3>Education<\/h3>\n   <ul>\n    <li>University of XYZ, 2018 - 2021<\/li>\n   <\/ul>\n  <\/div>\n\n  <div class=\"resume_item\">\n   <h3>Professional Experience<\/h3>\n   <ul>\n    <li>Company ABC, Software Developer, 2020 - Present<\/li>\n    <li>Company XYZ, Software Developer Intern, 2019 - 2020<\/li>\n   <\/ul>\n  <\/div>\n \n  <div class=\"resume_item\">\n   <h3>Skills &amp; Tools<\/h3>\n   <ul>\n    <li>Python, SQL, JavaScript<\/li>\n    <li>HTML\/CSS<\/li>\n   <\/ul>\n  <\/div>\n\n  <div class=\"resume_item\">\n   <h3>Achievements<\/h3>\n   <ul>\n    <li>Awarded \"Software Developer of the Year\" in 20","tok_input_length":424,"tok_output_length":384,"system_prompt":"","index":12613}
{"question":"Design a heuristic algorithm in Python to solve a given assignment problem.","input":"Assignment Problem: \n\nJobs: A, B, C, D \nWorkers: 1, 2, 3 \nCost: \n1A, 2B, 3C, 1D = 3, 5, 8, 4 \n1A, 2C, 3D, 1B = 8, 7, 2, 6","expected_output":"def assignmentProblem(costMatrix): \n  \n    # Variables \n    R = len(costMatrix) \n    C = len(costMatrix[0]) \n    X = [[0 for x in range(C)] for x in range(R)] \n  \n    # Find the minimum element in each row \n    minRowValues = [min(i) for i in costMatrix] \n  \n    # Reduce each column by its minimum element and subtract it from the original costMatrix \n    for i in range(len(costMatrix[0])):\n        for j in range(len(costMatrix)): \n            costMatrix[j][i] = costMatrix[j][i] - minRowValues[j] \n  \n    # Find the minimum element in each column \n    minColValues = [min(y) for y in zip(*costMatrix)] \n  \n    # Reduce each row by its minimum element \n    for i in range(len(costMatrix)):\n        for j in range(len(costMatrix[0])): \n            costMatrix[i][j] = costMatrix[i][j] - minColValues[j] \n  \n    # Star all minimum element in the reduced costMatrix \n    # Find the indices of all the star elements \n    starsLocations = [] \n    for i in range(R): \n        for j in range(C): \n            if costMatrix[i][j] == 0 and X[i][j] != 1: \n                X[i][j] = \"*\" \n                starsLocations.append([i, j]) \n    return starsLocations","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a heuristic algorithm in Python to solve a given assignment problem.\n\n### Input:\nAssignment Problem: \n\nJobs: A, B, C, D \nWorkers: 1, 2, 3 \nCost: \n1A, 2B, 3C, 1D = 3, 5, 8, 4 \n1A, 2C, 3D, 1B = 8, 7, 2, 6\n\n### Output:\ndef assignmentProblem(costMatrix): \n  \n    # Variables \n    R = len(costMatrix) \n    C = len(costMatrix[0]) \n    X = [[0 for x in range(C)] for x in range(R)] \n  \n    # Find the minimum element in each row \n    minRowValues = [min(i) for i in costMatrix] \n  \n    # Reduce each column by its minimum element and subtract it from the original costMatrix \n    for i in range(len(costMatrix[0])):\n        for j in range(len(costMatrix)): \n            costMatrix[j][i] = costMatrix[j][i] - minRowValues[j] \n  \n    # Find the minimum element in each column \n    minColValues = [min(y) for y in zip(*costMatrix)] \n  \n    # Reduce each row by its minimum element \n    for i in range(len(costMatrix)):\n        for j in range(len(costMatrix[0])): \n            costMatrix[i][j] = costMatrix[i][j] - minColValues[j] \n  \n    # Star all minimum element in the reduced costMatrix \n    # Find the indices of all the star elements \n    starsLocations = [] \n    for i in range(R): \n        for j in range(C): \n            if costMatrix[i][j] == 0 and X[i][j] != 1: \n                X[i][j] = \"*\" \n                starsLocations.append([i, j]) \n    return starsLocations","tok_input_length":427,"tok_output_length":305,"system_prompt":"","index":16533}
{"question":"Create an API for a library application in Python. This API should include endpoints for creating a book (with fields for title, author, and ISBN), listing all books, updating a book, and deleting a book.","input":"Not applicable","expected_output":"import flask\nfrom flask import request, jsonify\n\napp = flask.Flask(__name__)\n\n# Database functionality\n# classes used to represent the objects\nclass Book():\n    def __init__(self, title, author, isbn):\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n\n# lists of books\nbooks = []\n\n# endpoints\n@app.route('\/books', methods=['GET', 'POST'])\ndef all_books():\n    response_object = {'status': 'success'}\n    if request.method == 'POST':\n        post_data = request.get_json()\n        books.append(Book(post_data.get('title'), post_data.get('author'), post_data.get('isbn')))\n        response_object['message'] = 'Book added!'\n    else:\n        response_object['books'] = [book.__dict__ for book in books] \n\n    return jsonify(response_object)\n\n@app.route('\/books\/<int:isbn>', methods=['PUT', 'DELETE'])\ndef single_book(isbn):\n    response_object = {'status': 'success'}\n    if request.method == 'PUT':\n        post_data = request.get_json()\n        book = next(filter(lambda x: x.isbn == isbn, books), None)\n        if book:\n            book.title = post_data.get('title')\n            book.author = post_data.get('author')\n            response_object['message'] = 'Book updated'\n        else:\n            response_object['message'] = 'Book does not exist'\n    if request.method == 'DELETE':\n        global books\n        books = list(filter(lambda x: x.isbn != isbn, books))\n        response_object['message'] = 'Book deleted'\n    return jsonify(response_object)\n\n# Run the application\nif __name__ == '__main__':\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API for a library application in Python. This API should include endpoints for creating a book (with fields for title, author, and ISBN), listing all books, updating a book, and deleting a book.\n\n### Input:\nNot applicable\n\n### Output:\nimport flask\nfrom flask import request, jsonify\n\napp = flask.Flask(__name__)\n\n# Database functionality\n# classes used to represent the objects\nclass Book():\n    def __init__(self, title, author, isbn):\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n\n# lists of books\nbooks = []\n\n# endpoints\n@app.route('\/books', methods=['GET', 'POST'])\ndef all_books():\n    response_object = {'status': 'success'}\n    if request.method == 'POST':\n        post_data = request.get_json()\n        books.append(Book(post_data.get('title'), post_data.get('author'), post_data.get('isbn')))\n        response_object['message'] = 'Book added!'\n    else:\n        response_object['books'] = [book.__dict__ for book in books] \n\n    return jsonify(response_object)\n\n@app.route('\/books\/<int:isbn>', methods=['PUT', 'DELETE'])\ndef single_book(isbn):\n    response_object = {'status': 'success'}\n    if request.method == 'PUT':\n        post_data = request.get_json()\n        book = next(filter(lambda x: x.isbn == isbn, books), None)\n        if book:\n            book.title = post_data.get('title')\n            book.author = post_data.get('author')\n            response_object['message'] = 'Book updated'\n        else:\n            response_object['message'] = 'Book does not exist'\n    if request.method == 'DELETE':\n        global books\n        books = list(filter(lambda x: x.isbn != isbn, books))\n        response_object['message'] = 'Book deleted'\n    return jsonify(response_object)\n\n# Run the application\nif __name__ == '__main__':\n    app.run()","tok_input_length":431,"tok_output_length":358,"system_prompt":"","index":3424}
{"question":"Connect to multiple devices in the database using Netmiko and execute 'show version' command on each device. Record the time taken to complete the operation. Use multiprocessing to create a process for each device connection and command execution.","input":"","expected_output":"#!\/usr\/bin\/env python\n'''\nUse processes and Netmiko to connect to each of the devices in the database.\nExecute 'show version' on each device. Record the amount of time required to do this.\nDISCLAIMER NOTE: Solution is limited to the exercise's scope\n'''\n\nfrom net_system.models import NetworkDevice\nimport django\nfrom multiprocessing import Process\nfrom termcolor import colored\nfrom datetime import datetime\nfrom netmiko import ConnectHandler\n\ndef sh_ver(a_device):\n# Execute cmd with NETMIKO\n    creds = a_device.credentials\n    rem_conn_ssh = ConnectHandler(device_type=a_device.device_type, ip=a_device.ip_address, username=creds.username,\n                                 password=creds.password, port=a_device.port, secret='')\n    # Output cmd\n    output = rem_conn_ssh.send_command_expect(\"show version\")\n    print \"\\n <<--------------------------->> \\n \"+ colored(output, 'green') + \"\\n\"\n\ndef main():\n# Main function to connect to the devices using NETMIKO and execute a cmd. Multi-processing support.\n    django.setup()\n# Record start time\n    process = []\n    start_time = datetime.now()\n    pylab_devices = NetworkDevice.objects.all()\n    for a_device in pylab_devices:\n        # Create a PROCESS for each device connection\/cmd\n        node_process = Process(target=sh_ver, args=(a_device,))\n        # Start the THREAD\n        node_process.start()\n        process.append(node_process)\n\n    for any_process in process:\n        print \"Notice: \" + colored(any_process, 'red')\n        any_process.join()\n\n# Function sh_ver runtime calculation\n    runtime = datetime.now() - start_time\n    print \"This operation required \" + colored(runtime, 'blue')\n\nif __name__ == \"__main__\":\n    main()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConnect to multiple devices in the database using Netmiko and execute 'show version' command on each device. Record the time taken to complete the operation. Use multiprocessing to create a process for each device connection and command execution.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n'''\nUse processes and Netmiko to connect to each of the devices in the database.\nExecute 'show version' on each device. Record the amount of time required to do this.\nDISCLAIMER NOTE: Solution is limited to the exercise's scope\n'''\n\nfrom net_system.models import NetworkDevice\nimport django\nfrom multiprocessing import Process\nfrom termcolor import colored\nfrom datetime import datetime\nfrom netmiko import ConnectHandler\n\ndef sh_ver(a_device):\n# Execute cmd with NETMIKO\n    creds = a_device.credentials\n    rem_conn_ssh = ConnectHandler(device_type=a_device.device_type, ip=a_device.ip_address, username=creds.username,\n                                 password=creds.password, port=a_device.port, secret='')\n    # Output cmd\n    output = rem_conn_ssh.send_command_expect(\"show version\")\n    print \"\\n <<--------------------------->> \\n \"+ colored(output, 'green') + \"\\n\"\n\ndef main():\n# Main function to connect to the devices using NETMIKO and execute a cmd. Multi-processing support.\n    django.setup()\n# Record start time\n    process = []\n    start_time = datetime.now()\n    pylab_devices = NetworkDevice.objects.all()\n    for a_device in pylab_devices:\n        # Create a PROCESS for each device connection\/cmd\n        node_process = Process(target=sh_ver, args=(a_device,))\n        # Start the THREAD\n        node_process.start()\n        process.append(node_process)\n\n    for any_process in process:\n        print \"Notice: \" + colored(any_process, 'red')\n        any_process.join()\n\n# Function sh_ver runtime calculation\n    runtime = datetime.now() - start_time\n    print \"This operation required \" + colored(runtime, 'blue')\n\nif __name__ == \"__main__\":\n    main()\n","tok_input_length":437,"tok_output_length":365,"system_prompt":"","index":14303}
{"question":"Create a Python program to cluster a dataset of customer orders to help identify customer segments.","input":"[{'customer': 'John', 'product': 'iPhone', 'price': 800}, \n{'customer': 'Tim', 'product': 'Macbook', 'price': 1200}, \n{'customer': 'Frank', 'product': 'Macbook', 'price': 1200}, \n{'customer': 'Alice', 'product': 'Airpods', 'price': 200}, \n{'customer': 'John', 'product': 'iPad', 'price': 500}, \n{'customer': 'Tom', 'product': 'iPhone', 'price': 800}, \n{'customer': 'Bob', 'product': 'Airpods', 'price': 200}, \n{'customer': 'Alice', 'product': 'Magic Mouse', 'price': 50}]","expected_output":"import pandas as pd\nfrom sklearn.cluster import KMeans\n\n# Load data\ncustomers = pd.DataFrame([\n {'customer': 'John', 'product': 'iPhone', 'price': 800},\n {'customer': 'Tim', 'product': 'Macbook', 'price': 1200},\n {'customer': 'Frank', 'product': 'Macbook', 'price': 1200},\n {'customer': 'Alice', 'product': 'Airpods', 'price': 200},\n {'customer': 'John', 'product': 'iPad', 'price': 500},\n {'customer': 'Tom', 'product': 'iPhone', 'price': 800},\n {'customer': 'Bob', 'product': 'Airpods', 'price': 200},\n {'customer': 'Alice', 'product': 'Magic Mouse', 'price': 50},\n])\n\n# Preprocess data\ndata = pd.get_dummies(customers, columns=['product'])\n\n# Fit KMeans model\nmodel = KMeans(n_clusters=3)\nmodel.fit(data)\n\n# Assign clusters\nclusters = model.predict(data)\ncustomers['cluster'] = clusters\n\n# Print results\nprint(customers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to cluster a dataset of customer orders to help identify customer segments.\n\n### Input:\n[{'customer': 'John', 'product': 'iPhone', 'price': 800}, \n{'customer': 'Tim', 'product': 'Macbook', 'price': 1200}, \n{'customer': 'Frank', 'product': 'Macbook', 'price': 1200}, \n{'customer': 'Alice', 'product': 'Airpods', 'price': 200}, \n{'customer': 'John', 'product': 'iPad', 'price': 500}, \n{'customer': 'Tom', 'product': 'iPhone', 'price': 800}, \n{'customer': 'Bob', 'product': 'Airpods', 'price': 200}, \n{'customer': 'Alice', 'product': 'Magic Mouse', 'price': 50}]\n\n### Output:\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\n# Load data\ncustomers = pd.DataFrame([\n {'customer': 'John', 'product': 'iPhone', 'price': 800},\n {'customer': 'Tim', 'product': 'Macbook', 'price': 1200},\n {'customer': 'Frank', 'product': 'Macbook', 'price': 1200},\n {'customer': 'Alice', 'product': 'Airpods', 'price': 200},\n {'customer': 'John', 'product': 'iPad', 'price': 500},\n {'customer': 'Tom', 'product': 'iPhone', 'price': 800},\n {'customer': 'Bob', 'product': 'Airpods', 'price': 200},\n {'customer': 'Alice', 'product': 'Magic Mouse', 'price': 50},\n])\n\n# Preprocess data\ndata = pd.get_dummies(customers, columns=['product'])\n\n# Fit KMeans model\nmodel = KMeans(n_clusters=3)\nmodel.fit(data)\n\n# Assign clusters\nclusters = model.predict(data)\ncustomers['cluster'] = clusters\n\n# Print results\nprint(customers)","tok_input_length":444,"tok_output_length":238,"system_prompt":"","index":14185}
{"question":"Create a basic chatbot agent in Python using DialogFlow. The agent should be able to answer simple questions about the weather in a given city.","input":"Not applicable","expected_output":"import os\nimport dialogflow_v2 as dialogflow\nfrom google.api_core.exceptions import InvalidArgument\n\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = 'PATH_TO_CREDENTIALS_FILE'\n\nDIALOGFLOW_PROJECT_ID = 'YOUR_PROJECT_ID'\nDIALOGFLOW_LANGUAGE_CODE = 'en-us'\nGOOGLE_APPLICATION_CREDENTIALS = 'PATH_TO_CREDENTIALS_FILE'\nSESSION_ID = 'current-user-id'\n\ndef detect_intent_from_text(text, session_id, language_code=DIALOGFLOW_LANGUAGE_CODE):\n session_client = dialogflow.SessionsClient()\n session = session_client.session_path(DIALOGFLOW_PROJECT_ID, session_id)\n text_input = dialogflow.types.TextInput(text=text, language_code=language_code)\n query_input = dialogflow.types.QueryInput(text=text_input)\n try:\n response = session_client.detect_intent(session=session, query_input=query_input)\n return response.query_result\n except InvalidArgument:\n raise\n\n# Create an intent in DialogFlow    \ndef intent_create():\n intents_client = dialogflow.IntentsClient()\n parent = intents_client.project_agent_path(DIALOGFLOW_PROJECT_ID)\n training_phrases = [\n dialogflow.types.Intent.TrainingPhrase(parts=[\n dialogflow.types.Intent.TrainingPhrase.Part(text='What is the weather like?'),\n ]),\n]\n\nmessage_text = dialogflow.types.Intent.Message.Text(text=['That\\'s a great question!'])\n\nresponse = intents_client.create_intent(\n parent,\n intent_name='[INTENT_NAME]',\n training_phrases=training_phrases,\n message=message_text\n).per_response\n\n# Retrieve a response to a user's query\nquery = 'What is the weather like in London?'\nresponse = detect_intent_from_text(query, SESSION_ID)\nprint('Query text: {}'.format(response.query_text))\nprint('Detected intent: {} (confidence: {})\\n'.format(\n response.intent.display_name, response.intent_detection_confidence))\nprint('Fulfillment text: {}'.format(response.fulfillment_text))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic chatbot agent in Python using DialogFlow. The agent should be able to answer simple questions about the weather in a given city.\n\n### Input:\nNot applicable\n\n### Output:\nimport os\nimport dialogflow_v2 as dialogflow\nfrom google.api_core.exceptions import InvalidArgument\n\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = 'PATH_TO_CREDENTIALS_FILE'\n\nDIALOGFLOW_PROJECT_ID = 'YOUR_PROJECT_ID'\nDIALOGFLOW_LANGUAGE_CODE = 'en-us'\nGOOGLE_APPLICATION_CREDENTIALS = 'PATH_TO_CREDENTIALS_FILE'\nSESSION_ID = 'current-user-id'\n\ndef detect_intent_from_text(text, session_id, language_code=DIALOGFLOW_LANGUAGE_CODE):\n session_client = dialogflow.SessionsClient()\n session = session_client.session_path(DIALOGFLOW_PROJECT_ID, session_id)\n text_input = dialogflow.types.TextInput(text=text, language_code=language_code)\n query_input = dialogflow.types.QueryInput(text=text_input)\n try:\n response = session_client.detect_intent(session=session, query_input=query_input)\n return response.query_result\n except InvalidArgument:\n raise\n\n# Create an intent in DialogFlow    \ndef intent_create():\n intents_client = dialogflow.IntentsClient()\n parent = intents_client.project_agent_path(DIALOGFLOW_PROJECT_ID)\n training_phrases = [\n dialogflow.types.Intent.TrainingPhrase(parts=[\n dialogflow.types.Intent.TrainingPhrase.Part(text='What is the weather like?'),\n ]),\n]\n\nmessage_text = dialogflow.types.Intent.Message.Text(text=['That\\'s a great question!'])\n\nresponse = intents_client.create_intent(\n parent,\n intent_name='[INTENT_NAME]',\n training_phrases=training_phrases,\n message=message_text\n).per_response\n\n# Retrieve a response to a user's query\nquery = 'What is the weather like in London?'\nresponse = detect_intent_from_text(query, SESSION_ID)\nprint('Query text: {}'.format(response.query_text))\nprint('Detected intent: {} (confidence: {})\\n'.format(\n response.intent.display_name, response.intent_detection_confidence))\nprint('Fulfillment text: {}'.format(response.fulfillment_text))","tok_input_length":446,"tok_output_length":387,"system_prompt":"","index":4594}
{"question":"Build an AI assistant in Python for playing the game \"Tic-Tac-Toe\".","input":"","expected_output":"# Define the board size \nBOARD_SIZE = 3 \n\n# Define the player moves \nPLAYER_X = 'X' \nPLAYER_O = 'O'\n\n# Define the empty cell \nEMPTY = ' '\n\n# Create a list to represent the board \nboard = [] \nfor i in range(BOARD_SIZE): \n    row = [EMPTY] * BOARD_SIZE \n    board.append(row)\n\n# Function to check the game status \ndef check_game_status(): \n    # Check if the player has won \n    if check_win(PLAYER_X): \n        return \"X won!\" \n    elif check_win(PLAYER_O): \n        return \"O won!\" \n    # Check if the game is a draw \n    elif check_draw(): \n        return \"Draw!\"\n    # If the game is not over yet \n    else:\n        return \"Game in progress...\"\n\n# Function to check the winning condition \ndef check_win(player): \n    # Check if the player has won in a row \n    for row in board: \n        if row.count(player) == BOARD_SIZE: \n            return True\n    # Check if the player has won in a column \n    for col in range(BOARD_SIZE): \n        if board[0][col] == board[1][col] == board[2][col] == player: \n            return True \n    # Check if the player has won in a diagonal \n    if board[0][0] == board[1][1] == board[2][2] == player: \n        return True \n    if board[0][2] == board[1][1] == board[2][0] == player: \n        return True\n    # Return false if the player did not win \n    return False \n\n# Function to check if the game is a draw \ndef check_draw(): \n    for row in board: \n        for cell in row: \n            if cell == EMPTY: \n                return False \n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an AI assistant in Python for playing the game \"Tic-Tac-Toe\".\n\n### Input:\n\n\n### Output:\n# Define the board size \nBOARD_SIZE = 3 \n\n# Define the player moves \nPLAYER_X = 'X' \nPLAYER_O = 'O'\n\n# Define the empty cell \nEMPTY = ' '\n\n# Create a list to represent the board \nboard = [] \nfor i in range(BOARD_SIZE): \n    row = [EMPTY] * BOARD_SIZE \n    board.append(row)\n\n# Function to check the game status \ndef check_game_status(): \n    # Check if the player has won \n    if check_win(PLAYER_X): \n        return \"X won!\" \n    elif check_win(PLAYER_O): \n        return \"O won!\" \n    # Check if the game is a draw \n    elif check_draw(): \n        return \"Draw!\"\n    # If the game is not over yet \n    else:\n        return \"Game in progress...\"\n\n# Function to check the winning condition \ndef check_win(player): \n    # Check if the player has won in a row \n    for row in board: \n        if row.count(player) == BOARD_SIZE: \n            return True\n    # Check if the player has won in a column \n    for col in range(BOARD_SIZE): \n        if board[0][col] == board[1][col] == board[2][col] == player: \n            return True \n    # Check if the player has won in a diagonal \n    if board[0][0] == board[1][1] == board[2][2] == player: \n        return True \n    if board[0][2] == board[1][1] == board[2][0] == player: \n        return True\n    # Return false if the player did not win \n    return False \n\n# Function to check if the game is a draw \ndef check_draw(): \n    for row in board: \n        for cell in row: \n            if cell == EMPTY: \n                return False \n    return True","tok_input_length":451,"tok_output_length":406,"system_prompt":"","index":18226}
{"question":"Implement a genetic algorithm in Python that finds a solution to a given mathematical expression.","input":"find x in equation x^2 - 3x - 10 = 0","expected_output":"import random\n \n# target equation\nexpression = lambda x: x**2 - 3*x - 10\n \n# population size of 40 solutions\npopSize = 40\n \n# starting range\nxRange = (-10, 10)\n \n# mutation rate\nmRate = 0.01\n \n# generate randomly the population\npopulation = [random.uniform(*xRange) for _ in range(popSize)]\n \n# fitness function\ndef fitness(expression, population):\n \n # loop through population and calculate fitness\n for i in range(len(population)):\n x = population[i]\n population[i] = (x, expression(x))\n \n # sort by fitness\n population = [i[1] for i in sorted(population, key=lambda x : x[1])]\n return population\n \n# initialize best score ever\nbestScore = float('inf')\n \n# genetic algorithm\nwhile True:\n # calculate fitness scores\n scores = fitness(expression, population)\n \n # get the best score of this population\n if scores[0] < bestScore:\n bestScore = scores[0]\n bestSolution = population[0]\n \n # print the best solution and score\n print(\"Best solution : {}\\n Best score: {}\".format(bestSolution, bestScore))\n \n # generate a new population\n newPopulation = []\n \n # add the best performing solutions from previous gen\n newPopulation.extend(population[:5])\n \n # loop through the population size\n while len(newPopulation)<popSize:\n \n # randomly select 2 parents\n parent1 = random.choice(population[:10])\n parent2 = random.choice(population[:10])\n \n # generate a child by crossover of parents\n child = (parent1 + parent2)\/2\n \n # randomly mutate the child\n if random.random() < mRate:\n child += random.random() * 5\n \n # add the child to the new population\n newPopulation.append(child)\n \n # set the new population\n population = newPopulation","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a genetic algorithm in Python that finds a solution to a given mathematical expression.\n\n### Input:\nfind x in equation x^2 - 3x - 10 = 0\n\n### Output:\nimport random\n \n# target equation\nexpression = lambda x: x**2 - 3*x - 10\n \n# population size of 40 solutions\npopSize = 40\n \n# starting range\nxRange = (-10, 10)\n \n# mutation rate\nmRate = 0.01\n \n# generate randomly the population\npopulation = [random.uniform(*xRange) for _ in range(popSize)]\n \n# fitness function\ndef fitness(expression, population):\n \n # loop through population and calculate fitness\n for i in range(len(population)):\n x = population[i]\n population[i] = (x, expression(x))\n \n # sort by fitness\n population = [i[1] for i in sorted(population, key=lambda x : x[1])]\n return population\n \n# initialize best score ever\nbestScore = float('inf')\n \n# genetic algorithm\nwhile True:\n # calculate fitness scores\n scores = fitness(expression, population)\n \n # get the best score of this population\n if scores[0] < bestScore:\n bestScore = scores[0]\n bestSolution = population[0]\n \n # print the best solution and score\n print(\"Best solution : {}\\n Best score: {}\".format(bestSolution, bestScore))\n \n # generate a new population\n newPopulation = []\n \n # add the best performing solutions from previous gen\n newPopulation.extend(population[:5])\n \n # loop through the population size\n while len(newPopulation)<popSize:\n \n # randomly select 2 parents\n parent1 = random.choice(population[:10])\n parent2 = random.choice(population[:10])\n \n # generate a child by crossover of parents\n child = (parent1 + parent2)\/2\n \n # randomly mutate the child\n if random.random() < mRate:\n child += random.random() * 5\n \n # add the child to the new population\n newPopulation.append(child)\n \n # set the new population\n population = newPopulation","tok_input_length":457,"tok_output_length":396,"system_prompt":"","index":8830}
{"question":"Write a Python program that takes a list of strings, and returns a list of lists of strings where each list contains strings that are similar based on LCS (Longest Common Subsequence)","input":"[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]","expected_output":"def find_similar_LCS_strings(strings):\n    d = {}\n    for i in range(len(strings)):\n        for j in range(len(strings)):\n            if i == j:\n                continue\n            else:\n                x = strings[i]\n                y = strings[j]\n                m = [[0 for k in range(len(y)+1)] for l in range(len(x)+1)]\n                \n                # build the dynamic programming lookup table\n                for i in range(1, len(x)+1):\n                    for j in range(1, len(y)+1):\n                        if x[i-1] == y[j-1]:\n                            m[i][j] = m[i-1][j-1] + 1\n                        else:\n                            m[i][j] = max(m[i][j-1], m[i-1][j])\n\n                d[(x, y)] = m[len(x)][len(y)]\n    \n    result = []\n    # build the result list\n    while d:\n        key = max(d, key=lambda k: d[k])\n        x, y = key[0], key[1]\n        del d[key]\n        tmp = [x, y]\n        for k in d.keys():\n            if x in k or y in k:\n                if d[k] == d[key]:\n                    del d[k]\n                    if k[0] == x:\n                        tmp.append(k[1])\n                    else:\n                        tmp.append(k[0])\n        result.append(tmp)\n\n    final_result = []\n    for entry in result:\n        if entry not in final_result:\n            final_result.append(entry)\n            \n    return final_result\n\nstrings = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\nres = find_similar_LCS_strings(strings)\nprint(res) # Output: [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list of strings, and returns a list of lists of strings where each list contains strings that are similar based on LCS (Longest Common Subsequence)\n\n### Input:\n[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\n\n### Output:\ndef find_similar_LCS_strings(strings):\n    d = {}\n    for i in range(len(strings)):\n        for j in range(len(strings)):\n            if i == j:\n                continue\n            else:\n                x = strings[i]\n                y = strings[j]\n                m = [[0 for k in range(len(y)+1)] for l in range(len(x)+1)]\n                \n                # build the dynamic programming lookup table\n                for i in range(1, len(x)+1):\n                    for j in range(1, len(y)+1):\n                        if x[i-1] == y[j-1]:\n                            m[i][j] = m[i-1][j-1] + 1\n                        else:\n                            m[i][j] = max(m[i][j-1], m[i-1][j])\n\n                d[(x, y)] = m[len(x)][len(y)]\n    \n    result = []\n    # build the result list\n    while d:\n        key = max(d, key=lambda k: d[k])\n        x, y = key[0], key[1]\n        del d[key]\n        tmp = [x, y]\n        for k in d.keys():\n            if x in k or y in k:\n                if d[k] == d[key]:\n                    del d[k]\n                    if k[0] == x:\n                        tmp.append(k[1])\n                    else:\n                        tmp.append(k[0])\n        result.append(tmp)\n\n    final_result = []\n    for entry in result:\n        if entry not in final_result:\n            final_result.append(entry)\n            \n    return final_result\n\nstrings = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\nres = find_similar_LCS_strings(strings)\nprint(res) # Output: [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]","tok_input_length":470,"tok_output_length":388,"system_prompt":"","index":3096}
{"question":"Implement an algorithm to solve a clustering problem using K-means in Python.","input":"Data set containing a list of vectors representing points in a 2-dimensional space.","expected_output":"import numpy as np\nimport matplotlib.pyplot as plt\n\ndata = np.array([[1, 2],\n [2, 3],\n [2, 1],\n [3, 3],\n [4, 5],\n [5, 6],\n [5, 4]])\n\n# Number of clusters\nk = 2\n\n# Number of training data\nn = data.shape[0]\n\n# Number of features in the data\nc = data.shape[1]\n\n# Generate random centers, here we use sigma and mean to ensure it represent the whole data\nmean = np.mean(data, axis=0)\nstd = np.std(data, axis=0)\ncenters = np.random.randn(k, c)*std + mean\n\n# Plot the data and the centers generated as random\nplt.scatter(data[:, 0], data[:, 1], s=7)\nplt.scatter(centers[:, 0], centers[:, 1], marker='*', c='g', s=150)\n\ncenters_old = np.zeros(centers.shape)  # to store old centers\nclusters = np.zeros(n)\ndistances = np.zeros((n, k))\n\nerror = np.linalg.norm(centers - centers_old)\n\n# When, after an update, the estimate of that center stays the same, exit loop\nwhile error != 0:\n # Measure the distance to every center\n for i in range(k):\n distances[:, i] = np.linalg.norm(data - centers[i], axis=1)\n\n # Assign all training data to closest center\n clusters = np.argmin(distances, axis=1)\n\n centers_old = centers.copy()\n\n # Calculate mean for every cluster and update the center\n for i in range(k):\n centers[i] = np.mean(data[clusters == i], axis=0)\n error = np.linalg.norm(centers - centers_old)\n\n# Plot the data and the centers generated as random\nplt.scatter(data[:, 0], data[:, 1], s=7)\nplt.scatter(centers[:, 0], centers[:, 1], marker='*', c='g', s=150)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm to solve a clustering problem using K-means in Python.\n\n### Input:\nData set containing a list of vectors representing points in a 2-dimensional space.\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = np.array([[1, 2],\n [2, 3],\n [2, 1],\n [3, 3],\n [4, 5],\n [5, 6],\n [5, 4]])\n\n# Number of clusters\nk = 2\n\n# Number of training data\nn = data.shape[0]\n\n# Number of features in the data\nc = data.shape[1]\n\n# Generate random centers, here we use sigma and mean to ensure it represent the whole data\nmean = np.mean(data, axis=0)\nstd = np.std(data, axis=0)\ncenters = np.random.randn(k, c)*std + mean\n\n# Plot the data and the centers generated as random\nplt.scatter(data[:, 0], data[:, 1], s=7)\nplt.scatter(centers[:, 0], centers[:, 1], marker='*', c='g', s=150)\n\ncenters_old = np.zeros(centers.shape)  # to store old centers\nclusters = np.zeros(n)\ndistances = np.zeros((n, k))\n\nerror = np.linalg.norm(centers - centers_old)\n\n# When, after an update, the estimate of that center stays the same, exit loop\nwhile error != 0:\n # Measure the distance to every center\n for i in range(k):\n distances[:, i] = np.linalg.norm(data - centers[i], axis=1)\n\n # Assign all training data to closest center\n clusters = np.argmin(distances, axis=1)\n\n centers_old = centers.copy()\n\n # Calculate mean for every cluster and update the center\n for i in range(k):\n centers[i] = np.mean(data[clusters == i], axis=0)\n error = np.linalg.norm(centers - centers_old)\n\n# Plot the data and the centers generated as random\nplt.scatter(data[:, 0], data[:, 1], s=7)\nplt.scatter(centers[:, 0], centers[:, 1], marker='*', c='g', s=150)","tok_input_length":478,"tok_output_length":420,"system_prompt":"","index":4908}
{"question":"Design an API in Python for a simple store where customers can search for products. The API should have the following features: searching for products by name or by category, displaying information about a product, and adding a product to user's cart.","input":"Not applicable","expected_output":"# Store API\n# app.py\nfrom flask import Flask\nfrom flask_restful import Api, Resource, reqparse\n\napp = Flask(__name__)\napi = Api(app)\n\nproducts = [\n    {\"name\": \"laptop\", \"category\": \"electronics\", \"price\": 899.99},\n    {\"name\": \"iphone\", \"category\": \"electronics\", \"price\": 999.99},\n    {\"name\": \"headphones\", \"category\": \"electronics\", \"price\": 99.99}\n]\n\n# product\nclass Product(Resource):\n    def get(self, name):\n        for product in products:\n            if name == product['name']:\n                return product, 200\n        return {\"message\": \"Product not found\"}, 404\n\n    def post(self, name):\n        parser = reqparse.RequestParser()\n        parser.add_argument('category')\n        parser.add_argument('price')\n        args = parser.parse_args()\n\n        for product in products:\n            if product['name'] == name:\n                return {\"message\": \"Product with name {} already exists\".format(name)}, 400\n\n        product = {\n            \"name\": name, \n            \"category\": args['category'],\n            \"price\": args['price']\n        }\n        products.append(product)\n        return products[-1], 201\n\n    def put(self, name):\n        parser = reqparse.RequestParser()\n        parser.add_argument('category')\n        parser.add_argument('price')\n        args = parser.parse_args()\n\n        for product in products:\n            if product['name'] == name:\n                product['category'] = args['category']\n                product['price'] = args['price']\n                return product, 200\n        return {\"message\": \"Product not found\"}, 404\n\n# products\nclass ProductList(Resource):\n    def get(self):\n        return products, 200\n\napi.add_resource(Product, \"\/product\/<string:name>\")\napi.add_resource(ProductList, \"\/products\")\n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an API in Python for a simple store where customers can search for products. The API should have the following features: searching for products by name or by category, displaying information about a product, and adding a product to user's cart.\n\n### Input:\nNot applicable\n\n### Output:\n# Store API\n# app.py\nfrom flask import Flask\nfrom flask_restful import Api, Resource, reqparse\n\napp = Flask(__name__)\napi = Api(app)\n\nproducts = [\n    {\"name\": \"laptop\", \"category\": \"electronics\", \"price\": 899.99},\n    {\"name\": \"iphone\", \"category\": \"electronics\", \"price\": 999.99},\n    {\"name\": \"headphones\", \"category\": \"electronics\", \"price\": 99.99}\n]\n\n# product\nclass Product(Resource):\n    def get(self, name):\n        for product in products:\n            if name == product['name']:\n                return product, 200\n        return {\"message\": \"Product not found\"}, 404\n\n    def post(self, name):\n        parser = reqparse.RequestParser()\n        parser.add_argument('category')\n        parser.add_argument('price')\n        args = parser.parse_args()\n\n        for product in products:\n            if product['name'] == name:\n                return {\"message\": \"Product with name {} already exists\".format(name)}, 400\n\n        product = {\n            \"name\": name, \n            \"category\": args['category'],\n            \"price\": args['price']\n        }\n        products.append(product)\n        return products[-1], 201\n\n    def put(self, name):\n        parser = reqparse.RequestParser()\n        parser.add_argument('category')\n        parser.add_argument('price')\n        args = parser.parse_args()\n\n        for product in products:\n            if product['name'] == name:\n                product['category'] = args['category']\n                product['price'] = args['price']\n                return product, 200\n        return {\"message\": \"Product not found\"}, 404\n\n# products\nclass ProductList(Resource):\n    def get(self):\n        return products, 200\n\napi.add_resource(Product, \"\/product\/<string:name>\")\napi.add_resource(ProductList, \"\/products\")\n\nif __name__ == '__main__':\n    app.run(debug=True)","tok_input_length":490,"tok_output_length":412,"system_prompt":"","index":5245}
{"question":"Formulate an algorithm to evaluate a given sudoku board in Python.","input":"board = [[3, 0, 6, 5, 0, 8, 4, 0, 0], \n        [5, 2, 0, 0, 0, 0, 0, 0, 0], \n        [0, 8, 7, 0, 0, 0, 0, 3, 1], \n        [0, 0, 3, 0, 1, 0, 0, 8, 0], \n        [9, 0, 0, 8, 6, 3, 0, 0, 5], \n        [0, 5, 0, 0, 9, 0, 6, 0, 0], \n        [1, 3, 0, 0, 0, 0, 2, 5, 0], \n        [0, 0, 0, 0, 0, 0, 0, 7, 4], \n        [0, 0, 5, 2, 0, 6, 3, 0, 0]]","expected_output":"def evaluate_suduku(board):\n    rows = len(board)\n    cols = len(board[0])\n    # Check rows\n    for row in board:\n        if not all_unique(row):\n            return False\n    # Check columns\n    for i in range(cols):\n        column = [row[i] for row in board]\n        if not all_unique(column):\n            return False\n    # Check 3x3 boxes\n    for i in range(0,rows-2,3):\n        for j in range(0,cols-2,3):\n            box = []\n            for row in board[i:i+3]:\n                for num in row[j:j+3]:\n                    box.append(num)\n            if not all_unique(box):\n                return False\n    return True\n\n# Helper Function to check uniqueness\ndef all_unique(lst): \n    seen = set() \n    return not any(i in seen or seen.add(i) for i in lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate an algorithm to evaluate a given sudoku board in Python.\n\n### Input:\nboard = [[3, 0, 6, 5, 0, 8, 4, 0, 0], \n        [5, 2, 0, 0, 0, 0, 0, 0, 0], \n        [0, 8, 7, 0, 0, 0, 0, 3, 1], \n        [0, 0, 3, 0, 1, 0, 0, 8, 0], \n        [9, 0, 0, 8, 6, 3, 0, 0, 5], \n        [0, 5, 0, 0, 9, 0, 6, 0, 0], \n        [1, 3, 0, 0, 0, 0, 2, 5, 0], \n        [0, 0, 0, 0, 0, 0, 0, 7, 4], \n        [0, 0, 5, 2, 0, 6, 3, 0, 0]]\n\n### Output:\ndef evaluate_suduku(board):\n    rows = len(board)\n    cols = len(board[0])\n    # Check rows\n    for row in board:\n        if not all_unique(row):\n            return False\n    # Check columns\n    for i in range(cols):\n        column = [row[i] for row in board]\n        if not all_unique(column):\n            return False\n    # Check 3x3 boxes\n    for i in range(0,rows-2,3):\n        for j in range(0,cols-2,3):\n            box = []\n            for row in board[i:i+3]:\n                for num in row[j:j+3]:\n                    box.append(num)\n            if not all_unique(box):\n                return False\n    return True\n\n# Helper Function to check uniqueness\ndef all_unique(lst): \n    seen = set() \n    return not any(i in seen or seen.add(i) for i in lst)","tok_input_length":497,"tok_output_length":196,"system_prompt":"","index":7249}
{"question":"Implement a genetic algorithm in Python for optimizing a given function that returns a numeric value.","input":"Not applicable","expected_output":"import random\n\ndef function(x):\n # replace this with your function\n return x + 2\n\ndef genetic_algorithm(population, pop_size, fit_threshold, max_generations):\n # initialize population\n current_gen = init_population(population, pop_size)\n\n # evaluate population\n fitness_scores = get_fitness_scores(current_gen)\n\n # loop until termination condition is met\n for generation in range(max_generations):\n # select parents\n parents = tournament_selection(current_gen, fitness_scores)\n \n # crossover\n children = crossover(parents)\n \n # mutate\n mutated_children = mutate(children)\n \n # evaluate new population\n fitness_scores = get_fitness_scores(mutated_children)\n\n # select survivors\n current_gen = select_survivors(mutated_children, fitness_scores)\n\n # check fitness threshold\n if max(fitness_scores) > fit_threshold:\n break\n \n best_individual = current_gen[fitness_scores.index(max(fitness_scores))]\n \n return best_individual, max(fitness_scores)\n\ndef init_population(population, pop_size):\n # initialize population with random individuals\n # population should contain individuals that are valid solutions of function\n return [population[random.randint(0, len(population)-1)] for _ in range(pop_size)]\n\ndef get_fitness_scores(population):\n # evaluate each individual and return their fitness scores\n return [function(individual) for individual in population]\n\ndef tournament_selection(population, fitness_scores):\n # select parents through tournament selection\n # tournament size should be half of population\n # winners are selected based on the greatest fitness score\n return [population[fitness_scores.index(max(random.sample(fitness_scores, len(population) \/\/ 2)))] for _ in range(len(population) \/\/ 2)]\n\ndef crossover(parents):\n # crossover parents to generate children\n return [random.choice(parent1 + parent2) for parent1, parent2 in zip(parents[::2], parents[1::2])]\n\ndef mutate(children):\n # mutate each child with a given probability\n return [child[random.randint(0, len(child)-1) + 1] for child in children]\n\ndef select_survivors(population, fitness_scores):\n # select survivors with elitist selection strategy\n # only the fittest individual survives\n return [population[fitness_scores.index(max(fitness_scores))]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a genetic algorithm in Python for optimizing a given function that returns a numeric value.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef function(x):\n # replace this with your function\n return x + 2\n\ndef genetic_algorithm(population, pop_size, fit_threshold, max_generations):\n # initialize population\n current_gen = init_population(population, pop_size)\n\n # evaluate population\n fitness_scores = get_fitness_scores(current_gen)\n\n # loop until termination condition is met\n for generation in range(max_generations):\n # select parents\n parents = tournament_selection(current_gen, fitness_scores)\n \n # crossover\n children = crossover(parents)\n \n # mutate\n mutated_children = mutate(children)\n \n # evaluate new population\n fitness_scores = get_fitness_scores(mutated_children)\n\n # select survivors\n current_gen = select_survivors(mutated_children, fitness_scores)\n\n # check fitness threshold\n if max(fitness_scores) > fit_threshold:\n break\n \n best_individual = current_gen[fitness_scores.index(max(fitness_scores))]\n \n return best_individual, max(fitness_scores)\n\ndef init_population(population, pop_size):\n # initialize population with random individuals\n # population should contain individuals that are valid solutions of function\n return [population[random.randint(0, len(population)-1)] for _ in range(pop_size)]\n\ndef get_fitness_scores(population):\n # evaluate each individual and return their fitness scores\n return [function(individual) for individual in population]\n\ndef tournament_selection(population, fitness_scores):\n # select parents through tournament selection\n # tournament size should be half of population\n # winners are selected based on the greatest fitness score\n return [population[fitness_scores.index(max(random.sample(fitness_scores, len(population) \/\/ 2)))] for _ in range(len(population) \/\/ 2)]\n\ndef crossover(parents):\n # crossover parents to generate children\n return [random.choice(parent1 + parent2) for parent1, parent2 in zip(parents[::2], parents[1::2])]\n\ndef mutate(children):\n # mutate each child with a given probability\n return [child[random.randint(0, len(child)-1) + 1] for child in children]\n\ndef select_survivors(population, fitness_scores):\n # select survivors with elitist selection strategy\n # only the fittest individual survives\n return [population[fitness_scores.index(max(fitness_scores))]]","tok_input_length":504,"tok_output_length":457,"system_prompt":"","index":14066}
{"question":"Develop an algorithm to find the shortest path between two points in a given grid","input":"","expected_output":"# Python program to find the shortest path between \n# a given source cell to a destination cell. \n# Rows and columns in given grid must be \n# numbered such that (0,0) can \n# be most top left cell. \n  \n# Utility function to find the \n# shortest path between \n# a given source cell to a destination cell. \ndef find_shortest_path(grid,m,n): \n  \n    # Create a queue for\/ BFS and \n    # mark source cell as visited \n    queue = [] \n  \n    # Mark the source cell as visited \n    # and enqueue the source node \n    queue.append([0, 0]) \n    visited = set((0, 0)) \n  \n    # While queue is not empty \n    while queue: \n        # pop front node from queue and  \n        # process it \n        i, j = queue.pop(0) \n  \n        # if destination is reached, \n        # stop the loop \n        if i == n - 1 and j == n - 1: \n            break\n  \n        # check for all 4 possible movements \n        # from current cell \n        for x, y in [[-1, 0], [0, -1], [1, 0], [0, 1]]: \n            # if current cell is valid, has path  \n            # and not visited yet \n            if 0 <= x + i < m and 0 <= y + j < n and grid[x + i][y + j] and (x + i, y + j) not in visited: \n                # add the cell to queue \n                queue.append([x + i, y + j]) \n  \n                # mark cell as visited \n                visited.add((x + i, y + j)) \n  \n    return visited \n  \n# Driver Code \n# given two-dimensional array with 1s as blocked \n# cells and 0s as cells through which \n# we can move \ngrid = [[1, 0, 0], \n        [1, 1, 0], \n        [1, 1, 1]] \n  \nif find_shortest_path(grid, 3, 3): \n    print('Yes') \nelse: \n    print('No')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to find the shortest path between two points in a given grid\n\n### Input:\n\n\n### Output:\n# Python program to find the shortest path between \n# a given source cell to a destination cell. \n# Rows and columns in given grid must be \n# numbered such that (0,0) can \n# be most top left cell. \n  \n# Utility function to find the \n# shortest path between \n# a given source cell to a destination cell. \ndef find_shortest_path(grid,m,n): \n  \n    # Create a queue for\/ BFS and \n    # mark source cell as visited \n    queue = [] \n  \n    # Mark the source cell as visited \n    # and enqueue the source node \n    queue.append([0, 0]) \n    visited = set((0, 0)) \n  \n    # While queue is not empty \n    while queue: \n        # pop front node from queue and  \n        # process it \n        i, j = queue.pop(0) \n  \n        # if destination is reached, \n        # stop the loop \n        if i == n - 1 and j == n - 1: \n            break\n  \n        # check for all 4 possible movements \n        # from current cell \n        for x, y in [[-1, 0], [0, -1], [1, 0], [0, 1]]: \n            # if current cell is valid, has path  \n            # and not visited yet \n            if 0 <= x + i < m and 0 <= y + j < n and grid[x + i][y + j] and (x + i, y + j) not in visited: \n                # add the cell to queue \n                queue.append([x + i, y + j]) \n  \n                # mark cell as visited \n                visited.add((x + i, y + j)) \n  \n    return visited \n  \n# Driver Code \n# given two-dimensional array with 1s as blocked \n# cells and 0s as cells through which \n# we can move \ngrid = [[1, 0, 0], \n        [1, 1, 0], \n        [1, 1, 1]] \n  \nif find_shortest_path(grid, 3, 3): \n    print('Yes') \nelse: \n    print('No')","tok_input_length":510,"tok_output_length":467,"system_prompt":"","index":11194}
{"question":"Implement a Naive Bayes algorithm in Python to classify comments into spam and non-spam categories.","input":"Not applicable","expected_output":"# Import Libraries\nimport numpy as np\n\n# Build dictionary containing necessary data\nwords = {\n 'come': ['spam', 'ham'],\n 'free': ['spam', 'ham'],\n 'money': ['spam', 'ham'],\n 'here': ['spam', 'ham'],\n 'win': ['spam', 'ham'],\n 'now': ['spam', 'ham'],\n 'urgent': ['spam', 'ham'],\n 'discount': ['spam', 'ham'],\n 'buy': ['spam', 'ham'],\n 'promo': ['spam', 'ham'],\n}\n\n# Number of Spam and non-Spam words\nspam_words = 0\nham_words = 0\n\n#Calculate number of words in each class\nfor key in words.keys():\n if 'spam' in words[key]:\n  spam_words += 1\n if 'ham' in words[key]:\n  ham_words += 1\n\n# Probabilities of each class\nP_spam = spam_words \/ (spam_words + ham_words)\nP_ham = ham_words \/ (spam_words + ham_words)\n\n# Probability of each word in each class\nwords_spam_prob = [0] * len(words)\nwords_ham_prob = [0] * len(words)\ni=0\n\nfor key in words.keys():\n if 'spam' in words[key]:\n  words_spam_prob[i] = words[key].count('spam') \/ spam_words\n if 'ham' in words[key]:\n  words_ham_prob[i] = words[key].count('ham') \/ ham_words\n i += 1\n\n# Function to classify spam and non-spam\ndef classify(comment):\n # Split comment into words\n words_in_comment = comment.split()\n \n # Calculate probability of comment being spam\n p_spam_comment = np.log(P_spam)\n p_ham_comment = np.log(P_ham)\n \n # Iterate through words in comment and calculate probability of comment being each class\n for word in words_in_comment:\n  if word in words:\n   p_spam_comment += np.log(words_spam_prob[list(words.keys()).index(word)])\n   p_ham_comment += np.log(words_ham_prob[list(words.keys()).index(word)])\n \n # Determine and return class of comment\n if p_spam_comment > p_ham_comment:\n  return 'spam'\n else:\n  return 'ham'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Naive Bayes algorithm in Python to classify comments into spam and non-spam categories.\n\n### Input:\nNot applicable\n\n### Output:\n# Import Libraries\nimport numpy as np\n\n# Build dictionary containing necessary data\nwords = {\n 'come': ['spam', 'ham'],\n 'free': ['spam', 'ham'],\n 'money': ['spam', 'ham'],\n 'here': ['spam', 'ham'],\n 'win': ['spam', 'ham'],\n 'now': ['spam', 'ham'],\n 'urgent': ['spam', 'ham'],\n 'discount': ['spam', 'ham'],\n 'buy': ['spam', 'ham'],\n 'promo': ['spam', 'ham'],\n}\n\n# Number of Spam and non-Spam words\nspam_words = 0\nham_words = 0\n\n#Calculate number of words in each class\nfor key in words.keys():\n if 'spam' in words[key]:\n  spam_words += 1\n if 'ham' in words[key]:\n  ham_words += 1\n\n# Probabilities of each class\nP_spam = spam_words \/ (spam_words + ham_words)\nP_ham = ham_words \/ (spam_words + ham_words)\n\n# Probability of each word in each class\nwords_spam_prob = [0] * len(words)\nwords_ham_prob = [0] * len(words)\ni=0\n\nfor key in words.keys():\n if 'spam' in words[key]:\n  words_spam_prob[i] = words[key].count('spam') \/ spam_words\n if 'ham' in words[key]:\n  words_ham_prob[i] = words[key].count('ham') \/ ham_words\n i += 1\n\n# Function to classify spam and non-spam\ndef classify(comment):\n # Split comment into words\n words_in_comment = comment.split()\n \n # Calculate probability of comment being spam\n p_spam_comment = np.log(P_spam)\n p_ham_comment = np.log(P_ham)\n \n # Iterate through words in comment and calculate probability of comment being each class\n for word in words_in_comment:\n  if word in words:\n   p_spam_comment += np.log(words_spam_prob[list(words.keys()).index(word)])\n   p_ham_comment += np.log(words_ham_prob[list(words.keys()).index(word)])\n \n # Determine and return class of comment\n if p_spam_comment > p_ham_comment:\n  return 'spam'\n else:\n  return 'ham'","tok_input_length":523,"tok_output_length":473,"system_prompt":"","index":7548}
{"question":"Create a sentiment analysis program in Python which predicts whether the sentiment of a given sentence is positive or negative.","input":"Not applicable","expected_output":"#importing libraries \nimport pandas as pd \nimport numpy as np\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom collections import defaultdict\nfrom nltk.corpus import wordnet as wn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn import model_selection , naive_bayes , svm\nfrom sklearn.metrics import accuracy_score\n\n# Define function to tag parts of speech for the text\ndef get_simple_pos(tag):\n  if tag.startswith('J'):\n    return wordnet.ADJ\n  elif tag.startswith('V'):\n    return wordnet.VERB\n  elif tag.startswith('N'):\n    return wordnet.NOUN\n  elif tag.startswith('R'):\n    return wordnet.ADV\n  else:\n    return wordnet.NOUN\n\n# Tokenize input text\ninput_sentence = 'This sentence is positive'\ntoken_sentence = word_tokenize(input_sentence)\n\n# Create a list to store the POS tags\npos_token_sentence = pos_tag(token_sentence)\n\n# Create an empty list to store the lemmatized words\nword_lemmatized = []\n\n# Lemmatize the words with POS tags and store in the list\nfor word, tag in pos_token_sentence:\n  wordnet_pos = get_simple_pos(tag) or wordnet.NOUN\n  word_lemmatized.append(lemmatizer.lemmatize(word, pos=wordnet_pos)) \n\n# Create a vectorizer object to generate a bag of words\ntfidf_vect = TfidfVectorizer(tokenizer = word_tokenize, analyzer='word')\n\n#Transform the lemmatized text\ntfidf_sent = tfidf_vect.fit_transform(word_lemmatized)\n\n# Create a dataframe for the vectorized text\nsent_dataset = pd.DataFrame(tfidf_sent.toarray())\nsent_df = pd.DataFrame(sent_dataset.toarray())\n\n# Define the model\nSVM = svm.SVC(C=1.0, kernel='linear', gamma='auto')\n\n# Train the model\nSVM.fit(sent_df,label)\n\n# Make predictions\npredictions = SVM.predict(sent_df)\n\n# Print the sentiment \nif predictions[0] == 0:\n  sentiment = 'Negative'\nelse:\n  sentiment = 'Positive'\n\nprint('Sentiment: ', sentiment)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sentiment analysis program in Python which predicts whether the sentiment of a given sentence is positive or negative.\n\n### Input:\nNot applicable\n\n### Output:\n#importing libraries \nimport pandas as pd \nimport numpy as np\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom collections import defaultdict\nfrom nltk.corpus import wordnet as wn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn import model_selection , naive_bayes , svm\nfrom sklearn.metrics import accuracy_score\n\n# Define function to tag parts of speech for the text\ndef get_simple_pos(tag):\n  if tag.startswith('J'):\n    return wordnet.ADJ\n  elif tag.startswith('V'):\n    return wordnet.VERB\n  elif tag.startswith('N'):\n    return wordnet.NOUN\n  elif tag.startswith('R'):\n    return wordnet.ADV\n  else:\n    return wordnet.NOUN\n\n# Tokenize input text\ninput_sentence = 'This sentence is positive'\ntoken_sentence = word_tokenize(input_sentence)\n\n# Create a list to store the POS tags\npos_token_sentence = pos_tag(token_sentence)\n\n# Create an empty list to store the lemmatized words\nword_lemmatized = []\n\n# Lemmatize the words with POS tags and store in the list\nfor word, tag in pos_token_sentence:\n  wordnet_pos = get_simple_pos(tag) or wordnet.NOUN\n  word_lemmatized.append(lemmatizer.lemmatize(word, pos=wordnet_pos)) \n\n# Create a vectorizer object to generate a bag of words\ntfidf_vect = TfidfVectorizer(tokenizer = word_tokenize, analyzer='word')\n\n#Transform the lemmatized text\ntfidf_sent = tfidf_vect.fit_transform(word_lemmatized)\n\n# Create a dataframe for the vectorized text\nsent_dataset = pd.DataFrame(tfidf_sent.toarray())\nsent_df = pd.DataFrame(sent_dataset.toarray())\n\n# Define the model\nSVM = svm.SVC(C=1.0, kernel='linear', gamma='auto')\n\n# Train the model\nSVM.fit(sent_df,label)\n\n# Make predictions\npredictions = SVM.predict(sent_df)\n\n# Print the sentiment \nif predictions[0] == 0:\n  sentiment = 'Negative'\nelse:\n  sentiment = 'Positive'\n\nprint('Sentiment: ', sentiment)","tok_input_length":530,"tok_output_length":479,"system_prompt":"","index":13070}
{"question":"Use the Python code to translate reStructuredText to HTML using the docutils package. The resulting HTML will be printed to the console.","input":"","expected_output":"#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n#\n# --- BEGIN_HEADER ---\n#\n# html_writer - [insert a few words of module description on this line]\n# Copyright (C) 2003-2009  The MiG Project lead by Brian Vinter\n#\n# This file is part of MiG.\n#\n# MiG is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# MiG is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n#\n# -- END_HEADER ---\n#\n\nfrom docutils.writers.html4css1 import Writer, HTMLTranslator\nfrom docutils.core import publish_string\n\n# Setup a translator writer\n\nhtml_writer = Writer()\nhtml_writer.translator_class = HTMLTranslator\n\n# Setup a restructured text example\n\nreST = \\\n    \"\"\"\nExample of reST:\n================\n\nThis is a small example of the way reST can be used as a base for generating HTMLformatted text that:\n\n- looks nice\n- is standards compliant\n- is flexible\n\nWe *may* decide to start using this as text formatting tool in MiG__ later on.\n\n__ http:\/\/mig-1.imada.sdu.dk\/\n\n\nWe can also use it for creating tables if we want to:\n\n=====  =====  ======\nInput         Output\n-----  -----  ------\nA      B      A or B\n=====  =====  ======\nFalse  False  False\nTrue   False  True\nFalse  True   True\nTrue   True   True\n=====  =====  ======\n\nHave fun!\n\n----\n\nCheers, Jonas\n\"\"\"\n\n# Translate reST to html\n\nhtml = publish_string(reST, settings_overrides={'output_encoding'\n                      : 'unicode'}, writer=html_writer)\n\nprint html\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the Python code to translate reStructuredText to HTML using the docutils package. The resulting HTML will be printed to the console.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n#\n# --- BEGIN_HEADER ---\n#\n# html_writer - [insert a few words of module description on this line]\n# Copyright (C) 2003-2009  The MiG Project lead by Brian Vinter\n#\n# This file is part of MiG.\n#\n# MiG is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# MiG is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n#\n# -- END_HEADER ---\n#\n\nfrom docutils.writers.html4css1 import Writer, HTMLTranslator\nfrom docutils.core import publish_string\n\n# Setup a translator writer\n\nhtml_writer = Writer()\nhtml_writer.translator_class = HTMLTranslator\n\n# Setup a restructured text example\n\nreST = \\\n    \"\"\"\nExample of reST:\n================\n\nThis is a small example of the way reST can be used as a base for generating HTMLformatted text that:\n\n- looks nice\n- is standards compliant\n- is flexible\n\nWe *may* decide to start using this as text formatting tool in MiG__ later on.\n\n__ http:\/\/mig-1.imada.sdu.dk\/\n\n\nWe can also use it for creating tables if we want to:\n\n=====  =====  ======\nInput         Output\n-----  -----  ------\nA      B      A or B\n=====  =====  ======\nFalse  False  False\nTrue   False  True\nFalse  True   True\nTrue   True   True\n=====  =====  ======\n\nHave fun!\n\n----\n\nCheers, Jonas\n\"\"\"\n\n# Translate reST to html\n\nhtml = publish_string(reST, settings_overrides={'output_encoding'\n                      : 'unicode'}, writer=html_writer)\n\nprint html\n\n","tok_input_length":542,"tok_output_length":488,"system_prompt":"","index":16657}
{"question":"Implement k-means clustering algorithm in python.","input":"Not applicable","expected_output":"#import necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n#get data \nurl = 'https:\/\/raw.githubusercontent.com\/krishnaik06\/KNN-K-means\/master\/Dataset\/dataset.csv'\ndata = pd.read_csv(url,header=None).values\n\n#apply K-means algorithm \nk=3\nx = data[:,0]\ny = data[:,1]\n\n\n#generate random centroid \nC_x = np.random.randint(0, np.max(x), size=k)\nC_y = np.random.randint(0, np.max(y), size=k)\n\nC = np.array(list(zip(C_x, C_y)), dtype=np.float32)\nprint book\n\n#plot initial centroid \nfig, ax = plt.subplots(figsize = (5,5))\nax.scatter(x, y, marker='o', c='#f0f0f0', s=7)\nax.scatter(C_x, C_y, marker='*', s=300, c='g')\n\n#calculate euclidean distance between datapoints and centroid \ndist = np.zeros(K)\nfor i in range(K):\n    dist[i] = np.sqrt(np.power(x-C_x[i],2) + np.power(y-C_y[i],2))\n\n# find the cluster center \nclusters = np.zeros(len(x))\nfor i in range(len(x)):\n    clusters[i] = np.argmin(dist[i])\n\n# plot cluster center\nx1 = x[clusters==0]\ny1 = y[clusters==0]\nx2 = x[clusters==1]\ny2 = y[clusters==1]\nx3 = x[clusters==2]\ny3 = y[clusters==2]\nfig, ax = plt.subplots(figsize = (5,5))\nax.scatter(x1, y1, marker='o', c='r', s=7)\nax.scatter(x2, y2, marker='o', c='b', s=7)\nax.scatter(x3, y3, marker='o', c='y', s=7)\nax.scatter(C_x, C_y, marker='*', s=300, c='g')\n\n#update the centroid \nfor i in range(K):\n    points = [X[j] for j in range(len(X)) if clusters[j] == i]\n    C_x[i] = np.mean(points[0])\n    C_y[i] = np.mean(points[1])\n\nC = np.array(list(zip(C_x, C_y)), dtype=np.float32)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement k-means clustering algorithm in python.\n\n### Input:\nNot applicable\n\n### Output:\n#import necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n#get data \nurl = 'https:\/\/raw.githubusercontent.com\/krishnaik06\/KNN-K-means\/master\/Dataset\/dataset.csv'\ndata = pd.read_csv(url,header=None).values\n\n#apply K-means algorithm \nk=3\nx = data[:,0]\ny = data[:,1]\n\n\n#generate random centroid \nC_x = np.random.randint(0, np.max(x), size=k)\nC_y = np.random.randint(0, np.max(y), size=k)\n\nC = np.array(list(zip(C_x, C_y)), dtype=np.float32)\nprint book\n\n#plot initial centroid \nfig, ax = plt.subplots(figsize = (5,5))\nax.scatter(x, y, marker='o', c='#f0f0f0', s=7)\nax.scatter(C_x, C_y, marker='*', s=300, c='g')\n\n#calculate euclidean distance between datapoints and centroid \ndist = np.zeros(K)\nfor i in range(K):\n    dist[i] = np.sqrt(np.power(x-C_x[i],2) + np.power(y-C_y[i],2))\n\n# find the cluster center \nclusters = np.zeros(len(x))\nfor i in range(len(x)):\n    clusters[i] = np.argmin(dist[i])\n\n# plot cluster center\nx1 = x[clusters==0]\ny1 = y[clusters==0]\nx2 = x[clusters==1]\ny2 = y[clusters==1]\nx3 = x[clusters==2]\ny3 = y[clusters==2]\nfig, ax = plt.subplots(figsize = (5,5))\nax.scatter(x1, y1, marker='o', c='r', s=7)\nax.scatter(x2, y2, marker='o', c='b', s=7)\nax.scatter(x3, y3, marker='o', c='y', s=7)\nax.scatter(C_x, C_y, marker='*', s=300, c='g')\n\n#update the centroid \nfor i in range(K):\n    points = [X[j] for j in range(len(X)) if clusters[j] == i]\n    C_x[i] = np.mean(points[0])\n    C_y[i] = np.mean(points[1])\n\nC = np.array(list(zip(C_x, C_y)), dtype=np.float32)","tok_input_length":546,"tok_output_length":507,"system_prompt":"","index":9636}
{"question":"Develop an AI chatbot using Python that can answer simple questions.","input":"Not applicable","expected_output":"import nltk\nimport numpy\nimport random\nimport string\nimport re\nf=open('chatbot.txt','r',errors = 'ignore')\nraw=f.read()\nraw=raw.lower()\n\n\n# Tokenization\nsent_tokens = nltk.sent_tokenize(raw) # converts to list of sentences \nword_tokens = nltk.word_tokenize(raw) # converts to list of words\n\n# Preprocessing\nlemmer = nltk.stem.WordNetLemmatizer()\ndef LemTokens(tokens):\n return [lemmer.lemmatize(token) for token in tokens]\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\ndef LemNormalize(text):\n return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\n\n# Keyword Matching\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\nGREETING_RESPONSES = [\"hi\", \"hey\", \"*nods*\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\n\ndef greeting(sentence):\n\nfor word in sentence.split():\n if word.lower() in GREETING_INPUTS:\n return random.choice(GREETING_RESPONSES)\n\n# Generating Response\ndef response(user_response):\n robo_response=''\n sent_tokens.append(user_response)\n TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')\n tfidf = TfidfVec.fit_transform(sent_tokens)\n vals = cosine_similarity(tfidf[-1], tfidf)\n idx=vals.argsort()[0][-2]\n flat = vals.flatten()\n flat.sort()\n req_tfidf = flat[-2]\n if(req_tfidf==0):\n robo_response=robo_response+\"I am sorry! I don't understand you\"\n return robo_response\n else:\n robo_response = robo_response+sent_tokens[idx]\n return robo_response\n\nflag=True\nprint(\"ROBO: My name is Robo. I will answer your queries about Chatbots. If you want to exit, type Bye!\")\nwhile(flag==True):\n user_response = input()\n user_response=user_response.lower()\n if(user_response!='bye'):\n if(user_response=='thanks' or user_response=='thank you' ):\n flag=False\n print(\"ROBO: You are welcome..\")\n else:\n if(greeting(user_response)!=None):\n print(\"ROBO: \"+greeting(user_response))\n else:\n print(\"ROBO: \",end=\"\")\n print(response(user_response))\n sent_tokens.remove(user_response)\n else:\n flag=False\n print(\"ROBO: Bye! take care..\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI chatbot using Python that can answer simple questions.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nimport numpy\nimport random\nimport string\nimport re\nf=open('chatbot.txt','r',errors = 'ignore')\nraw=f.read()\nraw=raw.lower()\n\n\n# Tokenization\nsent_tokens = nltk.sent_tokenize(raw) # converts to list of sentences \nword_tokens = nltk.word_tokenize(raw) # converts to list of words\n\n# Preprocessing\nlemmer = nltk.stem.WordNetLemmatizer()\ndef LemTokens(tokens):\n return [lemmer.lemmatize(token) for token in tokens]\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\ndef LemNormalize(text):\n return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\n\n# Keyword Matching\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\nGREETING_RESPONSES = [\"hi\", \"hey\", \"*nods*\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\n\ndef greeting(sentence):\n\nfor word in sentence.split():\n if word.lower() in GREETING_INPUTS:\n return random.choice(GREETING_RESPONSES)\n\n# Generating Response\ndef response(user_response):\n robo_response=''\n sent_tokens.append(user_response)\n TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')\n tfidf = TfidfVec.fit_transform(sent_tokens)\n vals = cosine_similarity(tfidf[-1], tfidf)\n idx=vals.argsort()[0][-2]\n flat = vals.flatten()\n flat.sort()\n req_tfidf = flat[-2]\n if(req_tfidf==0):\n robo_response=robo_response+\"I am sorry! I don't understand you\"\n return robo_response\n else:\n robo_response = robo_response+sent_tokens[idx]\n return robo_response\n\nflag=True\nprint(\"ROBO: My name is Robo. I will answer your queries about Chatbots. If you want to exit, type Bye!\")\nwhile(flag==True):\n user_response = input()\n user_response=user_response.lower()\n if(user_response!='bye'):\n if(user_response=='thanks' or user_response=='thank you' ):\n flag=False\n print(\"ROBO: You are welcome..\")\n else:\n if(greeting(user_response)!=None):\n print(\"ROBO: \"+greeting(user_response))\n else:\n print(\"ROBO: \",end=\"\")\n print(response(user_response))\n sent_tokens.remove(user_response)\n else:\n flag=False\n print(\"ROBO: Bye! take care..\")","tok_input_length":561,"tok_output_length":518,"system_prompt":"","index":17118}
{"question":"Import pandas and time, and read in three CSV files. Merge the dataframes on datetime, lat, and lon. Filter the dataframe to include only rows with lat between 49 and 51 and lon between -125.52 and -120.2. Group the filtered dataframe by lat and lon, and calculate the mean of the Tair column. Write the execution time to a log file.","input":"","expected_output":"\n# coding: utf-8\n\n# In[1]:\n\nimport pandas as pd\nimport time\nfrom sys import argv\n\nlogfile = argv[1]\nfilesize = argv[2]\n\n\n# # Python Pandas Benchmark\n\n# In[3]:\n\n\nprefix = \"file:\/\/\/\/Users\/tony\/Dropbox\/Projects\/UW\/cse599c-17sp-projects\/spark-advantage\/data\/\"\n\nif(filesize == 'original'):\n    tairfname     = \"Tair_WA_nohead.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.csv\"\nelif (filesize == 'medium'):\n    tairfname     = \"Tair_WA_nohead.MEDIUM.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.MEDIUM.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.MEDIUM.csv\"\nelif (filesize == \"small\"):\n    tairfname     = \"Tair_WA_nohead.SMALL.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.SMALL.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.SMALL.csv\"\n\n\n\nstartTime = time.time()\n\n\n\ntair = pd.read_csv(prefix+tairfname)\ntsoil = pd.read_csv(prefix+tsoilfname)\ntsurface = pd.read_csv(prefix+tsurfacefname)\n\njoined = tair.merge(tsoil, on=[\"datetime\", \" lat\", \" lon\"]).merge(tsurface, on=[\"datetime\", \" lat\", \" lon\"])\n\njoined.columns = [name.strip() for name in joined.columns]\njoined[['lat', 'lon']] = joined[['lat', 'lon']].apply(pd.to_numeric)\n\nseattle = joined[(joined['lon'] > -125.52) & \\\n                 (joined['lon'] < -120.2)  & \\\n                 (joined['lat'] > 49.0)    & \\\n                 (joined['lat'] < 51.0)]\n\nseattle.groupby(by=['lat', 'lon'])['Tair'].mean()\n\nexptime = time.time() - startTime\nwith open(logfile, 'a') as log:\n    log.write(str(exptime)+'\\n')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImport pandas and time, and read in three CSV files. Merge the dataframes on datetime, lat, and lon. Filter the dataframe to include only rows with lat between 49 and 51 and lon between -125.52 and -120.2. Group the filtered dataframe by lat and lon, and calculate the mean of the Tair column. Write the execution time to a log file.\n\n### Input:\n\n\n### Output:\n\n# coding: utf-8\n\n# In[1]:\n\nimport pandas as pd\nimport time\nfrom sys import argv\n\nlogfile = argv[1]\nfilesize = argv[2]\n\n\n# # Python Pandas Benchmark\n\n# In[3]:\n\n\nprefix = \"file:\/\/\/\/Users\/tony\/Dropbox\/Projects\/UW\/cse599c-17sp-projects\/spark-advantage\/data\/\"\n\nif(filesize == 'original'):\n    tairfname     = \"Tair_WA_nohead.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.csv\"\nelif (filesize == 'medium'):\n    tairfname     = \"Tair_WA_nohead.MEDIUM.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.MEDIUM.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.MEDIUM.csv\"\nelif (filesize == \"small\"):\n    tairfname     = \"Tair_WA_nohead.SMALL.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.SMALL.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.SMALL.csv\"\n\n\n\nstartTime = time.time()\n\n\n\ntair = pd.read_csv(prefix+tairfname)\ntsoil = pd.read_csv(prefix+tsoilfname)\ntsurface = pd.read_csv(prefix+tsurfacefname)\n\njoined = tair.merge(tsoil, on=[\"datetime\", \" lat\", \" lon\"]).merge(tsurface, on=[\"datetime\", \" lat\", \" lon\"])\n\njoined.columns = [name.strip() for name in joined.columns]\njoined[['lat', 'lon']] = joined[['lat', 'lon']].apply(pd.to_numeric)\n\nseattle = joined[(joined['lon'] > -125.52) & \\\n                 (joined['lon'] < -120.2)  & \\\n                 (joined['lat'] > 49.0)    & \\\n                 (joined['lat'] < 51.0)]\n\nseattle.groupby(by=['lat', 'lon'])['Tair'].mean()\n\nexptime = time.time() - startTime\nwith open(logfile, 'a') as log:\n    log.write(str(exptime)+'\\n')","tok_input_length":573,"tok_output_length":467,"system_prompt":"","index":17363}
{"question":"Create a REST API using the Flask framework in Python to create, read, update and delete records from a database.","input":"Not applicable","expected_output":"from flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n\n# Connect to the database\napp.config['SQLALCHEMY_DATABASE_URI'] = 'YOUR DB URI'\ndb = SQLAlchemy(app)\n\n# Create a model class for table row\nclass TableRow(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(50), nullable=False)\n  description = db.Column(db.String(50), nullable=False)\n\n# Create a REST API using Flask-RESTful\napi = Api(app)\n\n# Create the API's endpoints\nclass CreateRecord(Resource):\n  def post(self):\n    # Get the request body\n    json_data = request.get_json()\n    # Create a new record\n    new_record = TableRow(name=json_data['name'], description=json_data['description'])\n    db.session.add(new_record)\n    db.session.commit()\n    return {'status': 'success'}, 201\n\nclass ReadRecord(Resource):\n  def get(self, id):\n    # Get a record by id\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        return {'name': record.name, 'description': record.description}, 200\n    return {'status': 'not found'}, 404\n\nclass UpdateRecord(Resource):\n  def put(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Get the request body\n        json_data = request.get_json()\n        # Update the record\n        record.name = json_data['name']\n        record.description = json_data['description']\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\nclass DeleteRecord(Resource):\n  def delete(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Delete the record\n        db.session.delete(record)\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\n# Add the API's endpoints to the API\napi.add_resource(CreateRecord, '\/create')\napi.add_resource(ReadRecord, '\/read\/<int:id>')\napi.add_resource(UpdateRecord, '\/update\/<int:id>')\napi.add_resource(DeleteRecord, '\/delete\/<int:id>')\n\nif __name__ == '__main__':\n  app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API using the Flask framework in Python to create, read, update and delete records from a database.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n\n# Connect to the database\napp.config['SQLALCHEMY_DATABASE_URI'] = 'YOUR DB URI'\ndb = SQLAlchemy(app)\n\n# Create a model class for table row\nclass TableRow(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(50), nullable=False)\n  description = db.Column(db.String(50), nullable=False)\n\n# Create a REST API using Flask-RESTful\napi = Api(app)\n\n# Create the API's endpoints\nclass CreateRecord(Resource):\n  def post(self):\n    # Get the request body\n    json_data = request.get_json()\n    # Create a new record\n    new_record = TableRow(name=json_data['name'], description=json_data['description'])\n    db.session.add(new_record)\n    db.session.commit()\n    return {'status': 'success'}, 201\n\nclass ReadRecord(Resource):\n  def get(self, id):\n    # Get a record by id\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        return {'name': record.name, 'description': record.description}, 200\n    return {'status': 'not found'}, 404\n\nclass UpdateRecord(Resource):\n  def put(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Get the request body\n        json_data = request.get_json()\n        # Update the record\n        record.name = json_data['name']\n        record.description = json_data['description']\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\nclass DeleteRecord(Resource):\n  def delete(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Delete the record\n        db.session.delete(record)\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\n# Add the API's endpoints to the API\napi.add_resource(CreateRecord, '\/create')\napi.add_resource(ReadRecord, '\/read\/<int:id>')\napi.add_resource(UpdateRecord, '\/update\/<int:id>')\napi.add_resource(DeleteRecord, '\/delete\/<int:id>')\n\nif __name__ == '__main__':\n  app.run(debug=True)","tok_input_length":589,"tok_output_length":536,"system_prompt":"","index":7953}
{"question":"Implement a genetic algorithm in Python for a traveling salesman problem.","input":"","expected_output":"import random\n\n# We'll use a list to store the cities and a dictionary to represent the distances between them\ncities = ['A', 'B', 'C', 'D', 'E']\ndistances = {\n 'A': {'B': 10, 'C': 20, 'D': 30, 'E': 40},\n 'B': {'A': 10, 'C': 15, 'D': 25, 'E': 35},\n 'C': {'A': 20, 'B': 15, 'D': 40, 'E': 25},\n 'D': {'A': 30, 'B': 25, 'C': 40, 'E': 10},\n 'E': {'A': 40, 'B': 35, 'C': 25, 'D': 10}\n}\n\n# Create a population of random routes\ndef create_population(pop_size):\n population = []\n for _ in range(pop_size):\n route = random.sample(cities, len(cities))\n population.append(route)\n return population\n\n# Calculate the total distance of a route\ndef get_distance(route):\n distance = 0\n for i in range(len(route)-1):\n distance += distances[route[i]][route[i+1]]\n return distance\n\n# Calculate the fitness of a route\ndef get_fitness(route):\n return 1 \/ get_distance(route)\n\n# Select a route from the population according to their fitness\ndef select_route(population):\n population_fitness = [(route, get_fitness(route)) for route in population]\n population_fitness.sort(key=lambda x: x[1], reverse=True)\n population_sorted = [route[0] for route in population_fitness]\n return population_sorted\n\n# Create a new population using crossover\ndef crossover(parent1, parent2):\n child = parent1[:len(parent1)\/\/2] + parent2[len(parent2)\/\/2:]\n return child\n\n# Mutate a route by swapping two cities\ndef mutate(route):\n index1 = random.randint(0, len(route)-1)\n index2 = random.randint(0, len(route)-1)\n new_route = route[:]\n new_route[index1], new_route[index2] = route[index2], route[index1]\n return new_route\n\n# Create a new population using genetic algorithm\ndef genetic_algorithm(population, pop_size):\n population_sorted = select_route(population)\n new_population = [population_sorted[0]]\n\n# Create new routes using crossover\n while len(new_population) < pop_size:\n parent1 = random.choice(population_sorted)\n parent2 = random.choice(population_sorted)\n child = crossover(parent1, parent2)\n if random.random() < 0.1:\n child = mutate(child)\n new_population.append(child)\n return new_population","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a genetic algorithm in Python for a traveling salesman problem.\n\n### Input:\n\n\n### Output:\nimport random\n\n# We'll use a list to store the cities and a dictionary to represent the distances between them\ncities = ['A', 'B', 'C', 'D', 'E']\ndistances = {\n 'A': {'B': 10, 'C': 20, 'D': 30, 'E': 40},\n 'B': {'A': 10, 'C': 15, 'D': 25, 'E': 35},\n 'C': {'A': 20, 'B': 15, 'D': 40, 'E': 25},\n 'D': {'A': 30, 'B': 25, 'C': 40, 'E': 10},\n 'E': {'A': 40, 'B': 35, 'C': 25, 'D': 10}\n}\n\n# Create a population of random routes\ndef create_population(pop_size):\n population = []\n for _ in range(pop_size):\n route = random.sample(cities, len(cities))\n population.append(route)\n return population\n\n# Calculate the total distance of a route\ndef get_distance(route):\n distance = 0\n for i in range(len(route)-1):\n distance += distances[route[i]][route[i+1]]\n return distance\n\n# Calculate the fitness of a route\ndef get_fitness(route):\n return 1 \/ get_distance(route)\n\n# Select a route from the population according to their fitness\ndef select_route(population):\n population_fitness = [(route, get_fitness(route)) for route in population]\n population_fitness.sort(key=lambda x: x[1], reverse=True)\n population_sorted = [route[0] for route in population_fitness]\n return population_sorted\n\n# Create a new population using crossover\ndef crossover(parent1, parent2):\n child = parent1[:len(parent1)\/\/2] + parent2[len(parent2)\/\/2:]\n return child\n\n# Mutate a route by swapping two cities\ndef mutate(route):\n index1 = random.randint(0, len(route)-1)\n index2 = random.randint(0, len(route)-1)\n new_route = route[:]\n new_route[index1], new_route[index2] = route[index2], route[index1]\n return new_route\n\n# Create a new population using genetic algorithm\ndef genetic_algorithm(population, pop_size):\n population_sorted = select_route(population)\n new_population = [population_sorted[0]]\n\n# Create new routes using crossover\n while len(new_population) < pop_size:\n parent1 = random.choice(population_sorted)\n parent2 = random.choice(population_sorted)\n child = crossover(parent1, parent2)\n if random.random() < 0.1:\n child = mutate(child)\n new_population.append(child)\n return new_population","tok_input_length":599,"tok_output_length":560,"system_prompt":"","index":9655}
{"question":"To measure the successful pings per second using this script, follow these steps:\n1. Run the script using the command \"sudo python ping.py -l -a 61:8E:9C:CD:03 -f 74 -t 0 -r 0\".\n2. Enter the address to sniff with the \"-a\" or \"--address\" argument, followed by the RF channel with the \"-f\" or \"--channel\" argument.\n3. The script will put the radio in sniffer mode and set the channel.\n4. The script will display the maximum and current rate of successful pings per second on the console.\n5. To stop the script, press \"Ctrl+C\".","input":"","expected_output":"#!\/usr\/bin\/env python2\n'''\nAuthor: xswxm\nBlog: xswxm.com\n\nThis script will measure the successful pings per seconds.\ne.g.: sudo python ping.py -l -a 61:8E:9C:CD:03 -f 74 -t 0 -r 0\n\n'''\nimport sys, time, threading\nfrom lib import common\ncommon.init_args('.\/ping.py')\ncommon.parser.add_argument('-a', '--address', type=str, help='Address to sniff, following as it changes channels', required=True)\ncommon.parser.add_argument('-f', '--channel', type=int, help='RF channel', default=0)\ncommon.parse_and_init()\n\nchannel = common.args.channel\n# Total number of payloads sent\ncount = 0\n\n# Parse the prefix address\naddress = common.args.address.replace(':', '').decode('hex')[::-1][:5]\n# Put the radio in sniffer mode (ESB w\/o auto ACKs)\ncommon.radio.enter_sniffer_mode(address)\n# Set channel\ncommon.radio.set_channel(channel)\n\nstop_event = threading.Event()\nstop_event.set()\n\n# Update per milliseconds\ndef display():\n  global count, stop_event\n  # To record the number of payloads sent for every 100 milliseconds\n  pings = [0]*10\n  # Highest rate\n  max_rate = 0\n  while stop_event.isSet():\n    pings = pings[1:] + [count]\n    rate = pings[-1] - pings[0]\n    if max_rate < rate: max_rate = rate\n    msg = 'Maximum Rate: {0:>4}pks\/s    Current Rate: {1:>4}pks\/s'.format(max_rate, rate)\n    sys.stdout.write('\\r'+msg)\n    sys.stdout.flush()\n    time.sleep(0.1)\n\n\nif __name__ == \"__main__\":\n  t = threading.Thread(target=display,args=())\n  t.start()\n  try:\n    while True:\n      if common.radio.transmit_payload(common.ping_payload, common.ack_timeout, common.retries):\n        count += 1\n  except KeyboardInterrupt:\n    stop_event.clear()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo measure the successful pings per second using this script, follow these steps:\n1. Run the script using the command \"sudo python ping.py -l -a 61:8E:9C:CD:03 -f 74 -t 0 -r 0\".\n2. Enter the address to sniff with the \"-a\" or \"--address\" argument, followed by the RF channel with the \"-f\" or \"--channel\" argument.\n3. The script will put the radio in sniffer mode and set the channel.\n4. The script will display the maximum and current rate of successful pings per second on the console.\n5. To stop the script, press \"Ctrl+C\".\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python2\n'''\nAuthor: xswxm\nBlog: xswxm.com\n\nThis script will measure the successful pings per seconds.\ne.g.: sudo python ping.py -l -a 61:8E:9C:CD:03 -f 74 -t 0 -r 0\n\n'''\nimport sys, time, threading\nfrom lib import common\ncommon.init_args('.\/ping.py')\ncommon.parser.add_argument('-a', '--address', type=str, help='Address to sniff, following as it changes channels', required=True)\ncommon.parser.add_argument('-f', '--channel', type=int, help='RF channel', default=0)\ncommon.parse_and_init()\n\nchannel = common.args.channel\n# Total number of payloads sent\ncount = 0\n\n# Parse the prefix address\naddress = common.args.address.replace(':', '').decode('hex')[::-1][:5]\n# Put the radio in sniffer mode (ESB w\/o auto ACKs)\ncommon.radio.enter_sniffer_mode(address)\n# Set channel\ncommon.radio.set_channel(channel)\n\nstop_event = threading.Event()\nstop_event.set()\n\n# Update per milliseconds\ndef display():\n  global count, stop_event\n  # To record the number of payloads sent for every 100 milliseconds\n  pings = [0]*10\n  # Highest rate\n  max_rate = 0\n  while stop_event.isSet():\n    pings = pings[1:] + [count]\n    rate = pings[-1] - pings[0]\n    if max_rate < rate: max_rate = rate\n    msg = 'Maximum Rate: {0:>4}pks\/s    Current Rate: {1:>4}pks\/s'.format(max_rate, rate)\n    sys.stdout.write('\\r'+msg)\n    sys.stdout.flush()\n    time.sleep(0.1)\n\n\nif __name__ == \"__main__\":\n  t = threading.Thread(target=display,args=())\n  t.start()\n  try:\n    while True:\n      if common.radio.transmit_payload(common.ping_payload, common.ack_timeout, common.retries):\n        count += 1\n  except KeyboardInterrupt:\n    stop_event.clear()","tok_input_length":617,"tok_output_length":448,"system_prompt":"","index":14085}
{"question":"Write a Python program to edit a dataset of 20 records. The program should take the dataset as input, sort it according to a specific field, and output the sorted dataset.","input":"dataset = [\n    {'name': 'John', 'age': 30},\n    {'name': 'Adam', 'age': 20},\n    {'name': 'Eric', 'age': 40},\n    {'name': 'Mia', 'age': 25},\n    {'name': 'Jasper', 'age': 30},\n    {'name': 'Noah', 'age': 22},\n    {'name': 'Emma', 'age': 35},\n    {'name': 'Eva', 'age': 45},\n    {'name': 'Adam', 'age': 23},\n    {'name': 'Olivia', 'age': 20},\n    {'name': 'Daniel', 'age': 33},\n    {'name': 'Ava', 'age': 26},\n    {'name': 'Levi', 'age': 40},\n    {'name': 'Isabella', 'age': 27},\n    {'name': 'Ethan', 'age': 24},\n    {'name': 'Sophia', 'age': 19},\n    {'name': 'Liam', 'age': 35},\n    {'name': 'Charlotte', 'age': 38},\n    {'name': 'Benjamin', 'age': 17},\n    {'name': 'Amelia', 'age': 44}\n]","expected_output":"# Sort the dataset according to age\nsorted_dataset = sorted(dataset, key=lambda x: x['age'])\n\n# Output the sorted dataset\nfor record in sorted_dataset:\n print(record)\n\n# Output:\n{'name': 'Benjamin', 'age': 17}\n{'name': 'Adam', 'age': 20}\n{'name': 'Olivia', 'age': 20}\n{'name': 'Sophia', 'age': 19}\n{'name': 'Adam', 'age': 23}\n{'name': 'Noah', 'age': 22}\n{'name': 'Ethan', 'age': 24}\n{'name': 'Mia', 'age': 25}\n{'name': 'Ava', 'age': 26}\n{'name': 'Isabella', 'age': 27}\n{'name': 'John', 'age': 30}\n{'name': 'Jasper', 'age': 30}\n{'name': 'Daniel', 'age': 33}\n{'name': 'Liam', 'age': 35}\n{'name': 'Emma', 'age': 35}\n{'name': 'Charlotte', 'age': 38}\n{'name': 'Eva', 'age': 45}\n{'name': 'Amelia', 'age': 44}\n{'name': 'Eric', 'age': 40}\n{'name': 'Levi', 'age': 40}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to edit a dataset of 20 records. The program should take the dataset as input, sort it according to a specific field, and output the sorted dataset.\n\n### Input:\ndataset = [\n    {'name': 'John', 'age': 30},\n    {'name': 'Adam', 'age': 20},\n    {'name': 'Eric', 'age': 40},\n    {'name': 'Mia', 'age': 25},\n    {'name': 'Jasper', 'age': 30},\n    {'name': 'Noah', 'age': 22},\n    {'name': 'Emma', 'age': 35},\n    {'name': 'Eva', 'age': 45},\n    {'name': 'Adam', 'age': 23},\n    {'name': 'Olivia', 'age': 20},\n    {'name': 'Daniel', 'age': 33},\n    {'name': 'Ava', 'age': 26},\n    {'name': 'Levi', 'age': 40},\n    {'name': 'Isabella', 'age': 27},\n    {'name': 'Ethan', 'age': 24},\n    {'name': 'Sophia', 'age': 19},\n    {'name': 'Liam', 'age': 35},\n    {'name': 'Charlotte', 'age': 38},\n    {'name': 'Benjamin', 'age': 17},\n    {'name': 'Amelia', 'age': 44}\n]\n\n### Output:\n# Sort the dataset according to age\nsorted_dataset = sorted(dataset, key=lambda x: x['age'])\n\n# Output the sorted dataset\nfor record in sorted_dataset:\n print(record)\n\n# Output:\n{'name': 'Benjamin', 'age': 17}\n{'name': 'Adam', 'age': 20}\n{'name': 'Olivia', 'age': 20}\n{'name': 'Sophia', 'age': 19}\n{'name': 'Adam', 'age': 23}\n{'name': 'Noah', 'age': 22}\n{'name': 'Ethan', 'age': 24}\n{'name': 'Mia', 'age': 25}\n{'name': 'Ava', 'age': 26}\n{'name': 'Isabella', 'age': 27}\n{'name': 'John', 'age': 30}\n{'name': 'Jasper', 'age': 30}\n{'name': 'Daniel', 'age': 33}\n{'name': 'Liam', 'age': 35}\n{'name': 'Emma', 'age': 35}\n{'name': 'Charlotte', 'age': 38}\n{'name': 'Eva', 'age': 45}\n{'name': 'Amelia', 'age': 44}\n{'name': 'Eric', 'age': 40}\n{'name': 'Levi', 'age': 40}","tok_input_length":634,"tok_output_length":294,"system_prompt":"","index":4984}
{"question":"Create a code that runs an orbital dynamics simulation in Python.","input":"","expected_output":"import numpy as np\nimport matplotlib.pyplot as plt\n \n# Define some constants \nG = 1\n \n# Define some parameters\nm1 = 1\nm2 = 1\n \n# Initial conditions\nx1_0 = 0 # initial position of the first mass\ny1_0 = 0 \nvx1_0 = 1 # initial velocity of the first mass (along the x-axis)\nvy1_0 = 0\n \nx2_0 = 3    # initial position of the second mass\ny2_0 = 0\nvx2_0 = 0 # initial velocity of the second mass (along the x-axis)\nvy2_0 = 0.5 \n \n# Simulation parameters\nN = 1000 # number of steps\ndt = 1e-3 # time step\n \n# Create arrays to hold the x,y positions of the masses\nx1 = np.zeros(N)\ny1 = np.zeros(N)\nx2 = np.zeros(N)\ny2 = np.zeros(N)\n \n# Initial conditions\nx1[0] = x1_0\ny1[0] = y1_0\nx2[0] = x2_0\ny2[0] = y2_0\n \n# Simulation loop\nfor i in range(N-1):\n    # Calculate the force for the first mass \n    dx = x2[i] - x1[i]\n    dy = y2[i] - y1[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx1 = G*m2\/r**3 * dx\n    Fy1 = G*m2\/r**3 * dy\n    \n    # Calculate the force for the second mass \n    dx = x1[i] - x2[i]\n    dy = y1[i] - y2[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx2 = G*m1\/r**3 * dx \n    Fy2 = G*m1\/r**3 * dy\n    \n    # Update the positions \n    x1[i+1] = x1[i] + vx1_0 * dt + Fx1 * dt**2 \/ 2 \n    y1[i+1] = y1[i] + vy1_0 * dt + Fy1 * dt**2 \/ 2 \n    x2[i+1] = x2[i] + vx2_0 * dt + Fx2 * dt**2 \/ 2 \n    y2[i+1] = y2[i] + vy2_0 * dt + Fy2 * dt**2 \/ 2 \n \n# Plot the results\nplt.plot(x1, y1, label=\"Mass 1\")\nplt.plot(x2, y2, label=\"Mass 2\")\nplt.xlabel(\"x-position\")\nplt.ylabel(\"y-position\")\nplt.legend(loc=\"lower right\")\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code that runs an orbital dynamics simulation in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n# Define some constants \nG = 1\n \n# Define some parameters\nm1 = 1\nm2 = 1\n \n# Initial conditions\nx1_0 = 0 # initial position of the first mass\ny1_0 = 0 \nvx1_0 = 1 # initial velocity of the first mass (along the x-axis)\nvy1_0 = 0\n \nx2_0 = 3    # initial position of the second mass\ny2_0 = 0\nvx2_0 = 0 # initial velocity of the second mass (along the x-axis)\nvy2_0 = 0.5 \n \n# Simulation parameters\nN = 1000 # number of steps\ndt = 1e-3 # time step\n \n# Create arrays to hold the x,y positions of the masses\nx1 = np.zeros(N)\ny1 = np.zeros(N)\nx2 = np.zeros(N)\ny2 = np.zeros(N)\n \n# Initial conditions\nx1[0] = x1_0\ny1[0] = y1_0\nx2[0] = x2_0\ny2[0] = y2_0\n \n# Simulation loop\nfor i in range(N-1):\n    # Calculate the force for the first mass \n    dx = x2[i] - x1[i]\n    dy = y2[i] - y1[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx1 = G*m2\/r**3 * dx\n    Fy1 = G*m2\/r**3 * dy\n    \n    # Calculate the force for the second mass \n    dx = x1[i] - x2[i]\n    dy = y1[i] - y2[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx2 = G*m1\/r**3 * dx \n    Fy2 = G*m1\/r**3 * dy\n    \n    # Update the positions \n    x1[i+1] = x1[i] + vx1_0 * dt + Fx1 * dt**2 \/ 2 \n    y1[i+1] = y1[i] + vy1_0 * dt + Fy1 * dt**2 \/ 2 \n    x2[i+1] = x2[i] + vx2_0 * dt + Fx2 * dt**2 \/ 2 \n    y2[i+1] = y2[i] + vy2_0 * dt + Fy2 * dt**2 \/ 2 \n \n# Plot the results\nplt.plot(x1, y1, label=\"Mass 1\")\nplt.plot(x2, y2, label=\"Mass 2\")\nplt.xlabel(\"x-position\")\nplt.ylabel(\"y-position\")\nplt.legend(loc=\"lower right\")\nplt.show()","tok_input_length":649,"tok_output_length":610,"system_prompt":"","index":13852}
{"question":"Create a global alignment algorithm in Python using the Needleman-Wunsch method.","input":"\"GCCTGAGC\", \"GCCGGAGC\"","expected_output":"def NeedlemanWunschAligner(string1, string2):\n    # Initializing the alignment matrix\n    num_rows, num_cols = len(string1) + 1, len(string2) + 1\n    alignment_matrix = [[0]*num_cols for _ in range(num_rows)]\n\n    # Initial conditions\n    for row in range(1, num_rows):\n        alignment_matrix[row][0] =  alignment_matrix[row - 1][0] - 1\n    for col in range(1, num_cols):\n        alignment_matrix[0][col] =  alignment_matrix[0][col - 1] - 1\n\n    # Dynamic programming\n    for row in range(1, num_rows):\n        for col in range(1, num_cols):\n            diagonal_score = alignment_matrix[row - 1][col - 1] + (1 if string1[row - 1] == string2[col - 1] else -1)\n            left_score    = alignment_matrix[row][col - 1] - 1\n            up_score      = alignment_matrix[row - 1][col] - 1\n            alignment_matrix[row][col] = max(diagonal_score, left_score, up_score)\n            \n    # Alignment result\n    row, col = len(string1), len(string2)\n    al1, al2 = \"\", \"\"\n\n    while row > 0 or col > 0:\n        score = alignment_matrix[row][col]\n        if row > 0 and col > 0:\n            score_diag = alignment_matrix[row - 1][col - 1]\n            score_left = alignment_matrix[row][col - 1]\n            score_up   = alignment_matrix[row - 1][col]\n            if score == score_diag + (1 if string1[row - 1] == string2[col - 1] else -1):\n                al1 += string1[row - 1]\n                al2 += string2[col - 1]\n                row -= 1\n                col -= 1\n            elif score == score_left - 1:\n                al1 += \"-\"\n                al2 += string2[col - 1]\n                col -= 1\n            elif score == score_up - 1:\n                al1 += string1[row - 1]\n                al2 += \"-\"\n                row -= 1\n        elif row > 0:\n            al1 += string1[row - 1]\n            al2 += \"-\"\n            row -= 1\n        elif col > 0:\n            al1 += \"-\"\n            al2 += string2[col - 1]\n            col -= 1\n    return al1[::-1], al2[::-1]\n\n# Driver Code\nstring1 = \"GCCTGAGC\"\nstring2 = \"GCCGGAGC\"\nalignment_result = NeedlemanWunschAligner(string1, string2)\n\nprint(alignment_result) # ('GCCTGAGC', 'GCC-GGAGC')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a global alignment algorithm in Python using the Needleman-Wunsch method.\n\n### Input:\n\"GCCTGAGC\", \"GCCGGAGC\"\n\n### Output:\ndef NeedlemanWunschAligner(string1, string2):\n    # Initializing the alignment matrix\n    num_rows, num_cols = len(string1) + 1, len(string2) + 1\n    alignment_matrix = [[0]*num_cols for _ in range(num_rows)]\n\n    # Initial conditions\n    for row in range(1, num_rows):\n        alignment_matrix[row][0] =  alignment_matrix[row - 1][0] - 1\n    for col in range(1, num_cols):\n        alignment_matrix[0][col] =  alignment_matrix[0][col - 1] - 1\n\n    # Dynamic programming\n    for row in range(1, num_rows):\n        for col in range(1, num_cols):\n            diagonal_score = alignment_matrix[row - 1][col - 1] + (1 if string1[row - 1] == string2[col - 1] else -1)\n            left_score    = alignment_matrix[row][col - 1] - 1\n            up_score      = alignment_matrix[row - 1][col] - 1\n            alignment_matrix[row][col] = max(diagonal_score, left_score, up_score)\n            \n    # Alignment result\n    row, col = len(string1), len(string2)\n    al1, al2 = \"\", \"\"\n\n    while row > 0 or col > 0:\n        score = alignment_matrix[row][col]\n        if row > 0 and col > 0:\n            score_diag = alignment_matrix[row - 1][col - 1]\n            score_left = alignment_matrix[row][col - 1]\n            score_up   = alignment_matrix[row - 1][col]\n            if score == score_diag + (1 if string1[row - 1] == string2[col - 1] else -1):\n                al1 += string1[row - 1]\n                al2 += string2[col - 1]\n                row -= 1\n                col -= 1\n            elif score == score_left - 1:\n                al1 += \"-\"\n                al2 += string2[col - 1]\n                col -= 1\n            elif score == score_up - 1:\n                al1 += string1[row - 1]\n                al2 += \"-\"\n                row -= 1\n        elif row > 0:\n            al1 += string1[row - 1]\n            al2 += \"-\"\n            row -= 1\n        elif col > 0:\n            al1 += \"-\"\n            al2 += string2[col - 1]\n            col -= 1\n    return al1[::-1], al2[::-1]\n\n# Driver Code\nstring1 = \"GCCTGAGC\"\nstring2 = \"GCCGGAGC\"\nalignment_result = NeedlemanWunschAligner(string1, string2)\n\nprint(alignment_result) # ('GCCTGAGC', 'GCC-GGAGC')","tok_input_length":668,"tok_output_length":613,"system_prompt":"","index":13901}
{"question":"Create a game loop for a game of Pong using Python","input":"","expected_output":"\"\"\"\nA game loop for a game of Pong using Python\n\"\"\"\nimport pygame\nimport time\n\n# Define constants\nBLACK = (0, 0, 0)\nWIDTH = 600\nHEIGHT = 400\nRADIUS = 20\nPADDLE_WIDTH = 10\nPADDLE_HEIGHT = 75 \n\n# Initialize game\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Pong\") \ncenter_point = WIDTH\/2, HEIGHT\/2\nclock = pygame.time.Clock()\n\n# Game variables\npaddleA_y = HEIGHT \/ 2\npaddleB_y = HEIGHT \/ 2\nball_x = WIDTH \/ 2\nball_y = HEIGHT \/ 2\nball_change_x = 2\nball_change_y = 2\n\n# Begin game loop\nwhile True:\n    # Reset screen\n    screen.fill(BLACK)\n    \n    # Drawing objects\n    ball = pygame.draw.circle(screen, (255,255,255), (int(ball_x), int(ball_y)), RADIUS)\n    paddleA = pygame.draw.rect(screen, (255,255,255), (0, paddleA_y, PADDLE_WIDTH, PADDLE_HEIGHT)) \n    paddleB = pygame.draw.rect(screen, (255,255,255), (WIDTH - PADDLE_WIDTH, paddleB_y, PADDLE_WIDTH, PADDLE_HEIGHT))\n\t\n    # Event loop \n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: \n            pygame.quit()\n            exit()\n\n    # Movement of paddles\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_w]:\n        paddleA_y -= 3\n    elif keys[pygame.K_s]:\n        paddleA_y += 3\n    elif keys[pygame.K_UP]:\n        paddleB_y -= 3\n    elif keys[pygame.K_DOWN]:\n        paddleB_y += 3\n\n    # Limit the position of the paddles\n    if paddleA_y < 0:\n       paddleA_y = 0\n    elif paddleA_y > HEIGHT - PADDLE_HEIGHT:\n       paddleA_y = HEIGHT - PADDLE_HEIGHT\n    if paddleB_y < 0:\n       paddleB_y = 0\n    elif paddleB_y > HEIGHT - PADDLE_HEIGHT:\n       paddleB_y = HEIGHT - PADDLE_HEIGHT\n\n    # Ball bouncing to the left\n    if (ball.left <= paddleA.right + 10) and ball.colliderect(paddleA):\n        ball_change_x = -ball_change_x\n\n    # Ball bouncing to the right\n    if (ball.right >= paddleB.left - 10) and ball.colliderect(paddleB):\n        ball_change_x = -ball_change_x\n\n    # Ball bouncing up\n    if (ball.top <= 0) or (ball.bottom >= HEIGHT):\n        ball_change_y = -ball_change_y\n    \n    # Ball movement\n    ball_x += ball_change_x\n    ball_y += ball_change_y\n\t\n    #Update display\n    pygame.display.flip()\n    clock.tick(30)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a game loop for a game of Pong using Python\n\n### Input:\n\n\n### Output:\n\"\"\"\nA game loop for a game of Pong using Python\n\"\"\"\nimport pygame\nimport time\n\n# Define constants\nBLACK = (0, 0, 0)\nWIDTH = 600\nHEIGHT = 400\nRADIUS = 20\nPADDLE_WIDTH = 10\nPADDLE_HEIGHT = 75 \n\n# Initialize game\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Pong\") \ncenter_point = WIDTH\/2, HEIGHT\/2\nclock = pygame.time.Clock()\n\n# Game variables\npaddleA_y = HEIGHT \/ 2\npaddleB_y = HEIGHT \/ 2\nball_x = WIDTH \/ 2\nball_y = HEIGHT \/ 2\nball_change_x = 2\nball_change_y = 2\n\n# Begin game loop\nwhile True:\n    # Reset screen\n    screen.fill(BLACK)\n    \n    # Drawing objects\n    ball = pygame.draw.circle(screen, (255,255,255), (int(ball_x), int(ball_y)), RADIUS)\n    paddleA = pygame.draw.rect(screen, (255,255,255), (0, paddleA_y, PADDLE_WIDTH, PADDLE_HEIGHT)) \n    paddleB = pygame.draw.rect(screen, (255,255,255), (WIDTH - PADDLE_WIDTH, paddleB_y, PADDLE_WIDTH, PADDLE_HEIGHT))\n\t\n    # Event loop \n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: \n            pygame.quit()\n            exit()\n\n    # Movement of paddles\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_w]:\n        paddleA_y -= 3\n    elif keys[pygame.K_s]:\n        paddleA_y += 3\n    elif keys[pygame.K_UP]:\n        paddleB_y -= 3\n    elif keys[pygame.K_DOWN]:\n        paddleB_y += 3\n\n    # Limit the position of the paddles\n    if paddleA_y < 0:\n       paddleA_y = 0\n    elif paddleA_y > HEIGHT - PADDLE_HEIGHT:\n       paddleA_y = HEIGHT - PADDLE_HEIGHT\n    if paddleB_y < 0:\n       paddleB_y = 0\n    elif paddleB_y > HEIGHT - PADDLE_HEIGHT:\n       paddleB_y = HEIGHT - PADDLE_HEIGHT\n\n    # Ball bouncing to the left\n    if (ball.left <= paddleA.right + 10) and ball.colliderect(paddleA):\n        ball_change_x = -ball_change_x\n\n    # Ball bouncing to the right\n    if (ball.right >= paddleB.left - 10) and ball.colliderect(paddleB):\n        ball_change_x = -ball_change_x\n\n    # Ball bouncing up\n    if (ball.top <= 0) or (ball.bottom >= HEIGHT):\n        ball_change_y = -ball_change_y\n    \n    # Ball movement\n    ball_x += ball_change_x\n    ball_y += ball_change_y\n\t\n    #Update display\n    pygame.display.flip()\n    clock.tick(30)","tok_input_length":682,"tok_output_length":642,"system_prompt":"","index":5509}
{"question":"Create a neural network in Python to predict the probability of a person having a certain disease.","input":"","expected_output":"import tensorflow as tf\nimport numpy as np\n\n# Input data\ninputData = np.array([[Age, Gender, Weight, Height, Systolic BP, Diastolic BP], ...])\n\n# Output data\noutputData = np.array([Disease_probability], ...])\n\n# Initialize variables\nnumberOfInputs = len(inputData[0])\nnumberOfOutputs = len(outputData[0])\n# Define the number of neurons in each layer\nhiddenUnits = [5,5]\n\n# Create placeholders for the inputs\nx = tf.placeholder(tf.float32, [None, numberOfInputs])\ny = tf.placeholder(tf.float32, [None, numberOfOutputs])\n\n# Create weights\nweights = {\n    \"h1\": tf.Variable(tf.random_normal([numberOfInputs, hiddenUnits[0]]) ),\n    \"h2\": tf.Variable(tf.random_normal([hiddenUnits[0], hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([hiddenUnits[1], numberOfOutputs] ))\n}\n\n# Create biases\nbiases = {\n    \"b1\": tf.Variable(tf.random_normal([hiddenUnits[0]] )),\n    \"b2\": tf.Variable(tf.random_normal([hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([numberOfOutputs] ))\n}\n\n# Create forward propagation step\ndef forwardPropagation(x):\n    # Hidden layer 1\n    layerOne = tf.add( tf.matmul(x, weights[\"h1\"] ), biases[\"b1\"] )\n    layerOne = tf.nn.relu(layerOne)\n\n    # Hidden layer 2\n    layerTwo = tf.add( tf.matmul(layerOne, weights[\"h2\"] ), biases[\"b2\"] )\n    layerTwo = tf.nn.relu(layerTwo)\n\n    # Output layer\n    outputLayer = tf.add( tf.matmul(layerTwo, weights[\"output\"]), biases[\"output\"] )\n    return outputLayer\n\n# Create loss calculating step\ndef computeLoss(predictions, y):\n    return tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits=predictions, labels=y) )\n\n# Create optimizer step\ndef trainModel(loss):\n    learningRate = 0.001\n    return tf.train.AdamOptimizer(learningRate).minimize(loss)\n\ndef main():\n    # Run forward propagation \n    predictions = forwardPropagation(x)\n\n    # Calculate loss\n    loss = computeLoss(predictions, y)\n\n    # Train the model\n    train = trainModel(loss)\n\n    # Create session\n    with tf.Session() as sess:\n        # Initialize all the variables\n        sess.run(tf.global_variables_initializer())\n\n        # Train the model for the specified number of epochs\n        for epoch in range(50):\n            epochLoss, _ = sess.run([loss, train], feed_dict={x : inputData , y : outputData})\n            print(\"loss : ,\", epochLoss)\n\n        # Prediction\n        prediction = tf.argmax(predictions, 1)\n        correct_prediction = tf.equal(prediction, tf.argmax(y, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        print(\"Accuracy : \", accuracy.eval({x: inputData, y: outputData}))\n\nif __name__ == '__main__':\n    main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python to predict the probability of a person having a certain disease.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nimport numpy as np\n\n# Input data\ninputData = np.array([[Age, Gender, Weight, Height, Systolic BP, Diastolic BP], ...])\n\n# Output data\noutputData = np.array([Disease_probability], ...])\n\n# Initialize variables\nnumberOfInputs = len(inputData[0])\nnumberOfOutputs = len(outputData[0])\n# Define the number of neurons in each layer\nhiddenUnits = [5,5]\n\n# Create placeholders for the inputs\nx = tf.placeholder(tf.float32, [None, numberOfInputs])\ny = tf.placeholder(tf.float32, [None, numberOfOutputs])\n\n# Create weights\nweights = {\n    \"h1\": tf.Variable(tf.random_normal([numberOfInputs, hiddenUnits[0]]) ),\n    \"h2\": tf.Variable(tf.random_normal([hiddenUnits[0], hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([hiddenUnits[1], numberOfOutputs] ))\n}\n\n# Create biases\nbiases = {\n    \"b1\": tf.Variable(tf.random_normal([hiddenUnits[0]] )),\n    \"b2\": tf.Variable(tf.random_normal([hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([numberOfOutputs] ))\n}\n\n# Create forward propagation step\ndef forwardPropagation(x):\n    # Hidden layer 1\n    layerOne = tf.add( tf.matmul(x, weights[\"h1\"] ), biases[\"b1\"] )\n    layerOne = tf.nn.relu(layerOne)\n\n    # Hidden layer 2\n    layerTwo = tf.add( tf.matmul(layerOne, weights[\"h2\"] ), biases[\"b2\"] )\n    layerTwo = tf.nn.relu(layerTwo)\n\n    # Output layer\n    outputLayer = tf.add( tf.matmul(layerTwo, weights[\"output\"]), biases[\"output\"] )\n    return outputLayer\n\n# Create loss calculating step\ndef computeLoss(predictions, y):\n    return tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits=predictions, labels=y) )\n\n# Create optimizer step\ndef trainModel(loss):\n    learningRate = 0.001\n    return tf.train.AdamOptimizer(learningRate).minimize(loss)\n\ndef main():\n    # Run forward propagation \n    predictions = forwardPropagation(x)\n\n    # Calculate loss\n    loss = computeLoss(predictions, y)\n\n    # Train the model\n    train = trainModel(loss)\n\n    # Create session\n    with tf.Session() as sess:\n        # Initialize all the variables\n        sess.run(tf.global_variables_initializer())\n\n        # Train the model for the specified number of epochs\n        for epoch in range(50):\n            epochLoss, _ = sess.run([loss, train], feed_dict={x : inputData , y : outputData})\n            print(\"loss : ,\", epochLoss)\n\n        # Prediction\n        prediction = tf.argmax(predictions, 1)\n        correct_prediction = tf.equal(prediction, tf.argmax(y, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        print(\"Accuracy : \", accuracy.eval({x: inputData, y: outputData}))\n\nif __name__ == '__main__':\n    main()","tok_input_length":693,"tok_output_length":648,"system_prompt":"","index":17764}
{"question":"Create a Python program to solve a Sudoku puzzle.","input":"A puzzle of the form:\n\n8 0 0 0 0 0 0 0 0\n0 0 3 6 0 0 0 0 0\n0 7 0 0 9 0 2 0 0\n0 5 0 0 0 7 0 0 0\n0 0 0 0 4 5 7 0 0\n0 0 0 1 0 0 0 3 0\n0 0 1 0 0 0 0 6 8\n0 0 8 5 0 0 0 1 0\n0 9 0 0 0 0 4 0 0","expected_output":"import numpy as np\n\n#solve a sudoku puzzle\ndef solve(puzzle):\n    #create a puzzle matrix\n    puzzle_matrix=np.array(puzzle).reshape(9,9)\n    \n    #check if the empty cell is in the row\n    def row(row_index,num):\n        return num in puzzle_matrix[row_index]\n    \n    #check if the empty cell is in the column\n    def col(col_index,num):\n        return num in puzzle_matrix[:,col_index]\n    \n    #check if the empty cell is in the 3x3 grid\n    def grid(row_index,col_index,num):\n        row_start,row_end=row_index\/\/3*3,row_index\/\/3*3+3\n        col_start,col_end=col_index\/\/3*3,col_index\/\/3*3+3\n        return num in puzzle_matrix[row_start:row_end,col_start:col_end]\n    \n    #find the empty cell\n    for row_index in range(9):\n        for col_index in range(9):\n            if puzzle_matrix[row_index][col_index]==0:\n                #check numbers from 1-9\n                for num in range(1,10):\n                    if not row(row_index,num) and not col(col_index,num) and not grid(row_index,col_index,num):\n                        puzzle_matrix[row_index][col_index]=num\n                        solve(puzzle_matrix)\n                        puzzle_matrix[row_index][col_index]=0 #backtrack if no valid solution is found\n                return\n    print(puzzle_matrix)\n\n#input a sudoku puzzle\npuzzle = [[8,0,0,0,0,0,0,0,0],\n            [0,0,3,6,0,0,0,0,0],\n            [0,7,0,0,9,0,2,0,0],\n            [0,5,0,0,0,7,0,0,0],\n            [0,0,0,0,4,5,7,0,0],\n            [0,0,0,1,0,0,0,3,0],\n            [0,0,1,0,0,0,0,6,8],\n            [0,0,8,5,0,0,0,1,0],\n            [0,9,0,0,0,0,4,0,0]]\n\nsolve(puzzle)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to solve a Sudoku puzzle.\n\n### Input:\nA puzzle of the form:\n\n8 0 0 0 0 0 0 0 0\n0 0 3 6 0 0 0 0 0\n0 7 0 0 9 0 2 0 0\n0 5 0 0 0 7 0 0 0\n0 0 0 0 4 5 7 0 0\n0 0 0 1 0 0 0 3 0\n0 0 1 0 0 0 0 6 8\n0 0 8 5 0 0 0 1 0\n0 9 0 0 0 0 4 0 0\n\n### Output:\nimport numpy as np\n\n#solve a sudoku puzzle\ndef solve(puzzle):\n    #create a puzzle matrix\n    puzzle_matrix=np.array(puzzle).reshape(9,9)\n    \n    #check if the empty cell is in the row\n    def row(row_index,num):\n        return num in puzzle_matrix[row_index]\n    \n    #check if the empty cell is in the column\n    def col(col_index,num):\n        return num in puzzle_matrix[:,col_index]\n    \n    #check if the empty cell is in the 3x3 grid\n    def grid(row_index,col_index,num):\n        row_start,row_end=row_index\/\/3*3,row_index\/\/3*3+3\n        col_start,col_end=col_index\/\/3*3,col_index\/\/3*3+3\n        return num in puzzle_matrix[row_start:row_end,col_start:col_end]\n    \n    #find the empty cell\n    for row_index in range(9):\n        for col_index in range(9):\n            if puzzle_matrix[row_index][col_index]==0:\n                #check numbers from 1-9\n                for num in range(1,10):\n                    if not row(row_index,num) and not col(col_index,num) and not grid(row_index,col_index,num):\n                        puzzle_matrix[row_index][col_index]=num\n                        solve(puzzle_matrix)\n                        puzzle_matrix[row_index][col_index]=0 #backtrack if no valid solution is found\n                return\n    print(puzzle_matrix)\n\n#input a sudoku puzzle\npuzzle = [[8,0,0,0,0,0,0,0,0],\n            [0,0,3,6,0,0,0,0,0],\n            [0,7,0,0,9,0,2,0,0],\n            [0,5,0,0,0,7,0,0,0],\n            [0,0,0,0,4,5,7,0,0],\n            [0,0,0,1,0,0,0,3,0],\n            [0,0,1,0,0,0,0,6,8],\n            [0,0,8,5,0,0,0,1,0],\n            [0,9,0,0,0,0,4,0,0]]\n\nsolve(puzzle)","tok_input_length":706,"tok_output_length":501,"system_prompt":"","index":15881}
{"question":"This code generates a set of C++ files for the BAGEL package. To use it, create a file named \"RelCASPT2.cc\" and add the desired code to it. Then run the script to generate the necessary files.","input":"","expected_output":"#!\/opt\/local\/bin\/python\nimport string\nimport os\nimport re\n\n\ndef header(n) :\n    return \"\/\/\\n\\\n\/\/ BAGEL - Brilliantly Advanced General Electronic Structure Library\\n\\\n\/\/ Filename: RelCASPT2\" + n + \".cc\\n\\\n\/\/ Copyright (C) 2014 Toru Shiozaki\\n\\\n\/\/\\n\\\n\/\/ Author: Toru Shiozaki <shiozaki@northwestern.edu>\\n\\\n\/\/ Maintainer: Shiozaki group\\n\\\n\/\/\\n\\\n\/\/ This file is part of the BAGEL package.\\n\\\n\/\/\\n\\\n\/\/ This program is free software: you can redistribute it and\/or modify\\n\\\n\/\/ it under the terms of the GNU General Public License as published by\\n\\\n\/\/ the Free Software Foundation, either version 3 of the License, or\\n\\\n\/\/ (at your option) any later version.\\n\\\n\/\/\\n\\\n\/\/ This program is distributed in the hope that it will be useful,\\n\\\n\/\/ but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\\\n\/\/ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\\\n\/\/ GNU General Public License for more details.\\n\\\n\/\/\\n\\\n\/\/ You should have received a copy of the GNU General Public License\\n\\\n\/\/ along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\\n\\\n\/\/\\n\\\n\\n\\\n#include <bagel_config.h>\\n\\\n#ifdef COMPILE_SMITH\\n\\\n\\n\\\n\\n\\\n#include <src\/smith\/relcaspt2\/RelCASPT2.h>\\n\"\n\ndef insert():\n    return \"#include <src\/smith\/relcaspt2\/RelCASPT2_tasks.h>\\n\"\n\ndef header2():\n    return \"\\n\\\nusing namespace std;\\n\\\nusing namespace bagel;\\n\\\nusing namespace bagel::SMITH;\\n\\\n\\n\\\n\"\n\nfooter = \"#endif\\n\"\n\nf = open('RelCASPT2.cc', 'r')\nlines = f.read().split(\"\\n\")[34:]\n\ntasks = []\ntmp = \"\"\n\nfor line in lines:\n    if (len(line) >= 17 and (line[0:17] == \"shared_ptr<Queue>\" or line[0:17] == \"RelCASPT2::RelCAS\")):\n        if (tmp != \"\"):\n            tasks.append(tmp)\n            tmp = \"\"\n    tmp += line + \"\\n\"\n    if (line == \"}\"):\n        tmp += \"\\n\"\ntasks.append(tmp)\n\np = re.compile('make_[a-z0-9]+q')\nfor task in tasks[0:-1]:\n    tag = p.search(task).group()[5:]\n    fout = open(\"RelCASPT2_\" + tag + \".cc\", \"w\")\n    out = header(\"_\" + tag + \"q\") + insert() + header2() + task + footer\n    fout.write(out)\n    fout.close()\n\nos.remove(\"RelCASPT2.cc\")\n\nfout = open(\"RelCASPT2.cc\", \"w\")\nout = header(\"\") + header2() + tasks[len(tasks)-1] + footer\nfout.write(out)\nfout.close()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code generates a set of C++ files for the BAGEL package. To use it, create a file named \"RelCASPT2.cc\" and add the desired code to it. Then run the script to generate the necessary files.\n\n### Input:\n\n\n### Output:\n#!\/opt\/local\/bin\/python\nimport string\nimport os\nimport re\n\n\ndef header(n) :\n    return \"\/\/\\n\\\n\/\/ BAGEL - Brilliantly Advanced General Electronic Structure Library\\n\\\n\/\/ Filename: RelCASPT2\" + n + \".cc\\n\\\n\/\/ Copyright (C) 2014 Toru Shiozaki\\n\\\n\/\/\\n\\\n\/\/ Author: Toru Shiozaki <shiozaki@northwestern.edu>\\n\\\n\/\/ Maintainer: Shiozaki group\\n\\\n\/\/\\n\\\n\/\/ This file is part of the BAGEL package.\\n\\\n\/\/\\n\\\n\/\/ This program is free software: you can redistribute it and\/or modify\\n\\\n\/\/ it under the terms of the GNU General Public License as published by\\n\\\n\/\/ the Free Software Foundation, either version 3 of the License, or\\n\\\n\/\/ (at your option) any later version.\\n\\\n\/\/\\n\\\n\/\/ This program is distributed in the hope that it will be useful,\\n\\\n\/\/ but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\\\n\/\/ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\\\n\/\/ GNU General Public License for more details.\\n\\\n\/\/\\n\\\n\/\/ You should have received a copy of the GNU General Public License\\n\\\n\/\/ along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\\n\\\n\/\/\\n\\\n\\n\\\n#include <bagel_config.h>\\n\\\n#ifdef COMPILE_SMITH\\n\\\n\\n\\\n\\n\\\n#include <src\/smith\/relcaspt2\/RelCASPT2.h>\\n\"\n\ndef insert():\n    return \"#include <src\/smith\/relcaspt2\/RelCASPT2_tasks.h>\\n\"\n\ndef header2():\n    return \"\\n\\\nusing namespace std;\\n\\\nusing namespace bagel;\\n\\\nusing namespace bagel::SMITH;\\n\\\n\\n\\\n\"\n\nfooter = \"#endif\\n\"\n\nf = open('RelCASPT2.cc', 'r')\nlines = f.read().split(\"\\n\")[34:]\n\ntasks = []\ntmp = \"\"\n\nfor line in lines:\n    if (len(line) >= 17 and (line[0:17] == \"shared_ptr<Queue>\" or line[0:17] == \"RelCASPT2::RelCAS\")):\n        if (tmp != \"\"):\n            tasks.append(tmp)\n            tmp = \"\"\n    tmp += line + \"\\n\"\n    if (line == \"}\"):\n        tmp += \"\\n\"\ntasks.append(tmp)\n\np = re.compile('make_[a-z0-9]+q')\nfor task in tasks[0:-1]:\n    tag = p.search(task).group()[5:]\n    fout = open(\"RelCASPT2_\" + tag + \".cc\", \"w\")\n    out = header(\"_\" + tag + \"q\") + insert() + header2() + task + footer\n    fout.write(out)\n    fout.close()\n\nos.remove(\"RelCASPT2.cc\")\n\nfout = open(\"RelCASPT2.cc\", \"w\")\nout = header(\"\") + header2() + tasks[len(tasks)-1] + footer\nfout.write(out)\nfout.close()\n","tok_input_length":731,"tok_output_length":655,"system_prompt":"","index":13466}
{"question":"To generate reST documentation for Sphinx from Evennia source code, follow these steps:\n1. Install etinenned's sphinx autopackage script to a folder named \"autogen\" in the same directory as this script using the command \"hg clone https:\/\/bitbucket.org\/etienned\/sphinx-autopackage-script autogen\".\n2. Create a directory tree \"code\/\" containing one directory for every package in the PACKAGE dictionary below.\n3. Set EVENNIA_DIR to point to an Evennia root dir.\n4. Run this script.\n5. A new folder sphinx\/source\/code will be created with the reST sources.\n6. To make a link to the code from the doc front page, edit docs\/sphinx\/sources\/index.rst to reference code\/modules. Note that this may not work properly at the moment.","input":"","expected_output":"#! \/usr\/bin\/python \n#\n# Auto-generate reST documentation for Sphinx from Evennia source\n# code.\n# \n# Uses etinenned's sphinx autopackage script. Install it to folder\n# \"autogen\" in this same directory:\n#\n#   hg clone https:\/\/bitbucket.org\/etienned\/sphinx-autopackage-script autogen\n#\n# Create a directory tree \"code\/\" containing one directory for every\n# package in the PACKAGE dictionary below. Make sure EVENNIA_DIR\n# points to an Evennia root dir.  Then just run this script. A new\n# folder sphinx\/source\/code will be created with the reST sources.\n#\n# Note - this is not working very well at the moment, not all sources\n# seems to be properly detected and you get lots of errors when\n# compiling. To nevertheless make a link to the code from the doc\n# front page, edit docs\/sphinx\/sources\/index.rst to reference\n# code\/modules.\n#\n\n\nimport os, subprocess, shutil\n\nEVENNIA_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))\n\nSPHINX_DIR = os.path.join(os.path.join(EVENNIA_DIR, \"docs\"), \"sphinx\")\nSPHINX_SRC_DIR = os.path.join(SPHINX_DIR, \"source\")\nSPHINX_CODE_DIR = os.path.join(SPHINX_SRC_DIR, \"code\")\n\nCONVERT_DIR = os.path.join(SPHINX_DIR, 'src2rest')\nAUTOGEN_EXE = os.path.join(CONVERT_DIR, os.path.join(\"autogen\", \"generate_modules.py\"))\n\ndef src2rest():\n    \"\"\"\n    Run import \n    \"\"\"\n    try:\n        shutil.rmtree(SPHINX_CODE_DIR)\n        print \"Emptied old %s.\" % SPHINX_CODE_DIR\n    except OSError:\n        pass \n    os.mkdir(SPHINX_CODE_DIR)\n       \n    inpath = EVENNIA_DIR\n    outpath = SPHINX_CODE_DIR\n    excludes = [r\".*\/migrations\/.*\", r\"evennia\\.py$\", r\"manage\\.py$\", \n                r\"runner\\.py$\", r\"server.py$\", r\"portal.py$\"]\n        \n    subprocess.call([\"python\", AUTOGEN_EXE, \n                     \"-n\", \"Evennia\",\n                     \"-d\",  outpath,\n                     \"-s\", \"rst\",\n                     \"-f\",\n                     inpath] + excludes)\n\nif __name__ == '__main__':\n\n    try:\n        src2rest()\n    except Exception, e:\n        print e\n        print \"Make sure to read the header of this file so that it's properly set up.\"\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo generate reST documentation for Sphinx from Evennia source code, follow these steps:\n1. Install etinenned's sphinx autopackage script to a folder named \"autogen\" in the same directory as this script using the command \"hg clone https:\/\/bitbucket.org\/etienned\/sphinx-autopackage-script autogen\".\n2. Create a directory tree \"code\/\" containing one directory for every package in the PACKAGE dictionary below.\n3. Set EVENNIA_DIR to point to an Evennia root dir.\n4. Run this script.\n5. A new folder sphinx\/source\/code will be created with the reST sources.\n6. To make a link to the code from the doc front page, edit docs\/sphinx\/sources\/index.rst to reference code\/modules. Note that this may not work properly at the moment.\n\n### Input:\n\n\n### Output:\n#! \/usr\/bin\/python \n#\n# Auto-generate reST documentation for Sphinx from Evennia source\n# code.\n# \n# Uses etinenned's sphinx autopackage script. Install it to folder\n# \"autogen\" in this same directory:\n#\n#   hg clone https:\/\/bitbucket.org\/etienned\/sphinx-autopackage-script autogen\n#\n# Create a directory tree \"code\/\" containing one directory for every\n# package in the PACKAGE dictionary below. Make sure EVENNIA_DIR\n# points to an Evennia root dir.  Then just run this script. A new\n# folder sphinx\/source\/code will be created with the reST sources.\n#\n# Note - this is not working very well at the moment, not all sources\n# seems to be properly detected and you get lots of errors when\n# compiling. To nevertheless make a link to the code from the doc\n# front page, edit docs\/sphinx\/sources\/index.rst to reference\n# code\/modules.\n#\n\n\nimport os, subprocess, shutil\n\nEVENNIA_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))\n\nSPHINX_DIR = os.path.join(os.path.join(EVENNIA_DIR, \"docs\"), \"sphinx\")\nSPHINX_SRC_DIR = os.path.join(SPHINX_DIR, \"source\")\nSPHINX_CODE_DIR = os.path.join(SPHINX_SRC_DIR, \"code\")\n\nCONVERT_DIR = os.path.join(SPHINX_DIR, 'src2rest')\nAUTOGEN_EXE = os.path.join(CONVERT_DIR, os.path.join(\"autogen\", \"generate_modules.py\"))\n\ndef src2rest():\n    \"\"\"\n    Run import \n    \"\"\"\n    try:\n        shutil.rmtree(SPHINX_CODE_DIR)\n        print \"Emptied old %s.\" % SPHINX_CODE_DIR\n    except OSError:\n        pass \n    os.mkdir(SPHINX_CODE_DIR)\n       \n    inpath = EVENNIA_DIR\n    outpath = SPHINX_CODE_DIR\n    excludes = [r\".*\/migrations\/.*\", r\"evennia\\.py$\", r\"manage\\.py$\", \n                r\"runner\\.py$\", r\"server.py$\", r\"portal.py$\"]\n        \n    subprocess.call([\"python\", AUTOGEN_EXE, \n                     \"-n\", \"Evennia\",\n                     \"-d\",  outpath,\n                     \"-s\", \"rst\",\n                     \"-f\",\n                     inpath] + excludes)\n\nif __name__ == '__main__':\n\n    try:\n        src2rest()\n    except Exception, e:\n        print e\n        print \"Make sure to read the header of this file so that it's properly set up.\"\n","tok_input_length":764,"tok_output_length":568,"system_prompt":"","index":10856}
{"question":"Install necessary modules and libraries, including pyfirmata, mcpi, minecraftstuff, time, server, and serial. Connect to the Minecraft server and post a message to the chat window. Define a function called MemoryCloud1 that takes in parameters for starting x, y, and z coordinates, chart width, height, and depth, block type, and block ID. Use the function to create a memory cloud at specific coordinates.","input":"","expected_output":"#!\/usr\/bin\/python\n\n#Install the modules we need\n#from pyfirmata import Arduino, util, INPUT\nfrom mcpi import minecraft\nfrom mcpi import minecraftstuff\nfrom time import sleep\nimport server\nimport serial\n\n# Set up a connection to the Arduino\/Shrimp if we need it\n#PORT = \"\/dev\/tty.SLAB_USBtoUART\"\n#ser = serial.Serial(PORT, 9600)\n\n# Connect to the server: we use the imported server.py to make it work with CloudMaker\nmc = minecraft.Minecraft.create(server.address)\n#Post a message to the minecraft chat window \nmc.postToChat(\"Ready to read Memory!\")\n\n# Use the command \/getpos or F3 in Minecraft client to find out where you are then use those\n# x, y, z coordinates to build things\n# translate CloudMaker coords for mcpi ones\n# add this to x\nmcx = 177\n# - this from y\nmcy = 64\n# - this from z\nmcz = 135\n\n# Text Bubble 1\ndef MemoryCloud1(startx,starty,startz, chartwidth, chartheight, chartdepth, blocktype, blockid):\n\t# Main Bubble\n\tmc.setBlocks((startx + mcx), (starty-mcy), (startz-mcz), (startx + mcx) + chartwidth, (starty-mcy) + chartheight, (startz - mcz) + chartdepth, blocktype, blockid)\n\t# inset bottom\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) - 1, (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) -1, (startz - mcz) + chartdepth, blocktype, blockid)\n\t#inset top\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) + (chartheight + 1), (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) + (chartheight + 1), (startz - mcz) + chartdepth, blocktype, blockid)\n\n\n# If you want to add a bubble diagram, insert your coordinates\n# Then use \/js blocktype(\"My Message\", blockid) while facing the block where you want to write\n\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 110, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 0)\n#MemoryCloud1(-343, 100, -15, 44, 14, 2, 0)\n\n# the memory cloud funtction is (myposx, myposy, myposz, width, height, thickness,\n# blocktype, blockidoption)\n\nMemoryCloud1(332, 100, -1185, 44, 4, 2, 35, 0)\n\n\n#\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nInstall necessary modules and libraries, including pyfirmata, mcpi, minecraftstuff, time, server, and serial. Connect to the Minecraft server and post a message to the chat window. Define a function called MemoryCloud1 that takes in parameters for starting x, y, and z coordinates, chart width, height, and depth, block type, and block ID. Use the function to create a memory cloud at specific coordinates.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n\n#Install the modules we need\n#from pyfirmata import Arduino, util, INPUT\nfrom mcpi import minecraft\nfrom mcpi import minecraftstuff\nfrom time import sleep\nimport server\nimport serial\n\n# Set up a connection to the Arduino\/Shrimp if we need it\n#PORT = \"\/dev\/tty.SLAB_USBtoUART\"\n#ser = serial.Serial(PORT, 9600)\n\n# Connect to the server: we use the imported server.py to make it work with CloudMaker\nmc = minecraft.Minecraft.create(server.address)\n#Post a message to the minecraft chat window \nmc.postToChat(\"Ready to read Memory!\")\n\n# Use the command \/getpos or F3 in Minecraft client to find out where you are then use those\n# x, y, z coordinates to build things\n# translate CloudMaker coords for mcpi ones\n# add this to x\nmcx = 177\n# - this from y\nmcy = 64\n# - this from z\nmcz = 135\n\n# Text Bubble 1\ndef MemoryCloud1(startx,starty,startz, chartwidth, chartheight, chartdepth, blocktype, blockid):\n\t# Main Bubble\n\tmc.setBlocks((startx + mcx), (starty-mcy), (startz-mcz), (startx + mcx) + chartwidth, (starty-mcy) + chartheight, (startz - mcz) + chartdepth, blocktype, blockid)\n\t# inset bottom\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) - 1, (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) -1, (startz - mcz) + chartdepth, blocktype, blockid)\n\t#inset top\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) + (chartheight + 1), (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) + (chartheight + 1), (startz - mcz) + chartdepth, blocktype, blockid)\n\n\n# If you want to add a bubble diagram, insert your coordinates\n# Then use \/js blocktype(\"My Message\", blockid) while facing the block where you want to write\n\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 110, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 0)\n#MemoryCloud1(-343, 100, -15, 44, 14, 2, 0)\n\n# the memory cloud funtction is (myposx, myposy, myposz, width, height, thickness,\n# blocktype, blockidoption)\n\nMemoryCloud1(332, 100, -1185, 44, 4, 2, 35, 0)\n\n\n#\n","tok_input_length":797,"tok_output_length":684,"system_prompt":"","index":9629}
{"question":"This code is a Django management command for renaming a book. To use it, run the command with the name of the book as an argument, and specify any of the following options: \n- --owner: set the new owner of the book\n- --new-book-title: set the new title of the book\n- --new-book-url: set the new URL of the book\n\nFor example, to rename a book called \"old_name\" with a new title of \"new_title\" and a new URL of \"new_url\" and a new owner of \"new_owner\", run the command:\npython manage.py rename_book old_name --new-book-title=new_title --new-book-url=new_url --owner=new_owner","input":"","expected_output":"# This file is part of Booktype.\n# Copyright (c) 2012 Aleksandar Erkalovic <aleksandar.erkalovic@sourcefabric.org>\n#\n# Booktype is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Booktype is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with Booktype.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nfrom django.core.management.base import BaseCommand, CommandError\nfrom optparse import make_option\nfrom django.contrib.auth.models import User\n\nfrom booki.editor import common\nfrom booki.editor import models\nfrom django.conf import settings\n\nclass Command(BaseCommand):\n    args = \"<book name>\"\n    help = \"Rename book.\"\n\n    option_list = BaseCommand.option_list + (\n        make_option('--owner',\n                    action='store',\n                    dest='owner',\n                    default=None,\n                    help='Set new owner of the book.'),\n        \n        make_option('--new-book-title',\n                    action='store',\n                    dest='new_book_title',\n                    default=None,\n                    help='Set new book title.'),\n\n        make_option('--new-book-url',\n                    action='store',\n                    dest='new_book_url',\n                    default=None,\n                    help='Set new book url name.'),\n\n        )\n\n    requires_model_validation = False\n\n    def handle(self, *args, **options):\n        if len(args) != 1:\n            raise CommandError(\"You must specify book name.\")\n\n        try:\n            book = models.Book.objects.get(url_title__iexact=args[0])\n        except models.Book.DoesNotExist:\n            raise CommandError('Book \"%s\" does not exist.' % args[0])\n\n        if options['new_book_title']:\n            book.title = options['new_book_title']\n\n        if options['new_book_url']:\n            import os\n            os.rename('%s\/books\/%s' % (settings.DATA_ROOT, book.url_title), '%s\/books\/%s' % (settings.DATA_ROOT, options['new_book_url']))\n\n            book.url_title = options['new_book_url']\n\n            # TODO: test this\n            n = len(settings.DATA_ROOT)+len('books\/')+1\n\n            for attachment in models.Attachment.objects.filter(version__book=book):\n                name = attachment.attachment.name\n                j = name[n:].find('\/')\n                newName = '%s\/books\/%s%s' % (settings.DATA_ROOT, book.url_title, name[n:][j:])\n\n                attachment.attachment.name = newName\n                attachment.save()\n\n        if options['owner']:\n            try:\n                user = User.objects.get(username=options['owner'])\n            except User.DoesNotExist:\n                raise CommandError('User \"%s\" does not exist. Can not finish import.' % options['owner'])\n\n            book.owner = user\n\n        book.save()\n            \n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Django management command for renaming a book. To use it, run the command with the name of the book as an argument, and specify any of the following options: \n- --owner: set the new owner of the book\n- --new-book-title: set the new title of the book\n- --new-book-url: set the new URL of the book\n\nFor example, to rename a book called \"old_name\" with a new title of \"new_title\" and a new URL of \"new_url\" and a new owner of \"new_owner\", run the command:\npython manage.py rename_book old_name --new-book-title=new_title --new-book-url=new_url --owner=new_owner\n\n### Input:\n\n\n### Output:\n# This file is part of Booktype.\n# Copyright (c) 2012 Aleksandar Erkalovic <aleksandar.erkalovic@sourcefabric.org>\n#\n# Booktype is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Booktype is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with Booktype.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nfrom django.core.management.base import BaseCommand, CommandError\nfrom optparse import make_option\nfrom django.contrib.auth.models import User\n\nfrom booki.editor import common\nfrom booki.editor import models\nfrom django.conf import settings\n\nclass Command(BaseCommand):\n    args = \"<book name>\"\n    help = \"Rename book.\"\n\n    option_list = BaseCommand.option_list + (\n        make_option('--owner',\n                    action='store',\n                    dest='owner',\n                    default=None,\n                    help='Set new owner of the book.'),\n        \n        make_option('--new-book-title',\n                    action='store',\n                    dest='new_book_title',\n                    default=None,\n                    help='Set new book title.'),\n\n        make_option('--new-book-url',\n                    action='store',\n                    dest='new_book_url',\n                    default=None,\n                    help='Set new book url name.'),\n\n        )\n\n    requires_model_validation = False\n\n    def handle(self, *args, **options):\n        if len(args) != 1:\n            raise CommandError(\"You must specify book name.\")\n\n        try:\n            book = models.Book.objects.get(url_title__iexact=args[0])\n        except models.Book.DoesNotExist:\n            raise CommandError('Book \"%s\" does not exist.' % args[0])\n\n        if options['new_book_title']:\n            book.title = options['new_book_title']\n\n        if options['new_book_url']:\n            import os\n            os.rename('%s\/books\/%s' % (settings.DATA_ROOT, book.url_title), '%s\/books\/%s' % (settings.DATA_ROOT, options['new_book_url']))\n\n            book.url_title = options['new_book_url']\n\n            # TODO: test this\n            n = len(settings.DATA_ROOT)+len('books\/')+1\n\n            for attachment in models.Attachment.objects.filter(version__book=book):\n                name = attachment.attachment.name\n                j = name[n:].find('\/')\n                newName = '%s\/books\/%s%s' % (settings.DATA_ROOT, book.url_title, name[n:][j:])\n\n                attachment.attachment.name = newName\n                attachment.save()\n\n        if options['owner']:\n            try:\n                user = User.objects.get(username=options['owner'])\n            except User.DoesNotExist:\n                raise CommandError('User \"%s\" does not exist. Can not finish import.' % options['owner'])\n\n            book.owner = user\n\n        book.save()\n            \n","tok_input_length":838,"tok_output_length":666,"system_prompt":"","index":16423}
{"question":"Develop a game AI in Python using a minimax algorithm for playing the game of Noughts and Crosses.","input":"Not applicable","expected_output":"# Import the necessary libraries \nimport numpy as np \n  \n# Function to determine the available moves \ndef get_available_moves(board): \n    available = [] \n    for i in range(3): \n        for j in range(3): \n            if board[i][j] == 0: \n                available.append((i, j)) \n    return available \n  \n# Function to check if terminal state is reached \ndef is_game_over(board): \n    # If any of the row, columns of the board has same elements across \n    # any row, then the game is over \n    for i in range(3): \n        # checking across columns \n        if board[i][0]==board[i][1] and board[i][1]==board[i][2] and board[i][0]!=0: \n            return True\n  \n        # checking across rows \n        if board[0][i]==board[1][i] and board[1][i]==board[2][i] and board[0][i]!=0: \n            return True\n  \n    # checking across diagonals \n    if board[0][0]==board[1][1] and board[1][1]==board[2][2] and board[0][0]!=0: \n        return True\n  \n    if board[0][2]==board[1][1] and board[1][1]==board[2][0] and board[0][2]!=0: \n        return True\n  \n    # If no element has a combination to make a game over,  \n    # then the comparison continues \n    return False\n  \n# Function for implementing the minimax algorithm \ndef minimax(board, depth, isMax): \n    # If game is over, return the score \n    if is_game_over(board): \n        # Winner of the game has score of 1 \n        if depth % 2 != 0: \n            return 1 \n  \n        # Looser of the game has score of -1 \n        else: \n            return -1\n  \n    # If no game over state is reached,  \n    # find the scores for all available moves  \n    scores = [] \n    available_moves = get_available_moves(board) \n    for move in available_moves: \n        x, y = move[0], move[1] \n  \n        # If it is max player's turn  \n        # assign 'X' to the empty space \n        # and value as 1 \n        if isMax: \n            board[x][y] = 1\n            val = minimax(board, depth + 1, False) \n  \n        # If it is min player's turn \n        # assign 'O' to the empty space \n        # and value as 0 \n        else: \n            board[x][y] = 0\n            val = minimax(board, depth + 1, True) \n  \n        # Assign the initial value as empty \n        board[x][y] = 0\n        scores.append(val) \n  \n    # If it is Max player's turn, pick the maximum score \n    if isMax: \n        maximum = max(scores) \n        return maximum \n  \n    # If it is Min player's turn, pick the minimum score \n    else: \n        minimum = min(scores) \n        return minimum \n  \n# Function for finding the best move \ndef best_move(board): \n    available_moves = get_available_moves(board) \n    b_score = -2\n    best_move = None\n  \n    # Iterate through every empty cells  \n    for move in available_moves: \n        x, y = move[0], move[1] \n        board[x][y] = 1\n        score = minimax(board, 0, False) \n        board[x][y] = 0\n        if score > b_score: \n            b_score = score\n            best_move = [x, y] \n  \n    return best_move","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a game AI in Python using a minimax algorithm for playing the game of Noughts and Crosses.\n\n### Input:\nNot applicable\n\n### Output:\n# Import the necessary libraries \nimport numpy as np \n  \n# Function to determine the available moves \ndef get_available_moves(board): \n    available = [] \n    for i in range(3): \n        for j in range(3): \n            if board[i][j] == 0: \n                available.append((i, j)) \n    return available \n  \n# Function to check if terminal state is reached \ndef is_game_over(board): \n    # If any of the row, columns of the board has same elements across \n    # any row, then the game is over \n    for i in range(3): \n        # checking across columns \n        if board[i][0]==board[i][1] and board[i][1]==board[i][2] and board[i][0]!=0: \n            return True\n  \n        # checking across rows \n        if board[0][i]==board[1][i] and board[1][i]==board[2][i] and board[0][i]!=0: \n            return True\n  \n    # checking across diagonals \n    if board[0][0]==board[1][1] and board[1][1]==board[2][2] and board[0][0]!=0: \n        return True\n  \n    if board[0][2]==board[1][1] and board[1][1]==board[2][0] and board[0][2]!=0: \n        return True\n  \n    # If no element has a combination to make a game over,  \n    # then the comparison continues \n    return False\n  \n# Function for implementing the minimax algorithm \ndef minimax(board, depth, isMax): \n    # If game is over, return the score \n    if is_game_over(board): \n        # Winner of the game has score of 1 \n        if depth % 2 != 0: \n            return 1 \n  \n        # Looser of the game has score of -1 \n        else: \n            return -1\n  \n    # If no game over state is reached,  \n    # find the scores for all available moves  \n    scores = [] \n    available_moves = get_available_moves(board) \n    for move in available_moves: \n        x, y = move[0], move[1] \n  \n        # If it is max player's turn  \n        # assign 'X' to the empty space \n        # and value as 1 \n        if isMax: \n            board[x][y] = 1\n            val = minimax(board, depth + 1, False) \n  \n        # If it is min player's turn \n        # assign 'O' to the empty space \n        # and value as 0 \n        else: \n            board[x][y] = 0\n            val = minimax(board, depth + 1, True) \n  \n        # Assign the initial value as empty \n        board[x][y] = 0\n        scores.append(val) \n  \n    # If it is Max player's turn, pick the maximum score \n    if isMax: \n        maximum = max(scores) \n        return maximum \n  \n    # If it is Min player's turn, pick the minimum score \n    else: \n        minimum = min(scores) \n        return minimum \n  \n# Function for finding the best move \ndef best_move(board): \n    available_moves = get_available_moves(board) \n    b_score = -2\n    best_move = None\n  \n    # Iterate through every empty cells  \n    for move in available_moves: \n        x, y = move[0], move[1] \n        board[x][y] = 1\n        score = minimax(board, 0, False) \n        board[x][y] = 0\n        if score > b_score: \n            b_score = score\n            best_move = [x, y] \n  \n    return best_move","tok_input_length":866,"tok_output_length":813,"system_prompt":"","index":15028}
{"question":"This code performs library screening result analysis using the pycas package. To use it, run the script with the required arguments: input data file path, control experiment labels, treatment experiment labels, method to be used in the analysis, whether to consider barcodes, and the result output directory. The input data file should have columns named \"gene\", \"guide\", and \"barcode\". The control and treatment experiment labels should be separated by space and have the same length. The method should be either \"sunbird\" or \"mw\". The result will be saved in a csv file named \"pycas_analysis_sunbird.csv\" in the specified output directory or the current work directory if not specified.","input":"","expected_output":"#! \/bin\/env python3\n__all__ = ['pycaspattern']\n\n# ------------------\n# Libraries\n# ------------------\nimport argparse\nimport os\nimport sys\nsys.path.append('\/gpfs\/user\/liuzh\/Code\/crispr')\nimport pandas as pd\nfrom pycas.analysis import Screening\nfrom pycas.utils.decorator import helpstring\nfrom pycas.utils.decorator import AppendHelp\n\n\n# ------------------\n# Functions\n# ------------------\n\ndef pycasanalysis(filename,\n                  ctrl_label,\n                  exp_label,\n                  method,\n                  hasbarcode,\n                  out_dir):\n    file_type = 'csv'\n    if filename.split('.')[-1] == 'txt':\n        sep = '\\t'\n        file_type = 'txt'\n    elif filename.split('.')[-1] == 'csv':\n        sep = ','\n        file_type = 'csv'\n    else:\n        raise ValueError('Input data file should be txt or csv')\n    if file_type == 'csv':\n        data = pd.read_csv(filename, header=0)\n    else:\n        data = pd.read_table(filename, header=0, sep='\\t')\n    for x in ['gene', 'guide', 'barcode']:\n        if x not in data.columns:\n            raise ValueError('Input data file should contain column named as: ' + x)\n    if len(ctrl_label) != len(exp_label):\n        raise ValueError('Input control labels and treatment labels should be of the same length.')\n    if out_dir != '' and not os.path.exists(out_dir):\n        os.mkdir(out_dir)\n    if method not in ['sunbird', 'mw']:\n        raise ValueError('The test method should be in: sunbird mw.')\n    analysis = Screening(data, ctrl_label, exp_label, hasbarcode=hasbarcode)\n    if method == 'sunbird':\n        analysis.sunbird(10)\n        analysis.test['sunbird'].to_csv(\n            os.path.join(out_dir, 'pycas_analysis_sunbird.csv')\n        )\n    else:\n        pass\n\n\n\n# ------------------\n# Main\n# ------------------\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        prog='pycasanalysis',\n        description='Analysis the library screening result.'\n    )\n    parser.add_argument(\n        '-i', '--input', required=True,\n        help='Input data file path, with columns: gene, guide <, barcode>, [labels]. (column names should be in the csv file).'\n    )\n    parser.add_argument(\n        '-c', '--control-label', nargs='+',\n        help='Control experiment labels, separeted by space.'\n    )\n    parser.add_argument(\n        '-t', '--treat-label', nargs='+',\n        help='Treatment experiment labels, separeted by space.'\n    )\n    parser.add_argument(\n        '-m', '--method', default='sunbird',\n        help='Method to be used in the analysis: sunbird, mw.'\n    )\n    parser.add_argument(\n        '--has-barcode', action='store_true',\n        help='Input data should be tested consider barcodes.'\n    )\n    parser.add_argument(\n        '--out-dir', default='',\n        help='Result output directory\uff0cdefault is current work directory.'\n    )\n    args = parser.parse_args()\n    def analysis(**args):\n        pycasanalysis(\n            filename=args['input'],\n            ctrl_label=args['control_label'],\n            exp_label=args['treat_label'],\n            method=args['method'],\n            hasbarcode=args['has_barcode'],\n            out_dir=args['out_dir']\n        )\n    analysis(**vars(args))\n\n\n# ------------------\n# EOF\n# ------------------\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code performs library screening result analysis using the pycas package. To use it, run the script with the required arguments: input data file path, control experiment labels, treatment experiment labels, method to be used in the analysis, whether to consider barcodes, and the result output directory. The input data file should have columns named \"gene\", \"guide\", and \"barcode\". The control and treatment experiment labels should be separated by space and have the same length. The method should be either \"sunbird\" or \"mw\". The result will be saved in a csv file named \"pycas_analysis_sunbird.csv\" in the specified output directory or the current work directory if not specified.\n\n### Input:\n\n\n### Output:\n#! \/bin\/env python3\n__all__ = ['pycaspattern']\n\n# ------------------\n# Libraries\n# ------------------\nimport argparse\nimport os\nimport sys\nsys.path.append('\/gpfs\/user\/liuzh\/Code\/crispr')\nimport pandas as pd\nfrom pycas.analysis import Screening\nfrom pycas.utils.decorator import helpstring\nfrom pycas.utils.decorator import AppendHelp\n\n\n# ------------------\n# Functions\n# ------------------\n\ndef pycasanalysis(filename,\n                  ctrl_label,\n                  exp_label,\n                  method,\n                  hasbarcode,\n                  out_dir):\n    file_type = 'csv'\n    if filename.split('.')[-1] == 'txt':\n        sep = '\\t'\n        file_type = 'txt'\n    elif filename.split('.')[-1] == 'csv':\n        sep = ','\n        file_type = 'csv'\n    else:\n        raise ValueError('Input data file should be txt or csv')\n    if file_type == 'csv':\n        data = pd.read_csv(filename, header=0)\n    else:\n        data = pd.read_table(filename, header=0, sep='\\t')\n    for x in ['gene', 'guide', 'barcode']:\n        if x not in data.columns:\n            raise ValueError('Input data file should contain column named as: ' + x)\n    if len(ctrl_label) != len(exp_label):\n        raise ValueError('Input control labels and treatment labels should be of the same length.')\n    if out_dir != '' and not os.path.exists(out_dir):\n        os.mkdir(out_dir)\n    if method not in ['sunbird', 'mw']:\n        raise ValueError('The test method should be in: sunbird mw.')\n    analysis = Screening(data, ctrl_label, exp_label, hasbarcode=hasbarcode)\n    if method == 'sunbird':\n        analysis.sunbird(10)\n        analysis.test['sunbird'].to_csv(\n            os.path.join(out_dir, 'pycas_analysis_sunbird.csv')\n        )\n    else:\n        pass\n\n\n\n# ------------------\n# Main\n# ------------------\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        prog='pycasanalysis',\n        description='Analysis the library screening result.'\n    )\n    parser.add_argument(\n        '-i', '--input', required=True,\n        help='Input data file path, with columns: gene, guide <, barcode>, [labels]. (column names should be in the csv file).'\n    )\n    parser.add_argument(\n        '-c', '--control-label', nargs='+',\n        help='Control experiment labels, separeted by space.'\n    )\n    parser.add_argument(\n        '-t', '--treat-label', nargs='+',\n        help='Treatment experiment labels, separeted by space.'\n    )\n    parser.add_argument(\n        '-m', '--method', default='sunbird',\n        help='Method to be used in the analysis: sunbird, mw.'\n    )\n    parser.add_argument(\n        '--has-barcode', action='store_true',\n        help='Input data should be tested consider barcodes.'\n    )\n    parser.add_argument(\n        '--out-dir', default='',\n        help='Result output directory\uff0cdefault is current work directory.'\n    )\n    args = parser.parse_args()\n    def analysis(**args):\n        pycasanalysis(\n            filename=args['input'],\n            ctrl_label=args['control_label'],\n            exp_label=args['treat_label'],\n            method=args['method'],\n            hasbarcode=args['has_barcode'],\n            out_dir=args['out_dir']\n        )\n    analysis(**vars(args))\n\n\n# ------------------\n# EOF\n# ------------------\n","tok_input_length":905,"tok_output_length":739,"system_prompt":"","index":8040}
{"question":"To install TA-Lib, run the following commands:\n1. Install numpy: `pip install numpy`\n2. Install TA-Lib: `pip install TA-Lib`","input":"","expected_output":"#!\/usr\/bin\/env python\n\nimport sys\nimport os\nimport warnings\n\nfrom distutils.dist import Distribution\n\ndisplay_option_names = Distribution.display_option_names + ['help', 'help-commands']\nquery_only = any('--' + opt in sys.argv for opt in display_option_names) or len(sys.argv) < 2 or sys.argv[1] == 'egg_info'\n\n# Use setuptools for querying the package, normal builds use distutils\nif query_only:\n    try:\n        from setuptools import setup\n    except ImportError:\n        from distutils.core import setup\nelse:\n    from distutils.core import setup\n\nfrom distutils.extension import Extension\n\nlib_talib_name = 'ta_lib'  # the underlying C library's name\n\nplatform_supported = False\nfor prefix in ['darwin', 'linux', 'bsd', 'sunos']:\n    if prefix in sys.platform:\n        platform_supported = True\n        include_dirs = [\n            '\/usr\/include',\n            '\/usr\/local\/include',\n            '\/opt\/include',\n            '\/opt\/local\/include',\n        ]\n        if 'TA_INCLUDE_PATH' in os.environ:\n            include_dirs.append(os.environ['TA_INCLUDE_PATH'])\n        lib_talib_dirs = [\n            '\/usr\/lib',\n            '\/usr\/local\/lib',\n            '\/usr\/lib64',\n            '\/usr\/local\/lib64',\n            '\/opt\/lib',\n            '\/opt\/local\/lib',\n        ]\n        if 'TA_LIBRARY_PATH' in os.environ:\n            lib_talib_dirs.append(os.environ['TA_LIBRARY_PATH'])\n        break\n\nif sys.platform == \"win32\":\n    platform_supported = True\n    lib_talib_name = 'ta_libc_cdr'\n    include_dirs = [r\"c:\\ta-lib\\c\\include\"]\n    lib_talib_dirs = [r\"c:\\ta-lib\\c\\lib\"]\n\nif not platform_supported:\n    raise NotImplementedError(sys.platform)\n\n# Do not require numpy or cython for just querying the package\nif not query_only:\n    import numpy\n    include_dirs.insert(0, numpy.get_include())\n\ntry:\n    from Cython.Distutils import build_ext\n    has_cython = True\nexcept ImportError:\n    has_cython = False\n\nfor lib_talib_dir in lib_talib_dirs:\n    try:\n        files = os.listdir(lib_talib_dir)\n        if any(lib_talib_name in f for f in files):\n            break\n    except OSError:\n        pass\nelse:\n    warnings.warn('Cannot find ta-lib library, installation may fail.')\n\ncmdclass = {}\nif has_cython:\n    cmdclass['build_ext'] = build_ext\n\next_modules = [\n    Extension(\n        'talib._ta_lib',\n        ['talib\/_ta_lib.pyx' if has_cython else 'talib\/_ta_lib.c'],\n        include_dirs=include_dirs,\n        library_dirs=lib_talib_dirs,\n        libraries=[lib_talib_name]\n    )\n]\n\nsetup(\n    name = 'TA-Lib',\n    version = '0.4.10',\n    description = 'Python wrapper for TA-Lib',\n    author = 'John Benediktsson',\n    author_email = 'mrjbq7@gmail.com',\n    url = 'http:\/\/github.com\/mrjbq7\/ta-lib',\n    download_url = 'https:\/\/github.com\/mrjbq7\/ta-lib\/releases',\n    classifiers = [\n        \"License :: OSI Approved :: BSD License\",\n        \"Development Status :: 4 - Beta\",\n        \"Operating System :: Unix\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Cython\",\n        \"Topic :: Office\/Business :: Financial\",\n        \"Topic :: Scientific\/Engineering :: Mathematics\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science\/Research\",\n        \"Intended Audience :: Financial and Insurance Industry\",\n    ],\n    packages = ['talib'],\n    ext_modules = ext_modules,\n    cmdclass = cmdclass,\n    requires = ['numpy'],\n)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo install TA-Lib, run the following commands:\n1. Install numpy: `pip install numpy`\n2. Install TA-Lib: `pip install TA-Lib`\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\nimport sys\nimport os\nimport warnings\n\nfrom distutils.dist import Distribution\n\ndisplay_option_names = Distribution.display_option_names + ['help', 'help-commands']\nquery_only = any('--' + opt in sys.argv for opt in display_option_names) or len(sys.argv) < 2 or sys.argv[1] == 'egg_info'\n\n# Use setuptools for querying the package, normal builds use distutils\nif query_only:\n    try:\n        from setuptools import setup\n    except ImportError:\n        from distutils.core import setup\nelse:\n    from distutils.core import setup\n\nfrom distutils.extension import Extension\n\nlib_talib_name = 'ta_lib'  # the underlying C library's name\n\nplatform_supported = False\nfor prefix in ['darwin', 'linux', 'bsd', 'sunos']:\n    if prefix in sys.platform:\n        platform_supported = True\n        include_dirs = [\n            '\/usr\/include',\n            '\/usr\/local\/include',\n            '\/opt\/include',\n            '\/opt\/local\/include',\n        ]\n        if 'TA_INCLUDE_PATH' in os.environ:\n            include_dirs.append(os.environ['TA_INCLUDE_PATH'])\n        lib_talib_dirs = [\n            '\/usr\/lib',\n            '\/usr\/local\/lib',\n            '\/usr\/lib64',\n            '\/usr\/local\/lib64',\n            '\/opt\/lib',\n            '\/opt\/local\/lib',\n        ]\n        if 'TA_LIBRARY_PATH' in os.environ:\n            lib_talib_dirs.append(os.environ['TA_LIBRARY_PATH'])\n        break\n\nif sys.platform == \"win32\":\n    platform_supported = True\n    lib_talib_name = 'ta_libc_cdr'\n    include_dirs = [r\"c:\\ta-lib\\c\\include\"]\n    lib_talib_dirs = [r\"c:\\ta-lib\\c\\lib\"]\n\nif not platform_supported:\n    raise NotImplementedError(sys.platform)\n\n# Do not require numpy or cython for just querying the package\nif not query_only:\n    import numpy\n    include_dirs.insert(0, numpy.get_include())\n\ntry:\n    from Cython.Distutils import build_ext\n    has_cython = True\nexcept ImportError:\n    has_cython = False\n\nfor lib_talib_dir in lib_talib_dirs:\n    try:\n        files = os.listdir(lib_talib_dir)\n        if any(lib_talib_name in f for f in files):\n            break\n    except OSError:\n        pass\nelse:\n    warnings.warn('Cannot find ta-lib library, installation may fail.')\n\ncmdclass = {}\nif has_cython:\n    cmdclass['build_ext'] = build_ext\n\next_modules = [\n    Extension(\n        'talib._ta_lib',\n        ['talib\/_ta_lib.pyx' if has_cython else 'talib\/_ta_lib.c'],\n        include_dirs=include_dirs,\n        library_dirs=lib_talib_dirs,\n        libraries=[lib_talib_name]\n    )\n]\n\nsetup(\n    name = 'TA-Lib',\n    version = '0.4.10',\n    description = 'Python wrapper for TA-Lib',\n    author = 'John Benediktsson',\n    author_email = 'mrjbq7@gmail.com',\n    url = 'http:\/\/github.com\/mrjbq7\/ta-lib',\n    download_url = 'https:\/\/github.com\/mrjbq7\/ta-lib\/releases',\n    classifiers = [\n        \"License :: OSI Approved :: BSD License\",\n        \"Development Status :: 4 - Beta\",\n        \"Operating System :: Unix\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Cython\",\n        \"Topic :: Office\/Business :: Financial\",\n        \"Topic :: Scientific\/Engineering :: Mathematics\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science\/Research\",\n        \"Intended Audience :: Financial and Insurance Industry\",\n    ],\n    packages = ['talib'],\n    ext_modules = ext_modules,\n    cmdclass = cmdclass,\n    requires = ['numpy'],\n)\n","tok_input_length":950,"tok_output_length":888,"system_prompt":"","index":11835}
{"question":"Generate a Python script to play a simple game of tic-tac-toe.","input":"","expected_output":"import random\n \ndef display_board(board):\n    print('   |   |')\n    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])\n    print('   |   |')\n    print('-----------')\n    print('   |   |')\n    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])\n    print('   |   |')\n    print('-----------')\n    print('   |   |')\n    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])\n    print('   |   |')\n\ndef player_choice(board):\n    position = 0\n    \n    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position):\n        position = int(input('Choose your next position: (1-9) '))\n        \n    return position\n\ndef place_marker(board, marker, position):\n    board[position] = marker\n\ndef win_check(board, mark):\n    return ((board[7] == mark and board[8] == mark and board[9] == mark) or\n            (board[4] == mark and board[5] == mark and board[6] == mark) or\n            (board[1] == mark and board[2] == mark and board[3] == mark) or\n            (board[7] == mark and board[4] == mark and board[1] == mark) or\n            (board[8] == mark and board[5] == mark and board[2] == mark) or \n            (board[9] == mark and board[6] == mark and board[3] == mark) or\n            (board[7] == mark and board[5] == mark and board[3] == mark) or\n            (board[9] == mark and board[5] == mark and board[1] == mark))\n\ndef space_check(board, position):\n    return board[position] == ' '\n\ndef full_board_check(board):\n    for i in range(1,10):\n        if space_check(board, i):\n            return False\n    return True\n\ndef main():\n    print('Welcome to Tic Tac Toe!')\n \n    while True:\n        # Reset the board\n        theBoard = [' '] * 10\n        player1_marker, player2_marker = player_input()\n        turn = choose_first()\n        print(turn + ' will go first.')\n        \n        play_game = input('Are you ready to play? Enter Yes or No.')\n        \n        if play_game.lower()[0] == 'y':\n            game_on = True\n        else:\n            game_on = False\n\n        while game_on:\n            if turn == 'Player 1':\n                # Player1's turn.\n                \n                display_board(theBoard)\n                position = player_choice(theBoard)\n                place_marker(theBoard, player1_marker, position)\n\n                if win_check(theBoard, player1_marker):\n                    display_board(theBoard)\n                    print('Congratulations! You have won the game!')\n                    game_on = False\n                else:\n                    if full_board_check(theBoard):\n                        display_board(theBoard)\n                        print('The game is a draw!')\n                        break\n                    else:\n                        turn = 'Player 2'\n\n            else:\n                # Player2's turn.\n                \n                display_board(theBoard)\n                position = player_choice(theBoard)\n                place_marker(theBoard, player2_marker, position)\n\n                if win_check(theBoard, player2_marker):\n                    display_board(theBoard)\n                    print('Player 2 has won!')\n                    game_on = False\n                else:\n                    if full_board_check(theBoard):\n                        display_board(theBoard)\n                        print('The game is a draw!')\n                        break\n                    else:\n                        turn = 'Player 1'\n\n        if not replay():\n            break\n\ndef player_input():\n    marker = ''\n    \n    while not (marker == 'X' or marker == 'O'):\n        marker = input('Player 1: Do you want to be X or O? ').upper()\n\n    if marker == 'X':\n        return ('X', 'O')\n    else:\n        return ('O', 'X')\n\ndef choose_first():\n    if random.randint(0, 1) == 0:\n        return 'Player 2'\n    else:\n        return 'Player 1'\n\ndef replay():\n    return input('Do you want to play again? Enter Yes or No: ').lower().startswith('y')\n\nmain()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to play a simple game of tic-tac-toe.\n\n### Input:\n\n\n### Output:\nimport random\n \ndef display_board(board):\n    print('   |   |')\n    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])\n    print('   |   |')\n    print('-----------')\n    print('   |   |')\n    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])\n    print('   |   |')\n    print('-----------')\n    print('   |   |')\n    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])\n    print('   |   |')\n\ndef player_choice(board):\n    position = 0\n    \n    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position):\n        position = int(input('Choose your next position: (1-9) '))\n        \n    return position\n\ndef place_marker(board, marker, position):\n    board[position] = marker\n\ndef win_check(board, mark):\n    return ((board[7] == mark and board[8] == mark and board[9] == mark) or\n            (board[4] == mark and board[5] == mark and board[6] == mark) or\n            (board[1] == mark and board[2] == mark and board[3] == mark) or\n            (board[7] == mark and board[4] == mark and board[1] == mark) or\n            (board[8] == mark and board[5] == mark and board[2] == mark) or \n            (board[9] == mark and board[6] == mark and board[3] == mark) or\n            (board[7] == mark and board[5] == mark and board[3] == mark) or\n            (board[9] == mark and board[5] == mark and board[1] == mark))\n\ndef space_check(board, position):\n    return board[position] == ' '\n\ndef full_board_check(board):\n    for i in range(1,10):\n        if space_check(board, i):\n            return False\n    return True\n\ndef main():\n    print('Welcome to Tic Tac Toe!')\n \n    while True:\n        # Reset the board\n        theBoard = [' '] * 10\n        player1_marker, player2_marker = player_input()\n        turn = choose_first()\n        print(turn + ' will go first.')\n        \n        play_game = input('Are you ready to play? Enter Yes or No.')\n        \n        if play_game.lower()[0] == 'y':\n            game_on = True\n        else:\n            game_on = False\n\n        while game_on:\n            if turn == 'Player 1':\n                # Player1's turn.\n                \n                display_board(theBoard)\n                position = player_choice(theBoard)\n                place_marker(theBoard, player1_marker, position)\n\n                if win_check(theBoard, player1_marker):\n                    display_board(theBoard)\n                    print('Congratulations! You have won the game!')\n                    game_on = False\n                else:\n                    if full_board_check(theBoard):\n                        display_board(theBoard)\n                        print('The game is a draw!')\n                        break\n                    else:\n                        turn = 'Player 2'\n\n            else:\n                # Player2's turn.\n                \n                display_board(theBoard)\n                position = player_choice(theBoard)\n                place_marker(theBoard, player2_marker, position)\n\n                if win_check(theBoard, player2_marker):\n                    display_board(theBoard)\n                    print('Player 2 has won!')\n                    game_on = False\n                else:\n                    if full_board_check(theBoard):\n                        display_board(theBoard)\n                        print('The game is a draw!')\n                        break\n                    else:\n                        turn = 'Player 1'\n\n        if not replay():\n            break\n\ndef player_input():\n    marker = ''\n    \n    while not (marker == 'X' or marker == 'O'):\n        marker = input('Player 1: Do you want to be X or O? ').upper()\n\n    if marker == 'X':\n        return ('X', 'O')\n    else:\n        return ('O', 'X')\n\ndef choose_first():\n    if random.randint(0, 1) == 0:\n        return 'Player 2'\n    else:\n        return 'Player 1'\n\ndef replay():\n    return input('Do you want to play again? Enter Yes or No: ').lower().startswith('y')\n\nmain()","tok_input_length":1004,"tok_output_length":961,"system_prompt":"","index":12968}
{"question":"Implement a decision tree learning algorithm in Python to classify a dataset.","input":"","expected_output":"import numpy as np\n\nclass DecisionTree():\n    def __init__(self):\n        self.max_depth = 3\n        self.tree = self._build_tree()\n\n    def _build_tree(self):\n        tree = {}\n        tree['index'] = 0 # features index\n        tree['thresh'] = 0. # threshold for feature\n        tree['left'] = None # left subtree\n        tree['right'] = None # right subtree\n        return tree\n    \n    def fit(self, X, y):   \n        self._build_tree(X, y, self.tree, 0, self.max_depth)\n        return self.tree\n    \n    def _build_tree(self, X, y, node, depth, max_depth):\n        # get index of all the samples\n        samples_index = np.arange(X.shape[0]) \n        # node is pure or depth == max_depth\n        if self._check_purity(y, samples_index) or depth == max_depth:\n            self.__set_leaf_node(y, node)\n            return\n        \n        # find best split \n        feature_index, threshold = self._get_best_split(X, y, samples_index)\n        \n        # create two subtrees \n        left_index, right_index = self._split(X, feature_index, threshold, samples_index)\n        \n        # add the returned feature index to the node\n        node['index'] = feature_index\n        # add the returned node threshold  to the node\n        node['thresh'] = threshold \n        \n        # define left and right children \n        node['left'] = self._build_tree(X, y, {}, depth+1, max_depth) \n        node['right'] = self._build_tree(X, y, {}, depth+1, max_depth)\n        \n        # build right and left subtrees\n        self._build_tree(X, y, node['left'], depth+1, max_depth)\n        self._build_tree(X, y, node['right'], depth+1, max_depth)\n    \n    def _check_purity(self, y, samples_index):\n        # check for the purity of label\n        unique_labels = np.unique(y[samples_index])\n\n        if len(unique_labels) == 1:\n            return True\n        else:\n            return False\n        \n    def _get_best_split(self, X, y, samples_index):\n        best_index = 0\n        best_threshold = 0\n        max_ig = 0\n        n_features = X.shape[1]\n        \n        # loop through all the feature and get the best split\n        for col in range(n_features):\n            ig, threshold = self._information_gain(X, y, col, samples_index)\n            \n            if ig > max_ig:\n                max_ig = ig\n                best_index = col \n                best_threshold = threshold\n                \n        return best_index, best_threshold\n        \n    def _information_gain(self, X, y, col, samples_index):\n        # function to calculate information gain\n        total_sets = len(samples_index)\n        classes, counts = np.unique(y[samples_index], return_counts=True)\n        entropies = self._entropy(counts, total_sets)\n                \n        #sort the X sample\n        sorted_x = np.sort(X[samples_index, col])\n        threshold_sets = [(sorted_x[i]+sorted_x[i+1])\/2 for i in range(len(sorted_x)-1)] \n        \n        max_ig = 0\n        best_threshold = 0\n        for thr in threshold_sets:\n            l_set, r_set = self._split(X, col, thr, samples_index)\n            l_classes, l_counts = np.unique(y[l_set], return_counts=True)\n            r_classes, r_counts = np.unique(y[r_set], return_counts=True)\n            l_entrp = self._entropy(l_counts, len(l_set))\n            r_entrp = self._entropy(r_counts, len(r_set))\n            entrp = (len(l_set)*l_entrp + len(r_set)*r_entrp) \/ total_sets\n            ig = entropies - entrp\n            \n            if ig > max_ig:\n                max_ig = ig\n                best_threshold = thr\n                \n        return max_ig, best_threshold\n        \n    def _entropy(self, counts, total_samples):\n        # calculate the entropy\n        entropies = np.sum([(-count\/total_samples)*np.log2(count\/total_samples) for count in counts])\n        return entropies    \n    \n    def _split(self, X, col, thresh, samples_index):\n        # split data\n        left_index = np.argwhere(X[samples_index, col] < thresh).flatten()\n        right_index = np.argwhere(X[samples_index, col] >= thresh).flatten()\n        return left_index, right_index\n    \n    def __set_leaf_node(self, y, node):\n        # get predictions \n        node['predictions'] = np.bincount(y).argmax()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision tree learning algorithm in Python to classify a dataset.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\nclass DecisionTree():\n    def __init__(self):\n        self.max_depth = 3\n        self.tree = self._build_tree()\n\n    def _build_tree(self):\n        tree = {}\n        tree['index'] = 0 # features index\n        tree['thresh'] = 0. # threshold for feature\n        tree['left'] = None # left subtree\n        tree['right'] = None # right subtree\n        return tree\n    \n    def fit(self, X, y):   \n        self._build_tree(X, y, self.tree, 0, self.max_depth)\n        return self.tree\n    \n    def _build_tree(self, X, y, node, depth, max_depth):\n        # get index of all the samples\n        samples_index = np.arange(X.shape[0]) \n        # node is pure or depth == max_depth\n        if self._check_purity(y, samples_index) or depth == max_depth:\n            self.__set_leaf_node(y, node)\n            return\n        \n        # find best split \n        feature_index, threshold = self._get_best_split(X, y, samples_index)\n        \n        # create two subtrees \n        left_index, right_index = self._split(X, feature_index, threshold, samples_index)\n        \n        # add the returned feature index to the node\n        node['index'] = feature_index\n        # add the returned node threshold  to the node\n        node['thresh'] = threshold \n        \n        # define left and right children \n        node['left'] = self._build_tree(X, y, {}, depth+1, max_depth) \n        node['right'] = self._build_tree(X, y, {}, depth+1, max_depth)\n        \n        # build right and left subtrees\n        self._build_tree(X, y, node['left'], depth+1, max_depth)\n        self._build_tree(X, y, node['right'], depth+1, max_depth)\n    \n    def _check_purity(self, y, samples_index):\n        # check for the purity of label\n        unique_labels = np.unique(y[samples_index])\n\n        if len(unique_labels) == 1:\n            return True\n        else:\n            return False\n        \n    def _get_best_split(self, X, y, samples_index):\n        best_index = 0\n        best_threshold = 0\n        max_ig = 0\n        n_features = X.shape[1]\n        \n        # loop through all the feature and get the best split\n        for col in range(n_features):\n            ig, threshold = self._information_gain(X, y, col, samples_index)\n            \n            if ig > max_ig:\n                max_ig = ig\n                best_index = col \n                best_threshold = threshold\n                \n        return best_index, best_threshold\n        \n    def _information_gain(self, X, y, col, samples_index):\n        # function to calculate information gain\n        total_sets = len(samples_index)\n        classes, counts = np.unique(y[samples_index], return_counts=True)\n        entropies = self._entropy(counts, total_sets)\n                \n        #sort the X sample\n        sorted_x = np.sort(X[samples_index, col])\n        threshold_sets = [(sorted_x[i]+sorted_x[i+1])\/2 for i in range(len(sorted_x)-1)] \n        \n        max_ig = 0\n        best_threshold = 0\n        for thr in threshold_sets:\n            l_set, r_set = self._split(X, col, thr, samples_index)\n            l_classes, l_counts = np.unique(y[l_set], return_counts=True)\n            r_classes, r_counts = np.unique(y[r_set], return_counts=True)\n            l_entrp = self._entropy(l_counts, len(l_set))\n            r_entrp = self._entropy(r_counts, len(r_set))\n            entrp = (len(l_set)*l_entrp + len(r_set)*r_entrp) \/ total_sets\n            ig = entropies - entrp\n            \n            if ig > max_ig:\n                max_ig = ig\n                best_threshold = thr\n                \n        return max_ig, best_threshold\n        \n    def _entropy(self, counts, total_samples):\n        # calculate the entropy\n        entropies = np.sum([(-count\/total_samples)*np.log2(count\/total_samples) for count in counts])\n        return entropies    \n    \n    def _split(self, X, col, thresh, samples_index):\n        # split data\n        left_index = np.argwhere(X[samples_index, col] < thresh).flatten()\n        right_index = np.argwhere(X[samples_index, col] >= thresh).flatten()\n        return left_index, right_index\n    \n    def __set_leaf_node(self, y, node):\n        # get predictions \n        node['predictions'] = np.bincount(y).argmax()","tok_input_length":1052,"tok_output_length":1012,"system_prompt":"","index":2794}
{"question":"This code provides functions to send Google Cloud Messaging (GCM) notifications. To use it, import the necessary functions and call gcm_send_message() or gcm_send_bulk_message() with the appropriate parameters. Make sure to set the GCM_API_KEY in the PUSH_NOTIFICATIONS_SETTINGS dictionary before sending messages through GCM. Documentation is available on the Android Developer website.","input":"","expected_output":"\"\"\"\nGoogle Cloud Messaging\nPreviously known as C2DM\nDocumentation is available on the Android Developer website:\nhttps:\/\/developer.android.com\/google\/gcm\/index.html\n\"\"\"\n\nimport json\n\ntry:\n\tfrom urllib.request import Request, urlopen\n\tfrom urllib.parse import urlencode\nexcept ImportError:\n\t# Python 2 support\n\tfrom urllib2 import Request, urlopen\n\tfrom urllib import urlencode\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom . import NotificationError\nfrom .settings import PUSH_NOTIFICATIONS_SETTINGS as SETTINGS\n\n\nclass GCMError(NotificationError):\n\tpass\n\n\ndef _chunks(l, n):\n\t\"\"\"\n\tYield successive chunks from list \\a l with a minimum size \\a n\n\t\"\"\"\n\tfor i in range(0, len(l), n):\n\t\tyield l[i:i + n]\n\n\ndef _gcm_send(data, content_type):\n\tkey = SETTINGS.get(\"GCM_API_KEY\")\n\tif not key:\n\t\traise ImproperlyConfigured('You need to set PUSH_NOTIFICATIONS_SETTINGS[\"GCM_API_KEY\"] to send messages through GCM.')\n\n\theaders = {\n\t\t\"Content-Type\": content_type,\n\t\t\"Authorization\": \"key=%s\" % (key),\n\t\t\"Content-Length\": str(len(data)),\n\t}\n\n\trequest = Request(SETTINGS[\"GCM_POST_URL\"], data, headers)\n\treturn urlopen(request).read()\n\n\ndef _gcm_send_plain(registration_id, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to a single registration_id.\n\tThis will send the notification as form data.\n\tIf sending multiple notifications, it is more efficient to use\n\tgcm_send_bulk_message() with a list of registration_ids\n\t\"\"\"\n\n\tvalues = {\"registration_id\": registration_id}\n\n\tif collapse_key:\n\t\tvalues[\"collapse_key\"] = collapse_key\n\n\tif delay_while_idle:\n\t\tvalues[\"delay_while_idle\"] = int(delay_while_idle)\n\n\tif time_to_live:\n\t\tvalues[\"time_to_live\"] = time_to_live\n\n\tfor k, v in data.items():\n\t\tvalues[\"data.%s\" % (k)] = v.encode(\"utf-8\")\n\n\tdata = urlencode(sorted(values.items())).encode(\"utf-8\")  # sorted items for tests\n\n\tresult = _gcm_send(data, \"application\/x-www-form-urlencoded;charset=UTF-8\")\n\tif result.startswith(\"Error=\"):\n\t\traise GCMError(result)\n\treturn result\n\n\ndef _gcm_send_json(registration_ids, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to one or more registration_ids. The registration_ids\n\tneeds to be a list.\n\tThis will send the notification as json data.\n\t\"\"\"\n\n\tvalues = {\"registration_ids\": registration_ids}\n\n\tif data is not None:\n\t\tvalues[\"data\"] = data\n\n\tif collapse_key:\n\t\tvalues[\"collapse_key\"] = collapse_key\n\n\tif delay_while_idle:\n\t\tvalues[\"delay_while_idle\"] = delay_while_idle\n\n\tif time_to_live:\n\t\tvalues[\"time_to_live\"] = time_to_live\n\n\tdata = json.dumps(values, separators=(\",\", \":\"), sort_keys=True).encode(\"utf-8\")  # keys sorted for tests\n\n\tresult = json.loads(_gcm_send(data, \"application\/json\"))\n\tif result[\"failure\"]:\n\t\traise GCMError(result)\n\treturn result\n\n\ndef gcm_send_message(registration_id, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to a single registration_id.\n\n\tThis will send the notification as form data if possible, otherwise it will\n\tfall back to json data.\n\n\tIf sending multiple notifications, it is more efficient to use\n\tgcm_send_bulk_message() with a list of registration_ids\n\t\"\"\"\n\n\targs = data, collapse_key, delay_while_idle, time_to_live\n\n\ttry:\n\t\t_gcm_send_plain(registration_id, *args)\n\texcept AttributeError:\n\t\t_gcm_send_json([registration_id], *args)\n\n\ndef gcm_send_bulk_message(registration_ids, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to one or more registration_ids. The registration_ids\n\tneeds to be a list.\n\tThis will send the notification as json data.\n\t\"\"\"\n\n\targs = data, collapse_key, delay_while_idle, time_to_live\n\n\t# GCM only allows up to 1000 reg ids per bulk message\n\t# https:\/\/developer.android.com\/google\/gcm\/gcm.html#request\n\tmax_recipients = SETTINGS.get(\"GCM_MAX_RECIPIENTS\")\n\tif len(registration_ids) > max_recipients:\n\t\tret = []\n\t\tfor chunk in _chunks(registration_ids, max_recipients):\n\t\t\tret.append(_gcm_send_json(chunk, *args))\n\t\treturn ret\n\n\treturn _gcm_send_json(registration_ids, *args)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code provides functions to send Google Cloud Messaging (GCM) notifications. To use it, import the necessary functions and call gcm_send_message() or gcm_send_bulk_message() with the appropriate parameters. Make sure to set the GCM_API_KEY in the PUSH_NOTIFICATIONS_SETTINGS dictionary before sending messages through GCM. Documentation is available on the Android Developer website.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGoogle Cloud Messaging\nPreviously known as C2DM\nDocumentation is available on the Android Developer website:\nhttps:\/\/developer.android.com\/google\/gcm\/index.html\n\"\"\"\n\nimport json\n\ntry:\n\tfrom urllib.request import Request, urlopen\n\tfrom urllib.parse import urlencode\nexcept ImportError:\n\t# Python 2 support\n\tfrom urllib2 import Request, urlopen\n\tfrom urllib import urlencode\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom . import NotificationError\nfrom .settings import PUSH_NOTIFICATIONS_SETTINGS as SETTINGS\n\n\nclass GCMError(NotificationError):\n\tpass\n\n\ndef _chunks(l, n):\n\t\"\"\"\n\tYield successive chunks from list \\a l with a minimum size \\a n\n\t\"\"\"\n\tfor i in range(0, len(l), n):\n\t\tyield l[i:i + n]\n\n\ndef _gcm_send(data, content_type):\n\tkey = SETTINGS.get(\"GCM_API_KEY\")\n\tif not key:\n\t\traise ImproperlyConfigured('You need to set PUSH_NOTIFICATIONS_SETTINGS[\"GCM_API_KEY\"] to send messages through GCM.')\n\n\theaders = {\n\t\t\"Content-Type\": content_type,\n\t\t\"Authorization\": \"key=%s\" % (key),\n\t\t\"Content-Length\": str(len(data)),\n\t}\n\n\trequest = Request(SETTINGS[\"GCM_POST_URL\"], data, headers)\n\treturn urlopen(request).read()\n\n\ndef _gcm_send_plain(registration_id, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to a single registration_id.\n\tThis will send the notification as form data.\n\tIf sending multiple notifications, it is more efficient to use\n\tgcm_send_bulk_message() with a list of registration_ids\n\t\"\"\"\n\n\tvalues = {\"registration_id\": registration_id}\n\n\tif collapse_key:\n\t\tvalues[\"collapse_key\"] = collapse_key\n\n\tif delay_while_idle:\n\t\tvalues[\"delay_while_idle\"] = int(delay_while_idle)\n\n\tif time_to_live:\n\t\tvalues[\"time_to_live\"] = time_to_live\n\n\tfor k, v in data.items():\n\t\tvalues[\"data.%s\" % (k)] = v.encode(\"utf-8\")\n\n\tdata = urlencode(sorted(values.items())).encode(\"utf-8\")  # sorted items for tests\n\n\tresult = _gcm_send(data, \"application\/x-www-form-urlencoded;charset=UTF-8\")\n\tif result.startswith(\"Error=\"):\n\t\traise GCMError(result)\n\treturn result\n\n\ndef _gcm_send_json(registration_ids, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to one or more registration_ids. The registration_ids\n\tneeds to be a list.\n\tThis will send the notification as json data.\n\t\"\"\"\n\n\tvalues = {\"registration_ids\": registration_ids}\n\n\tif data is not None:\n\t\tvalues[\"data\"] = data\n\n\tif collapse_key:\n\t\tvalues[\"collapse_key\"] = collapse_key\n\n\tif delay_while_idle:\n\t\tvalues[\"delay_while_idle\"] = delay_while_idle\n\n\tif time_to_live:\n\t\tvalues[\"time_to_live\"] = time_to_live\n\n\tdata = json.dumps(values, separators=(\",\", \":\"), sort_keys=True).encode(\"utf-8\")  # keys sorted for tests\n\n\tresult = json.loads(_gcm_send(data, \"application\/json\"))\n\tif result[\"failure\"]:\n\t\traise GCMError(result)\n\treturn result\n\n\ndef gcm_send_message(registration_id, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to a single registration_id.\n\n\tThis will send the notification as form data if possible, otherwise it will\n\tfall back to json data.\n\n\tIf sending multiple notifications, it is more efficient to use\n\tgcm_send_bulk_message() with a list of registration_ids\n\t\"\"\"\n\n\targs = data, collapse_key, delay_while_idle, time_to_live\n\n\ttry:\n\t\t_gcm_send_plain(registration_id, *args)\n\texcept AttributeError:\n\t\t_gcm_send_json([registration_id], *args)\n\n\ndef gcm_send_bulk_message(registration_ids, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to one or more registration_ids. The registration_ids\n\tneeds to be a list.\n\tThis will send the notification as json data.\n\t\"\"\"\n\n\targs = data, collapse_key, delay_while_idle, time_to_live\n\n\t# GCM only allows up to 1000 reg ids per bulk message\n\t# https:\/\/developer.android.com\/google\/gcm\/gcm.html#request\n\tmax_recipients = SETTINGS.get(\"GCM_MAX_RECIPIENTS\")\n\tif len(registration_ids) > max_recipients:\n\t\tret = []\n\t\tfor chunk in _chunks(registration_ids, max_recipients):\n\t\t\tret.append(_gcm_send_json(chunk, *args))\n\t\treturn ret\n\n\treturn _gcm_send_json(registration_ids, *args)\n","tok_input_length":1108,"tok_output_length":1007,"system_prompt":"","index":7137}
{"question":"The given code is a modified ShoutBox library that enables further modifications for the ShoutBox. To generate an HTML file, run the code without any arguments. To enter a new line from the command line, run \"psogen.py input Anonymous default 'Text'\". The code contains functions to generate and write HTML data to a static HTML file, read data from a file, save new ShoutBox content, and prepare a line of content. To test or generate a static HTML file, run the code with the \"__name__\" variable set to \"__main__\".","input":"","expected_output":"#!\/usr\/bin\/python\n\n# Modificated ShoutBox Library\n#   enables further modifications for the ShoutBox\n#   Run without to generate htmlfile\n#   Run the following to enter a new line from command line\n#     psogen.py input Anonymous default \"Text\"\n\nimport os, re\n\nimport messages, broadcast\n\ndatafilename = os.environ[\"SHOUTBOX_CHATFILE\"]\nhtmlfilename = os.environ[\"SHOUTBOX_GEN_HTMLFILE\"]\n\nstyle=(\"name { font-weight: bold; font-family:Tahoma } \"\n       \"data { font-family: Tahoma } \"\n       \"data.def { color: #000000 } \"\n       \"data.blue { color: #0000FF } \"\n       \"data.green { color: #008000 } \"\n       \"data.orange { color: #FF8040 } \"\n       \"data.red { color: #FF0000 }\")\n\ntry:\n     raw_dest =  os.environ[\"SHOUTBOX_BROADCAST_DESTINATIONS\"]\n     finished_dest = re.sub ( '#' , '\"' , raw_dest )\n     broadcast_destination = eval ( finished_dest )\nexcept KeyError:\n     broadcast_destination = False\n\n\n#--------------\n#  Generates Shoutbox-HTML-Frame  ...\n#           Imports:\n#               content    -   String  containing preformatted data\n#--------------\ndef generate_html(content):\n    htmlstring =   \"<html><head><meta http-equiv='cache-control' content='no-cache'><meta name='GENERATOR' content='PyShoutOut'><title>Shout-Out Data<\/title>\"\n    htmlstring +=  \"<style type='text\/css'>\" + style  + \"<\/style><\/head><body>\"\n    htmlstring +=  content\n    htmlstring +=  \"<\/body><\/html>\"\n    return htmlstring\n\n#--------------\n#   Generates HTML Data based on given content  and write it to static html file\n#          Imports:\n#               content    -   String  containing preformatted data\n#--------------\ndef generate_html_into_file(content):\n    htmlstring = generate_html ( content )\n\n    htmlfile = open( htmlfilename , 'w' )\n    htmlfile.write( htmlstring )\n    htmlfile.close()\n\n#--------------\n# Generates HTML Data based on datafilename 's content\n#--------------\ndef generate_html_from_file():\n    old =  read_data_file()\n    generate_html_into_file( old   )\n\n#--------------\n# Generates and Displays generated HTML\n#--------------\ndef generate_html_to_display_from_file():\n    old =  read_data_file()\n    htmlstring = generate_html ( old )\n    print htmlstring\n\n#--------------\n#  Reads Data file from datafilename given name\n#--------------\ndef read_data_file():\n    datafile = open(datafilename, 'r')\n    old = datafile.read()\n    datafile.close()\n    return old\n\n#--------------\n# Function for saving new Shoubox-Content & Regenerate static HTML file -- usually called by HTML-Form\n#--------------\ndef process_form( name , indata , color ):\n    content = save_input(  name , indata , color )\n\n    if broadcast_destination == False:\n          generate_html_into_file ( content )\n\n\n#--------------\n# Acutally Saves SB-Content to datafile\n#--------------\ndef save_input( name , indata , color ):\n\n    content = prepare_line ( name, indata, color  )\n\n    if broadcast_destination != False:\n        return writeToNetwork( content , broadcast_destination )\n    else:\n        return writeToDisk ( content )\n\ndef writeToNetwork ( content , broadcast_destination ):\n        message = messages.shoutbox_message()\n\tmessage.set(content)\n        casting = broadcast.broadcast( )\n\tcasting.setDestination(broadcast_destination)\n\tcasting.set( message.get_message() )\n\tcasting.send()\n\treturn None\n\ndef writeToDisk ( content ):\n        old = read_data_file()\n        finalcontent = content  + old\n        datafile = open(datafilename, 'r+')\n        datafile.write(finalcontent)\n        datafile.close()\n\treturn finalcontent\n\n\ndef prepare_line ( name, indata, color  ):\n    datapass = re.sub(\"<\", \"&lt;\", indata)\n    data = re.sub(\">\", \"&gt;\", datapass)\n    content = \"<name>\" + name + \":<\/name>&nbsp;&nbsp;&nbsp;<data class='\" + color + \"'>\" + data + \"<\/data><br>\\n\"\n    return content\n\n#--------------\n#  Testing or Generating static HTML File\n#--------------\nif __name__ == \"__main__\":\n  import sys\n  if sys.argv.count(\"input\") >= 1 :\n     save_input(  sys.argv[2] ,  sys.argv[3] ,  sys.argv[4] )\n     generate_html_to_display_from_file()\n     print \"Entered Text.\"\n\n  generate_html_from_file ()\n  print \"Generated HTML-Shoutbox File.\"\n\n\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a modified ShoutBox library that enables further modifications for the ShoutBox. To generate an HTML file, run the code without any arguments. To enter a new line from the command line, run \"psogen.py input Anonymous default 'Text'\". The code contains functions to generate and write HTML data to a static HTML file, read data from a file, save new ShoutBox content, and prepare a line of content. To test or generate a static HTML file, run the code with the \"__name__\" variable set to \"__main__\".\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n\n# Modificated ShoutBox Library\n#   enables further modifications for the ShoutBox\n#   Run without to generate htmlfile\n#   Run the following to enter a new line from command line\n#     psogen.py input Anonymous default \"Text\"\n\nimport os, re\n\nimport messages, broadcast\n\ndatafilename = os.environ[\"SHOUTBOX_CHATFILE\"]\nhtmlfilename = os.environ[\"SHOUTBOX_GEN_HTMLFILE\"]\n\nstyle=(\"name { font-weight: bold; font-family:Tahoma } \"\n       \"data { font-family: Tahoma } \"\n       \"data.def { color: #000000 } \"\n       \"data.blue { color: #0000FF } \"\n       \"data.green { color: #008000 } \"\n       \"data.orange { color: #FF8040 } \"\n       \"data.red { color: #FF0000 }\")\n\ntry:\n     raw_dest =  os.environ[\"SHOUTBOX_BROADCAST_DESTINATIONS\"]\n     finished_dest = re.sub ( '#' , '\"' , raw_dest )\n     broadcast_destination = eval ( finished_dest )\nexcept KeyError:\n     broadcast_destination = False\n\n\n#--------------\n#  Generates Shoutbox-HTML-Frame  ...\n#           Imports:\n#               content    -   String  containing preformatted data\n#--------------\ndef generate_html(content):\n    htmlstring =   \"<html><head><meta http-equiv='cache-control' content='no-cache'><meta name='GENERATOR' content='PyShoutOut'><title>Shout-Out Data<\/title>\"\n    htmlstring +=  \"<style type='text\/css'>\" + style  + \"<\/style><\/head><body>\"\n    htmlstring +=  content\n    htmlstring +=  \"<\/body><\/html>\"\n    return htmlstring\n\n#--------------\n#   Generates HTML Data based on given content  and write it to static html file\n#          Imports:\n#               content    -   String  containing preformatted data\n#--------------\ndef generate_html_into_file(content):\n    htmlstring = generate_html ( content )\n\n    htmlfile = open( htmlfilename , 'w' )\n    htmlfile.write( htmlstring )\n    htmlfile.close()\n\n#--------------\n# Generates HTML Data based on datafilename 's content\n#--------------\ndef generate_html_from_file():\n    old =  read_data_file()\n    generate_html_into_file( old   )\n\n#--------------\n# Generates and Displays generated HTML\n#--------------\ndef generate_html_to_display_from_file():\n    old =  read_data_file()\n    htmlstring = generate_html ( old )\n    print htmlstring\n\n#--------------\n#  Reads Data file from datafilename given name\n#--------------\ndef read_data_file():\n    datafile = open(datafilename, 'r')\n    old = datafile.read()\n    datafile.close()\n    return old\n\n#--------------\n# Function for saving new Shoubox-Content & Regenerate static HTML file -- usually called by HTML-Form\n#--------------\ndef process_form( name , indata , color ):\n    content = save_input(  name , indata , color )\n\n    if broadcast_destination == False:\n          generate_html_into_file ( content )\n\n\n#--------------\n# Acutally Saves SB-Content to datafile\n#--------------\ndef save_input( name , indata , color ):\n\n    content = prepare_line ( name, indata, color  )\n\n    if broadcast_destination != False:\n        return writeToNetwork( content , broadcast_destination )\n    else:\n        return writeToDisk ( content )\n\ndef writeToNetwork ( content , broadcast_destination ):\n        message = messages.shoutbox_message()\n\tmessage.set(content)\n        casting = broadcast.broadcast( )\n\tcasting.setDestination(broadcast_destination)\n\tcasting.set( message.get_message() )\n\tcasting.send()\n\treturn None\n\ndef writeToDisk ( content ):\n        old = read_data_file()\n        finalcontent = content  + old\n        datafile = open(datafilename, 'r+')\n        datafile.write(finalcontent)\n        datafile.close()\n\treturn finalcontent\n\n\ndef prepare_line ( name, indata, color  ):\n    datapass = re.sub(\"<\", \"&lt;\", indata)\n    data = re.sub(\">\", \"&gt;\", datapass)\n    content = \"<name>\" + name + \":<\/name>&nbsp;&nbsp;&nbsp;<data class='\" + color + \"'>\" + data + \"<\/data><br>\\n\"\n    return content\n\n#--------------\n#  Testing or Generating static HTML File\n#--------------\nif __name__ == \"__main__\":\n  import sys\n  if sys.argv.count(\"input\") >= 1 :\n     save_input(  sys.argv[2] ,  sys.argv[3] ,  sys.argv[4] )\n     generate_html_to_display_from_file()\n     print \"Entered Text.\"\n\n  generate_html_from_file ()\n  print \"Generated HTML-Shoutbox File.\"\n\n\n\n","tok_input_length":1124,"tok_output_length":981,"system_prompt":"","index":4424}
{"question":"Download tweets from a list of users and save them to a CSV file. \n\n1. Install tweepy and unicodecsv libraries in Python.\n2. Create a file named \"users.txt\" and add the list of users whose tweets you want to download.\n3. Run the Python script with the following command: python script.py [maxTweets] [fName] [sinceId] [last_id]\n4. Replace [maxTweets] with the maximum number of tweets you want to download.\n5. Replace [fName] with the name of the CSV file where you want to save the tweets.\n6. Replace [sinceId] and [last_id] with the tweet IDs if you want to download tweets between a specific range. Otherwise, use \"-1\" for both.\n7. Wait for the script to finish downloading the tweets and saving them to the CSV file.","input":"","expected_output":"#!\/usr\/bin\/python\nimport tweepy\nimport sys\nimport os\nimport codecs\nimport unicodecsv as csv\n\n# API and ACCESS KEYS\nAPI_KEY = 'jz3feMK2gN0kaN377FsTXY7uY'\nAPI_SECRET = 'sGfCEayfwORloC9SvHy6BmDjifUsUEIF0EF51SgiYUgs054n7H'\n\n# Don't buffer stdout, so we can tail the log output redirected to a file\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\n# Max Tweets\nmaxTweets = int(sys.argv[1])\n\n# Filename\nfName = sys.argv[2]\n\ntweetsPerQry = 200\n\n# List of users read from users.txt\nusers = []\n\n#open users.txt file and gets the list of users\nwith open('users.txt', 'r') as f:\n  for line in f:\n    users.append(line.strip())\n\nsinceId = None\n\nif(len(sys.argv) > 3):\n  if(sys.argv[3] != '-1'):\n    sinceId = sys.argv[3]\n\nlast_id = -1L\n\nif(len(sys.argv) > 4):\n  last_id = long(sys.argv[4])\n\ndef getHashtags(hashes):\n  hashStr = ''\n  for i, h in enumerate(hashes):\n    if i == len(hashes)-1:\n      hashStr = hashStr + h['text']\n    else:\n      hashStr = hashStr + h['text'] + ','\n  return hashStr\n\ndef getMentions(mentions):\n  mentionStr = ''\n  for i, m in enumerate(mentions):\n    if i == len(mentions)-1:\n      mentionStr = mentionStr + m['screen_name']\n    else:\n      mentionStr = mentionStr + m['screen_name'] + ','\n  return mentionStr\n\nauth = tweepy.AppAuthHandler(API_KEY, API_SECRET)\n\napi = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)\n\nif (not api):\n  print (\"Can't Authenticate Bye!\")\n  sys.exit(-1)\n\ntweetCount = 0\nprint(\"Downloading max {0} tweets\".format(maxTweets))\n\nwith open(fName, 'ab') as f:\n  writer = csv.writer(f, encoding='utf-8')\n  writer.writerow(['Username','Created_at','ID','Tweet','RetweetCount','Name','Location','URL','Description','TweetCount','FollowersCount','FriendsCount','hashtags','mentions'])\n  for user in users:\n    tweetCount = 0\n    last_id = 0\n    while tweetCount < maxTweets:\n      print 'User is ' + user + ' Tweet count ' + str(tweetCount) + ' max Tweets ' + str(maxTweets) + ' SinceId ' + str(sinceId) + ' last_id ' + str(last_id)\n      try:\n        if (last_id <= 0):\n          if (not sinceId):\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry)\n          else:\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, since_id=sinceId)\n\n        else:\n          if (not sinceId):\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, max_id=str(last_id - 1))\n          else:\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, max_id=str(last_id - 1), since_id=sinceId)\n\n        if not new_tweets:\n          print(\"No more tweets found\")\n          break\n        \n        for tweet in new_tweets:\n          try: \n            hashTags = getHashtags(tweet.entities.get('hashtags'))\n            mentions = getMentions(tweet.entities.get('user_mentions'))\n\n            writer.writerow([tweet.user.screen_name,tweet.created_at,tweet.id_str,tweet.text,str(tweet.retweet_count),tweet.user.name, tweet.user.location, str(tweet.user.url),tweet.user.description,str(tweet.user.statuses_count),str(tweet.user.followers_count),str(tweet.user.friends_count),hashTags,mentions])\n          except tweepy.TweepError as e:\n            print(\"some error : \" + str(e) + \" for user: \" + user)\n            break\n\n        tweetCount += len(new_tweets)\n        print(\"Downloaded {0} tweets\".format(tweetCount))\n        last_id = new_tweets[-1].id\n      except tweepy.TweepError as e:\n        # Just exit if any error\n        print(\"some error : \" + str(e))\n        break\n\nprint (\"Downloaded {0} tweets, Saved to {1}\".format(tweetCount, fName))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDownload tweets from a list of users and save them to a CSV file. \n\n1. Install tweepy and unicodecsv libraries in Python.\n2. Create a file named \"users.txt\" and add the list of users whose tweets you want to download.\n3. Run the Python script with the following command: python script.py [maxTweets] [fName] [sinceId] [last_id]\n4. Replace [maxTweets] with the maximum number of tweets you want to download.\n5. Replace [fName] with the name of the CSV file where you want to save the tweets.\n6. Replace [sinceId] and [last_id] with the tweet IDs if you want to download tweets between a specific range. Otherwise, use \"-1\" for both.\n7. Wait for the script to finish downloading the tweets and saving them to the CSV file.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\nimport tweepy\nimport sys\nimport os\nimport codecs\nimport unicodecsv as csv\n\n# API and ACCESS KEYS\nAPI_KEY = 'jz3feMK2gN0kaN377FsTXY7uY'\nAPI_SECRET = 'sGfCEayfwORloC9SvHy6BmDjifUsUEIF0EF51SgiYUgs054n7H'\n\n# Don't buffer stdout, so we can tail the log output redirected to a file\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\n# Max Tweets\nmaxTweets = int(sys.argv[1])\n\n# Filename\nfName = sys.argv[2]\n\ntweetsPerQry = 200\n\n# List of users read from users.txt\nusers = []\n\n#open users.txt file and gets the list of users\nwith open('users.txt', 'r') as f:\n  for line in f:\n    users.append(line.strip())\n\nsinceId = None\n\nif(len(sys.argv) > 3):\n  if(sys.argv[3] != '-1'):\n    sinceId = sys.argv[3]\n\nlast_id = -1L\n\nif(len(sys.argv) > 4):\n  last_id = long(sys.argv[4])\n\ndef getHashtags(hashes):\n  hashStr = ''\n  for i, h in enumerate(hashes):\n    if i == len(hashes)-1:\n      hashStr = hashStr + h['text']\n    else:\n      hashStr = hashStr + h['text'] + ','\n  return hashStr\n\ndef getMentions(mentions):\n  mentionStr = ''\n  for i, m in enumerate(mentions):\n    if i == len(mentions)-1:\n      mentionStr = mentionStr + m['screen_name']\n    else:\n      mentionStr = mentionStr + m['screen_name'] + ','\n  return mentionStr\n\nauth = tweepy.AppAuthHandler(API_KEY, API_SECRET)\n\napi = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)\n\nif (not api):\n  print (\"Can't Authenticate Bye!\")\n  sys.exit(-1)\n\ntweetCount = 0\nprint(\"Downloading max {0} tweets\".format(maxTweets))\n\nwith open(fName, 'ab') as f:\n  writer = csv.writer(f, encoding='utf-8')\n  writer.writerow(['Username','Created_at','ID','Tweet','RetweetCount','Name','Location','URL','Description','TweetCount','FollowersCount','FriendsCount','hashtags','mentions'])\n  for user in users:\n    tweetCount = 0\n    last_id = 0\n    while tweetCount < maxTweets:\n      print 'User is ' + user + ' Tweet count ' + str(tweetCount) + ' max Tweets ' + str(maxTweets) + ' SinceId ' + str(sinceId) + ' last_id ' + str(last_id)\n      try:\n        if (last_id <= 0):\n          if (not sinceId):\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry)\n          else:\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, since_id=sinceId)\n\n        else:\n          if (not sinceId):\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, max_id=str(last_id - 1))\n          else:\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, max_id=str(last_id - 1), since_id=sinceId)\n\n        if not new_tweets:\n          print(\"No more tweets found\")\n          break\n        \n        for tweet in new_tweets:\n          try: \n            hashTags = getHashtags(tweet.entities.get('hashtags'))\n            mentions = getMentions(tweet.entities.get('user_mentions'))\n\n            writer.writerow([tweet.user.screen_name,tweet.created_at,tweet.id_str,tweet.text,str(tweet.retweet_count),tweet.user.name, tweet.user.location, str(tweet.user.url),tweet.user.description,str(tweet.user.statuses_count),str(tweet.user.followers_count),str(tweet.user.friends_count),hashTags,mentions])\n          except tweepy.TweepError as e:\n            print(\"some error : \" + str(e) + \" for user: \" + user)\n            break\n\n        tweetCount += len(new_tweets)\n        print(\"Downloaded {0} tweets\".format(tweetCount))\n        last_id = new_tweets[-1].id\n      except tweepy.TweepError as e:\n        # Just exit if any error\n        print(\"some error : \" + str(e))\n        break\n\nprint (\"Downloaded {0} tweets, Saved to {1}\".format(tweetCount, fName))","tok_input_length":1196,"tok_output_length":991,"system_prompt":"","index":12389}
{"question":"This code checks if files changed in git match the .clang-format specification. To use it, run the `cli()` function with the following arguments:\n- `--file-extensions`: a comma-separated list of file extensions to check (default is `.cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp`)\n- `--exclude`: a list of files or directories to exclude from the check\n- `--clang-format-bin`: the path to the clang-format binary (default is `clang-format`)\n- `--git-bin`: the path to the git binary (default is `git`)","input":"","expected_output":"#!\/usr\/bin\/env python\n\nimport argparse\nimport os\nimport sys\nimport subprocess\n\n\ndef check_file(filename, excludes, extensions):\n    \"\"\"\n    Check if a file should be included in our check\n    \"\"\"\n    name, ext = os.path.splitext(filename)\n\n    if len(ext) > 0 and ext in extensions:\n        if len(excludes) == 0:\n            return True\n\n        for exclude in excludes:\n            if exclude in filename:\n                return False\n\n        return True\n\n    return False\n\n\ndef check_directory(directory, excludes, extensions):\n    output = []\n\n    if len(excludes) > 0:\n        for exclude in excludes:\n            if exclude in directory:\n                directory_excluded = False\n                return output\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            filename = os.path.join(root, file)\n            if check_file(filename, excludes, extensions):\n                print(\"Will check file [{}]\".format(filename))\n                output.append(filename)\n    return output\n\ndef get_git_root(git_bin):\n    cmd = [git_bin, \"rev-parse\", \"--show-toplevel\"]\n    try:\n        return subprocess.check_output(cmd).strip()\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        raise\n\ndef clean_git_filename(line):\n    \"\"\"\n    Takes a line from git status --porcelain and returns the filename\n    \"\"\"\n    file = None\n    git_status = line[:2]\n    # Not an exhaustive list of git status output but should\n    # be enough for this case\n    # check if this is a delete\n    if 'D' in git_status:\n        return None\n    # ignored file\n    if '!' in git_status:\n        return None\n    # Covers renamed files\n    if '->' in line:\n        file = line[3:].split('->')[-1].strip()\n    else:\n        file = line[3:].strip()\n\n    return file\n\n\ndef get_changed_files(git_bin, excludes, file_extensions):\n    \"\"\"\n    Run git status and return the list of changed files\n    \"\"\"\n    extensions = file_extensions.split(\",\")\n    # arguments coming from cmake will be *.xx. We want to remove the *\n    for i, extension in enumerate(extensions):\n        if extension[0] == '*':\n            extensions[i] = extension[1:]\n\n    git_root = get_git_root(git_bin)\n\n    cmd = [git_bin, \"status\", \"--porcelain\", \"--ignore-submodules\"]\n    print(\"git cmd = {}\".format(cmd))\n    output = []\n    returncode = 0\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        for line in cmd_output.split('\\n'):\n            if len(line) > 0:\n                file = clean_git_filename(line)\n                if not file:\n                    continue\n                file = os.path.join(git_root, file)\n\n                if file[-1] == \"\/\":\n                    directory_files = check_directory(\n                        file, excludes, file_extensions)\n                    output = output + directory_files\n                else:\n                    if check_file(file, excludes, file_extensions):\n                        print(\"Will check file [{}]\".format(file))\n                        output.append(file)\n\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        returncode = e.returncode\n\n    return output, returncode\n\n\ndef run_clang_format(clang_format_bin, changed_files):\n    \"\"\"\n    Run clang format on a list of files \n    @return 0 if formatted correctly.\n    \"\"\"\n    if len(changed_files) == 0:\n        return 0\n    cmd = [clang_format_bin, \"-style=file\",\n           \"-output-replacements-xml\"] + changed_files\n    print(\"clang-format cmd = {}\".format(cmd))\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        if \"replacement offset\" in cmd_output:\n            print(\"ERROR: Changed files don't match format\")\n            return 1\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling clang-format [{}]\".format(e))\n        return e.returncode\n\n    return 0\n\n\ndef cli():\n    # global params\n    parser = argparse.ArgumentParser(prog='clang-format-check-changed',\n                                     description='Checks if files chagned in git match the .clang-format specification')\n    parser.add_argument(\"--file-extensions\", type=str,\n                        default=\".cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp\",\n                        help=\"Comma separated list of file extensions to check\")\n    parser.add_argument('--exclude', action='append', default=[],\n                        help='Will not match the files \/ directories with these in the name')\n    parser.add_argument('--clang-format-bin', type=str, default=\"clang-format\",\n                        help=\"The clang format binary\")\n    parser.add_argument('--git-bin', type=str, default=\"git\",\n                        help=\"The git binary\")\n    args = parser.parse_args()\n\n    # Run gcovr to get the .gcda files form .gcno\n    changed_files, returncode = get_changed_files(\n        args.git_bin, args.exclude, args.file_extensions)\n    if returncode != 0:\n        return returncode\n\n    return run_clang_format(args.clang_format_bin, changed_files)\n\nif __name__ == '__main__':\n    sys.exit(cli())\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code checks if files changed in git match the .clang-format specification. To use it, run the `cli()` function with the following arguments:\n- `--file-extensions`: a comma-separated list of file extensions to check (default is `.cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp`)\n- `--exclude`: a list of files or directories to exclude from the check\n- `--clang-format-bin`: the path to the clang-format binary (default is `clang-format`)\n- `--git-bin`: the path to the git binary (default is `git`)\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\nimport argparse\nimport os\nimport sys\nimport subprocess\n\n\ndef check_file(filename, excludes, extensions):\n    \"\"\"\n    Check if a file should be included in our check\n    \"\"\"\n    name, ext = os.path.splitext(filename)\n\n    if len(ext) > 0 and ext in extensions:\n        if len(excludes) == 0:\n            return True\n\n        for exclude in excludes:\n            if exclude in filename:\n                return False\n\n        return True\n\n    return False\n\n\ndef check_directory(directory, excludes, extensions):\n    output = []\n\n    if len(excludes) > 0:\n        for exclude in excludes:\n            if exclude in directory:\n                directory_excluded = False\n                return output\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            filename = os.path.join(root, file)\n            if check_file(filename, excludes, extensions):\n                print(\"Will check file [{}]\".format(filename))\n                output.append(filename)\n    return output\n\ndef get_git_root(git_bin):\n    cmd = [git_bin, \"rev-parse\", \"--show-toplevel\"]\n    try:\n        return subprocess.check_output(cmd).strip()\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        raise\n\ndef clean_git_filename(line):\n    \"\"\"\n    Takes a line from git status --porcelain and returns the filename\n    \"\"\"\n    file = None\n    git_status = line[:2]\n    # Not an exhaustive list of git status output but should\n    # be enough for this case\n    # check if this is a delete\n    if 'D' in git_status:\n        return None\n    # ignored file\n    if '!' in git_status:\n        return None\n    # Covers renamed files\n    if '->' in line:\n        file = line[3:].split('->')[-1].strip()\n    else:\n        file = line[3:].strip()\n\n    return file\n\n\ndef get_changed_files(git_bin, excludes, file_extensions):\n    \"\"\"\n    Run git status and return the list of changed files\n    \"\"\"\n    extensions = file_extensions.split(\",\")\n    # arguments coming from cmake will be *.xx. We want to remove the *\n    for i, extension in enumerate(extensions):\n        if extension[0] == '*':\n            extensions[i] = extension[1:]\n\n    git_root = get_git_root(git_bin)\n\n    cmd = [git_bin, \"status\", \"--porcelain\", \"--ignore-submodules\"]\n    print(\"git cmd = {}\".format(cmd))\n    output = []\n    returncode = 0\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        for line in cmd_output.split('\\n'):\n            if len(line) > 0:\n                file = clean_git_filename(line)\n                if not file:\n                    continue\n                file = os.path.join(git_root, file)\n\n                if file[-1] == \"\/\":\n                    directory_files = check_directory(\n                        file, excludes, file_extensions)\n                    output = output + directory_files\n                else:\n                    if check_file(file, excludes, file_extensions):\n                        print(\"Will check file [{}]\".format(file))\n                        output.append(file)\n\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        returncode = e.returncode\n\n    return output, returncode\n\n\ndef run_clang_format(clang_format_bin, changed_files):\n    \"\"\"\n    Run clang format on a list of files \n    @return 0 if formatted correctly.\n    \"\"\"\n    if len(changed_files) == 0:\n        return 0\n    cmd = [clang_format_bin, \"-style=file\",\n           \"-output-replacements-xml\"] + changed_files\n    print(\"clang-format cmd = {}\".format(cmd))\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        if \"replacement offset\" in cmd_output:\n            print(\"ERROR: Changed files don't match format\")\n            return 1\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling clang-format [{}]\".format(e))\n        return e.returncode\n\n    return 0\n\n\ndef cli():\n    # global params\n    parser = argparse.ArgumentParser(prog='clang-format-check-changed',\n                                     description='Checks if files chagned in git match the .clang-format specification')\n    parser.add_argument(\"--file-extensions\", type=str,\n                        default=\".cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp\",\n                        help=\"Comma separated list of file extensions to check\")\n    parser.add_argument('--exclude', action='append', default=[],\n                        help='Will not match the files \/ directories with these in the name')\n    parser.add_argument('--clang-format-bin', type=str, default=\"clang-format\",\n                        help=\"The clang format binary\")\n    parser.add_argument('--git-bin', type=str, default=\"git\",\n                        help=\"The git binary\")\n    args = parser.parse_args()\n\n    # Run gcovr to get the .gcda files form .gcno\n    changed_files, returncode = get_changed_files(\n        args.git_bin, args.exclude, args.file_extensions)\n    if returncode != 0:\n        return returncode\n\n    return run_clang_format(args.clang_format_bin, changed_files)\n\nif __name__ == '__main__':\n    sys.exit(cli())\n","tok_input_length":1262,"tok_output_length":1113,"system_prompt":"","index":908}
{"question":"This code is a Python script that checks disk usage recursively. To use it, you need to run the script with the following arguments: \n\n-b\/--base: the base directory to monitor. For example, if you want to monitor only volumes mounted under \/host\/ (Default: \/).\n\n-e\/--excludes: a list of mount points to exclude recursively, for example, \/var\/lib will exclude \/var\/lib*.\n\n-w\/--warning: the warning value (Default: 85).\n\n-c\/--critical: the critical value (Default: 95).\n\n-v\/--version: prints the script version.\n\nThe script will output the disk usage status and exit with a status code indicating the state of the disk usage.","input":"","expected_output":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n# Author: Florian Lambert <flambert@redhat.com>\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n#\n# Requirments: python\n#\n\nimport sys\nimport argparse\nimport subprocess\n\nVERSION = '1.1'\n\nSTATE_TEXT = ['Ok', 'Warning', 'Critical', 'Unknow']\n\n\nPARSER = argparse.ArgumentParser(description='Disk check recurcive')\nPARSER.add_argument(\"-b\", \"--base\",\n                    type=str,\n                    help='base directory to monitor. For example if you want to monitor only volume mounted under \/host\/ (Default: \/)',\n                    default=\"\/\")\nPARSER.add_argument(\"-e\", \"--excludes\",\n                    type=str, nargs='+',\n                    help='List of mountpoint to exclude recurcively ex: \/var\/lib will exclude \/var\/lib*',\n                    default=[])\nPARSER.add_argument(\"-w\", \"--warning\",\n                    type=int,\n                    help='Warning value (Default: 85)',\n                    default=85)\nPARSER.add_argument(\"-c\", \"--critical\",\n                    type=int,\n                    help='Critical value (Default: 95)',\n                    default=95)\nPARSER.add_argument(\"-v\", \"--version\",\n                    action='store_true',\n                    help='Print script version')\nARGS = PARSER.parse_args()\n\n\n\ndef check_df(base,warning,critical,excludes):\n    STATE_OK = 0\n    STATE_WARNING = 1\n    STATE_CRITICAL = 2\n    STATE_UNKNOWN = 3\n    STATE = STATE_OK\n\n    df_cmd = (\"df --exclude-type=tmpfs \"\n              \"--exclude-type=devtmpfs \"\n              \"--output=source,target,fstype,iused,itotal,ipcent,used,size,pcent \"\n              \"--block-size G\")\n\n    stdout = subprocess.check_output(df_cmd, shell=True).strip().split(\"\\n\")\n    # remove the header output\n    del stdout[0]\n\n    _output_message = []\n    _disk_ok = []\n    for line in stdout:\n        # Exclude filter on target mount point\n        col = line.split()\n        # 0: source\n        # 1: target\n        # 2: fstype\n        # 3: iused\n        # 4: itotal\n        # 5: ipcent\n        # 6: used\n        # 7: size\n        # 8: pcent\n        if not is_based(base,col[1]) or is_excluded(excludes,col[1]):\n            continue\n        _disk_ok.append(col[1])\n\n        # csize: pourcent usage\n        csize = int(col[8].rstrip('%'))\n        if csize >= int(critical):  # CRITICAL\n            STATE = STATE_CRITICAL\n            _output_message.append(\"Disk Block %s %s Used\" % (col[1], col[8]))\n        elif csize >= int(warning):  # WARNING\n            # Update state warning only if the current is not critical\n            if STATE < STATE_CRITICAL:\n                STATE = STATE_WARNING\n            _output_message.append(\"Disk Block %s %s Used\" % (col[1], col[8]))\n\n        # cinode: pourcent usage inode\n        cinode = int(col[5].rstrip('%'))\n        if cinode >= int(critical):  # CRITICAL\n            STATE = STATE_CRITICAL\n            _output_message.append(\"Disk Inode %s %s Used\" % (col[1], col[5]))\n        elif cinode >= int(warning):  # WARNING\n            # Update state warning only if the current is not critical\n            if STATE < STATE_CRITICAL:\n                STATE = STATE_WARNING\n            _output_message.append(\"Disk Inode %s %s Used\" % (col[1], col[5]))\n\n    if STATE == STATE_OK:\n        output_message = \"Disk %s\" % (' || '.join(_disk_ok))\n    else:\n        output_message = ' || '.join(_output_message)\n    return output_message,STATE\n\ndef is_excluded(excludes,path):\n    #Check if the mount path is in the excludes\n    for ex in excludes:\n        if path.startswith(ex):\n            return True\n    return False\n\ndef is_based(base,path):\n    #Check if the mount path is in the base path\n    if path.startswith(base):\n        return True\n    return False\n\nif __name__ == \"__main__\":\n\n    if ARGS.version:\n        print \"version: %s\" % (VERSION)\n        sys.exit(0)\n\n    (OUTPUT_MESSAGE,STATE) = check_df(base=ARGS.base,\n                                      warning=ARGS.warning,\n                                      critical=ARGS.critical,\n                                      excludes=ARGS.excludes)\n\n    try:\n        print \"%s: %s\" % (STATE_TEXT[STATE], OUTPUT_MESSAGE)\n        sys.exit(STATE)\n    except ValueError:\n        print \"Oops!  cant return STATE\"\n        sys.exit(STATE_UNKNOWN)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that checks disk usage recursively. To use it, you need to run the script with the following arguments: \n\n-b\/--base: the base directory to monitor. For example, if you want to monitor only volumes mounted under \/host\/ (Default: \/).\n\n-e\/--excludes: a list of mount points to exclude recursively, for example, \/var\/lib will exclude \/var\/lib*.\n\n-w\/--warning: the warning value (Default: 85).\n\n-c\/--critical: the critical value (Default: 95).\n\n-v\/--version: prints the script version.\n\nThe script will output the disk usage status and exit with a status code indicating the state of the disk usage.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n# Author: Florian Lambert <flambert@redhat.com>\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n#\n# Requirments: python\n#\n\nimport sys\nimport argparse\nimport subprocess\n\nVERSION = '1.1'\n\nSTATE_TEXT = ['Ok', 'Warning', 'Critical', 'Unknow']\n\n\nPARSER = argparse.ArgumentParser(description='Disk check recurcive')\nPARSER.add_argument(\"-b\", \"--base\",\n                    type=str,\n                    help='base directory to monitor. For example if you want to monitor only volume mounted under \/host\/ (Default: \/)',\n                    default=\"\/\")\nPARSER.add_argument(\"-e\", \"--excludes\",\n                    type=str, nargs='+',\n                    help='List of mountpoint to exclude recurcively ex: \/var\/lib will exclude \/var\/lib*',\n                    default=[])\nPARSER.add_argument(\"-w\", \"--warning\",\n                    type=int,\n                    help='Warning value (Default: 85)',\n                    default=85)\nPARSER.add_argument(\"-c\", \"--critical\",\n                    type=int,\n                    help='Critical value (Default: 95)',\n                    default=95)\nPARSER.add_argument(\"-v\", \"--version\",\n                    action='store_true',\n                    help='Print script version')\nARGS = PARSER.parse_args()\n\n\n\ndef check_df(base,warning,critical,excludes):\n    STATE_OK = 0\n    STATE_WARNING = 1\n    STATE_CRITICAL = 2\n    STATE_UNKNOWN = 3\n    STATE = STATE_OK\n\n    df_cmd = (\"df --exclude-type=tmpfs \"\n              \"--exclude-type=devtmpfs \"\n              \"--output=source,target,fstype,iused,itotal,ipcent,used,size,pcent \"\n              \"--block-size G\")\n\n    stdout = subprocess.check_output(df_cmd, shell=True).strip().split(\"\\n\")\n    # remove the header output\n    del stdout[0]\n\n    _output_message = []\n    _disk_ok = []\n    for line in stdout:\n        # Exclude filter on target mount point\n        col = line.split()\n        # 0: source\n        # 1: target\n        # 2: fstype\n        # 3: iused\n        # 4: itotal\n        # 5: ipcent\n        # 6: used\n        # 7: size\n        # 8: pcent\n        if not is_based(base,col[1]) or is_excluded(excludes,col[1]):\n            continue\n        _disk_ok.append(col[1])\n\n        # csize: pourcent usage\n        csize = int(col[8].rstrip('%'))\n        if csize >= int(critical):  # CRITICAL\n            STATE = STATE_CRITICAL\n            _output_message.append(\"Disk Block %s %s Used\" % (col[1], col[8]))\n        elif csize >= int(warning):  # WARNING\n            # Update state warning only if the current is not critical\n            if STATE < STATE_CRITICAL:\n                STATE = STATE_WARNING\n            _output_message.append(\"Disk Block %s %s Used\" % (col[1], col[8]))\n\n        # cinode: pourcent usage inode\n        cinode = int(col[5].rstrip('%'))\n        if cinode >= int(critical):  # CRITICAL\n            STATE = STATE_CRITICAL\n            _output_message.append(\"Disk Inode %s %s Used\" % (col[1], col[5]))\n        elif cinode >= int(warning):  # WARNING\n            # Update state warning only if the current is not critical\n            if STATE < STATE_CRITICAL:\n                STATE = STATE_WARNING\n            _output_message.append(\"Disk Inode %s %s Used\" % (col[1], col[5]))\n\n    if STATE == STATE_OK:\n        output_message = \"Disk %s\" % (' || '.join(_disk_ok))\n    else:\n        output_message = ' || '.join(_output_message)\n    return output_message,STATE\n\ndef is_excluded(excludes,path):\n    #Check if the mount path is in the excludes\n    for ex in excludes:\n        if path.startswith(ex):\n            return True\n    return False\n\ndef is_based(base,path):\n    #Check if the mount path is in the base path\n    if path.startswith(base):\n        return True\n    return False\n\nif __name__ == \"__main__\":\n\n    if ARGS.version:\n        print \"version: %s\" % (VERSION)\n        sys.exit(0)\n\n    (OUTPUT_MESSAGE,STATE) = check_df(base=ARGS.base,\n                                      warning=ARGS.warning,\n                                      critical=ARGS.critical,\n                                      excludes=ARGS.excludes)\n\n    try:\n        print \"%s: %s\" % (STATE_TEXT[STATE], OUTPUT_MESSAGE)\n        sys.exit(STATE)\n    except ValueError:\n        print \"Oops!  cant return STATE\"\n        sys.exit(STATE_UNKNOWN)\n","tok_input_length":1309,"tok_output_length":1140,"system_prompt":"","index":6228}
{"question":"This code is a Python class that processes OptionROM generation from INF statement. To use this code, import the required modules and create an instance of the OptRomInfStatement class. Then call the GenFfs() method to generate the FFS file. The __GetOptRomParams() method can be used to parse the INF file and get the OptionROM related parameters. The __GenSimpleFileSection__() and __GenComplexFileSection__() methods can be used to generate the section files.","input":"","expected_output":"## @file\n# process OptionROM generation from INF statement\n#\n#  Copyright (c) 2007, Intel Corporation. All rights reserved.<BR>\n#\n#  This program and the accompanying materials\n#  are licensed and made available under the terms and conditions of the BSD License\n#  which accompanies this distribution.  The full text of the license may be found at\n#  http:\/\/opensource.org\/licenses\/bsd-license.php\n#\n#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.\n#\n\n##\n# Import Modules\n#\nimport RuleSimpleFile\nimport RuleComplexFile\nimport Section\nimport OptionRom\nimport Common.GlobalData as GlobalData\n\nfrom Common.DataType import *\nfrom Common.String import *\nfrom FfsInfStatement import FfsInfStatement\nfrom GenFdsGlobalVariable import GenFdsGlobalVariable\n\n##\n#\n#\nclass OptRomInfStatement (FfsInfStatement):\n    ## The constructor\n    #\n    #   @param  self        The object pointer\n    #\n    def __init__(self):\n        FfsInfStatement.__init__(self)\n        self.OverrideAttribs = None\n\n    ## __GetOptRomParams() method\n    #\n    #   Parse inf file to get option ROM related parameters\n    #\n    #   @param  self        The object pointer\n    #\n    def __GetOptRomParams(self):\n\n        if self.OverrideAttribs == None:\n            self.OverrideAttribs = OptionRom.OverrideAttribs()\n\n        if self.OverrideAttribs.NeedCompress == None:\n            self.OverrideAttribs.NeedCompress = self.OptRomDefs.get ('PCI_COMPRESS')\n            if self.OverrideAttribs.NeedCompress is not None:\n                if self.OverrideAttribs.NeedCompress.upper() not in ('TRUE', 'FALSE'):\n                    GenFdsGlobalVariable.ErrorLogger( \"Expected TRUE\/FALSE for PCI_COMPRESS: %s\" %self.InfFileName)\n                self.OverrideAttribs.NeedCompress = \\\n                    self.OverrideAttribs.NeedCompress.upper() == 'TRUE'\n\n        if self.OverrideAttribs.PciVendorId == None:\n            self.OverrideAttribs.PciVendorId = self.OptRomDefs.get ('PCI_VENDOR_ID')\n\n        if self.OverrideAttribs.PciClassCode == None:\n            self.OverrideAttribs.PciClassCode = self.OptRomDefs.get ('PCI_CLASS_CODE')\n\n        if self.OverrideAttribs.PciDeviceId == None:\n            self.OverrideAttribs.PciDeviceId = self.OptRomDefs.get ('PCI_DEVICE_ID')\n\n        if self.OverrideAttribs.PciRevision == None:\n            self.OverrideAttribs.PciRevision = self.OptRomDefs.get ('PCI_REVISION')\n\n#        InfObj = GenFdsGlobalVariable.WorkSpace.BuildObject[self.PathClassObj, self.CurrentArch]\n#        RecordList = InfObj._RawData[MODEL_META_DATA_HEADER, InfObj._Arch, InfObj._Platform]\n#        for Record in RecordList:\n#            Record = ReplaceMacros(Record, GlobalData.gEdkGlobal, False)\n#            Name = Record[0]\n    ## GenFfs() method\n    #\n    #   Generate FFS\n    #\n    #   @param  self        The object pointer\n    #   @retval string      Generated .efi file name\n    #\n    def GenFfs(self):\n        #\n        # Parse Inf file get Module related information\n        #\n\n        self.__InfParse__()\n        self.__GetOptRomParams()\n        #\n        # Get the rule of how to generate Ffs file\n        #\n        Rule = self.__GetRule__()\n        GenFdsGlobalVariable.VerboseLogger( \"Packing binaries from inf file : %s\" %self.InfFileName)\n        #FileType = Ffs.Ffs.ModuleTypeToFileType[Rule.ModuleType]\n        #\n        # For the rule only has simpleFile\n        #\n        if isinstance (Rule, RuleSimpleFile.RuleSimpleFile) :\n            EfiOutputList = self.__GenSimpleFileSection__(Rule)\n            return EfiOutputList\n        #\n        # For Rule has ComplexFile\n        #\n        elif isinstance(Rule, RuleComplexFile.RuleComplexFile):\n            EfiOutputList = self.__GenComplexFileSection__(Rule)\n            return EfiOutputList\n\n    ## __GenSimpleFileSection__() method\n    #\n    #   Get .efi files according to simple rule.\n    #\n    #   @param  self        The object pointer\n    #   @param  Rule        The rule object used to generate section\n    #   @retval string      File name of the generated section file\n    #\n    def __GenSimpleFileSection__(self, Rule):\n        #\n        # Prepare the parameter of GenSection\n        #\n\n        OutputFileList = []\n        if Rule.FileName != None:\n            GenSecInputFile = self.__ExtendMacro__(Rule.FileName)\n            OutputFileList.append(GenSecInputFile)\n        else:\n            OutputFileList, IsSect = Section.Section.GetFileList(self, '', Rule.FileExtension)\n\n        return OutputFileList\n\n\n    ## __GenComplexFileSection__() method\n    #\n    #   Get .efi by sections in complex Rule\n    #\n    #   @param  self        The object pointer\n    #   @param  Rule        The rule object used to generate section\n    #   @retval string      File name of the generated section file\n    #\n    def __GenComplexFileSection__(self, Rule):\n\n        OutputFileList = []\n        for Sect in Rule.SectionList:\n            if Sect.SectionType == 'PE32':\n                if Sect.FileName != None:\n                    GenSecInputFile = self.__ExtendMacro__(Sect.FileName)\n                    OutputFileList.append(GenSecInputFile)\n                else:\n                    FileList, IsSect = Section.Section.GetFileList(self, '', Sect.FileExtension)\n                    OutputFileList.extend(FileList)\n\n        return OutputFileList\n\n    ","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python class that processes OptionROM generation from INF statement. To use this code, import the required modules and create an instance of the OptRomInfStatement class. Then call the GenFfs() method to generate the FFS file. The __GetOptRomParams() method can be used to parse the INF file and get the OptionROM related parameters. The __GenSimpleFileSection__() and __GenComplexFileSection__() methods can be used to generate the section files.\n\n### Input:\n\n\n### Output:\n## @file\n# process OptionROM generation from INF statement\n#\n#  Copyright (c) 2007, Intel Corporation. All rights reserved.<BR>\n#\n#  This program and the accompanying materials\n#  are licensed and made available under the terms and conditions of the BSD License\n#  which accompanies this distribution.  The full text of the license may be found at\n#  http:\/\/opensource.org\/licenses\/bsd-license.php\n#\n#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.\n#\n\n##\n# Import Modules\n#\nimport RuleSimpleFile\nimport RuleComplexFile\nimport Section\nimport OptionRom\nimport Common.GlobalData as GlobalData\n\nfrom Common.DataType import *\nfrom Common.String import *\nfrom FfsInfStatement import FfsInfStatement\nfrom GenFdsGlobalVariable import GenFdsGlobalVariable\n\n##\n#\n#\nclass OptRomInfStatement (FfsInfStatement):\n    ## The constructor\n    #\n    #   @param  self        The object pointer\n    #\n    def __init__(self):\n        FfsInfStatement.__init__(self)\n        self.OverrideAttribs = None\n\n    ## __GetOptRomParams() method\n    #\n    #   Parse inf file to get option ROM related parameters\n    #\n    #   @param  self        The object pointer\n    #\n    def __GetOptRomParams(self):\n\n        if self.OverrideAttribs == None:\n            self.OverrideAttribs = OptionRom.OverrideAttribs()\n\n        if self.OverrideAttribs.NeedCompress == None:\n            self.OverrideAttribs.NeedCompress = self.OptRomDefs.get ('PCI_COMPRESS')\n            if self.OverrideAttribs.NeedCompress is not None:\n                if self.OverrideAttribs.NeedCompress.upper() not in ('TRUE', 'FALSE'):\n                    GenFdsGlobalVariable.ErrorLogger( \"Expected TRUE\/FALSE for PCI_COMPRESS: %s\" %self.InfFileName)\n                self.OverrideAttribs.NeedCompress = \\\n                    self.OverrideAttribs.NeedCompress.upper() == 'TRUE'\n\n        if self.OverrideAttribs.PciVendorId == None:\n            self.OverrideAttribs.PciVendorId = self.OptRomDefs.get ('PCI_VENDOR_ID')\n\n        if self.OverrideAttribs.PciClassCode == None:\n            self.OverrideAttribs.PciClassCode = self.OptRomDefs.get ('PCI_CLASS_CODE')\n\n        if self.OverrideAttribs.PciDeviceId == None:\n            self.OverrideAttribs.PciDeviceId = self.OptRomDefs.get ('PCI_DEVICE_ID')\n\n        if self.OverrideAttribs.PciRevision == None:\n            self.OverrideAttribs.PciRevision = self.OptRomDefs.get ('PCI_REVISION')\n\n#        InfObj = GenFdsGlobalVariable.WorkSpace.BuildObject[self.PathClassObj, self.CurrentArch]\n#        RecordList = InfObj._RawData[MODEL_META_DATA_HEADER, InfObj._Arch, InfObj._Platform]\n#        for Record in RecordList:\n#            Record = ReplaceMacros(Record, GlobalData.gEdkGlobal, False)\n#            Name = Record[0]\n    ## GenFfs() method\n    #\n    #   Generate FFS\n    #\n    #   @param  self        The object pointer\n    #   @retval string      Generated .efi file name\n    #\n    def GenFfs(self):\n        #\n        # Parse Inf file get Module related information\n        #\n\n        self.__InfParse__()\n        self.__GetOptRomParams()\n        #\n        # Get the rule of how to generate Ffs file\n        #\n        Rule = self.__GetRule__()\n        GenFdsGlobalVariable.VerboseLogger( \"Packing binaries from inf file : %s\" %self.InfFileName)\n        #FileType = Ffs.Ffs.ModuleTypeToFileType[Rule.ModuleType]\n        #\n        # For the rule only has simpleFile\n        #\n        if isinstance (Rule, RuleSimpleFile.RuleSimpleFile) :\n            EfiOutputList = self.__GenSimpleFileSection__(Rule)\n            return EfiOutputList\n        #\n        # For Rule has ComplexFile\n        #\n        elif isinstance(Rule, RuleComplexFile.RuleComplexFile):\n            EfiOutputList = self.__GenComplexFileSection__(Rule)\n            return EfiOutputList\n\n    ## __GenSimpleFileSection__() method\n    #\n    #   Get .efi files according to simple rule.\n    #\n    #   @param  self        The object pointer\n    #   @param  Rule        The rule object used to generate section\n    #   @retval string      File name of the generated section file\n    #\n    def __GenSimpleFileSection__(self, Rule):\n        #\n        # Prepare the parameter of GenSection\n        #\n\n        OutputFileList = []\n        if Rule.FileName != None:\n            GenSecInputFile = self.__ExtendMacro__(Rule.FileName)\n            OutputFileList.append(GenSecInputFile)\n        else:\n            OutputFileList, IsSect = Section.Section.GetFileList(self, '', Rule.FileExtension)\n\n        return OutputFileList\n\n\n    ## __GenComplexFileSection__() method\n    #\n    #   Get .efi by sections in complex Rule\n    #\n    #   @param  self        The object pointer\n    #   @param  Rule        The rule object used to generate section\n    #   @retval string      File name of the generated section file\n    #\n    def __GenComplexFileSection__(self, Rule):\n\n        OutputFileList = []\n        for Sect in Rule.SectionList:\n            if Sect.SectionType == 'PE32':\n                if Sect.FileName != None:\n                    GenSecInputFile = self.__ExtendMacro__(Sect.FileName)\n                    OutputFileList.append(GenSecInputFile)\n                else:\n                    FileList, IsSect = Section.Section.GetFileList(self, '', Sect.FileExtension)\n                    OutputFileList.extend(FileList)\n\n        return OutputFileList\n\n    ","tok_input_length":1381,"tok_output_length":1255,"system_prompt":"","index":15901}
{"question":"The given code is a Python class called SecureRemoteLauncher that has several methods. To use this class, you need to import the necessary modules and create an instance of the class. Once you have an instance, you can call its methods to perform various tasks. \n\nTo create an instance of the SecureRemoteLauncher class, you need to provide a mapping file path as an argument to the constructor. \n\nTo create a port forwarding ssh tunnel, you can call the createTunnelOnRemotePort method of the SecureRemoteLauncher instance and provide it with a transport object, a remote host, and a port number. \n\nTo rewrite the mapping file with the current session map, you can call the updateMappingFile method of the SecureRemoteLauncher instance. \n\nTo wait for a process to exit so that you can end the tunnel thread and then end the waiting thread by returning from the function, you can call the waitOnChannelExitStatus method of the SecureRemoteLauncher instance and provide it with a channel, a session ID, and a tunnel. \n\nTo start pvweb on a remote machine until you successfully start on a port, you can call the startPvwebOnOpenPortInRange method of the SecureRemoteLauncher instance and provide it with a transport object, a remote host, a file to load, and a port range. This method will try to start pvweb on a port within the given range and return a session ID and the port number if successful.","input":"","expected_output":"\nimport paramiko\nimport select\nimport argparse\nimport sys\nimport threading\nimport uuid\nimport tempfile\nimport os\nimport getpass\n\nfrom ForwardSshTunnel import ForwardSshTunnel\n\n\nclass SecureRemoteLauncher(object) :\n\n    #-------------------------------------------------------------------------\n    # SecureRemoteLauncher constructor\n    #-------------------------------------------------------------------------\n    def __init__(self, mapFilePath) :\n        self.mappingFilePath = mapFilePath\n        self.sessionMap = {}\n\n    #-------------------------------------------------------------------------\n    # Create a port forwarding ssh tunnel\n    #-------------------------------------------------------------------------\n    def createTunnelOnRemotePort(self, transport, host, port) :\n        print 'Create a tunnel on remote port ' + str(port)\n\n        try:\n            tunnel = ForwardSshTunnel(port,       # local port\n                                      host,       # remote host\n                                      port,       # remote port\n                                      transport)  # SSHClient Transport object\n            tunnel.establishForwardTunnel()\n        except KeyboardInterrupt:\n            print 'C-c: Port forwarding stopped.'\n        except Exception as inst :\n            print 'Encountered exception in forwarding'\n            print inst\n\n        print 'Returning from createTunnelOnRemotePort()'\n        return tunnel\n\n    #-------------------------------------------------------------------------\n    # Rewrite the mapping file with the current session map\n    #-------------------------------------------------------------------------\n    def updateMappingFile(self) :\n        with open(self.mappingFilePath, 'w') as outfile :\n            for session in self.sessionMap :\n                outfile.write(session + ' ' + self.sessionMap[session] + '\\n')\n\n    #-------------------------------------------------------------------------\n    # Wait for process to exit so that when it does we can end the tunnel\n    # thread and then end this waiting thread by returning from this\n    # function\n    #-------------------------------------------------------------------------\n    def waitOnChannelExitStatus(self, channel, sessionId, tunnel) :\n        # This call will block until channel process has finished\n        processReturnVal = channel.recv_exit_status()\n\n        # Now make sure to kill the thread which is running the port\n        # forwarding ssh tunnel\n        print 'Channel exit status ready, process has terminated'\n        if tunnel is not None :\n            print 'Attempting to end tunnel request loop...'\n            tunnel.terminateRequestLoop()\n\n        # Next remove this session from the map\n        del self.sessionMap[sessionId]\n\n        # Finally rewrite the map file with the updated session info\n        self.updateMappingFile()\n\n        print 'Returning from wait thread'\n\n    #-------------------------------------------------------------------------\n    # Try to start pvweb on remote machine until we successfully start on a\n    # port.\n    #-------------------------------------------------------------------------\n    def startPvwebOnOpenPortInRange(self, transport, remoteHost, fileToLoad, portRange) :\n        #port = random.randrange(portRange[0], portRange[1], 1)\n        port = 9010\n\n        # Works on mayall\n        #cmdFirstPart = 'export LD_LIBRARY_PATH=\/opt\/python-2.7.3\/lib ; export DISPLAY=:0.0 ; \/home\/kitware\/projects\/ParaView\/build-make-gpu\/bin\/pvpython \/home\/kitware\/projects\/ParaView\/build-make-gpu\/lib\/site-packages\/paraview\/web\/pv_web_visualizer.py --data-dir \/home\/kitware\/Documents\/haloregions --port '\n\n        # Works on solaris\n        cmdFirstPart = 'export DISPLAY=:0.0 ; \/home\/scott\/projects\/ParaView\/build-make-gpu\/bin\/pvpython \/home\/scott\/projects\/ParaView\/build-make-gpu\/lib\/site-packages\/paraview\/web\/pv_web_visualizer.py --data-dir \/home\/scott\/Documents\/cosmodata\/haloregions --port '\n\n        started = False\n\n        while started == False :\n\n            cmd = cmdFirstPart + str(port) + ' --load-file ' + fileToLoad + ' -f'\n\n            channel = transport.open_session()\n            channel.exec_command(cmd)\n\n            characters = ''\n\n            while True:\n                if channel.exit_status_ready():\n                    break\n\n                rl, wl, xl = select.select([channel],[],[],0.0)\n\n                if len(rl) > 0 :\n                    characters = channel.recv(1024)\n\n                    if 'CannotListenError' in characters or 'Address already in use' in characters :\n                        print 'port ' + str(port) + ' is already being used'\n                    elif ('tarting on ' + str(port)) in characters:\n                        print 'Ahh, we have finally started on port ' + str(port)\n\n                        # write the mapping file here\n                        sessionId = str(uuid.uuid1())\n                        connectStr = 'localhost:' + str(port)\n                        self.sessionMap[sessionId] = connectStr\n                        self.updateMappingFile()\n                        tunnel = self.createTunnelOnRemotePort(transport, remoteHost, port)\n                        print 'Have now returned from readyCallback() !!!!'\n                        t = threading.Thread(target=self.waitOnChannelExitStatus,\n                                             args=[channel, sessionId, tunnel],\n                                             kwargs={})\n                        t.start()\n                        print 'wait thread started, returning from startPvwebOnOpenPortInRange()'\n                        return (sessionId, port)\n                        started = True\n\n            if started == False :\n                #port = random.randrange(portRange[0], portRange[1], 1)\n                port += 1\n\n        print 'Returning from startPvwebOnOpenPortInRange()'\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python class called SecureRemoteLauncher that has several methods. To use this class, you need to import the necessary modules and create an instance of the class. Once you have an instance, you can call its methods to perform various tasks. \n\nTo create an instance of the SecureRemoteLauncher class, you need to provide a mapping file path as an argument to the constructor. \n\nTo create a port forwarding ssh tunnel, you can call the createTunnelOnRemotePort method of the SecureRemoteLauncher instance and provide it with a transport object, a remote host, and a port number. \n\nTo rewrite the mapping file with the current session map, you can call the updateMappingFile method of the SecureRemoteLauncher instance. \n\nTo wait for a process to exit so that you can end the tunnel thread and then end the waiting thread by returning from the function, you can call the waitOnChannelExitStatus method of the SecureRemoteLauncher instance and provide it with a channel, a session ID, and a tunnel. \n\nTo start pvweb on a remote machine until you successfully start on a port, you can call the startPvwebOnOpenPortInRange method of the SecureRemoteLauncher instance and provide it with a transport object, a remote host, a file to load, and a port range. This method will try to start pvweb on a port within the given range and return a session ID and the port number if successful.\n\n### Input:\n\n\n### Output:\n\nimport paramiko\nimport select\nimport argparse\nimport sys\nimport threading\nimport uuid\nimport tempfile\nimport os\nimport getpass\n\nfrom ForwardSshTunnel import ForwardSshTunnel\n\n\nclass SecureRemoteLauncher(object) :\n\n    #-------------------------------------------------------------------------\n    # SecureRemoteLauncher constructor\n    #-------------------------------------------------------------------------\n    def __init__(self, mapFilePath) :\n        self.mappingFilePath = mapFilePath\n        self.sessionMap = {}\n\n    #-------------------------------------------------------------------------\n    # Create a port forwarding ssh tunnel\n    #-------------------------------------------------------------------------\n    def createTunnelOnRemotePort(self, transport, host, port) :\n        print 'Create a tunnel on remote port ' + str(port)\n\n        try:\n            tunnel = ForwardSshTunnel(port,       # local port\n                                      host,       # remote host\n                                      port,       # remote port\n                                      transport)  # SSHClient Transport object\n            tunnel.establishForwardTunnel()\n        except KeyboardInterrupt:\n            print 'C-c: Port forwarding stopped.'\n        except Exception as inst :\n            print 'Encountered exception in forwarding'\n            print inst\n\n        print 'Returning from createTunnelOnRemotePort()'\n        return tunnel\n\n    #-------------------------------------------------------------------------\n    # Rewrite the mapping file with the current session map\n    #-------------------------------------------------------------------------\n    def updateMappingFile(self) :\n        with open(self.mappingFilePath, 'w') as outfile :\n            for session in self.sessionMap :\n                outfile.write(session + ' ' + self.sessionMap[session] + '\\n')\n\n    #-------------------------------------------------------------------------\n    # Wait for process to exit so that when it does we can end the tunnel\n    # thread and then end this waiting thread by returning from this\n    # function\n    #-------------------------------------------------------------------------\n    def waitOnChannelExitStatus(self, channel, sessionId, tunnel) :\n        # This call will block until channel process has finished\n        processReturnVal = channel.recv_exit_status()\n\n        # Now make sure to kill the thread which is running the port\n        # forwarding ssh tunnel\n        print 'Channel exit status ready, process has terminated'\n        if tunnel is not None :\n            print 'Attempting to end tunnel request loop...'\n            tunnel.terminateRequestLoop()\n\n        # Next remove this session from the map\n        del self.sessionMap[sessionId]\n\n        # Finally rewrite the map file with the updated session info\n        self.updateMappingFile()\n\n        print 'Returning from wait thread'\n\n    #-------------------------------------------------------------------------\n    # Try to start pvweb on remote machine until we successfully start on a\n    # port.\n    #-------------------------------------------------------------------------\n    def startPvwebOnOpenPortInRange(self, transport, remoteHost, fileToLoad, portRange) :\n        #port = random.randrange(portRange[0], portRange[1], 1)\n        port = 9010\n\n        # Works on mayall\n        #cmdFirstPart = 'export LD_LIBRARY_PATH=\/opt\/python-2.7.3\/lib ; export DISPLAY=:0.0 ; \/home\/kitware\/projects\/ParaView\/build-make-gpu\/bin\/pvpython \/home\/kitware\/projects\/ParaView\/build-make-gpu\/lib\/site-packages\/paraview\/web\/pv_web_visualizer.py --data-dir \/home\/kitware\/Documents\/haloregions --port '\n\n        # Works on solaris\n        cmdFirstPart = 'export DISPLAY=:0.0 ; \/home\/scott\/projects\/ParaView\/build-make-gpu\/bin\/pvpython \/home\/scott\/projects\/ParaView\/build-make-gpu\/lib\/site-packages\/paraview\/web\/pv_web_visualizer.py --data-dir \/home\/scott\/Documents\/cosmodata\/haloregions --port '\n\n        started = False\n\n        while started == False :\n\n            cmd = cmdFirstPart + str(port) + ' --load-file ' + fileToLoad + ' -f'\n\n            channel = transport.open_session()\n            channel.exec_command(cmd)\n\n            characters = ''\n\n            while True:\n                if channel.exit_status_ready():\n                    break\n\n                rl, wl, xl = select.select([channel],[],[],0.0)\n\n                if len(rl) > 0 :\n                    characters = channel.recv(1024)\n\n                    if 'CannotListenError' in characters or 'Address already in use' in characters :\n                        print 'port ' + str(port) + ' is already being used'\n                    elif ('tarting on ' + str(port)) in characters:\n                        print 'Ahh, we have finally started on port ' + str(port)\n\n                        # write the mapping file here\n                        sessionId = str(uuid.uuid1())\n                        connectStr = 'localhost:' + str(port)\n                        self.sessionMap[sessionId] = connectStr\n                        self.updateMappingFile()\n                        tunnel = self.createTunnelOnRemotePort(transport, remoteHost, port)\n                        print 'Have now returned from readyCallback() !!!!'\n                        t = threading.Thread(target=self.waitOnChannelExitStatus,\n                                             args=[channel, sessionId, tunnel],\n                                             kwargs={})\n                        t.start()\n                        print 'wait thread started, returning from startPvwebOnOpenPortInRange()'\n                        return (sessionId, port)\n                        started = True\n\n            if started == False :\n                #port = random.randrange(portRange[0], portRange[1], 1)\n                port += 1\n\n        print 'Returning from startPvwebOnOpenPortInRange()'\n","tok_input_length":1421,"tok_output_length":1102,"system_prompt":"","index":12850}
{"question":"Create a TimeTracker class that extends Thread. Initialize the class with _stat, _categories, _activities, and _configuration parameters. The class has a run method that tracks user activities. If the learning mode is active, only append an activity. If the last activity is the same, just actualize the end time. If it's a new activity, actualize the lastActivity and append the new activity. The class has a stop method that stops the tracking system. The class has a getCorrectCategory method that finds out the category where the activity belongs to. If the activity isn't in any category, set the category to 'OTHER'. If the activity is in exactly one category, set the category to that category's name. If the activity is in more than one category, ask the user where the activity belongs to. The class has an askUser method that creates a notification and asks the user where the activity belongs to. The class has a getUserAnswer method that processes the user's answer and delegates the result.","input":"","expected_output":"#!\/usr\/bin\/env python2.7\n#-*- coding: UTF-8 -*-\n\nfrom category import Category\nfrom gi.repository import Wnck, Gdk, Gtk, GObject, Notify, GLib\nfrom activityrecord import ActivityRecord\nfrom threading import Thread, Event\nfrom time import sleep, time\nimport copy\n\nclass TimeTracker(Thread):\n    \"\"\"Core module of this project. It's running in separated thread\n    to not block GUI.\"\"\"\n    stopthread = Event()\n    track = Event()\n    mode = Event()\n    \n    def __init__(self, _stat, _categories, _activities, _configuration):\n        Thread.__init__(self)\n        self.categories = _categories\n        self.activities = _activities\n        self.stat = _stat\n        self.lastActivity = ActivityRecord()\n        self.screen = Wnck.Screen.get_default()\n        self.n = Notify.Notification()\n        self.tmpName = ''\n        \n        if _configuration.getValue('state'):\n            self.track.set()\n        else:\n            self.track.clear()\n            \n        if _configuration.getValue('mode'):\n            self.mode.set()\n        else:\n            self.mode.clear()\n        \n    def run(self):\n        \"\"\"Start tracking user activities\"\"\"\n        \n        while not self.stopthread.isSet():\n            sleep(1)\n            \n            \"\"\"Skip tracking if it's disabled\"\"\"\n            if not self.track.isSet():\n                continue\n                \n            Gdk.threads_enter()\n            GObject.idle_add(self.screen.force_update)\n            active_window = self.screen.get_active_window()\n\n            \"\"\"Skip if there is no active window\"\"\"\n            if active_window == None:\n                Gdk.threads_leave()\n                continue\n            \n            appName = active_window.get_application().get_name()\n            appPid = active_window.get_application().get_pid()\n            \n            \"\"\"If the learning mode is activive, only append an activity\"\"\"\n            if self.mode.isSet():\n                self.activities.addActivity(appName)\n                Gdk.threads_leave()\n                continue\n            \n            if self.lastActivity.getActivity().getPid() == appPid:\n                \"\"\"Still the same activity, just actualize the end time\"\"\"\n                self.lastActivity.setEndTime(time())\n                \n            else:\n                \"\"\"New activity, actualize the lastActivity and append\n                the new activity\"\"\"\n                if self.lastActivity.getActivity().getPid() != 0:\n                    tmp = copy.deepcopy(self.lastActivity)\n                    self.stat.appendActivityRecord(tmp)\n                    self.activities.addActivity(tmp.getActivity().getName())\n                    print \"DBG: Zmena aktivity! Ulozena aktivita %s (%s)\" % (tmp.getActivity().getName(), tmp.getCategory())\n\n                self.lastActivity.getActivity().setName(appName)\n                self.lastActivity.getActivity().setPid(appPid)\n                self.lastActivity.setCategory('OTHER')\n                self.getCorrectCategory()\n                self.lastActivity.setStartTime(time())\n                self.lastActivity.setEndTime(time())\n                \n            Gdk.threads_leave()\n           \n        if self.track.isSet() and not self.mode.isSet():\n            tmp = copy.deepcopy(self.lastActivity)\n            self.stat.appendActivityRecord(tmp)\n            print \"DBG: Ulozena aktivita %s (%s)\" % (tmp.getActivity().getName(), tmp.getCategory())\n        \n        \"\"\"Store all records to file to make them persistent\"\"\"\n        self.stat.storeRecords()\n        self.activities.storeActivities()\n\n    def stop(self):\n        \"\"\"Stop the tracking system, uses id stored in initialization\"\"\"\n        self.stopthread.set()\n        \n    def getCorrectCategory(self, _activity = None):\n        \"\"\"Find out category where the activity belongs to\"\"\"\n        if _activity == None:\n            _activity = self.lastActivity.getActivity()\n\n        activityCategories = self.categories.getContainingCategories(_activity)\n        if len(activityCategories) == 0:\n            \"\"\"The activity isn't in any category\"\"\"\n            self.lastActivity.setCategory('OTHER')\n        elif len(activityCategories) == 1:\n            \"\"\"The activity is in exactly one category\"\"\"\n            self.lastActivity.setCategory(activityCategories[0].name)\n        else:\n            \"\"\"The activity is in more than one category.\n            The Waktu needs to ask user.\"\"\"\n            lastOccurrence = self.stat.getLastOccurrence(_activity.getName())\n            if lastOccurrence == None or (time() - lastOccurrence.getEndTime()) > 600 : # 10 minutes is the default time to remember users choice \n                self.askUser(_activity, activityCategories)\n            else:\n                self.lastActivity.setCategory(lastOccurrence.getCategory()) \n\n    def askUser(self, _activity, _categories):\n        \"\"\"Creates a notification and asks a user where the activity belongs to\"\"\"\n        if not Notify.is_initted():\n            Notify.init('Waktu')\n            \n        self.n.clear_hints()\n        self.n.clear_actions()\n        self.n.set_property('summary','Kam pat\u0159\u00ed aktivita %s?' % _activity.getName())\n        self.n.set_property('body', 'Zd\u00e1 se, \u017ee tuto aktivitu m\u00e1te zvolenou ve v\u00edce kategori\u00edch. Zvolte, pros\u00edm, n\u00ed\u017ee jednu, do kter\u00e9 spad\u00e1 tato aktivita pr\u00e1ve te\u010f.')\n        self.n.set_property('icon_name','dialog-question')\n        self.n.set_urgency(Notify.Urgency.NORMAL)\n        self.n.set_timeout(Notify.EXPIRES_NEVER)\n        self.n.set_hint(\"resident\", GLib.Variant('b',True))\n        \n        for cat in _categories:\n            self.n.add_action(cat.name, cat.name, self.getUserAnswer, _activity, None)\n\n        self.n.add_action(\"OTHER\", \"Jinam\", self.getUserAnswer, _activity, None)\n        \n        self.n.show()\n        \n    def getUserAnswer(self, n, _action, _data):\n        \"\"\"Process user answer and delegate result\"\"\"\n        n.close()\n        \n        if self.lastActivity.getActivity().getName() == _data.getName():\n            \"\"\"The focused app is still the same\"\"\"\n            self.lastActivity.setCategory(_action)\n        else:\n            \"\"\"There is another activity, need to find it backwards\"\"\"\n            self.stat.getLastOccurrence(_data.getName()).setCategory(_action)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a TimeTracker class that extends Thread. Initialize the class with _stat, _categories, _activities, and _configuration parameters. The class has a run method that tracks user activities. If the learning mode is active, only append an activity. If the last activity is the same, just actualize the end time. If it's a new activity, actualize the lastActivity and append the new activity. The class has a stop method that stops the tracking system. The class has a getCorrectCategory method that finds out the category where the activity belongs to. If the activity isn't in any category, set the category to 'OTHER'. If the activity is in exactly one category, set the category to that category's name. If the activity is in more than one category, ask the user where the activity belongs to. The class has an askUser method that creates a notification and asks the user where the activity belongs to. The class has a getUserAnswer method that processes the user's answer and delegates the result.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python2.7\n#-*- coding: UTF-8 -*-\n\nfrom category import Category\nfrom gi.repository import Wnck, Gdk, Gtk, GObject, Notify, GLib\nfrom activityrecord import ActivityRecord\nfrom threading import Thread, Event\nfrom time import sleep, time\nimport copy\n\nclass TimeTracker(Thread):\n    \"\"\"Core module of this project. It's running in separated thread\n    to not block GUI.\"\"\"\n    stopthread = Event()\n    track = Event()\n    mode = Event()\n    \n    def __init__(self, _stat, _categories, _activities, _configuration):\n        Thread.__init__(self)\n        self.categories = _categories\n        self.activities = _activities\n        self.stat = _stat\n        self.lastActivity = ActivityRecord()\n        self.screen = Wnck.Screen.get_default()\n        self.n = Notify.Notification()\n        self.tmpName = ''\n        \n        if _configuration.getValue('state'):\n            self.track.set()\n        else:\n            self.track.clear()\n            \n        if _configuration.getValue('mode'):\n            self.mode.set()\n        else:\n            self.mode.clear()\n        \n    def run(self):\n        \"\"\"Start tracking user activities\"\"\"\n        \n        while not self.stopthread.isSet():\n            sleep(1)\n            \n            \"\"\"Skip tracking if it's disabled\"\"\"\n            if not self.track.isSet():\n                continue\n                \n            Gdk.threads_enter()\n            GObject.idle_add(self.screen.force_update)\n            active_window = self.screen.get_active_window()\n\n            \"\"\"Skip if there is no active window\"\"\"\n            if active_window == None:\n                Gdk.threads_leave()\n                continue\n            \n            appName = active_window.get_application().get_name()\n            appPid = active_window.get_application().get_pid()\n            \n            \"\"\"If the learning mode is activive, only append an activity\"\"\"\n            if self.mode.isSet():\n                self.activities.addActivity(appName)\n                Gdk.threads_leave()\n                continue\n            \n            if self.lastActivity.getActivity().getPid() == appPid:\n                \"\"\"Still the same activity, just actualize the end time\"\"\"\n                self.lastActivity.setEndTime(time())\n                \n            else:\n                \"\"\"New activity, actualize the lastActivity and append\n                the new activity\"\"\"\n                if self.lastActivity.getActivity().getPid() != 0:\n                    tmp = copy.deepcopy(self.lastActivity)\n                    self.stat.appendActivityRecord(tmp)\n                    self.activities.addActivity(tmp.getActivity().getName())\n                    print \"DBG: Zmena aktivity! Ulozena aktivita %s (%s)\" % (tmp.getActivity().getName(), tmp.getCategory())\n\n                self.lastActivity.getActivity().setName(appName)\n                self.lastActivity.getActivity().setPid(appPid)\n                self.lastActivity.setCategory('OTHER')\n                self.getCorrectCategory()\n                self.lastActivity.setStartTime(time())\n                self.lastActivity.setEndTime(time())\n                \n            Gdk.threads_leave()\n           \n        if self.track.isSet() and not self.mode.isSet():\n            tmp = copy.deepcopy(self.lastActivity)\n            self.stat.appendActivityRecord(tmp)\n            print \"DBG: Ulozena aktivita %s (%s)\" % (tmp.getActivity().getName(), tmp.getCategory())\n        \n        \"\"\"Store all records to file to make them persistent\"\"\"\n        self.stat.storeRecords()\n        self.activities.storeActivities()\n\n    def stop(self):\n        \"\"\"Stop the tracking system, uses id stored in initialization\"\"\"\n        self.stopthread.set()\n        \n    def getCorrectCategory(self, _activity = None):\n        \"\"\"Find out category where the activity belongs to\"\"\"\n        if _activity == None:\n            _activity = self.lastActivity.getActivity()\n\n        activityCategories = self.categories.getContainingCategories(_activity)\n        if len(activityCategories) == 0:\n            \"\"\"The activity isn't in any category\"\"\"\n            self.lastActivity.setCategory('OTHER')\n        elif len(activityCategories) == 1:\n            \"\"\"The activity is in exactly one category\"\"\"\n            self.lastActivity.setCategory(activityCategories[0].name)\n        else:\n            \"\"\"The activity is in more than one category.\n            The Waktu needs to ask user.\"\"\"\n            lastOccurrence = self.stat.getLastOccurrence(_activity.getName())\n            if lastOccurrence == None or (time() - lastOccurrence.getEndTime()) > 600 : # 10 minutes is the default time to remember users choice \n                self.askUser(_activity, activityCategories)\n            else:\n                self.lastActivity.setCategory(lastOccurrence.getCategory()) \n\n    def askUser(self, _activity, _categories):\n        \"\"\"Creates a notification and asks a user where the activity belongs to\"\"\"\n        if not Notify.is_initted():\n            Notify.init('Waktu')\n            \n        self.n.clear_hints()\n        self.n.clear_actions()\n        self.n.set_property('summary','Kam pat\u0159\u00ed aktivita %s?' % _activity.getName())\n        self.n.set_property('body', 'Zd\u00e1 se, \u017ee tuto aktivitu m\u00e1te zvolenou ve v\u00edce kategori\u00edch. Zvolte, pros\u00edm, n\u00ed\u017ee jednu, do kter\u00e9 spad\u00e1 tato aktivita pr\u00e1ve te\u010f.')\n        self.n.set_property('icon_name','dialog-question')\n        self.n.set_urgency(Notify.Urgency.NORMAL)\n        self.n.set_timeout(Notify.EXPIRES_NEVER)\n        self.n.set_hint(\"resident\", GLib.Variant('b',True))\n        \n        for cat in _categories:\n            self.n.add_action(cat.name, cat.name, self.getUserAnswer, _activity, None)\n\n        self.n.add_action(\"OTHER\", \"Jinam\", self.getUserAnswer, _activity, None)\n        \n        self.n.show()\n        \n    def getUserAnswer(self, n, _action, _data):\n        \"\"\"Process user answer and delegate result\"\"\"\n        n.close()\n        \n        if self.lastActivity.getActivity().getName() == _data.getName():\n            \"\"\"The focused app is still the same\"\"\"\n            self.lastActivity.setCategory(_action)\n        else:\n            \"\"\"There is another activity, need to find it backwards\"\"\"\n            self.stat.getLastOccurrence(_data.getName()).setCategory(_action)\n","tok_input_length":1472,"tok_output_length":1239,"system_prompt":"","index":7535}
{"question":"This code provides a Python class called \"Provider\" that generates user agent strings for various web browsers. To use this code, import the \"Provider\" class from this module and call its methods to generate user agent strings for specific browsers.","input":"","expected_output":"from __future__ import unicode_literals\nfrom . import BaseProvider\nfrom . import date_time\nfrom datetime import datetime\nimport random\n\n\nclass Provider(BaseProvider):\n    user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari')\n\n    windows_platform_tokens = (\n        'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1',\n        'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90',\n        'Windows 98', 'Windows 95', 'Windows CE'\n    )\n\n    linux_processors = ('i686', 'x86_64',)\n\n    mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC')\n\n    langs = ('en-US', 'sl-SI', 'it-IT')\n\n    @classmethod\n    def mac_processor(cls):\n        return cls.random_element(cls.mac_processors)\n\n    @classmethod\n    def linux_processor(cls):\n        return cls.random_element(cls.linux_processors)\n\n    @classmethod\n    def user_agent(cls):\n        name = cls.random_element(cls.user_agents)\n        return getattr(cls, name)()\n\n    @classmethod\n    def chrome(cls):\n        saf = str(random.randint(531, 536)) + str(random.randint(0, 2))\n\n        platforms = (\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def firefox(cls):\n        ver = (\n            'Gecko\/{0} Firefox\/{1}.0'.format(\n            date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)),\n            'Gecko\/{0} Firefox\/3.6.{1}'.format(\n                date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)),\n            'Gecko\/{0} Firefox\/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ),\n        )\n\n        platforms = (\n            \"({0}; {1}; rv:1.9.{2}.20) {3}\".format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)),\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def safari(cls):\n        saf = \"{0}.{1}.{2}\".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))\n        if random.randint(0, 1) == 0:\n            ver = \"{0}.{1}\".format(random.randint(4, 5), random.randint(0, 1))\n        else:\n            ver = \"{0}.0.{1}\".format(random.randint(4, 5), random.randint(1, 5))\n\n        platforms = (\n            '(Windows; U; {0}) AppleWebKit\/{1} (KHTML, like Gecko) Version\/{2} Safari\/{3}'.format(\n                cls.windows_platform_token(), saf, ver, saf),\n            '({0} rv:{1}.0; {2}) AppleWebKit\/{3} (KHTML, like Gecko) Version\/{4} Safari\/{5}'.format(\n                cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf),\n            '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit\/{3} (KHTML, like Gecko) Version\/{4}.0.5 Mobile\/8B{5} Safari\/6{6}'.format(\n                random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4),\n                random.randint(111, 119), saf\n            )\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def opera(cls):\n\n        platforms = (\n            '({0}; {1}) Presto\/2.9.{2} Version\/{3}.00'.format(\n                cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n            '({0}; {1}) Presto\/2.9.{2} Version\/{3}.00'.format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n        )\n\n        return 'Opera\/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms))\n\n    @classmethod\n    def internet_explorer(cls):\n        return 'Mozilla\/5.0 (compatible; MSIE {0}.0; {1}; Trident\/{2}.{3})'.format(\n            random.randint(5, 9),\n            cls.windows_platform_token(),\n            random.randint(3, 5),\n            random.randint(0, 1)\n        )\n\n    @classmethod\n    def windows_platform_token(cls):\n        return cls.random_element(cls.windows_platform_tokens)\n\n    @classmethod\n    def linux_platform_token(cls):\n        return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors))\n\n    @classmethod\n    def mac_platform_token(cls):\n        return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format(\n            cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code provides a Python class called \"Provider\" that generates user agent strings for various web browsers. To use this code, import the \"Provider\" class from this module and call its methods to generate user agent strings for specific browsers.\n\n### Input:\n\n\n### Output:\nfrom __future__ import unicode_literals\nfrom . import BaseProvider\nfrom . import date_time\nfrom datetime import datetime\nimport random\n\n\nclass Provider(BaseProvider):\n    user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari')\n\n    windows_platform_tokens = (\n        'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1',\n        'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90',\n        'Windows 98', 'Windows 95', 'Windows CE'\n    )\n\n    linux_processors = ('i686', 'x86_64',)\n\n    mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC')\n\n    langs = ('en-US', 'sl-SI', 'it-IT')\n\n    @classmethod\n    def mac_processor(cls):\n        return cls.random_element(cls.mac_processors)\n\n    @classmethod\n    def linux_processor(cls):\n        return cls.random_element(cls.linux_processors)\n\n    @classmethod\n    def user_agent(cls):\n        name = cls.random_element(cls.user_agents)\n        return getattr(cls, name)()\n\n    @classmethod\n    def chrome(cls):\n        saf = str(random.randint(531, 536)) + str(random.randint(0, 2))\n\n        platforms = (\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def firefox(cls):\n        ver = (\n            'Gecko\/{0} Firefox\/{1}.0'.format(\n            date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)),\n            'Gecko\/{0} Firefox\/3.6.{1}'.format(\n                date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)),\n            'Gecko\/{0} Firefox\/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ),\n        )\n\n        platforms = (\n            \"({0}; {1}; rv:1.9.{2}.20) {3}\".format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)),\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def safari(cls):\n        saf = \"{0}.{1}.{2}\".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))\n        if random.randint(0, 1) == 0:\n            ver = \"{0}.{1}\".format(random.randint(4, 5), random.randint(0, 1))\n        else:\n            ver = \"{0}.0.{1}\".format(random.randint(4, 5), random.randint(1, 5))\n\n        platforms = (\n            '(Windows; U; {0}) AppleWebKit\/{1} (KHTML, like Gecko) Version\/{2} Safari\/{3}'.format(\n                cls.windows_platform_token(), saf, ver, saf),\n            '({0} rv:{1}.0; {2}) AppleWebKit\/{3} (KHTML, like Gecko) Version\/{4} Safari\/{5}'.format(\n                cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf),\n            '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit\/{3} (KHTML, like Gecko) Version\/{4}.0.5 Mobile\/8B{5} Safari\/6{6}'.format(\n                random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4),\n                random.randint(111, 119), saf\n            )\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def opera(cls):\n\n        platforms = (\n            '({0}; {1}) Presto\/2.9.{2} Version\/{3}.00'.format(\n                cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n            '({0}; {1}) Presto\/2.9.{2} Version\/{3}.00'.format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n        )\n\n        return 'Opera\/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms))\n\n    @classmethod\n    def internet_explorer(cls):\n        return 'Mozilla\/5.0 (compatible; MSIE {0}.0; {1}; Trident\/{2}.{3})'.format(\n            random.randint(5, 9),\n            cls.windows_platform_token(),\n            random.randint(3, 5),\n            random.randint(0, 1)\n        )\n\n    @classmethod\n    def windows_platform_token(cls):\n        return cls.random_element(cls.windows_platform_tokens)\n\n    @classmethod\n    def linux_platform_token(cls):\n        return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors))\n\n    @classmethod\n    def mac_platform_token(cls):\n        return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format(\n            cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))\n\n","tok_input_length":1532,"tok_output_length":1458,"system_prompt":"","index":13768}
{"question":"This code is a Python script that defines a class called \"source\" with several methods for searching and retrieving movie and TV show sources from the website filmpalast.to. To use this code, import the \"source\" class and create an instance of it, then call its methods to search for and retrieve sources for specific movies or TV shows.","input":"","expected_output":"# -*- coding: UTF-8 -*-\n\n#  ..#######.########.#######.##....#..######..######.########....###...########.#######.########..######.\n#  .##.....#.##.....#.##......###...#.##....#.##....#.##.....#...##.##..##.....#.##......##.....#.##....##\n#  .##.....#.##.....#.##......####..#.##......##......##.....#..##...##.##.....#.##......##.....#.##......\n#  .##.....#.########.######..##.##.#..######.##......########.##.....#.########.######..########..######.\n#  .##.....#.##.......##......##..###.......#.##......##...##..########.##.......##......##...##........##\n#  .##.....#.##.......##......##...##.##....#.##....#.##....##.##.....#.##.......##......##....##.##....##\n#  ..#######.##.......#######.##....#..######..######.##.....#.##.....#.##.......#######.##.....#..######.\n\n#######################################################################\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# @Daddy_Blamo wrote this file.  As long as you retain this notice you\n# can do whatever you want with this stuff. If we meet some day, and you think\n# this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n# ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport json\nimport re\nimport urllib\nimport urlparse\n\nfrom openscrapers.modules import cleantitle\nfrom openscrapers.modules import client\nfrom openscrapers.modules import dom_parser\nfrom openscrapers.modules import source_utils\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['de']\n        self.domains = ['filmpalast.to']\n        self.base_link = 'http:\/\/filmpalast.to'\n        self.search_link = '\/search\/title\/%s'\n        self.stream_link = 'stream\/%s\/1'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = self.__search([localtitle] + source_utils.aliases_to_array(aliases))\n            if not url and title != localtitle: url = self.__search([title] + source_utils.aliases_to_array(aliases))\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'localtvshowtitle': localtvshowtitle,\n                   'aliases': aliases, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if not url:\n                return\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n            title = data['localtvshowtitle']\n            title += ' S%02dE%02d' % (int(season), int(episode))\n            aliases = source_utils.aliases_to_array(eval(data['aliases']))\n            aliases = [i + ' S%02dE%02d' % (int(season), int(episode)) for i in aliases]\n\n            url = self.__search([title] + aliases)\n            if not url and data['tvshowtitle'] != data['localtvshowtitle']:\n                title = data['tvshowtitle']\n                title += ' S%02dE%02d' % (int(season), int(episode))\n                url = self.__search([title] + aliases)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        sources = []\n\n        try:\n            if not url:\n                return sources\n\n            query = urlparse.urljoin(self.base_link, url)\n\n            r = client.request(query)\n\n            quality = dom_parser.parse_dom(r, 'span', attrs={'id': 'release_text'})[0].content.split('&nbsp;')[0]\n            quality, info = source_utils.get_release_quality(quality)\n\n            r = dom_parser.parse_dom(r, 'ul', attrs={'class': 'currentStreamLinks'})\n            r = [(dom_parser.parse_dom(i, 'p', attrs={'class': 'hostName'}),\n                  dom_parser.parse_dom(i, 'a', attrs={'class': 'stream-src'}, req='data-id')) for i in r]\n            r = [(re.sub(' hd$', '', i[0][0].content.lower()), [x.attrs['data-id'] for x in i[1]]) for i in r if\n                 i[0] and i[1]]\n\n            for hoster, id in r:\n                valid, hoster = source_utils.is_host_valid(hoster, hostDict)\n                if not valid: continue\n\n                sources.append({'source': hoster, 'quality': quality, 'language': 'de',\n                                'info': ' | '.join(info + ['' if len(id) == 1 else 'multi-part']), 'url': id,\n                                'direct': False, 'debridonly': False, 'checkquality': True})\n\n            return sources\n        except:\n            return sources\n\n    def resolve(self, url):\n        try:\n            h_url = []\n\n            for id in url:\n                query = urlparse.urljoin(self.base_link, self.stream_link % id)\n                r = client.request(query, XHR=True, post=urllib.urlencode({'streamID': id}))\n                r = json.loads(r)\n                if 'error' in r and r['error'] == '0' and 'url' in r:\n                    h_url.append(r['url'])\n\n            h_url = h_url[0] if len(h_url) == 1 else 'stack:\/\/' + ' , '.join(h_url)\n\n            return h_url\n        except:\n            return\n\n    def __search(self, titles):\n        try:\n            query = self.search_link % (urllib.quote_plus(titles[0]))\n            query = urlparse.urljoin(self.base_link, query)\n\n            t = [cleantitle.get(i) for i in set(titles) if i]\n\n            r = client.request(query)\n\n            r = dom_parser.parse_dom(r, 'article')\n            r = dom_parser.parse_dom(r, 'a', attrs={'class': 'rb'}, req='href')\n            r = [(i.attrs['href'], i.content) for i in r]\n            r = [i[0] for i in r if cleantitle.get(i[1]) in t][0]\n\n            return source_utils.strip_domain(r)\n        except:\n            return\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that defines a class called \"source\" with several methods for searching and retrieving movie and TV show sources from the website filmpalast.to. To use this code, import the \"source\" class and create an instance of it, then call its methods to search for and retrieve sources for specific movies or TV shows.\n\n### Input:\n\n\n### Output:\n# -*- coding: UTF-8 -*-\n\n#  ..#######.########.#######.##....#..######..######.########....###...########.#######.########..######.\n#  .##.....#.##.....#.##......###...#.##....#.##....#.##.....#...##.##..##.....#.##......##.....#.##....##\n#  .##.....#.##.....#.##......####..#.##......##......##.....#..##...##.##.....#.##......##.....#.##......\n#  .##.....#.########.######..##.##.#..######.##......########.##.....#.########.######..########..######.\n#  .##.....#.##.......##......##..###.......#.##......##...##..########.##.......##......##...##........##\n#  .##.....#.##.......##......##...##.##....#.##....#.##....##.##.....#.##.......##......##....##.##....##\n#  ..#######.##.......#######.##....#..######..######.##.....#.##.....#.##.......#######.##.....#..######.\n\n#######################################################################\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# @Daddy_Blamo wrote this file.  As long as you retain this notice you\n# can do whatever you want with this stuff. If we meet some day, and you think\n# this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n# ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport json\nimport re\nimport urllib\nimport urlparse\n\nfrom openscrapers.modules import cleantitle\nfrom openscrapers.modules import client\nfrom openscrapers.modules import dom_parser\nfrom openscrapers.modules import source_utils\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['de']\n        self.domains = ['filmpalast.to']\n        self.base_link = 'http:\/\/filmpalast.to'\n        self.search_link = '\/search\/title\/%s'\n        self.stream_link = 'stream\/%s\/1'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = self.__search([localtitle] + source_utils.aliases_to_array(aliases))\n            if not url and title != localtitle: url = self.__search([title] + source_utils.aliases_to_array(aliases))\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'localtvshowtitle': localtvshowtitle,\n                   'aliases': aliases, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if not url:\n                return\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n            title = data['localtvshowtitle']\n            title += ' S%02dE%02d' % (int(season), int(episode))\n            aliases = source_utils.aliases_to_array(eval(data['aliases']))\n            aliases = [i + ' S%02dE%02d' % (int(season), int(episode)) for i in aliases]\n\n            url = self.__search([title] + aliases)\n            if not url and data['tvshowtitle'] != data['localtvshowtitle']:\n                title = data['tvshowtitle']\n                title += ' S%02dE%02d' % (int(season), int(episode))\n                url = self.__search([title] + aliases)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        sources = []\n\n        try:\n            if not url:\n                return sources\n\n            query = urlparse.urljoin(self.base_link, url)\n\n            r = client.request(query)\n\n            quality = dom_parser.parse_dom(r, 'span', attrs={'id': 'release_text'})[0].content.split('&nbsp;')[0]\n            quality, info = source_utils.get_release_quality(quality)\n\n            r = dom_parser.parse_dom(r, 'ul', attrs={'class': 'currentStreamLinks'})\n            r = [(dom_parser.parse_dom(i, 'p', attrs={'class': 'hostName'}),\n                  dom_parser.parse_dom(i, 'a', attrs={'class': 'stream-src'}, req='data-id')) for i in r]\n            r = [(re.sub(' hd$', '', i[0][0].content.lower()), [x.attrs['data-id'] for x in i[1]]) for i in r if\n                 i[0] and i[1]]\n\n            for hoster, id in r:\n                valid, hoster = source_utils.is_host_valid(hoster, hostDict)\n                if not valid: continue\n\n                sources.append({'source': hoster, 'quality': quality, 'language': 'de',\n                                'info': ' | '.join(info + ['' if len(id) == 1 else 'multi-part']), 'url': id,\n                                'direct': False, 'debridonly': False, 'checkquality': True})\n\n            return sources\n        except:\n            return sources\n\n    def resolve(self, url):\n        try:\n            h_url = []\n\n            for id in url:\n                query = urlparse.urljoin(self.base_link, self.stream_link % id)\n                r = client.request(query, XHR=True, post=urllib.urlencode({'streamID': id}))\n                r = json.loads(r)\n                if 'error' in r and r['error'] == '0' and 'url' in r:\n                    h_url.append(r['url'])\n\n            h_url = h_url[0] if len(h_url) == 1 else 'stack:\/\/' + ' , '.join(h_url)\n\n            return h_url\n        except:\n            return\n\n    def __search(self, titles):\n        try:\n            query = self.search_link % (urllib.quote_plus(titles[0]))\n            query = urlparse.urljoin(self.base_link, query)\n\n            t = [cleantitle.get(i) for i in set(titles) if i]\n\n            r = client.request(query)\n\n            r = dom_parser.parse_dom(r, 'article')\n            r = dom_parser.parse_dom(r, 'a', attrs={'class': 'rb'}, req='href')\n            r = [(i.attrs['href'], i.content) for i in r]\n            r = [i[0] for i in r if cleantitle.get(i[1]) in t][0]\n\n            return source_utils.strip_domain(r)\n        except:\n            return\n","tok_input_length":1599,"tok_output_length":1502,"system_prompt":"","index":1061}
{"question":"The code is a Python script that checks for the latest episode of Bigg Boss 8 on colors.in.com. To use the script, run it from the command line with optional arguments for a custom search pattern or verbose output. The script will send a request to the server, get the page data as a string, and search for the latest episode link and episode list based on a pattern. If a new episode is found, the script will notify the user and print the link. Otherwise, it will print \"No new episode right now\". The script is free software under the GNU General Public License.","input":"","expected_output":"#!\/usr\/bin\/env python3\n#\n#   Copyright (c) 2014 Shubham Chaudhary <me@shubhamchaudhary.in>\n#\n#   This program is free software: you can redistribute it and\/or modify\n#   it under the terms of the GNU General Public License as published by\n#   the Free Software Foundation, either version 3 of the License, or\n#   (at your option) any later version.\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n#\n\nimport os\nimport os.path\nimport platform\nimport random\nimport re\nimport sys\nimport time\n\nif sys.version_info >= (3,):\n    import urllib.request as urllib2\n    import urllib.parse as urlparse\n    import urllib.error as urlerror\nelse:\n    import urllib2\n    import urlparse\n\n\ndef atoi(text):\n    return int(text) if text.isdigit() else text\n\ndef natural_keys(text):\n    '''\n    alist.sort(key=natural_keys) sorts in human order\n    http:\/\/nedbatchelder.com\/blog\/200712\/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''\n    return [atoi(c) for c in re.split('(\\d+)', text)]\n\ndef notify_user(message=None):\n    ''' Notify the user about a particular event with given message\n    '''\n    if not message:\n        message = 'Notification!!!'\n    #print('-'*len(message))\n    print('-'*int((len(message)-6)\/2), 'NOTIFICATION', '-'*int((len(message)-6)\/2))\n    print(message)\n\ndef get_page_data():\n    ''' Get page data as string from server\n    '''\n    print('Sending request to servers of Colors . . .')\n    full_url = 'http:\/\/colors.in.com\/in\/biggboss'\n    full_url = 'http:\/\/colors.in.com\/in\/biggboss\/videos\/episodes'\n    # Send request\n    try:\n        #res.geturl(), .url=str, .status=200, .info=200, .msg=OK,\n        response = urllib2.urlopen(full_url)\n    except urlerror.HTTPError as exep:\n        print('The server couldn\\'t fulfill the request.',\n              'Error code: ', exep.code)\n    except urlerror.URLError as exep:\n        print('We failed to reach a server.')\n        print('Reason: ', exep.reason)\n    else:\n        # everything is fine\n        #if verbose:\n        print('Data received, Decoding . . .')\n        web_page = str(response.read()) # More pythonic than .decode('utf-8')\n        return web_page\n\ndef get_link(web_page):\n    ''' Get Latest episode link\n    '''\n    month = time.strftime('%B')\n    new_link_pattern = r'http:\/\/colors.in.com\/in\/biggboss\/videos\/bigg-boss-8-full-episode\\d\\d-' + month.lower() + r'-\\d+\\w\\w-2014.*?.html'\n    #print('Checking: ', new_link_pattern)\n    link_reg = re.findall(new_link_pattern, web_page)\n    if link_reg:\n        #print(link_reg.group())\n        success_set = sorted(set(link_reg), key=natural_keys)\n        return success_set[-1]\n\ndef get_episode_list(web_page, new_episode_pattern=None):\n    ''' Get latest episode list from webpage\n    '''\n    if not new_episode_pattern:\n        ### PATTERN used by colors\n        #<li><a title=\"Bigg Boss 8, Full Episode-8, 29th September, 2014\"\n        #href=\"http:\/\/colors.in.com\/in\/biggboss\/videos\/bigg-boss-8-full-episode8-29th-october-2014-69087-2.html#nav\">\n        #http:\/\/colors.in.com\/in\/biggboss\/videos\/bigg-boss-8-full-episode23-november-14th-2014-10101036-2.html#nav\n        #Bigg Boss 8, Full Episode-8, 29th September, 2014<\/a><\/li>\n        #Bigg Boss 8, Full Episode-10, October 1st, 2014<\/a><\/li>\n        new_episode_pattern = time.strftime(r'%B-\\d+\\w\\w').lower()\n        month = time.strftime('%B')\n        new_episode_pattern = r'Bigg Boss \\d+, Full Episode-\\d+, ' + month + r' \\d+\\w\\w, 2014';\n        #new_episode_pattern = r'Bigg Boss \\d+, Full Episode-\\d+'\n\n    print('Checking for new episode with pattern:', new_episode_pattern)\n    success = re.findall(new_episode_pattern, web_page)\n    success_set = sorted(set(success), key=natural_keys)\n    return success_set\n\n\ndef check_biggboss_episode(new_episode_pattern=None, verbose=False):\n    ''' Check for the latest bigg boss episode\n    '''\n    web_page = get_page_data()\n    if verbose:\n        print('Page Received:\\n', web_page)\n    success_set = get_episode_list(web_page, new_episode_pattern)\n    # Parse for success or failure\n    print('Found:')\n    for item in success_set:\n        print('\\t', item)\n    current_date = int(time.strftime('%d'))\n    current_hour = int(time.strftime('%H'))\n    current_month = time.strftime('%B')\n\n    if (current_month.lower() in success_set[-1].lower() and (\n                (str(current_date) in success_set[-1] and\n                    (current_hour >= 20)) or\n                (str(current_date-1) in success_set[-1] and\n                    (current_hour >= 0 and current_hour < 20))\n                )\n            ):\n        msg = 'Found new episode online'\n        notify_user(msg)\n        latest_link = get_link(web_page)\n        if latest_link:\n            print('Here\\'s the link: ', latest_link)\n    else:\n        print('No new episode right now')\n\ndef main():\n    ''' Main function - Parse command line arguments\n    '''\n    from argparse import ArgumentParser\n    parser = ArgumentParser(prog='BiggBoss-checker')\n    parser.add_argument(\"-p\", \"--pattern\", type=str, dest=\"pattern\",\n                        help=\"Search for this pattern instead of default\")\n    parser.add_argument(\"-v\", \"--verbose\", dest=\"verbosity\",\n            action='store_true', default=False, help='Show verbose output')\n    args = parser.parse_args()\n\n    # Check input\n    try:\n        check_biggboss_episode(args.pattern, verbose=args.verbosity)\n    except:\n        raise\n    return 0\n\nif __name__ == '__main__':\n    try:\n        main()\n        if os.name == 'nt' or platform.system() == 'Windows':\n            input('Press Enter or Close the window to exit !')\n    except KeyboardInterrupt:\n        print('\\nClosing garacefully :)', sys.exc_info()[1])\n    except urlerror.HTTPError:\n        print('HTTP Error:', sys.exc_info()[1])\n    except SystemExit:\n        pass\n    except:\n        print('Unexpected Error:', sys.exc_info()[0])\n        print('Details:', sys.exc_info()[1])\n        raise\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code is a Python script that checks for the latest episode of Bigg Boss 8 on colors.in.com. To use the script, run it from the command line with optional arguments for a custom search pattern or verbose output. The script will send a request to the server, get the page data as a string, and search for the latest episode link and episode list based on a pattern. If a new episode is found, the script will notify the user and print the link. Otherwise, it will print \"No new episode right now\". The script is free software under the GNU General Public License.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python3\n#\n#   Copyright (c) 2014 Shubham Chaudhary <me@shubhamchaudhary.in>\n#\n#   This program is free software: you can redistribute it and\/or modify\n#   it under the terms of the GNU General Public License as published by\n#   the Free Software Foundation, either version 3 of the License, or\n#   (at your option) any later version.\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n#\n\nimport os\nimport os.path\nimport platform\nimport random\nimport re\nimport sys\nimport time\n\nif sys.version_info >= (3,):\n    import urllib.request as urllib2\n    import urllib.parse as urlparse\n    import urllib.error as urlerror\nelse:\n    import urllib2\n    import urlparse\n\n\ndef atoi(text):\n    return int(text) if text.isdigit() else text\n\ndef natural_keys(text):\n    '''\n    alist.sort(key=natural_keys) sorts in human order\n    http:\/\/nedbatchelder.com\/blog\/200712\/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''\n    return [atoi(c) for c in re.split('(\\d+)', text)]\n\ndef notify_user(message=None):\n    ''' Notify the user about a particular event with given message\n    '''\n    if not message:\n        message = 'Notification!!!'\n    #print('-'*len(message))\n    print('-'*int((len(message)-6)\/2), 'NOTIFICATION', '-'*int((len(message)-6)\/2))\n    print(message)\n\ndef get_page_data():\n    ''' Get page data as string from server\n    '''\n    print('Sending request to servers of Colors . . .')\n    full_url = 'http:\/\/colors.in.com\/in\/biggboss'\n    full_url = 'http:\/\/colors.in.com\/in\/biggboss\/videos\/episodes'\n    # Send request\n    try:\n        #res.geturl(), .url=str, .status=200, .info=200, .msg=OK,\n        response = urllib2.urlopen(full_url)\n    except urlerror.HTTPError as exep:\n        print('The server couldn\\'t fulfill the request.',\n              'Error code: ', exep.code)\n    except urlerror.URLError as exep:\n        print('We failed to reach a server.')\n        print('Reason: ', exep.reason)\n    else:\n        # everything is fine\n        #if verbose:\n        print('Data received, Decoding . . .')\n        web_page = str(response.read()) # More pythonic than .decode('utf-8')\n        return web_page\n\ndef get_link(web_page):\n    ''' Get Latest episode link\n    '''\n    month = time.strftime('%B')\n    new_link_pattern = r'http:\/\/colors.in.com\/in\/biggboss\/videos\/bigg-boss-8-full-episode\\d\\d-' + month.lower() + r'-\\d+\\w\\w-2014.*?.html'\n    #print('Checking: ', new_link_pattern)\n    link_reg = re.findall(new_link_pattern, web_page)\n    if link_reg:\n        #print(link_reg.group())\n        success_set = sorted(set(link_reg), key=natural_keys)\n        return success_set[-1]\n\ndef get_episode_list(web_page, new_episode_pattern=None):\n    ''' Get latest episode list from webpage\n    '''\n    if not new_episode_pattern:\n        ### PATTERN used by colors\n        #<li><a title=\"Bigg Boss 8, Full Episode-8, 29th September, 2014\"\n        #href=\"http:\/\/colors.in.com\/in\/biggboss\/videos\/bigg-boss-8-full-episode8-29th-october-2014-69087-2.html#nav\">\n        #http:\/\/colors.in.com\/in\/biggboss\/videos\/bigg-boss-8-full-episode23-november-14th-2014-10101036-2.html#nav\n        #Bigg Boss 8, Full Episode-8, 29th September, 2014<\/a><\/li>\n        #Bigg Boss 8, Full Episode-10, October 1st, 2014<\/a><\/li>\n        new_episode_pattern = time.strftime(r'%B-\\d+\\w\\w').lower()\n        month = time.strftime('%B')\n        new_episode_pattern = r'Bigg Boss \\d+, Full Episode-\\d+, ' + month + r' \\d+\\w\\w, 2014';\n        #new_episode_pattern = r'Bigg Boss \\d+, Full Episode-\\d+'\n\n    print('Checking for new episode with pattern:', new_episode_pattern)\n    success = re.findall(new_episode_pattern, web_page)\n    success_set = sorted(set(success), key=natural_keys)\n    return success_set\n\n\ndef check_biggboss_episode(new_episode_pattern=None, verbose=False):\n    ''' Check for the latest bigg boss episode\n    '''\n    web_page = get_page_data()\n    if verbose:\n        print('Page Received:\\n', web_page)\n    success_set = get_episode_list(web_page, new_episode_pattern)\n    # Parse for success or failure\n    print('Found:')\n    for item in success_set:\n        print('\\t', item)\n    current_date = int(time.strftime('%d'))\n    current_hour = int(time.strftime('%H'))\n    current_month = time.strftime('%B')\n\n    if (current_month.lower() in success_set[-1].lower() and (\n                (str(current_date) in success_set[-1] and\n                    (current_hour >= 20)) or\n                (str(current_date-1) in success_set[-1] and\n                    (current_hour >= 0 and current_hour < 20))\n                )\n            ):\n        msg = 'Found new episode online'\n        notify_user(msg)\n        latest_link = get_link(web_page)\n        if latest_link:\n            print('Here\\'s the link: ', latest_link)\n    else:\n        print('No new episode right now')\n\ndef main():\n    ''' Main function - Parse command line arguments\n    '''\n    from argparse import ArgumentParser\n    parser = ArgumentParser(prog='BiggBoss-checker')\n    parser.add_argument(\"-p\", \"--pattern\", type=str, dest=\"pattern\",\n                        help=\"Search for this pattern instead of default\")\n    parser.add_argument(\"-v\", \"--verbose\", dest=\"verbosity\",\n            action='store_true', default=False, help='Show verbose output')\n    args = parser.parse_args()\n\n    # Check input\n    try:\n        check_biggboss_episode(args.pattern, verbose=args.verbosity)\n    except:\n        raise\n    return 0\n\nif __name__ == '__main__':\n    try:\n        main()\n        if os.name == 'nt' or platform.system() == 'Windows':\n            input('Press Enter or Close the window to exit !')\n    except KeyboardInterrupt:\n        print('\\nClosing garacefully :)', sys.exc_info()[1])\n    except urlerror.HTTPError:\n        print('HTTP Error:', sys.exc_info()[1])\n    except SystemExit:\n        pass\n    except:\n        print('Unexpected Error:', sys.exc_info()[0])\n        print('Details:', sys.exc_info()[1])\n        raise\n","tok_input_length":1732,"tok_output_length":1584,"system_prompt":"","index":12274}
{"question":"The given code is a Python script that defines a class and several methods for handling cross-pod requests. To use this code, you should create an instance of the ConduitPOST class and call its methods to test different scenarios for cross-pod requests. The methods include tests for receiving requests with no shared secret header, requests with the wrong MIME type, requests with invalid JSON data, and requests with missing or unsupported actions. The code also includes a test for a successful cross-pod request with the \"ping\" action, and a test for a successful request with a custom \"fake\" action that is supported by the FakeConduit class. To run these tests, you will need to have the required dependencies installed and set up a test environment with a server and a store.","input":"","expected_output":"##\n# Copyright (c) 2005-2017 Apple Inc. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n##\n\nfrom twext.python.clsprop import classproperty\n\nimport txweb2.dav.test.util\nfrom txweb2 import http_headers, responsecode\nfrom txweb2.dav.util import allDataFromStream\nfrom txweb2.test.test_server import SimpleRequest\n\nfrom twisted.internet.defer import inlineCallbacks, succeed\n\nfrom txdav.caldav.datastore.scheduling.ischedule.localservers import (\n    ServersDB, Server\n)\nfrom txdav.common.datastore.podding.resource import ConduitResource\nfrom txdav.common.datastore.test.util import populateCalendarsFrom, CommonCommonTests\nimport json\nfrom txdav.common.datastore.podding.conduit import PoddingConduit\n\n\nclass ConduitPOST (CommonCommonTests, txweb2.dav.test.util.TestCase):\n\n    class FakeConduit(PoddingConduit):\n\n        def recv_fake(self, txn, j):\n            return succeed({\n                \"back2u\": j[\"echo\"],\n                \"more\": \"bits\",\n            })\n\n    @inlineCallbacks\n    def setUp(self):\n        yield super(ConduitPOST, self).setUp()\n\n        serversDB = ServersDB()\n        self.thisServer = Server(\"A\", \"http:\/\/127.0.0.1\", \"A\", True)\n        serversDB.addServer(self.thisServer)\n        yield self.buildStoreAndDirectory(serversDB=serversDB)\n\n        self.site.resource.putChild(\"conduit\", ConduitResource(self.site.resource, self.storeUnderTest()))\n\n        yield self.populate()\n\n    @inlineCallbacks\n    def populate(self):\n        yield populateCalendarsFrom(self.requirements, self.storeUnderTest())\n        self.notifierFactory.reset()\n\n    @classproperty(cache=False)\n    def requirements(cls):  # @NoSelf\n        return {\n            \"user01\": {\n                \"calendar_1\": {\n                },\n                \"inbox\": {\n                },\n            },\n            \"user02\": {\n                \"calendar_1\": {\n                },\n                \"inbox\": {\n                },\n            },\n            \"user03\": {\n                \"calendar_1\": {\n                },\n                \"inbox\": {\n                },\n            },\n        }\n\n    @inlineCallbacks\n    def test_receive_no_secret(self):\n        \"\"\"\n        Cross-pod request fails when there is no shared secret header present.\n        \"\"\"\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"text\/plain\",)\n            }),\n            content=\"\"\"Hello, World!\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.FORBIDDEN)\n\n    @inlineCallbacks\n    def test_receive_wrong_mime(self):\n        \"\"\"\n        Cross-pod request fails when Content-Type header is wrong.\n        \"\"\"\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"text\/plain\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"Hello, World!\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.BAD_REQUEST)\n\n    @inlineCallbacks\n    def test_receive_invalid_json(self):\n        \"\"\"\n        Cross-pod request fails when request data is not JSON.\n        \"\"\"\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"application\/json\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"Hello, World!\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.BAD_REQUEST)\n\n    @inlineCallbacks\n    def test_receive_bad_json(self):\n        \"\"\"\n        Cross-pod request fails when JSON data does not have an \"action\".\n        \"\"\"\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"application\/json\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"\n{\n    \"foo\":\"bar\"\n}\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.BAD_REQUEST)\n\n    @inlineCallbacks\n    def test_receive_ping(self):\n        \"\"\"\n        Cross-pod request works with the \"ping\" action.\n        \"\"\"\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"application\/json\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"\n{\n    \"action\":\"ping\"\n}\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.OK)\n        data = (yield allDataFromStream(response.stream))\n        j = json.loads(data)\n        self.assertTrue(\"result\" in j)\n        self.assertEqual(j[\"result\"], \"ok\")\n\n    @inlineCallbacks\n    def test_receive_fake_conduit_no_action(self):\n        \"\"\"\n        Cross-pod request fails when conduit does not support the action.\n        \"\"\"\n\n        store = self.storeUnderTest()\n        self.patch(store, \"conduit\", self.FakeConduit(store))\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"application\/json\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"\n{\n    \"action\":\"bogus\",\n    \"echo\":\"bravo\"\n}\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.BAD_REQUEST)\n\n    @inlineCallbacks\n    def test_receive_fake_conduit(self):\n        \"\"\"\n        Cross-pod request works when conduit does support the action.\n        \"\"\"\n\n        store = self.storeUnderTest()\n        self.patch(store, \"conduit\", self.FakeConduit(store))\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"application\/json\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"\n{\n    \"action\":\"fake\",\n    \"echo\":\"bravo\"\n}\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.OK)\n        data = (yield allDataFromStream(response.stream))\n        j = json.loads(data)\n        self.assertTrue(\"result\" in j)\n        self.assertEqual(j[\"result\"], \"ok\")\n        self.assertTrue(\"value\" in j)\n        self.assertEqual(j[\"value\"], {\"back2u\": \"bravo\", \"more\": \"bits\"})\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that defines a class and several methods for handling cross-pod requests. To use this code, you should create an instance of the ConduitPOST class and call its methods to test different scenarios for cross-pod requests. The methods include tests for receiving requests with no shared secret header, requests with the wrong MIME type, requests with invalid JSON data, and requests with missing or unsupported actions. The code also includes a test for a successful cross-pod request with the \"ping\" action, and a test for a successful request with a custom \"fake\" action that is supported by the FakeConduit class. To run these tests, you will need to have the required dependencies installed and set up a test environment with a server and a store.\n\n### Input:\n\n\n### Output:\n##\n# Copyright (c) 2005-2017 Apple Inc. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n##\n\nfrom twext.python.clsprop import classproperty\n\nimport txweb2.dav.test.util\nfrom txweb2 import http_headers, responsecode\nfrom txweb2.dav.util import allDataFromStream\nfrom txweb2.test.test_server import SimpleRequest\n\nfrom twisted.internet.defer import inlineCallbacks, succeed\n\nfrom txdav.caldav.datastore.scheduling.ischedule.localservers import (\n    ServersDB, Server\n)\nfrom txdav.common.datastore.podding.resource import ConduitResource\nfrom txdav.common.datastore.test.util import populateCalendarsFrom, CommonCommonTests\nimport json\nfrom txdav.common.datastore.podding.conduit import PoddingConduit\n\n\nclass ConduitPOST (CommonCommonTests, txweb2.dav.test.util.TestCase):\n\n    class FakeConduit(PoddingConduit):\n\n        def recv_fake(self, txn, j):\n            return succeed({\n                \"back2u\": j[\"echo\"],\n                \"more\": \"bits\",\n            })\n\n    @inlineCallbacks\n    def setUp(self):\n        yield super(ConduitPOST, self).setUp()\n\n        serversDB = ServersDB()\n        self.thisServer = Server(\"A\", \"http:\/\/127.0.0.1\", \"A\", True)\n        serversDB.addServer(self.thisServer)\n        yield self.buildStoreAndDirectory(serversDB=serversDB)\n\n        self.site.resource.putChild(\"conduit\", ConduitResource(self.site.resource, self.storeUnderTest()))\n\n        yield self.populate()\n\n    @inlineCallbacks\n    def populate(self):\n        yield populateCalendarsFrom(self.requirements, self.storeUnderTest())\n        self.notifierFactory.reset()\n\n    @classproperty(cache=False)\n    def requirements(cls):  # @NoSelf\n        return {\n            \"user01\": {\n                \"calendar_1\": {\n                },\n                \"inbox\": {\n                },\n            },\n            \"user02\": {\n                \"calendar_1\": {\n                },\n                \"inbox\": {\n                },\n            },\n            \"user03\": {\n                \"calendar_1\": {\n                },\n                \"inbox\": {\n                },\n            },\n        }\n\n    @inlineCallbacks\n    def test_receive_no_secret(self):\n        \"\"\"\n        Cross-pod request fails when there is no shared secret header present.\n        \"\"\"\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"text\/plain\",)\n            }),\n            content=\"\"\"Hello, World!\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.FORBIDDEN)\n\n    @inlineCallbacks\n    def test_receive_wrong_mime(self):\n        \"\"\"\n        Cross-pod request fails when Content-Type header is wrong.\n        \"\"\"\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"text\/plain\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"Hello, World!\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.BAD_REQUEST)\n\n    @inlineCallbacks\n    def test_receive_invalid_json(self):\n        \"\"\"\n        Cross-pod request fails when request data is not JSON.\n        \"\"\"\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"application\/json\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"Hello, World!\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.BAD_REQUEST)\n\n    @inlineCallbacks\n    def test_receive_bad_json(self):\n        \"\"\"\n        Cross-pod request fails when JSON data does not have an \"action\".\n        \"\"\"\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"application\/json\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"\n{\n    \"foo\":\"bar\"\n}\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.BAD_REQUEST)\n\n    @inlineCallbacks\n    def test_receive_ping(self):\n        \"\"\"\n        Cross-pod request works with the \"ping\" action.\n        \"\"\"\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"application\/json\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"\n{\n    \"action\":\"ping\"\n}\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.OK)\n        data = (yield allDataFromStream(response.stream))\n        j = json.loads(data)\n        self.assertTrue(\"result\" in j)\n        self.assertEqual(j[\"result\"], \"ok\")\n\n    @inlineCallbacks\n    def test_receive_fake_conduit_no_action(self):\n        \"\"\"\n        Cross-pod request fails when conduit does not support the action.\n        \"\"\"\n\n        store = self.storeUnderTest()\n        self.patch(store, \"conduit\", self.FakeConduit(store))\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"application\/json\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"\n{\n    \"action\":\"bogus\",\n    \"echo\":\"bravo\"\n}\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.BAD_REQUEST)\n\n    @inlineCallbacks\n    def test_receive_fake_conduit(self):\n        \"\"\"\n        Cross-pod request works when conduit does support the action.\n        \"\"\"\n\n        store = self.storeUnderTest()\n        self.patch(store, \"conduit\", self.FakeConduit(store))\n\n        request = SimpleRequest(\n            self.site,\n            \"POST\",\n            \"\/conduit\",\n            headers=http_headers.Headers(rawHeaders={\n                \"Content-Type\": (\"application\/json\",),\n                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],\n            }),\n            content=\"\"\"\n{\n    \"action\":\"fake\",\n    \"echo\":\"bravo\"\n}\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        )\n\n        response = (yield self.send(request))\n        self.assertEqual(response.code, responsecode.OK)\n        data = (yield allDataFromStream(response.stream))\n        j = json.loads(data)\n        self.assertTrue(\"result\" in j)\n        self.assertEqual(j[\"result\"], \"ok\")\n        self.assertTrue(\"value\" in j)\n        self.assertEqual(j[\"value\"], {\"back2u\": \"bravo\", \"more\": \"bits\"})\n","tok_input_length":1806,"tok_output_length":1623,"system_prompt":"","index":14733}
{"question":"The given code defines two functions. To use the first function, RowChanger, call it with four arguments: row (a string to search for in the file), textToSearch (a string to search for in the file), textToReplace (a string to replace textToSearch with), and fileToSearch (the file to search and replace in). To use the second function, ModSpec, call it with no arguments. This function will modify a spec file and compile it into an executable file.","input":"","expected_output":"def RowChanger(row,textToSearch,textToReplace,fileToSearch):\n    a=1\n    import fileinput\n    tempFile = open( fileToSearch, 'r+' )\n    for line in fileinput.input( fileToSearch ):\n        if row in line :\n            print('done yet')\n            a=0\n    if a:\n        if textToReplace==\"0\":\n            textToReplace = textToSearch+\"\\n\"+row\n        #fileToSearch = 'D:\\dummy1.txt'\n        tempFile = open( fileToSearch, 'r+' )\n        for line in fileinput.input( fileToSearch ):\n            if textToSearch in line :\n                print('done now')\n            tempFile.write(line.replace(textToSearch,textToReplace))\n        tempFile.close()\n#http:\/\/pythoncentral.io\/pyinstaller-package-python-applications-windows-mac-linux\/\ndef ModSpec():\n    print(\"modddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\")\n    import os\n    print(os.path.basename(os.path.dirname(os.path.realpath(__file__))))\n    #nome=os.path.basename(os.path.dirname(os.path.realpath(__file__)))\n    nome=\"kivy_matplotlib\"\n    icon=1\n    onefile=0\n    executive=0\n    vuoimettereunimmagine=0\n    altrecartelle=0\n    versionfile=0\n    nomepy=nome+\".py\"\n    nomespec=nome+\".spec\"\n    nomecart=\"\\\\\"+nome+\"\\\\\"\n    nomeIcon=\"icon.ico\"\n    \n    import platform\n    #windowsonly=\"\" if StringCnf(platform.system(),\"Windows\") else  windowsonly=\" -m \"\n    from calcolatrice.misuras import StringCnf\n    if StringCnf(platform.system(),\"Windows\"):\n        windowsonly=\" -m \"\n    else:\n        windowsonly=\"\"\n    if onefile:\n        vuoifareunfile=\" --onefile\"\n    else:\n        vuoifareunfile=\"\"\n    if vuoimettereunimmagine:\n        nomeimmagine=\"logo.png\"\n    else:\n        nomeimmagine=\"\"\n    \n    if icon:\n        iconStr=\" --icon \"+nomeIcon+\" \"\n    else:\n        iconStr=\"\"\n    #compilatore\n    a=\"\"#\"\\\\\"+os.getcwd()\n    \n    posizione=a+nomepy\n    \n    if versionfile:\n        versionfile=\" --version-file=version.txt \"\n    else:\n        versionfile=\"\"\n    \n    pythonpath=\"!python \"#\"C:\\\\Users\\\\Von Braun\\\\Downloads\\\\WinPython-64bit-3.5.2.3Qt5\\\\python-3.5.2.amd64\\\\Scripts\\\\pyinstaller.exe  \"\n    #pythonpath=\"path='\"+a+\"'\"\n    #pythonpath=     \"C:\\Users\\Von Braun\\Downloads\\WinPython-64bit-3.5.2.3Qt5\\python-3.5.2.amd64\\python.exe \"\n    pyinstallerpath=\"PyInstaller \"\n    #pyinstallerpath=\"C:\\Users\\Von Braun\\Downloads\\WinPython-64bit-3.5.2.3Qt5\\python-3.5.2.amd64\\Lib\\site-packages\\PyInstaller\\building\\makespec.py \"\n    #http:\/\/stackoverflow.com\/questions\/8663046\/how-to-install-a-python-package-from-within-ipython\n    #%%!python -m PyInstaller --onefile --name nome --icon icon.ico kivy_matplotlib.py\n    print(\"\\n\\n ATTENDI.....POTRESTI DOVER ASPETTARE MOLTO TEMPO\\n\\n\")\n    creaspecfile=pythonpath+windowsonly+pyinstallerpath+posizione+vuoifareunfile+\" --windowed \"+\"  --name \"+nome+iconStr+versionfile\n    print(creaspecfile)\n    print(\"\\n\\n\")\n    if executive and 0:\n        #from IPython import get_ipython\n        #ipython = get_ipython()\n        #ipython.magic(exec(creaspecfile)) \n        #run(creaspecfile)\n        #exec(input(\"inserisci la frase di sopra\\n\\n\"))\n        import PyInstaller.__main__\n        specpath=\"--specpath \" +os.getcwd()           #\/opt\/bk\/spec\n        distpath=\"--distpath \" +os.getcwd()+\"\\\\dist\"  #\/opt\/bk\/dist\n        workpath=\"--workpath \" +os.getcwd()+\"\\\\build\" #\/opt\/bk\/build\n        print(specpath)\n        print(distpath)\n        print(workpath)\n        #import PyInstaller.utils.cliutils.makespec\n        #'C:\\\\Users\\\\Von Braun\\\\Google Drive\\\\mat2pylab\\\\ProgettoTesi3.86\\\\hello'\n        #'C:\\\\Users\\\\Von Braun\\\\Downloads\\\\WinPython-64bit-3.5.2.3Qt5\\\\settings'\n        #pathex=['C:\\\\Users\\\\Von Braun\\\\Downloads\\\\WinPython-64bit-3.5.2.3Qt5\\\\python-3.5.2.amd64\\\\Lib\\\\site-packages\\\\PyInstaller']\n        #PyInstaller.__main__.run_makespec([nomepy,pathex])\n        PyInstaller.__main__.run([\"-y\", \"-w\",nomepy])\n        #exec(creaspecfile)\n    if 1:\n        import os.path\n        esistelospec=os.path.isfile(nomespec)\n        if esistelospec==0:\n            from sys import exit\n            exit()\n    print(\"\\ncreazione dello spec completata\")\n    \n    #add this lines to the spec fil\n    #http:\/\/stackoverflow.com\/questions\/17140886\/how-to-search-and-replace-text-in-a-file-using-python\n    print(\"modifica dello spec in corso\\n\\n\")\n    import fileinput\n    riga=\"from kivy.deps import sdl2, glew\"\n    textToSearch = \"# -*- mode: python -*-\"\n    NomeFile  = nome+\".spec\"\n    #fileToSearch = 'D:\\dummy1.txt'\n    RowChanger(riga,textToSearch,\"0\",NomeFile)\n    \n    if altrecartelle:\n        nuova=\"Tree('..\"+nomecart+\"'),\"\n        textToSearch=\"coll = COLLECT(exe,\"\n        textSub=textToSearch+nuova\n        RowChanger(nuova,textToSearch,textSub,NomeFile)\n    \n    #if icona:\n    #    modIcon=\"          \"+\"icon='icon.ico',\"\n    #    cerca=\"exe = EXE(pyz,\"\n    #    Modificatore(modIcon,cerca,\"0\",NomeFile)\n    \n    cerca2=\"a.datas,\"\n    modText2=\"               \"+\"*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)],\"\n    RowChanger(modText2,cerca2,\"0\",NomeFile)\n    print(\"spec file completed\")\n    print(\"modddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\")\n\n    #coll = COLLECT(exe, Tree('examples-path\\\\demo\\\\touchtracer\\\\'),\n    \n    #--onefile\n    \n    print(\"\\n\\nsta per iniziare la compilazione, attendi fino a che non avr\u00e0 finito, troverai il file exe nella cartella DIST\\n\")\n    compilaspecfile=pythonpath+windowsonly+pyinstallerpath+nomespec\n    print(compilaspecfile)\n    if executive:\n        #ipython = get_ipython()\n        #exec(input(\"inserisci la frase di sopra\\n\\n\"))\n        import PyInstaller.__main__\n        PyInstaller.__main__.run([\"-y\", \"-w\",\"kivy_matplotlib.py\"])\n\n        #run(exec(creaspecfile))\n    print(\"\\ncompilation complete\")\n    \n\"\"\"\n       if args.filenames[0].endswith('.spec'):\n            spec_file = args.filenames[0]\n        else:\n            spec_file = run_makespec(**vars(args))\n        ##############################################################################################\n        print(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n        a=os.getcwd()\n        print(a)\n        #os.chdir(\"C:\\\\Users\\\\Von Braun\\\\Google Drive\\\\mat2pylab\\\\ProgettoTesi4.00\")\n        print(spec_file)\n        from compilatore import ModSpec\n        ModSpec()\n        os.chdir(a)\n        print(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n        ##############################################################################################\n        run_build(pyi_config, spec_file, **vars(args))\n\"\"\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code defines two functions. To use the first function, RowChanger, call it with four arguments: row (a string to search for in the file), textToSearch (a string to search for in the file), textToReplace (a string to replace textToSearch with), and fileToSearch (the file to search and replace in). To use the second function, ModSpec, call it with no arguments. This function will modify a spec file and compile it into an executable file.\n\n### Input:\n\n\n### Output:\ndef RowChanger(row,textToSearch,textToReplace,fileToSearch):\n    a=1\n    import fileinput\n    tempFile = open( fileToSearch, 'r+' )\n    for line in fileinput.input( fileToSearch ):\n        if row in line :\n            print('done yet')\n            a=0\n    if a:\n        if textToReplace==\"0\":\n            textToReplace = textToSearch+\"\\n\"+row\n        #fileToSearch = 'D:\\dummy1.txt'\n        tempFile = open( fileToSearch, 'r+' )\n        for line in fileinput.input( fileToSearch ):\n            if textToSearch in line :\n                print('done now')\n            tempFile.write(line.replace(textToSearch,textToReplace))\n        tempFile.close()\n#http:\/\/pythoncentral.io\/pyinstaller-package-python-applications-windows-mac-linux\/\ndef ModSpec():\n    print(\"modddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\")\n    import os\n    print(os.path.basename(os.path.dirname(os.path.realpath(__file__))))\n    #nome=os.path.basename(os.path.dirname(os.path.realpath(__file__)))\n    nome=\"kivy_matplotlib\"\n    icon=1\n    onefile=0\n    executive=0\n    vuoimettereunimmagine=0\n    altrecartelle=0\n    versionfile=0\n    nomepy=nome+\".py\"\n    nomespec=nome+\".spec\"\n    nomecart=\"\\\\\"+nome+\"\\\\\"\n    nomeIcon=\"icon.ico\"\n    \n    import platform\n    #windowsonly=\"\" if StringCnf(platform.system(),\"Windows\") else  windowsonly=\" -m \"\n    from calcolatrice.misuras import StringCnf\n    if StringCnf(platform.system(),\"Windows\"):\n        windowsonly=\" -m \"\n    else:\n        windowsonly=\"\"\n    if onefile:\n        vuoifareunfile=\" --onefile\"\n    else:\n        vuoifareunfile=\"\"\n    if vuoimettereunimmagine:\n        nomeimmagine=\"logo.png\"\n    else:\n        nomeimmagine=\"\"\n    \n    if icon:\n        iconStr=\" --icon \"+nomeIcon+\" \"\n    else:\n        iconStr=\"\"\n    #compilatore\n    a=\"\"#\"\\\\\"+os.getcwd()\n    \n    posizione=a+nomepy\n    \n    if versionfile:\n        versionfile=\" --version-file=version.txt \"\n    else:\n        versionfile=\"\"\n    \n    pythonpath=\"!python \"#\"C:\\\\Users\\\\Von Braun\\\\Downloads\\\\WinPython-64bit-3.5.2.3Qt5\\\\python-3.5.2.amd64\\\\Scripts\\\\pyinstaller.exe  \"\n    #pythonpath=\"path='\"+a+\"'\"\n    #pythonpath=     \"C:\\Users\\Von Braun\\Downloads\\WinPython-64bit-3.5.2.3Qt5\\python-3.5.2.amd64\\python.exe \"\n    pyinstallerpath=\"PyInstaller \"\n    #pyinstallerpath=\"C:\\Users\\Von Braun\\Downloads\\WinPython-64bit-3.5.2.3Qt5\\python-3.5.2.amd64\\Lib\\site-packages\\PyInstaller\\building\\makespec.py \"\n    #http:\/\/stackoverflow.com\/questions\/8663046\/how-to-install-a-python-package-from-within-ipython\n    #%%!python -m PyInstaller --onefile --name nome --icon icon.ico kivy_matplotlib.py\n    print(\"\\n\\n ATTENDI.....POTRESTI DOVER ASPETTARE MOLTO TEMPO\\n\\n\")\n    creaspecfile=pythonpath+windowsonly+pyinstallerpath+posizione+vuoifareunfile+\" --windowed \"+\"  --name \"+nome+iconStr+versionfile\n    print(creaspecfile)\n    print(\"\\n\\n\")\n    if executive and 0:\n        #from IPython import get_ipython\n        #ipython = get_ipython()\n        #ipython.magic(exec(creaspecfile)) \n        #run(creaspecfile)\n        #exec(input(\"inserisci la frase di sopra\\n\\n\"))\n        import PyInstaller.__main__\n        specpath=\"--specpath \" +os.getcwd()           #\/opt\/bk\/spec\n        distpath=\"--distpath \" +os.getcwd()+\"\\\\dist\"  #\/opt\/bk\/dist\n        workpath=\"--workpath \" +os.getcwd()+\"\\\\build\" #\/opt\/bk\/build\n        print(specpath)\n        print(distpath)\n        print(workpath)\n        #import PyInstaller.utils.cliutils.makespec\n        #'C:\\\\Users\\\\Von Braun\\\\Google Drive\\\\mat2pylab\\\\ProgettoTesi3.86\\\\hello'\n        #'C:\\\\Users\\\\Von Braun\\\\Downloads\\\\WinPython-64bit-3.5.2.3Qt5\\\\settings'\n        #pathex=['C:\\\\Users\\\\Von Braun\\\\Downloads\\\\WinPython-64bit-3.5.2.3Qt5\\\\python-3.5.2.amd64\\\\Lib\\\\site-packages\\\\PyInstaller']\n        #PyInstaller.__main__.run_makespec([nomepy,pathex])\n        PyInstaller.__main__.run([\"-y\", \"-w\",nomepy])\n        #exec(creaspecfile)\n    if 1:\n        import os.path\n        esistelospec=os.path.isfile(nomespec)\n        if esistelospec==0:\n            from sys import exit\n            exit()\n    print(\"\\ncreazione dello spec completata\")\n    \n    #add this lines to the spec fil\n    #http:\/\/stackoverflow.com\/questions\/17140886\/how-to-search-and-replace-text-in-a-file-using-python\n    print(\"modifica dello spec in corso\\n\\n\")\n    import fileinput\n    riga=\"from kivy.deps import sdl2, glew\"\n    textToSearch = \"# -*- mode: python -*-\"\n    NomeFile  = nome+\".spec\"\n    #fileToSearch = 'D:\\dummy1.txt'\n    RowChanger(riga,textToSearch,\"0\",NomeFile)\n    \n    if altrecartelle:\n        nuova=\"Tree('..\"+nomecart+\"'),\"\n        textToSearch=\"coll = COLLECT(exe,\"\n        textSub=textToSearch+nuova\n        RowChanger(nuova,textToSearch,textSub,NomeFile)\n    \n    #if icona:\n    #    modIcon=\"          \"+\"icon='icon.ico',\"\n    #    cerca=\"exe = EXE(pyz,\"\n    #    Modificatore(modIcon,cerca,\"0\",NomeFile)\n    \n    cerca2=\"a.datas,\"\n    modText2=\"               \"+\"*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)],\"\n    RowChanger(modText2,cerca2,\"0\",NomeFile)\n    print(\"spec file completed\")\n    print(\"modddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\")\n\n    #coll = COLLECT(exe, Tree('examples-path\\\\demo\\\\touchtracer\\\\'),\n    \n    #--onefile\n    \n    print(\"\\n\\nsta per iniziare la compilazione, attendi fino a che non avr\u00e0 finito, troverai il file exe nella cartella DIST\\n\")\n    compilaspecfile=pythonpath+windowsonly+pyinstallerpath+nomespec\n    print(compilaspecfile)\n    if executive:\n        #ipython = get_ipython()\n        #exec(input(\"inserisci la frase di sopra\\n\\n\"))\n        import PyInstaller.__main__\n        PyInstaller.__main__.run([\"-y\", \"-w\",\"kivy_matplotlib.py\"])\n\n        #run(exec(creaspecfile))\n    print(\"\\ncompilation complete\")\n    \n\"\"\"\n       if args.filenames[0].endswith('.spec'):\n            spec_file = args.filenames[0]\n        else:\n            spec_file = run_makespec(**vars(args))\n        ##############################################################################################\n        print(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n        a=os.getcwd()\n        print(a)\n        #os.chdir(\"C:\\\\Users\\\\Von Braun\\\\Google Drive\\\\mat2pylab\\\\ProgettoTesi4.00\")\n        print(spec_file)\n        from compilatore import ModSpec\n        ModSpec()\n        os.chdir(a)\n        print(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n        ##############################################################################################\n        run_build(pyi_config, spec_file, **vars(args))\n\"\"\"","tok_input_length":1938,"tok_output_length":1808,"system_prompt":"","index":15830}
{"question":"To run a server that simulates Fronius inverters and responds to API requests, run the given Python code using a Python interpreter. The server listens on port 8080 and accepts connections from all sources. The server responds to API requests for getting the API version, inverter information, and inverter real-time data. The server simulates multiple Fronius inverters with different device types, unique IDs, custom names, and 3-phase support. The server also simulates an SMA inverter with modbus enabled. The server uses the Twisted framework and the Bottle web framework.","input":"","expected_output":"#!\/usr\/bin\/python -u\n\nimport datetime\nimport modbus_tcp_sim\nimport os\nimport sys\nfrom twisted.internet import reactor\nfrom fronius_sim import FroniusSim\n\napp_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nbottle_dir = os.path.normpath(os.path.join(app_dir, '..', '..', 'software', 'ext', 'bottle'))\nsys.path.extend([bottle_dir, app_dir])\n\nimport bottle\n\napplication = bottle.default_app()\n\ninverters = [\n\tFroniusSim(id='1', device_type=232, unique_id='1234', custom_name='SouthWest', has_3phases=True, modbus_enabled=False),\n\tFroniusSim(id='2', device_type=224, unique_id='4321', custom_name='', has_3phases=False, modbus_enabled=False),\n\tFroniusSim(id='3', device_type=208, unique_id='1111', custom_name='Tmp', has_3phases=False, modbus_enabled=True)\n]\n\nsma_inverter = FroniusSim(id='126', device_type=None, unique_id='10988912', custom_name='SMA', has_3phases=False, modbus_enabled=True)\n\n\n@bottle.route('\/solar_api\/GetAPIVersion.cgi')\ndef get_api_version():\n\treturn dict(APIVersion=1, BaseUrl='solar_api\/v1\/')\n\n\n@bottle.route('\/solar_api\/v1\/GetInverterInfo.cgi')\ndef get_inverter_info():\n\treturn {\n\t\t'Head': create_head({}),\n\t\t'Body': {\n\t\t\t'Data': dict((x.id, {\n\t\t\t\t'DT': x.device_type,\n\t\t\t\t'PVPower': 5000,\n\t\t\t\t'Show': 1,\n\t\t\t\t'UniqueID': x.unique_id,\n\t\t\t\t'ErrorCode': 0,\n\t\t\t\t'StatusCode': 7,\n\t\t\t\t'CustomName': x.custom_name })\n\t\t\t\tfor x in inverters)}}\n\n\n@bottle.route('\/solar_api\/v1\/GetInverterRealtimeData.cgi')\ndef get_inverter_realtime_data():\n\tscope = bottle.request.query.Scope\n\tdevice_id = bottle.request.query.DeviceId\n\tdata_collection = bottle.request.query.DataCollection\n\tif scope == 'Device':\n\t\ttry:\n\t\t\tinverter = next((i for i in inverters if i.id == device_id))\n\t\texcept StopIteration:\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection},\n\t\t\t\t\terror_code=1,\n\t\t\t\t\terror_message='device not found')}\n\t\tif data_collection == 'CumulationInverterData':\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection}),\n\t\t\t\t'Body': {\n\t\t\t\t\t'Data': {\n\t\t\t\t\t\t'PAC': {'Value': 3373, 'Unit': 'W'},\n\t\t\t\t\t\t'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'TOTAL_ENERGY': {'Value': 45000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'DeviceStatus': {\n\t\t\t\t\t\t\t'StatusCode': 7,\n\t\t\t\t\t\t\t'MgmtTimerRemainingTime': -1,\n\t\t\t\t\t\t\t'ErrorCode': 0,\n\t\t\t\t\t\t\t'LEDCode': 0,\n\t\t\t\t\t\t\t'LEDColor': 2,\n\t\t\t\t\t\t\t'LEDState': 0,\n\t\t\t\t\t\t\t'StateToReset': False}}}}\n\t\tif data_collection == 'CommonInverterData':\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection}),\n\t\t\t\t'Body': {\n\t\t\t\t\t'Data': {\n\t\t\t\t\t\t'PAC': {'Value': inverter.main.power, 'Unit': 'W'},\n\t\t\t\t\t\t'SAC': {'Value': 3413, 'Unit': 'VA'},\n\t\t\t\t\t\t'IAC': {'Value': inverter.main.current, 'Unit': 'Hz'},\n\t\t\t\t\t\t'UAC': {'Value': inverter.main.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'FAC': {'Value': 50, 'Unit': 'Hz'},\n\t\t\t\t\t\t'IDC': {'Value': 8.2, 'Unit': 'A'},\n\t\t\t\t\t\t'UDC': {'Value': 426, 'Unit': 'V'},\n\t\t\t\t\t\t'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'TOTAL_ENERGY': {'Value': inverter.main.energy, 'Unit': 'Wh'},\n\t\t\t\t\t\t'DeviceStatus': {\n\t\t\t\t\t\t\t'StatusCode': 7,\n\t\t\t\t\t\t\t'MgmtTimerRemainingTime': -1,\n\t\t\t\t\t\t\t'ErrorCode': 0,\n\t\t\t\t\t\t\t'LEDCode': 0,\n\t\t\t\t\t\t\t'LEDColor': 2,\n\t\t\t\t\t\t\t'LEDState': 0,\n\t\t\t\t\t\t\t'StateToReset': False}}}}\n\t\tif data_collection == '3PInverterData':\n\t\t\tif not inverter.has_3phases:\n\t\t\t\treturn {\n\t\t\t\t\t'Head': create_head({\n\t\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t\t'DataCollection': data_collection},\n\t\t\t\t\t\terror_code=2,\n\t\t\t\t\t\terror_message='not supported')}\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection}),\n\t\t\t\t'Body': {\n\t\t\t\t\t'Data': {\n\t\t\t\t\t\t'IAC_L1': {'Value': inverter.l1.current, 'Unit': 'A'},\n\t\t\t\t\t\t'IAC_L2': {'Value': inverter.l2.current, 'Unit': 'A'},\n\t\t\t\t\t\t'IAC_L3': {'Value': inverter.l3.current, 'Unit': 'A'},\n\t\t\t\t\t\t'UAC_L1': {'Value': inverter.l1.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'UAC_L2': {'Value': inverter.l2.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'UAC_L3': {'Value': inverter.l3.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'T_AMBIENT': {'Value': 27, 'Unit': 'V'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_FL': {'Value': 83, 'Unit': 'RPM'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_FR': {'Value': 83, 'Unit': 'RPM'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_BL': {'Value': 83, 'Unit': 'RPM'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_BR': {'Value': 83, 'Unit': 'RPM'}}}}\n\telif scope == 'System':\n\t\treturn {\n\t\t\t'Head': create_head({'Scope': scope}),\n\t\t\t'Body': {\n\t\t\t\t'Data': {\n\t\t\t\t\t'PAC': {'Value': 3373, 'Unit': 'W'},\n\t\t\t\t\t'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'},\n\t\t\t\t\t'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'},\n\t\t\t\t\t'TOTAL_ENERGY': {'Value': 45000, 'Unit': 'Wh'}}}}\n\telse:\n\t\traise Exception('Unknown scope')\n\n\ndef create_head(args, error_code=0, error_message=''):\n\treturn {\n\t\t'RequestArguments': args,\n\t\t'Status': {\n\t\t\t\"Code\": error_code,\n\t\t\t\"Reason\": error_message,\n\t\t\t\"UserMessage\": \"\"},\n\t\t'Timestamp': datetime.datetime.now().isoformat()}\n\n\nclass TwistedServer(bottle.ServerAdapter):\n\tdef start(self, handler):\n\t\tfrom twisted.web import server, wsgi\n\t\tfrom twisted.python.threadpool import ThreadPool\n\t\tfrom twisted.internet import reactor\n\t\tthread_pool = ThreadPool(minthreads=0, maxthreads=1)\n\t\tthread_pool.start()\n\t\treactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop)\n\t\tfactory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler))\n\t\treactor.listenTCP(self.port, factory, interface=self.host)\n\t\t# reactor.run()\n\n\nif __name__ == '__main__':\n\t# host='0.0.0.0': accept connections from all sources\n\tserver = TwistedServer(host='0.0.0.0', port=8080, debug=True)\n\tserver.start(application)\n\tmodbus_tcp_sim.start_server(inverters + [sma_inverter])\n\treactor.run()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo run a server that simulates Fronius inverters and responds to API requests, run the given Python code using a Python interpreter. The server listens on port 8080 and accepts connections from all sources. The server responds to API requests for getting the API version, inverter information, and inverter real-time data. The server simulates multiple Fronius inverters with different device types, unique IDs, custom names, and 3-phase support. The server also simulates an SMA inverter with modbus enabled. The server uses the Twisted framework and the Bottle web framework.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python -u\n\nimport datetime\nimport modbus_tcp_sim\nimport os\nimport sys\nfrom twisted.internet import reactor\nfrom fronius_sim import FroniusSim\n\napp_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nbottle_dir = os.path.normpath(os.path.join(app_dir, '..', '..', 'software', 'ext', 'bottle'))\nsys.path.extend([bottle_dir, app_dir])\n\nimport bottle\n\napplication = bottle.default_app()\n\ninverters = [\n\tFroniusSim(id='1', device_type=232, unique_id='1234', custom_name='SouthWest', has_3phases=True, modbus_enabled=False),\n\tFroniusSim(id='2', device_type=224, unique_id='4321', custom_name='', has_3phases=False, modbus_enabled=False),\n\tFroniusSim(id='3', device_type=208, unique_id='1111', custom_name='Tmp', has_3phases=False, modbus_enabled=True)\n]\n\nsma_inverter = FroniusSim(id='126', device_type=None, unique_id='10988912', custom_name='SMA', has_3phases=False, modbus_enabled=True)\n\n\n@bottle.route('\/solar_api\/GetAPIVersion.cgi')\ndef get_api_version():\n\treturn dict(APIVersion=1, BaseUrl='solar_api\/v1\/')\n\n\n@bottle.route('\/solar_api\/v1\/GetInverterInfo.cgi')\ndef get_inverter_info():\n\treturn {\n\t\t'Head': create_head({}),\n\t\t'Body': {\n\t\t\t'Data': dict((x.id, {\n\t\t\t\t'DT': x.device_type,\n\t\t\t\t'PVPower': 5000,\n\t\t\t\t'Show': 1,\n\t\t\t\t'UniqueID': x.unique_id,\n\t\t\t\t'ErrorCode': 0,\n\t\t\t\t'StatusCode': 7,\n\t\t\t\t'CustomName': x.custom_name })\n\t\t\t\tfor x in inverters)}}\n\n\n@bottle.route('\/solar_api\/v1\/GetInverterRealtimeData.cgi')\ndef get_inverter_realtime_data():\n\tscope = bottle.request.query.Scope\n\tdevice_id = bottle.request.query.DeviceId\n\tdata_collection = bottle.request.query.DataCollection\n\tif scope == 'Device':\n\t\ttry:\n\t\t\tinverter = next((i for i in inverters if i.id == device_id))\n\t\texcept StopIteration:\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection},\n\t\t\t\t\terror_code=1,\n\t\t\t\t\terror_message='device not found')}\n\t\tif data_collection == 'CumulationInverterData':\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection}),\n\t\t\t\t'Body': {\n\t\t\t\t\t'Data': {\n\t\t\t\t\t\t'PAC': {'Value': 3373, 'Unit': 'W'},\n\t\t\t\t\t\t'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'TOTAL_ENERGY': {'Value': 45000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'DeviceStatus': {\n\t\t\t\t\t\t\t'StatusCode': 7,\n\t\t\t\t\t\t\t'MgmtTimerRemainingTime': -1,\n\t\t\t\t\t\t\t'ErrorCode': 0,\n\t\t\t\t\t\t\t'LEDCode': 0,\n\t\t\t\t\t\t\t'LEDColor': 2,\n\t\t\t\t\t\t\t'LEDState': 0,\n\t\t\t\t\t\t\t'StateToReset': False}}}}\n\t\tif data_collection == 'CommonInverterData':\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection}),\n\t\t\t\t'Body': {\n\t\t\t\t\t'Data': {\n\t\t\t\t\t\t'PAC': {'Value': inverter.main.power, 'Unit': 'W'},\n\t\t\t\t\t\t'SAC': {'Value': 3413, 'Unit': 'VA'},\n\t\t\t\t\t\t'IAC': {'Value': inverter.main.current, 'Unit': 'Hz'},\n\t\t\t\t\t\t'UAC': {'Value': inverter.main.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'FAC': {'Value': 50, 'Unit': 'Hz'},\n\t\t\t\t\t\t'IDC': {'Value': 8.2, 'Unit': 'A'},\n\t\t\t\t\t\t'UDC': {'Value': 426, 'Unit': 'V'},\n\t\t\t\t\t\t'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'TOTAL_ENERGY': {'Value': inverter.main.energy, 'Unit': 'Wh'},\n\t\t\t\t\t\t'DeviceStatus': {\n\t\t\t\t\t\t\t'StatusCode': 7,\n\t\t\t\t\t\t\t'MgmtTimerRemainingTime': -1,\n\t\t\t\t\t\t\t'ErrorCode': 0,\n\t\t\t\t\t\t\t'LEDCode': 0,\n\t\t\t\t\t\t\t'LEDColor': 2,\n\t\t\t\t\t\t\t'LEDState': 0,\n\t\t\t\t\t\t\t'StateToReset': False}}}}\n\t\tif data_collection == '3PInverterData':\n\t\t\tif not inverter.has_3phases:\n\t\t\t\treturn {\n\t\t\t\t\t'Head': create_head({\n\t\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t\t'DataCollection': data_collection},\n\t\t\t\t\t\terror_code=2,\n\t\t\t\t\t\terror_message='not supported')}\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection}),\n\t\t\t\t'Body': {\n\t\t\t\t\t'Data': {\n\t\t\t\t\t\t'IAC_L1': {'Value': inverter.l1.current, 'Unit': 'A'},\n\t\t\t\t\t\t'IAC_L2': {'Value': inverter.l2.current, 'Unit': 'A'},\n\t\t\t\t\t\t'IAC_L3': {'Value': inverter.l3.current, 'Unit': 'A'},\n\t\t\t\t\t\t'UAC_L1': {'Value': inverter.l1.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'UAC_L2': {'Value': inverter.l2.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'UAC_L3': {'Value': inverter.l3.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'T_AMBIENT': {'Value': 27, 'Unit': 'V'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_FL': {'Value': 83, 'Unit': 'RPM'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_FR': {'Value': 83, 'Unit': 'RPM'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_BL': {'Value': 83, 'Unit': 'RPM'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_BR': {'Value': 83, 'Unit': 'RPM'}}}}\n\telif scope == 'System':\n\t\treturn {\n\t\t\t'Head': create_head({'Scope': scope}),\n\t\t\t'Body': {\n\t\t\t\t'Data': {\n\t\t\t\t\t'PAC': {'Value': 3373, 'Unit': 'W'},\n\t\t\t\t\t'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'},\n\t\t\t\t\t'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'},\n\t\t\t\t\t'TOTAL_ENERGY': {'Value': 45000, 'Unit': 'Wh'}}}}\n\telse:\n\t\traise Exception('Unknown scope')\n\n\ndef create_head(args, error_code=0, error_message=''):\n\treturn {\n\t\t'RequestArguments': args,\n\t\t'Status': {\n\t\t\t\"Code\": error_code,\n\t\t\t\"Reason\": error_message,\n\t\t\t\"UserMessage\": \"\"},\n\t\t'Timestamp': datetime.datetime.now().isoformat()}\n\n\nclass TwistedServer(bottle.ServerAdapter):\n\tdef start(self, handler):\n\t\tfrom twisted.web import server, wsgi\n\t\tfrom twisted.python.threadpool import ThreadPool\n\t\tfrom twisted.internet import reactor\n\t\tthread_pool = ThreadPool(minthreads=0, maxthreads=1)\n\t\tthread_pool.start()\n\t\treactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop)\n\t\tfactory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler))\n\t\treactor.listenTCP(self.port, factory, interface=self.host)\n\t\t# reactor.run()\n\n\nif __name__ == '__main__':\n\t# host='0.0.0.0': accept connections from all sources\n\tserver = TwistedServer(host='0.0.0.0', port=8080, debug=True)\n\tserver.start(application)\n\tmodbus_tcp_sim.start_server(inverters + [sma_inverter])\n\treactor.run()\n","tok_input_length":1988,"tok_output_length":1841,"system_prompt":"","index":13719}
{"question":"Connect to a database, retrieve data, and write it to a JSON file named \"extract.json\". The code is written in Python and requires the SQLite3 library.","input":"","expected_output":"#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n# TESTING FILE made.by.a.fox. 12.2.15\n# Updated by acrule 01.21.16\n\n#FEATURE LIST\n#   Y   connect to db\n#   Y   write to file\n#   Y   Write JSON format\n#       Accept input date parameter\n#KNOWN ISSUES\n#   2. no formatting or conversion of datetime stamps\n\nimport re\nimport os\nimport sys\n\nimport json\nimport sqlite3 as lite\n\nimport collections\n\nimport time\nimport datetime\n\n\ndb_file = os.path.expanduser('~\/.traces\/traces.sqlite')  #looks for db under ~\/.traces\ncon = lite.connect(db_file)\n\nwith con:\n\n    data = []  #master data container\n    apps = []  #list of apps\n    windows = [] # list of windows\n    urls = []\n    appevents = []  #list of application events\n    windowevents = [] #list of window events\n    urlevents = []\n    exps = []  #list of experiences\n    images = [] #list of screenshots\n    words = [] #list of keywords\n\n    cur = con.cursor()\n\n    #SQL query strings\n    appsSQL = \"SELECT * FROM app\"\n    windowsSQL = \"SELECT * FROM window\"\n    urlSQL = \"SELECT * FROM url\"\n    activeappSQL = \"SELECT a.id, a.app_id, a.event, a.time as startt, min(b.time) AS endt FROM appevent a, appevent b WHERE a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activewindowSQL = \"SELECT a.id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM windowevent a, windowevent b WHERE a.window_id = b.window_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activeurlSQL = \"SELECT a.id, a.url_id, a.app_id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM urlevent a, urlevent b WHERE a.url_id = b.url_id AND a.window_id = b.window_id AND a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    experienceSQL = \"SELECT * FROM experience\"\n    wordsSQL = \"SELECT * FROM keys\"\n\n    #GET list of applications\n    cur.execute(appsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['time'] = row[1]\n        a['name'] = row[2]\n        apps.append(a)\n\n    #GET list of windows\n    cur.execute(windowsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['time'] = row[1]\n        w['name'] = row[2]\n        w['app'] = row[3]\n        windows.append(w)\n\n    #GET list of urls\n    cur.execute(urlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['time'] = row[1]\n        u['title'] = row[2]\n        u['url'] = row[3]\n        u['host'] = row[4]\n        urls.append(u)\n\n    #GET list intervals for primary application\n    cur.execute(activeappSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['appid'] = row[1]\n        a['event'] = row[2]\n        a['start'] = row[3]\n        a['end'] = row[4]\n        appevents.append(a)\n\n    #GET list intervals for primary window\n    cur.execute(activewindowSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['windowid'] = row[1]\n        w['appid'] = (item for item in windows if item[\"id\"] == row[1]).next()['app']\n        w['event'] = row[2]\n        w['start'] = row[3]\n        w['end'] = row[4]\n        windowevents.append(w)\n\n    #GET list intervals for urls\n    cur.execute(activeurlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['urlid'] = row[1]\n        u['appid'] = row[2]\n        u['windowid'] = row[3]\n        u['event'] = row[4]\n        u['start'] = row[5]\n        u['end'] = row[6]\n        urlevents.append(u)\n\n    #GET list of experiences\n    cur.execute(experienceSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['text'] = row[2]\n        exps.append(a)\n\n    #GET list of screenshots\n    image_dir = os.path.expanduser('~\/.traces\/screenshots')  #looks for db under ~\/.traces\n    for y in os.listdir(image_dir):\n        y_dir = os.path.join(image_dir,y)\n        if not os.path.isdir(y_dir):\n            continue\n        for m in os.listdir(y_dir):\n            m_dir = os.path.join(y_dir, m)\n            if not os.path.isdir(m_dir):\n                continue\n            for d in os.listdir(m_dir):\n                d_dir = os.path.join(m_dir, d)\n                if not os.path.isdir(d_dir):\n                    continue\n                for h in os.listdir(d_dir):\n                    h_dir = os.path.join(d_dir, h)\n                    if not os.path.isdir(h_dir):\n                        continue\n                    h_images = os.listdir(h_dir)\n                    for image in h_images:\n                        #make sure the file is an image\n                        if image[-4:] == '.jpg':\n                            i = collections.OrderedDict()\n                            image_time = datetime.datetime.strptime(image[0:19], '%y%m%d-%H%M%S%f')\n                            i['time'] = (image_time - datetime.datetime(1970,1,1)).total_seconds() + time.timezone #add timezone offset\n                            i['image'] = os.path.join(\"screenshots\", y, m, d, h, image)\n                            images.append(i)\n\n    #GET keywords\n    cmd_rows = []\n    newWord = ['Enter','Left','Right','Up','Down','Tab','Escape', ' ']\n    starttime = 0.0\n    app = 0\n    window = 0\n    s = ''\n\n    cur.execute(wordsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        if 'Cmd' in row[3]:\n            cmd_rows.append(row)\n        else:\n            text = str(row[2])\n            # if its a char indicating a new word, save our text token\n            if text in newWord:\n                # save our data\n                if len(s) > 0:\n                    k = collections.OrderedDict()\n                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\"%H:%M %m\/%d\/%y\")\n                    k['text'] = s #just pass the whole string for now\n                    k['app'] = app\n                    k['window'] = window\n                    words.append(k)\n\n                #reset tracking time\n                starttime = float(row[1])\n                s = ''\n\n            # if its a regular char on the same window, just keep building the string\n            elif int(row[5]) == window: # and float(row[1]) - time <= 300.0:\n                if text == 'Backspace':\n                    s = s[:-1]\n                else:\n                    s += row[2]\n            #else its a regular char but we switched windows, save the data\n            else:\n                if len(s) > 0:\n                    k = collections.OrderedDict()\n                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\"%H:%M %m\/%d\/%y\")\n                    k['text'] = s #just pass teh whole string for now\n                    k['app'] = app\n                    k['window'] = window\n                    words.append(k)\n\n                #reset tracking variables\n                window = int(row[5])\n                app = int(row[4])\n                starttime = float(row[1])\n\n                #write the character to start the next word\n                if text in newWord or text == 'Backspace':\n                    s = ''\n                else:\n                    s = row[2]\n\n    #ASSEMBLE apps and experince into json\n    d = collections.OrderedDict()\n    d['apps']=apps\n    d['window']=windows\n    d['url']=urls\n    d['appevents']=appevents\n    d['windowevents']=windowevents\n    d['urlevents']=urlevents\n    d['exps']=exps\n    d['images']=images\n    d['words']=words\n    data = d\n\n    #WRITE file\n    file = 'extract.json'\n    z = open(file,'w')\n    z.writelines(json.dumps(data))\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConnect to a database, retrieve data, and write it to a JSON file named \"extract.json\". The code is written in Python and requires the SQLite3 library.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n# TESTING FILE made.by.a.fox. 12.2.15\n# Updated by acrule 01.21.16\n\n#FEATURE LIST\n#   Y   connect to db\n#   Y   write to file\n#   Y   Write JSON format\n#       Accept input date parameter\n#KNOWN ISSUES\n#   2. no formatting or conversion of datetime stamps\n\nimport re\nimport os\nimport sys\n\nimport json\nimport sqlite3 as lite\n\nimport collections\n\nimport time\nimport datetime\n\n\ndb_file = os.path.expanduser('~\/.traces\/traces.sqlite')  #looks for db under ~\/.traces\ncon = lite.connect(db_file)\n\nwith con:\n\n    data = []  #master data container\n    apps = []  #list of apps\n    windows = [] # list of windows\n    urls = []\n    appevents = []  #list of application events\n    windowevents = [] #list of window events\n    urlevents = []\n    exps = []  #list of experiences\n    images = [] #list of screenshots\n    words = [] #list of keywords\n\n    cur = con.cursor()\n\n    #SQL query strings\n    appsSQL = \"SELECT * FROM app\"\n    windowsSQL = \"SELECT * FROM window\"\n    urlSQL = \"SELECT * FROM url\"\n    activeappSQL = \"SELECT a.id, a.app_id, a.event, a.time as startt, min(b.time) AS endt FROM appevent a, appevent b WHERE a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activewindowSQL = \"SELECT a.id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM windowevent a, windowevent b WHERE a.window_id = b.window_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activeurlSQL = \"SELECT a.id, a.url_id, a.app_id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM urlevent a, urlevent b WHERE a.url_id = b.url_id AND a.window_id = b.window_id AND a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    experienceSQL = \"SELECT * FROM experience\"\n    wordsSQL = \"SELECT * FROM keys\"\n\n    #GET list of applications\n    cur.execute(appsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['time'] = row[1]\n        a['name'] = row[2]\n        apps.append(a)\n\n    #GET list of windows\n    cur.execute(windowsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['time'] = row[1]\n        w['name'] = row[2]\n        w['app'] = row[3]\n        windows.append(w)\n\n    #GET list of urls\n    cur.execute(urlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['time'] = row[1]\n        u['title'] = row[2]\n        u['url'] = row[3]\n        u['host'] = row[4]\n        urls.append(u)\n\n    #GET list intervals for primary application\n    cur.execute(activeappSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['appid'] = row[1]\n        a['event'] = row[2]\n        a['start'] = row[3]\n        a['end'] = row[4]\n        appevents.append(a)\n\n    #GET list intervals for primary window\n    cur.execute(activewindowSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['windowid'] = row[1]\n        w['appid'] = (item for item in windows if item[\"id\"] == row[1]).next()['app']\n        w['event'] = row[2]\n        w['start'] = row[3]\n        w['end'] = row[4]\n        windowevents.append(w)\n\n    #GET list intervals for urls\n    cur.execute(activeurlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['urlid'] = row[1]\n        u['appid'] = row[2]\n        u['windowid'] = row[3]\n        u['event'] = row[4]\n        u['start'] = row[5]\n        u['end'] = row[6]\n        urlevents.append(u)\n\n    #GET list of experiences\n    cur.execute(experienceSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['text'] = row[2]\n        exps.append(a)\n\n    #GET list of screenshots\n    image_dir = os.path.expanduser('~\/.traces\/screenshots')  #looks for db under ~\/.traces\n    for y in os.listdir(image_dir):\n        y_dir = os.path.join(image_dir,y)\n        if not os.path.isdir(y_dir):\n            continue\n        for m in os.listdir(y_dir):\n            m_dir = os.path.join(y_dir, m)\n            if not os.path.isdir(m_dir):\n                continue\n            for d in os.listdir(m_dir):\n                d_dir = os.path.join(m_dir, d)\n                if not os.path.isdir(d_dir):\n                    continue\n                for h in os.listdir(d_dir):\n                    h_dir = os.path.join(d_dir, h)\n                    if not os.path.isdir(h_dir):\n                        continue\n                    h_images = os.listdir(h_dir)\n                    for image in h_images:\n                        #make sure the file is an image\n                        if image[-4:] == '.jpg':\n                            i = collections.OrderedDict()\n                            image_time = datetime.datetime.strptime(image[0:19], '%y%m%d-%H%M%S%f')\n                            i['time'] = (image_time - datetime.datetime(1970,1,1)).total_seconds() + time.timezone #add timezone offset\n                            i['image'] = os.path.join(\"screenshots\", y, m, d, h, image)\n                            images.append(i)\n\n    #GET keywords\n    cmd_rows = []\n    newWord = ['Enter','Left','Right','Up','Down','Tab','Escape', ' ']\n    starttime = 0.0\n    app = 0\n    window = 0\n    s = ''\n\n    cur.execute(wordsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        if 'Cmd' in row[3]:\n            cmd_rows.append(row)\n        else:\n            text = str(row[2])\n            # if its a char indicating a new word, save our text token\n            if text in newWord:\n                # save our data\n                if len(s) > 0:\n                    k = collections.OrderedDict()\n                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\"%H:%M %m\/%d\/%y\")\n                    k['text'] = s #just pass the whole string for now\n                    k['app'] = app\n                    k['window'] = window\n                    words.append(k)\n\n                #reset tracking time\n                starttime = float(row[1])\n                s = ''\n\n            # if its a regular char on the same window, just keep building the string\n            elif int(row[5]) == window: # and float(row[1]) - time <= 300.0:\n                if text == 'Backspace':\n                    s = s[:-1]\n                else:\n                    s += row[2]\n            #else its a regular char but we switched windows, save the data\n            else:\n                if len(s) > 0:\n                    k = collections.OrderedDict()\n                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\"%H:%M %m\/%d\/%y\")\n                    k['text'] = s #just pass teh whole string for now\n                    k['app'] = app\n                    k['window'] = window\n                    words.append(k)\n\n                #reset tracking variables\n                window = int(row[5])\n                app = int(row[4])\n                starttime = float(row[1])\n\n                #write the character to start the next word\n                if text in newWord or text == 'Backspace':\n                    s = ''\n                else:\n                    s = row[2]\n\n    #ASSEMBLE apps and experince into json\n    d = collections.OrderedDict()\n    d['apps']=apps\n    d['window']=windows\n    d['url']=urls\n    d['appevents']=appevents\n    d['windowevents']=windowevents\n    d['urlevents']=urlevents\n    d['exps']=exps\n    d['images']=images\n    d['words']=words\n    data = d\n\n    #WRITE file\n    file = 'extract.json'\n    z = open(file,'w')\n    z.writelines(json.dumps(data))\n","tok_input_length":2158,"tok_output_length":2098,"system_prompt":"","index":974}
{"question":"This code tests BIP forks in Python 2. To run the test, follow these steps: \n\n1. Start a single node.\n2. Use regtest lock-in with 108\/144 block signalling.\n3. Activate after a further 144 blocks.\n4. Mine 2 blocks and save coinbases for later use.\n5. Mine 141 blocks to transition from DEFINED to STARTED.\n6. Mine 100 blocks signalling readiness and 44 not in order to fail to change state this period.\n7. Mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN).\n8. Mine a further 143 blocks (LOCKED_IN).\n9. Test that enforcement has not triggered (which triggers ACTIVE).\n10. Test that enforcement has triggered.","input":"","expected_output":"#!\/usr\/bin\/env python2\n# Copyright (c) 2015 The Deuscoin Core developers\n# Distributed under the MIT\/X11 software license, see the accompanying\n# file COPYING or http:\/\/www.opensource.org\/licenses\/mit-license.php.\n#\n\nfrom test_framework.test_framework import ComparisonTestFramework\nfrom test_framework.util import *\nfrom test_framework.mininode import CTransaction, NetworkThread\nfrom test_framework.blocktools import create_coinbase, create_block\nfrom test_framework.comptool import TestInstance, TestManager\nfrom test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\nfrom binascii import hexlify, unhexlify\nimport cStringIO\nimport time\nimport itertools\n\n'''\nThis test is meant to exercise BIP forks\nConnect to a single node.\nregtest lock-in with 108\/144 block signalling\nactivation after a further 144 blocks\nmine 2 block and save coinbases for later use\nmine 141 blocks to transition from DEFINED to STARTED\nmine 100 blocks signalling readiness and 44 not in order to fail to change state this period\nmine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)\nmine a further 143 blocks (LOCKED_IN)\ntest that enforcement has not triggered (which triggers ACTIVE)\ntest that enforcement has triggered\n'''\n\n\n\nclass BIP9SoftForksTest(ComparisonTestFramework):\n\n    def __init__(self):\n        self.num_nodes = 1\n\n    def setup_network(self):\n        self.nodes = start_nodes(1, self.options.tmpdir,\n                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n                                 binary=[self.options.testbinary])\n\n    def run_test(self):\n        self.test = TestManager(self, self.options.tmpdir)\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n        self.test.run()\n\n    def create_transaction(self, node, coinbase, to_address, amount):\n        from_txid = node.getblock(coinbase)['tx'][0]\n        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n        outputs = { to_address : amount }\n        rawtx = node.createrawtransaction(inputs, outputs)\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(rawtx))\n        tx.deserialize(f)\n        tx.nVersion = 2\n        return tx\n\n    def sign_transaction(self, node, tx):\n        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n        tx.deserialize(f)\n        return tx\n\n    def generate_blocks(self, number, version, test_blocks = []):\n        for i in xrange(number):\n            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n            block.nVersion = version\n            block.rehash()\n            block.solve()\n            test_blocks.append([block, True])\n            self.last_block_time += 1\n            self.tip = block.sha256\n            self.height += 1\n        return test_blocks\n\n    def get_bip9_status(self, key):\n        info = self.nodes[0].getblockchaininfo()\n        for row in info['bip9_softforks']:\n            if row['id'] == key:\n                return row\n        raise IndexError ('key:\"%s\" not found' % key)\n\n\n    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n        # generate some coins for later\n        self.coinbase_blocks = self.nodes[0].generate(2)\n        self.height = 3  # height of the next block to build\n        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n        self.nodeaddress = self.nodes[0].getnewaddress()\n        self.last_block_time = int(time.time())\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n\n        # Test 1\n        # Advance from DEFINED to STARTED\n        test_blocks = self.generate_blocks(141, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 2\n        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 3\n        # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 4\n        # 143 more version 536870913 blocks (waiting period-1)\n        test_blocks = self.generate_blocks(143, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 5\n        # Check that the new rule is enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = activated_version\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n\n        self.last_block_time += 1\n        self.tip = block.sha256\n        self.height += 1\n        yield TestInstance([[block, True]])\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n\n        # Test 6\n        # Check that the new sequence lock rules are enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = 5\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n        self.last_block_time += 1\n        yield TestInstance([[block, False]])\n\n        # Restart all\n        stop_nodes(self.nodes)\n        wait_deuscoinds()\n        shutil.rmtree(self.options.tmpdir)\n        self.setup_chain()\n        self.setup_network()\n        self.test.clear_all_connections()\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n\n\n\n    def get_tests(self):\n        for test in itertools.chain(\n                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)\n        ):\n            yield test\n\n    def donothing(self, tx):\n        return\n\n    def csv_invalidate(self, tx):\n        '''Modify the signature in vin 0 of the tx to fail CSV\n        Prepends -1 CSV DROP in the scriptSig itself.\n        '''\n        tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] +\n                                      list(CScript(tx.vin[0].scriptSig)))\n\n    def sequence_lock_invalidate(self, tx):\n        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n        '''\n        tx.vin[0].nSequence = 0x00FFFFFF\n        tx.nLockTime = 0\n\n    def mtp_invalidate(self, tx):\n        '''Modify the nLockTime to make it fails once MTP rule is activated\n        '''\n        # Disable Sequence lock, Activate nLockTime\n        tx.vin[0].nSequence = 0x90FFFFFF\n        tx.nLockTime = self.last_block_time\n\nif __name__ == '__main__':\n    BIP9SoftForksTest().main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code tests BIP forks in Python 2. To run the test, follow these steps: \n\n1. Start a single node.\n2. Use regtest lock-in with 108\/144 block signalling.\n3. Activate after a further 144 blocks.\n4. Mine 2 blocks and save coinbases for later use.\n5. Mine 141 blocks to transition from DEFINED to STARTED.\n6. Mine 100 blocks signalling readiness and 44 not in order to fail to change state this period.\n7. Mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN).\n8. Mine a further 143 blocks (LOCKED_IN).\n9. Test that enforcement has not triggered (which triggers ACTIVE).\n10. Test that enforcement has triggered.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python2\n# Copyright (c) 2015 The Deuscoin Core developers\n# Distributed under the MIT\/X11 software license, see the accompanying\n# file COPYING or http:\/\/www.opensource.org\/licenses\/mit-license.php.\n#\n\nfrom test_framework.test_framework import ComparisonTestFramework\nfrom test_framework.util import *\nfrom test_framework.mininode import CTransaction, NetworkThread\nfrom test_framework.blocktools import create_coinbase, create_block\nfrom test_framework.comptool import TestInstance, TestManager\nfrom test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\nfrom binascii import hexlify, unhexlify\nimport cStringIO\nimport time\nimport itertools\n\n'''\nThis test is meant to exercise BIP forks\nConnect to a single node.\nregtest lock-in with 108\/144 block signalling\nactivation after a further 144 blocks\nmine 2 block and save coinbases for later use\nmine 141 blocks to transition from DEFINED to STARTED\nmine 100 blocks signalling readiness and 44 not in order to fail to change state this period\nmine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)\nmine a further 143 blocks (LOCKED_IN)\ntest that enforcement has not triggered (which triggers ACTIVE)\ntest that enforcement has triggered\n'''\n\n\n\nclass BIP9SoftForksTest(ComparisonTestFramework):\n\n    def __init__(self):\n        self.num_nodes = 1\n\n    def setup_network(self):\n        self.nodes = start_nodes(1, self.options.tmpdir,\n                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n                                 binary=[self.options.testbinary])\n\n    def run_test(self):\n        self.test = TestManager(self, self.options.tmpdir)\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n        self.test.run()\n\n    def create_transaction(self, node, coinbase, to_address, amount):\n        from_txid = node.getblock(coinbase)['tx'][0]\n        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n        outputs = { to_address : amount }\n        rawtx = node.createrawtransaction(inputs, outputs)\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(rawtx))\n        tx.deserialize(f)\n        tx.nVersion = 2\n        return tx\n\n    def sign_transaction(self, node, tx):\n        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n        tx.deserialize(f)\n        return tx\n\n    def generate_blocks(self, number, version, test_blocks = []):\n        for i in xrange(number):\n            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n            block.nVersion = version\n            block.rehash()\n            block.solve()\n            test_blocks.append([block, True])\n            self.last_block_time += 1\n            self.tip = block.sha256\n            self.height += 1\n        return test_blocks\n\n    def get_bip9_status(self, key):\n        info = self.nodes[0].getblockchaininfo()\n        for row in info['bip9_softforks']:\n            if row['id'] == key:\n                return row\n        raise IndexError ('key:\"%s\" not found' % key)\n\n\n    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n        # generate some coins for later\n        self.coinbase_blocks = self.nodes[0].generate(2)\n        self.height = 3  # height of the next block to build\n        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n        self.nodeaddress = self.nodes[0].getnewaddress()\n        self.last_block_time = int(time.time())\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n\n        # Test 1\n        # Advance from DEFINED to STARTED\n        test_blocks = self.generate_blocks(141, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 2\n        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 3\n        # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 4\n        # 143 more version 536870913 blocks (waiting period-1)\n        test_blocks = self.generate_blocks(143, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 5\n        # Check that the new rule is enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = activated_version\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n\n        self.last_block_time += 1\n        self.tip = block.sha256\n        self.height += 1\n        yield TestInstance([[block, True]])\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n\n        # Test 6\n        # Check that the new sequence lock rules are enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = 5\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n        self.last_block_time += 1\n        yield TestInstance([[block, False]])\n\n        # Restart all\n        stop_nodes(self.nodes)\n        wait_deuscoinds()\n        shutil.rmtree(self.options.tmpdir)\n        self.setup_chain()\n        self.setup_network()\n        self.test.clear_all_connections()\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n\n\n\n    def get_tests(self):\n        for test in itertools.chain(\n                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)\n        ):\n            yield test\n\n    def donothing(self, tx):\n        return\n\n    def csv_invalidate(self, tx):\n        '''Modify the signature in vin 0 of the tx to fail CSV\n        Prepends -1 CSV DROP in the scriptSig itself.\n        '''\n        tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] +\n                                      list(CScript(tx.vin[0].scriptSig)))\n\n    def sequence_lock_invalidate(self, tx):\n        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n        '''\n        tx.vin[0].nSequence = 0x00FFFFFF\n        tx.nLockTime = 0\n\n    def mtp_invalidate(self, tx):\n        '''Modify the nLockTime to make it fails once MTP rule is activated\n        '''\n        # Disable Sequence lock, Activate nLockTime\n        tx.vin[0].nSequence = 0x90FFFFFF\n        tx.nLockTime = self.last_block_time\n\nif __name__ == '__main__':\n    BIP9SoftForksTest().main()","tok_input_length":2296,"tok_output_length":2108,"system_prompt":"","index":1382}
{"question":"The given code is a Python function that downloads GLEAM ET data. The function is named \"DownloadData\" and takes in several parameters such as the directory to save the data, start and end dates, latitude and longitude limits, the number of cores to use, and a waitbar flag. The function checks the start and end dates and sets them if not provided. It then creates an array of days for which the ET data is taken. The function downloads the GLEAM data from the website and returns the data and latitude and longitude in meters of those tiles. It then passes variables to a parallel function and runs it. Finally, the function removes all .nc files.","input":"","expected_output":"# -*- coding: utf-8 -*-\n# -*- coding: utf-8 -*-\n\"\"\"\nAuthors: Tim Hessels\n         UNESCO-IHE 2016\nContact: t.hessels@unesco-ihe.org\nRepository: https:\/\/github.com\/wateraccounting\/wa\nModule: Collect\/GLEAM\n\"\"\"\n\n# import general python modules\nimport os\nimport numpy as np\nimport pandas as pd\nimport glob\nfrom joblib import Parallel, delayed\nimport paramiko\nimport calendar\nfrom netCDF4 import Dataset\n\n# Water Accounting modules\nimport wa.General.data_conversions as DC\nfrom wa import WebAccounts\n\ndef DownloadData(Dir, Startdate, Enddate, latlim, lonlim, Waitbar, cores, TimeCase):\n    \"\"\"\n    This function downloads GLEAM ET data\n\n    Keyword arguments:\n    Dir -- 'C:\/file\/to\/path\/'\n    Startdate -- 'yyyy-mm-dd'\n    Enddate -- 'yyyy-mm-dd'\n    latlim -- [ymin, ymax] (values must be between -50 and 50)\n    lonlim -- [xmin, xmax] (values must be between -180 and 180)\n    cores -- The number of cores used to run the routine. It can be 'False'\n             to avoid using parallel computing routines.\n    Waitbar -- 1 (Default) will print a waitbar             \n    \"\"\"\n    # Check start and end date and otherwise set the date\n    if not Startdate:\n        Startdate = pd.Timestamp('2003-01-01')\n    if not Enddate: \n        Enddate = pd.Timestamp('2015-12-31')\n\n    # Make an array of the days of which the ET is taken\n    YearsDownloadstart = str(Startdate[0:4])\n    YearsDownloadend = str(Enddate[0:4])\n    Years = range(int(YearsDownloadstart),int(YearsDownloadend)+1)  \n\n    # String Parameters\n    if TimeCase == 'daily':\n        VarCode = 'ET_GLEAM.V3.1b_mm-day-1_daily'\n        FTPprefix = 'data\/v3.1b\/'\n        TimeFreq = 'D'\n        Folder_name = 'Daily'        \n        \n    elif TimeCase == 'monthly':\n        VarCode = 'ET_GLEAM.V3.1b_mm-month-1_monthly'\n        FTPprefix = 'data\/v3.1b\/'\n        TimeFreq = 'M'\n        Folder_name = 'Monthly'\n        \n        # Get end of month for Enddate\n        monthDownloadend = str(Enddate[5:7])\n        End_month = calendar.monthrange(int(YearsDownloadend),int(monthDownloadend))[1]\n        Enddate = '%d-%02d-%d' %(int(YearsDownloadend),int(monthDownloadend),int(End_month)) \n    else:\n        raise KeyError(\"The input time interval is not supported\")\n             \n    Dates = pd.date_range(Startdate, Enddate, freq = TimeFreq)\n   \n    # Make directory for the MODIS ET data\n    output_folder=os.path.join(Dir,'Evaporation', 'GLEAM', Folder_name)\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n    \n\t# Check variables\n    if latlim[0] < -50 or latlim[1] > 50:\n        print ('Latitude above 50N or below 50S is not possible.'\n               ' Value set to maximum')\n        latlim[0] = np.max(latlim[0], -50)\n        latlim[1] = np.min(lonlim[1], 50)\n    if lonlim[0] < -180 or lonlim[1] > 180:\n        print ('Longitude must be between 180E and 180W.'\n               ' Now value is set to maximum')\n        lonlim[0] = np.max(latlim[0], -180)\n        lonlim[1] = np.min(lonlim[1], 180)\n\n    # Collect the data from the GLEAM webpage and returns the data and lat and long in meters of those tiles\n    try:\n        Collect_data(FTPprefix, Years, output_folder, Waitbar)\n    except:\n        print \"Was not able to download the file\"  \n\n    # Create Waitbar\n    print '\\nProcess the GLEAM data'\n    if Waitbar == 1:\n        import wa.Functions.Start.WaitbarConsole as WaitbarConsole\n        total_amount = len(Dates)\n        amount = 0\n        WaitbarConsole.printWaitBar(amount, total_amount, prefix = 'Progress:', suffix = 'Complete', length = 50)\n\n    # Pass variables to parallel function and run\n    args = [output_folder, latlim, lonlim, VarCode, TimeCase]\n    if not cores:\n        for Date in Dates:\n            RetrieveData(Date, args)\n            if Waitbar == 1:\n                amount += 1\n                WaitbarConsole.printWaitBar(amount, total_amount, prefix = 'Progress:', suffix = 'Complete', length = 50)\n        results = True\n    else:\n        results = Parallel(n_jobs=cores)(delayed(RetrieveData)(Date, args)\n                                         for Date in Dates)\n                               \n    # Remove all .hdf files\t\n    os.chdir(output_folder)\n    files = glob.glob(\"*.nc\")\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    for f in files:\n        os.remove(os.path.join(output_folder, f))        \n\t\t\t\t\t\t\t\t\t\n\treturn(results)\t\t\n\ndef RetrieveData(Date, args):\n    \"\"\"\n    This function retrieves GLEAM ET data for a given date from the\n    www.gleam.eu server.\n\n    Keyword arguments:\n    Date -- 'yyyy-mm-dd'\n    args -- A list of parameters defined in the DownloadData function.\n    \"\"\"\n    # Argument\n    [output_folder, latlim, lonlim, VarCode, TimeCase] = args\n\n    # Adjust latlim to GLEAM dataset\n    latlim1=[latlim[1]*-1, latlim[0]*-1]\n    \n    # select the spatial dataset\n    Ystart=int(np.floor((latlim1[0]+90)\/0.25))\n    Yend=int(np.ceil((latlim1[1]+90)\/0.25))\n    Xstart=int(np.floor((lonlim[0]+180)\/0.25))\n    Xend=int(np.ceil((lonlim[1]+180)\/0.25))    \n       \n    Year=Date.year\n    Month=Date.month   \n    \n    filename='E_' + str(Year) + '_GLEAM_v3.1b.nc'\n    local_filename = os.path.join(output_folder, filename)\n\n    f = Dataset(local_filename,mode='r')\n    \n    if TimeCase == 'monthly':\n\n        # defines the start and end of the month\n        Datesend1=str(Date)\n        Datesend2=Datesend1.replace(Datesend1[8:10],\"01\")\n        Datesend3=Datesend2[0:10]\n        Datesend4=Datesend1[0:10]\n        Datestart = pd.date_range(Datesend3,Datesend4,freq = 'MS')\n        \n        # determine the DOY-1 and DOYend (those are use to define the temporal boundaries of the yearly data)\n        DOY=int(Datestart[0].strftime('%j'))\n        DOYend=int(Date.strftime('%j'))\n        DOYDownload=DOY-1\n        Day = 1\n \n        Data = f.variables['E'][DOYDownload:DOYend,Xstart:Xend,Ystart:Yend]\n        data=np.array(Data)\n        f.close()\n\n        # Sum ET data in time and change the no data value into -999\n        dataSum=sum(data,1)\n        dataSum[dataSum<-100]=-999.000\n        dataCor=np.swapaxes(dataSum,0,1)\n       \n    if TimeCase == 'daily':  \n        Day = Date.day    \n\n        # Define the DOY, DOY-1 is taken from the yearly dataset\n        DOY=int(Date.strftime('%j'))\n        DOYDownload=DOY-1\n\n        Data = f.variables['E'][DOYDownload,Xstart:Xend,Ystart:Yend]\n        data=np.array(Data)\n        f.close()\n    \n        data[data<-100]=-999.000\n        dataCor=np.swapaxes(data,0,1)\n        \n    # The Georeference of the map\n    geo_in=[lonlim[0], 0.25, 0.0, latlim[1], 0.0, -0.25]   \n\n    # Name of the map\n    dataset_name=VarCode + '_' + str(Year) + '.' + str(Month).zfill(2)  + '.' + str(Day).zfill(2) + '.tif'\n    output_file=os.path.join(output_folder, dataset_name)\n        \n    # save data as tiff file\n    DC.Save_as_tiff(name=output_file, data=dataCor, geo=geo_in, projection=\"WGS84\")\n\n    return True\n\n    \ndef Collect_data(FTPprefix,Years,output_folder, Waitbar):\n    '''\n    This function downloads all the needed GLEAM files from hydras.ugent.be as a nc file.\n\n    Keywords arguments:\n    FTPprefix -- FTP path to the GLEAM data\n    Date -- 'yyyy-mm-dd' \t\t\t\t\n    output_folder -- 'C:\/file\/to\/path\/'\t\n    '''\n    # account of the SFTP server (only password is missing)\n    server='hydras.ugent.be'\n    portnumber=2225\n\n    username, password = WebAccounts.Accounts(Type='GLEAM')\n  \n    # Create Waitbar\n    print '\\nDownload GLEAM data'\n    if Waitbar == 1:\n        import wa.Functions.Start.WaitbarConsole as WaitbarConsole\n        total_amount2 = len(Years)\n        amount2 = 0\n        WaitbarConsole.printWaitBar(amount2, total_amount2, prefix = 'Progress:', suffix = 'Complete', length = 50)\n\n    \n    for year in Years:\n        directory = os.path.join(FTPprefix, '%d' %year)  \n        ssh=paramiko.SSHClient()\n        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        ssh.connect(server, port=portnumber, username=username, password=password)\n        ftp=ssh.open_sftp()\n        ftp.chdir(directory)\n    \n        filename='E_' + str(year) + '_GLEAM_v3.1b.nc'\n        local_filename = os.path.join(output_folder, filename)\n        \n        if not os.path.exists(local_filename):\n            ftp.get(filename, local_filename)\n            \n        if Waitbar == 1:       \n            amount2 += 1\n            WaitbarConsole.printWaitBar(amount2, total_amount2, prefix = 'Progress:', suffix = 'Complete', length = 50)\n    \n    \n    ftp.close()\n    ssh.close()\n\t\t\t\t\n    return()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python function that downloads GLEAM ET data. The function is named \"DownloadData\" and takes in several parameters such as the directory to save the data, start and end dates, latitude and longitude limits, the number of cores to use, and a waitbar flag. The function checks the start and end dates and sets them if not provided. It then creates an array of days for which the ET data is taken. The function downloads the GLEAM data from the website and returns the data and latitude and longitude in meters of those tiles. It then passes variables to a parallel function and runs it. Finally, the function removes all .nc files.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n# -*- coding: utf-8 -*-\n\"\"\"\nAuthors: Tim Hessels\n         UNESCO-IHE 2016\nContact: t.hessels@unesco-ihe.org\nRepository: https:\/\/github.com\/wateraccounting\/wa\nModule: Collect\/GLEAM\n\"\"\"\n\n# import general python modules\nimport os\nimport numpy as np\nimport pandas as pd\nimport glob\nfrom joblib import Parallel, delayed\nimport paramiko\nimport calendar\nfrom netCDF4 import Dataset\n\n# Water Accounting modules\nimport wa.General.data_conversions as DC\nfrom wa import WebAccounts\n\ndef DownloadData(Dir, Startdate, Enddate, latlim, lonlim, Waitbar, cores, TimeCase):\n    \"\"\"\n    This function downloads GLEAM ET data\n\n    Keyword arguments:\n    Dir -- 'C:\/file\/to\/path\/'\n    Startdate -- 'yyyy-mm-dd'\n    Enddate -- 'yyyy-mm-dd'\n    latlim -- [ymin, ymax] (values must be between -50 and 50)\n    lonlim -- [xmin, xmax] (values must be between -180 and 180)\n    cores -- The number of cores used to run the routine. It can be 'False'\n             to avoid using parallel computing routines.\n    Waitbar -- 1 (Default) will print a waitbar             \n    \"\"\"\n    # Check start and end date and otherwise set the date\n    if not Startdate:\n        Startdate = pd.Timestamp('2003-01-01')\n    if not Enddate: \n        Enddate = pd.Timestamp('2015-12-31')\n\n    # Make an array of the days of which the ET is taken\n    YearsDownloadstart = str(Startdate[0:4])\n    YearsDownloadend = str(Enddate[0:4])\n    Years = range(int(YearsDownloadstart),int(YearsDownloadend)+1)  \n\n    # String Parameters\n    if TimeCase == 'daily':\n        VarCode = 'ET_GLEAM.V3.1b_mm-day-1_daily'\n        FTPprefix = 'data\/v3.1b\/'\n        TimeFreq = 'D'\n        Folder_name = 'Daily'        \n        \n    elif TimeCase == 'monthly':\n        VarCode = 'ET_GLEAM.V3.1b_mm-month-1_monthly'\n        FTPprefix = 'data\/v3.1b\/'\n        TimeFreq = 'M'\n        Folder_name = 'Monthly'\n        \n        # Get end of month for Enddate\n        monthDownloadend = str(Enddate[5:7])\n        End_month = calendar.monthrange(int(YearsDownloadend),int(monthDownloadend))[1]\n        Enddate = '%d-%02d-%d' %(int(YearsDownloadend),int(monthDownloadend),int(End_month)) \n    else:\n        raise KeyError(\"The input time interval is not supported\")\n             \n    Dates = pd.date_range(Startdate, Enddate, freq = TimeFreq)\n   \n    # Make directory for the MODIS ET data\n    output_folder=os.path.join(Dir,'Evaporation', 'GLEAM', Folder_name)\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n    \n\t# Check variables\n    if latlim[0] < -50 or latlim[1] > 50:\n        print ('Latitude above 50N or below 50S is not possible.'\n               ' Value set to maximum')\n        latlim[0] = np.max(latlim[0], -50)\n        latlim[1] = np.min(lonlim[1], 50)\n    if lonlim[0] < -180 or lonlim[1] > 180:\n        print ('Longitude must be between 180E and 180W.'\n               ' Now value is set to maximum')\n        lonlim[0] = np.max(latlim[0], -180)\n        lonlim[1] = np.min(lonlim[1], 180)\n\n    # Collect the data from the GLEAM webpage and returns the data and lat and long in meters of those tiles\n    try:\n        Collect_data(FTPprefix, Years, output_folder, Waitbar)\n    except:\n        print \"Was not able to download the file\"  \n\n    # Create Waitbar\n    print '\\nProcess the GLEAM data'\n    if Waitbar == 1:\n        import wa.Functions.Start.WaitbarConsole as WaitbarConsole\n        total_amount = len(Dates)\n        amount = 0\n        WaitbarConsole.printWaitBar(amount, total_amount, prefix = 'Progress:', suffix = 'Complete', length = 50)\n\n    # Pass variables to parallel function and run\n    args = [output_folder, latlim, lonlim, VarCode, TimeCase]\n    if not cores:\n        for Date in Dates:\n            RetrieveData(Date, args)\n            if Waitbar == 1:\n                amount += 1\n                WaitbarConsole.printWaitBar(amount, total_amount, prefix = 'Progress:', suffix = 'Complete', length = 50)\n        results = True\n    else:\n        results = Parallel(n_jobs=cores)(delayed(RetrieveData)(Date, args)\n                                         for Date in Dates)\n                               \n    # Remove all .hdf files\t\n    os.chdir(output_folder)\n    files = glob.glob(\"*.nc\")\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    for f in files:\n        os.remove(os.path.join(output_folder, f))        \n\t\t\t\t\t\t\t\t\t\n\treturn(results)\t\t\n\ndef RetrieveData(Date, args):\n    \"\"\"\n    This function retrieves GLEAM ET data for a given date from the\n    www.gleam.eu server.\n\n    Keyword arguments:\n    Date -- 'yyyy-mm-dd'\n    args -- A list of parameters defined in the DownloadData function.\n    \"\"\"\n    # Argument\n    [output_folder, latlim, lonlim, VarCode, TimeCase] = args\n\n    # Adjust latlim to GLEAM dataset\n    latlim1=[latlim[1]*-1, latlim[0]*-1]\n    \n    # select the spatial dataset\n    Ystart=int(np.floor((latlim1[0]+90)\/0.25))\n    Yend=int(np.ceil((latlim1[1]+90)\/0.25))\n    Xstart=int(np.floor((lonlim[0]+180)\/0.25))\n    Xend=int(np.ceil((lonlim[1]+180)\/0.25))    \n       \n    Year=Date.year\n    Month=Date.month   \n    \n    filename='E_' + str(Year) + '_GLEAM_v3.1b.nc'\n    local_filename = os.path.join(output_folder, filename)\n\n    f = Dataset(local_filename,mode='r')\n    \n    if TimeCase == 'monthly':\n\n        # defines the start and end of the month\n        Datesend1=str(Date)\n        Datesend2=Datesend1.replace(Datesend1[8:10],\"01\")\n        Datesend3=Datesend2[0:10]\n        Datesend4=Datesend1[0:10]\n        Datestart = pd.date_range(Datesend3,Datesend4,freq = 'MS')\n        \n        # determine the DOY-1 and DOYend (those are use to define the temporal boundaries of the yearly data)\n        DOY=int(Datestart[0].strftime('%j'))\n        DOYend=int(Date.strftime('%j'))\n        DOYDownload=DOY-1\n        Day = 1\n \n        Data = f.variables['E'][DOYDownload:DOYend,Xstart:Xend,Ystart:Yend]\n        data=np.array(Data)\n        f.close()\n\n        # Sum ET data in time and change the no data value into -999\n        dataSum=sum(data,1)\n        dataSum[dataSum<-100]=-999.000\n        dataCor=np.swapaxes(dataSum,0,1)\n       \n    if TimeCase == 'daily':  \n        Day = Date.day    \n\n        # Define the DOY, DOY-1 is taken from the yearly dataset\n        DOY=int(Date.strftime('%j'))\n        DOYDownload=DOY-1\n\n        Data = f.variables['E'][DOYDownload,Xstart:Xend,Ystart:Yend]\n        data=np.array(Data)\n        f.close()\n    \n        data[data<-100]=-999.000\n        dataCor=np.swapaxes(data,0,1)\n        \n    # The Georeference of the map\n    geo_in=[lonlim[0], 0.25, 0.0, latlim[1], 0.0, -0.25]   \n\n    # Name of the map\n    dataset_name=VarCode + '_' + str(Year) + '.' + str(Month).zfill(2)  + '.' + str(Day).zfill(2) + '.tif'\n    output_file=os.path.join(output_folder, dataset_name)\n        \n    # save data as tiff file\n    DC.Save_as_tiff(name=output_file, data=dataCor, geo=geo_in, projection=\"WGS84\")\n\n    return True\n\n    \ndef Collect_data(FTPprefix,Years,output_folder, Waitbar):\n    '''\n    This function downloads all the needed GLEAM files from hydras.ugent.be as a nc file.\n\n    Keywords arguments:\n    FTPprefix -- FTP path to the GLEAM data\n    Date -- 'yyyy-mm-dd' \t\t\t\t\n    output_folder -- 'C:\/file\/to\/path\/'\t\n    '''\n    # account of the SFTP server (only password is missing)\n    server='hydras.ugent.be'\n    portnumber=2225\n\n    username, password = WebAccounts.Accounts(Type='GLEAM')\n  \n    # Create Waitbar\n    print '\\nDownload GLEAM data'\n    if Waitbar == 1:\n        import wa.Functions.Start.WaitbarConsole as WaitbarConsole\n        total_amount2 = len(Years)\n        amount2 = 0\n        WaitbarConsole.printWaitBar(amount2, total_amount2, prefix = 'Progress:', suffix = 'Complete', length = 50)\n\n    \n    for year in Years:\n        directory = os.path.join(FTPprefix, '%d' %year)  \n        ssh=paramiko.SSHClient()\n        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        ssh.connect(server, port=portnumber, username=username, password=password)\n        ftp=ssh.open_sftp()\n        ftp.chdir(directory)\n    \n        filename='E_' + str(year) + '_GLEAM_v3.1b.nc'\n        local_filename = os.path.join(output_folder, filename)\n        \n        if not os.path.exists(local_filename):\n            ftp.get(filename, local_filename)\n            \n        if Waitbar == 1:       \n            amount2 += 1\n            WaitbarConsole.printWaitBar(amount2, total_amount2, prefix = 'Progress:', suffix = 'Complete', length = 50)\n    \n    \n    ftp.close()\n    ssh.close()\n\t\t\t\t\n    return()","tok_input_length":2457,"tok_output_length":2293,"system_prompt":"","index":4919}
{"question":"Create a Python Django web application that generates a ztree for a given user. The ztree should display a hierarchical structure of projects, services, hosts, and other relevant information. The ztree should be accessible only to authenticated users. The ztree should be generated using the given code.","input":"","expected_output":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n# =============================================================================\n#     FileName: api.py\n#         Desc: 2015-15\/4\/16:\u4e0b\u53485:54\n#       Author: \u82e6\u5496\u5561\n#        Email: voilet@qq.com\n#     HomePage: http:\/\/blog.kukafei520.net\n#      History: \n# =============================================================================\n\nfrom django.shortcuts import render_to_response, HttpResponseRedirect, HttpResponse\nfrom django.template import RequestContext\nfrom django.contrib.auth.decorators import login_required\nimport commands, json, yaml\nfrom assets.models import Project\nfrom mysite.settings import auth_key\nfrom assets.models import Host, IDC\nimport hashlib, time\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.shortcuts import redirect\n# \u767b\u5f55\nfrom users.models import CustomUser\nfrom assets.models import project_swan\nfrom assets.ztree.service import ztree_tag\nfrom django.shortcuts import get_object_or_404\nfrom assets.models import Host, IDC, Service, Line, Project, HostRecord\nfrom cmdb_auth.models import AuthNode\n\n\n# songxs add\n@login_required\ndef ztree_project(request):\n    line_list = Line.objects.filter()\n    business = Project.objects.filter(line__isnull=False)\n    no_business = Project.objects.filter(line__isnull=True)\n    ztree_data = ztree_tag(request.user.username)\n\n    return render_to_response('default\/default.html', locals(), context_instance=RequestContext(request))\n\n\n@login_required\ndef ztree_business(request):\n    \"\"\"\n    \u6811\u8bf7\u6c42\u9a8c\u8bc1\n    :param request:\n    :return:\n    \"\"\"\n    business_name = request.GET.get(\"uuid\", False)\n    get_token = str(request.GET.get(\"token\", False))\n    ztree_data = ztree_tag(request.user.username)\n\n    try:\n        sum_token = str(hashlib.sha1(request.user.username + auth_key + business_name +\n                                     time.strftime('%Y-%m-%d', time.localtime(time.time()))).hexdigest())\n    except TypeError:\n        sum_token = False\n\n    if request.GET.get(\"options\") == \"host\":\n        uuid = request.GET.get('uuid', '')\n        ip = request.GET.get('ip', '')\n        if uuid:\n            host = get_object_or_404(Host, uuid=uuid)\n        elif ip:\n            host = get_object_or_404(Host, eth1=ip)\n        host_record = HostRecord.objects.filter(host=host).order_by('-time')\n        user_audit = AuthNode.objects.filter(node=host)\n        audit_count = user_audit.count()\n        return render_to_response('ztree\/host_detail.html', locals(), context_instance=RequestContext(request))\n\n\n    content_status = True\n    idle = request.GET.get(\"idle\", False)\n\n    if get_token != sum_token:\n        content_status = False\n        return render_to_response('ztree\/ztree_service.html', locals(), context_instance=RequestContext(request))\n\n    if business_name != u\"\u672a\u5206\u7c7b\":\n        try:\n            bus_data = Project.objects.get(uuid=request.GET.get(\"uuid\"))\n            if not idle:\n                server_list = Host.objects.filter(business=bus_data, idle=True).order_by(\"create_time\")\n            else:\n                server_list = Host.objects.filter(business=bus_data, idle=False).order_by(\"create_time\")\n        except:\n            pass\n\n    else:\n        bus_data = u'\u672a\u5206\u7c7b'\n        idc_data = IDC.objects.filter(type=1)\n        if not idle:\n            server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=True).order_by(\"create_time\")\n        else:\n            server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=False).order_by(\"create_time\")\n\n    if request.GET.get(\"options\") == \"swan_push\":\n        s = Ztree_class(business_name, request.user.first_name)\n        rst = s.swan()\n        rst_data = rst.get(\"swan_name\")\n        status = len(rst_data)\n        return render_to_response('ztree\/swan.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"doc\":\n        data = Project.objects.get(pk=business_name)\n        # return render_to_response('ztree\/swan.html', locals(), context_instance=RequestContext(request))\n        return render_to_response('markdown\/index.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"highstate\":\n        project = Project.objects.get(uuid=business_name)\n        host_list = Host.objects.filter(business=project)\n        return render_to_response('ztree\/highstate.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"monitor\":\n        return render_to_response('ztree\/zabbix_count.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"salt\":\n        return render_to_response('ztree\/saltstack.html', locals(), context_instance=RequestContext(request))\n\n\n    if request.GET.get(\"options\") == \"project\":\n        ip_list = []\n        server_list = {}\n        line_name = Line.objects.get(pk=business_name)\n        business_data = Project.objects.filter(line=business_name)\n\n        for i in business_data:\n            node = Host.objects.filter(business=i, idle=True)\n            for k in node:\n                if k.eth1 not in ip_list:\n                    ip_list.append(k.eth1)\n                    server_list[str(k.uuid)] = k.eth1\n        count = len(ip_list)\n        return render_to_response('ztree\/project.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"types\":\n        get_env = request.GET.get(\"name\")\n        business_data = Project.objects.filter(pk=business_name)\n        server_list = Host.objects.filter(business=business_data, env=get_env).order_by(\"-create_time\")\n\n        count = server_list.count()\n        return render_to_response('ztree\/ztree.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"service\":\n        s = []\n        bus_data = Project.objects.get(uuid=business_name)\n        server_list = Host.objects.filter(business=bus_data, idle=True).order_by(\"create_time\")\n\n        for i in server_list:\n            t = i.service.all()\n            for b in t:\n                if b not in s:\n                    s.append(b)\n\n        tag = request.GET.get(\"tgt\", False)\n\n        if tag:\n            service_all = Service.objects.get(name=tag)\n            server_list = Host.objects.filter(service=service_all, business=bus_data)\n\n        return render_to_response('ztree\/ztree_service.html', locals(), context_instance=RequestContext(request))\n\n    count = server_list.count()\n    return render_to_response('ztree\/ztree.html', locals(), context_instance=RequestContext(request))\n\n\n@login_required\ndef CdnCache(request):\n    \"\"\"\n    \u6811\u8bf7\u6c42\u9a8c\u8bc1\n    :param request:\n    :return:\n    \"\"\"\n    service = request.GET.get(\"services\")\n    get_token = str(request.GET.get(\"token\"))\n    uuid = str(request.GET.get(\"uuid\"))\n\n    sum_token = str(hashlib.sha1(request.user.username + auth_key + service + time.strftime('%Y-%m-%d', time.localtime(\n            time.time()))).hexdigest())\n\n    content_status = True\n    if get_token != sum_token:\n        content_status = False\n\n    idc_data = IDC.objects.get(uuid=uuid)\n    service_all = Service.objects.get(name=service)\n    server_list = Host.objects.filter(idc=idc_data, service=service_all)\n    business_name = idc_data.name\n    service_tag = service\n\n    return render_to_response('ztree\/service.html', locals(), context_instance=RequestContext(request))\n\n\n@login_required\ndef CdnIdc(request):\n    \"\"\"\n    \u6811\u8bf7\u6c42\u9a8c\u8bc1\n    :param request:\n    :return:\n    \"\"\"\n    get_token = str(request.GET.get(\"token\"))\n    uuid = str(request.GET.get(\"uuid\"))\n    idc_data = IDC.objects.get(uuid=uuid)\n\n    sum_token = str(hashlib.sha1(request.user.username + auth_key + idc_data.name + time.strftime('%Y-%m-%d',\n                                                                                                  time.localtime(\n                                                                                                          time.time()))).hexdigest())\n\n    content_status = True\n    if get_token != sum_token:\n        content_status = False\n\n    server_list = Host.objects.filter(idc=idc_data)\n    business_name = idc_data.name\n\n    return render_to_response('ztree\/idc.html', locals(), context_instance=RequestContext(request))\n\n\nclass Ztree_class(object):\n    \"\"\"\n    ztree \u7c7b\n    \"\"\"\n\n    def __init__(self, project_name, user):\n        self.project_name = project_name\n        self.user = user\n\n    def monitor(self):\n        return True\n\n    def swan(self):\n        rst_data = {}\n\n        user_info = CustomUser.objects.get(first_name=self.user)\n\n        myform_rst = Project.objects.get(uuid=self.project_name)\n\n        rst = project_swan.objects.filter(project_name_id=myform_rst.uuid)\n\n        \"\"\"\n        \u6240\u6709\u5f53\u524d\u9879\u76ee\u53d1\u5e03\u540d\u79f0\u653e\u5230\u4e00\u4e2alist\u4e2d\n        \"\"\"\n\n        swan_name_list = [i.swan_name for i in rst]\n        swan_push = user_info.project_swan_set.all()\n        user = CustomUser.objects.get(first_name=self.user)\n\n        if user.is_superuser:\n\n            for i in rst:\n                rst_data[str(i.uuid)] = i.swan_name\n\n        else:\n            swan_push = user_info.project_swan_set.all()\n            for i in swan_push:\n                if i.swan_name in swan_name_list:\n                    rst_data[str(i.uuid)] = i.swan_name\n\n        host_list = myform_rst.host_set.all()\n        content = {\"swan_name\": rst_data, \"host\": host_list}\n\n        return content\n\n    def highstate(self):\n        project = Project.objects.get(service_name=self.project_name)\n        # server_list = project.host_set\n        host_list = Host.objects.filter(business=project)\n\n        return True\n\n\n@csrf_exempt\ndef ZtreeIndex(request):\n    \"\"\"\n\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'POST':\n        otherParam = request.POST.get(\"otherParam\")\n        status = request.POST.get(\"status\")\n        line_id = request.POST.get(\"line_id\")\n\n        try:\n            name = request.POST.get(\"name\")\n            id = request.POST.get(\"id\")\n\n        except:\n            name = False\n\n        if not name:\n            ztree = ztree_tag(request.user.username)\n            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))\n\n        elif int(status[0]) == 1:\n            ztree = []\n            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))\n\n        else:\n            ztree = []\n            bus_data = Project.objects.get(service_name=name)\n            server_list = Host.objects.filter(business=bus_data).order_by(\"create_time\")\n\n            s = []\n            for i in server_list:\n                t = i.service.all().values()\n                for b in t:\n                    if b not in s:\n                        s.append(b)\n            tree_id = 0\n            for i in s:\n                tree_id += 1\n\n                token = hashlib.sha1(request.user.username + auth_key + i.get(\"name\") + time.strftime('%Y-%m-%d',\n                                                                                                      time.localtime(\n                                                                                                              time.time()))).hexdigest()\n\n                ztree.append({\"id\": tree_id, \"status\": 3, \"line_id\": line_id, \"name\": i.get(\"name\"), \"token\": token,\n                              \"t\": i.get(\"name\"), \"business\": bus_data.service_name})\n\n            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))\n    content = {\"status\": 403, \"message\": \"auth error\"}\n    return HttpResponse(json.dumps(content, ensure_ascii=False, indent=4))\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Django web application that generates a ztree for a given user. The ztree should display a hierarchical structure of projects, services, hosts, and other relevant information. The ztree should be accessible only to authenticated users. The ztree should be generated using the given code.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n# =============================================================================\n#     FileName: api.py\n#         Desc: 2015-15\/4\/16:\u4e0b\u53485:54\n#       Author: \u82e6\u5496\u5561\n#        Email: voilet@qq.com\n#     HomePage: http:\/\/blog.kukafei520.net\n#      History: \n# =============================================================================\n\nfrom django.shortcuts import render_to_response, HttpResponseRedirect, HttpResponse\nfrom django.template import RequestContext\nfrom django.contrib.auth.decorators import login_required\nimport commands, json, yaml\nfrom assets.models import Project\nfrom mysite.settings import auth_key\nfrom assets.models import Host, IDC\nimport hashlib, time\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.shortcuts import redirect\n# \u767b\u5f55\nfrom users.models import CustomUser\nfrom assets.models import project_swan\nfrom assets.ztree.service import ztree_tag\nfrom django.shortcuts import get_object_or_404\nfrom assets.models import Host, IDC, Service, Line, Project, HostRecord\nfrom cmdb_auth.models import AuthNode\n\n\n# songxs add\n@login_required\ndef ztree_project(request):\n    line_list = Line.objects.filter()\n    business = Project.objects.filter(line__isnull=False)\n    no_business = Project.objects.filter(line__isnull=True)\n    ztree_data = ztree_tag(request.user.username)\n\n    return render_to_response('default\/default.html', locals(), context_instance=RequestContext(request))\n\n\n@login_required\ndef ztree_business(request):\n    \"\"\"\n    \u6811\u8bf7\u6c42\u9a8c\u8bc1\n    :param request:\n    :return:\n    \"\"\"\n    business_name = request.GET.get(\"uuid\", False)\n    get_token = str(request.GET.get(\"token\", False))\n    ztree_data = ztree_tag(request.user.username)\n\n    try:\n        sum_token = str(hashlib.sha1(request.user.username + auth_key + business_name +\n                                     time.strftime('%Y-%m-%d', time.localtime(time.time()))).hexdigest())\n    except TypeError:\n        sum_token = False\n\n    if request.GET.get(\"options\") == \"host\":\n        uuid = request.GET.get('uuid', '')\n        ip = request.GET.get('ip', '')\n        if uuid:\n            host = get_object_or_404(Host, uuid=uuid)\n        elif ip:\n            host = get_object_or_404(Host, eth1=ip)\n        host_record = HostRecord.objects.filter(host=host).order_by('-time')\n        user_audit = AuthNode.objects.filter(node=host)\n        audit_count = user_audit.count()\n        return render_to_response('ztree\/host_detail.html', locals(), context_instance=RequestContext(request))\n\n\n    content_status = True\n    idle = request.GET.get(\"idle\", False)\n\n    if get_token != sum_token:\n        content_status = False\n        return render_to_response('ztree\/ztree_service.html', locals(), context_instance=RequestContext(request))\n\n    if business_name != u\"\u672a\u5206\u7c7b\":\n        try:\n            bus_data = Project.objects.get(uuid=request.GET.get(\"uuid\"))\n            if not idle:\n                server_list = Host.objects.filter(business=bus_data, idle=True).order_by(\"create_time\")\n            else:\n                server_list = Host.objects.filter(business=bus_data, idle=False).order_by(\"create_time\")\n        except:\n            pass\n\n    else:\n        bus_data = u'\u672a\u5206\u7c7b'\n        idc_data = IDC.objects.filter(type=1)\n        if not idle:\n            server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=True).order_by(\"create_time\")\n        else:\n            server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=False).order_by(\"create_time\")\n\n    if request.GET.get(\"options\") == \"swan_push\":\n        s = Ztree_class(business_name, request.user.first_name)\n        rst = s.swan()\n        rst_data = rst.get(\"swan_name\")\n        status = len(rst_data)\n        return render_to_response('ztree\/swan.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"doc\":\n        data = Project.objects.get(pk=business_name)\n        # return render_to_response('ztree\/swan.html', locals(), context_instance=RequestContext(request))\n        return render_to_response('markdown\/index.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"highstate\":\n        project = Project.objects.get(uuid=business_name)\n        host_list = Host.objects.filter(business=project)\n        return render_to_response('ztree\/highstate.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"monitor\":\n        return render_to_response('ztree\/zabbix_count.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"salt\":\n        return render_to_response('ztree\/saltstack.html', locals(), context_instance=RequestContext(request))\n\n\n    if request.GET.get(\"options\") == \"project\":\n        ip_list = []\n        server_list = {}\n        line_name = Line.objects.get(pk=business_name)\n        business_data = Project.objects.filter(line=business_name)\n\n        for i in business_data:\n            node = Host.objects.filter(business=i, idle=True)\n            for k in node:\n                if k.eth1 not in ip_list:\n                    ip_list.append(k.eth1)\n                    server_list[str(k.uuid)] = k.eth1\n        count = len(ip_list)\n        return render_to_response('ztree\/project.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"types\":\n        get_env = request.GET.get(\"name\")\n        business_data = Project.objects.filter(pk=business_name)\n        server_list = Host.objects.filter(business=business_data, env=get_env).order_by(\"-create_time\")\n\n        count = server_list.count()\n        return render_to_response('ztree\/ztree.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"service\":\n        s = []\n        bus_data = Project.objects.get(uuid=business_name)\n        server_list = Host.objects.filter(business=bus_data, idle=True).order_by(\"create_time\")\n\n        for i in server_list:\n            t = i.service.all()\n            for b in t:\n                if b not in s:\n                    s.append(b)\n\n        tag = request.GET.get(\"tgt\", False)\n\n        if tag:\n            service_all = Service.objects.get(name=tag)\n            server_list = Host.objects.filter(service=service_all, business=bus_data)\n\n        return render_to_response('ztree\/ztree_service.html', locals(), context_instance=RequestContext(request))\n\n    count = server_list.count()\n    return render_to_response('ztree\/ztree.html', locals(), context_instance=RequestContext(request))\n\n\n@login_required\ndef CdnCache(request):\n    \"\"\"\n    \u6811\u8bf7\u6c42\u9a8c\u8bc1\n    :param request:\n    :return:\n    \"\"\"\n    service = request.GET.get(\"services\")\n    get_token = str(request.GET.get(\"token\"))\n    uuid = str(request.GET.get(\"uuid\"))\n\n    sum_token = str(hashlib.sha1(request.user.username + auth_key + service + time.strftime('%Y-%m-%d', time.localtime(\n            time.time()))).hexdigest())\n\n    content_status = True\n    if get_token != sum_token:\n        content_status = False\n\n    idc_data = IDC.objects.get(uuid=uuid)\n    service_all = Service.objects.get(name=service)\n    server_list = Host.objects.filter(idc=idc_data, service=service_all)\n    business_name = idc_data.name\n    service_tag = service\n\n    return render_to_response('ztree\/service.html', locals(), context_instance=RequestContext(request))\n\n\n@login_required\ndef CdnIdc(request):\n    \"\"\"\n    \u6811\u8bf7\u6c42\u9a8c\u8bc1\n    :param request:\n    :return:\n    \"\"\"\n    get_token = str(request.GET.get(\"token\"))\n    uuid = str(request.GET.get(\"uuid\"))\n    idc_data = IDC.objects.get(uuid=uuid)\n\n    sum_token = str(hashlib.sha1(request.user.username + auth_key + idc_data.name + time.strftime('%Y-%m-%d',\n                                                                                                  time.localtime(\n                                                                                                          time.time()))).hexdigest())\n\n    content_status = True\n    if get_token != sum_token:\n        content_status = False\n\n    server_list = Host.objects.filter(idc=idc_data)\n    business_name = idc_data.name\n\n    return render_to_response('ztree\/idc.html', locals(), context_instance=RequestContext(request))\n\n\nclass Ztree_class(object):\n    \"\"\"\n    ztree \u7c7b\n    \"\"\"\n\n    def __init__(self, project_name, user):\n        self.project_name = project_name\n        self.user = user\n\n    def monitor(self):\n        return True\n\n    def swan(self):\n        rst_data = {}\n\n        user_info = CustomUser.objects.get(first_name=self.user)\n\n        myform_rst = Project.objects.get(uuid=self.project_name)\n\n        rst = project_swan.objects.filter(project_name_id=myform_rst.uuid)\n\n        \"\"\"\n        \u6240\u6709\u5f53\u524d\u9879\u76ee\u53d1\u5e03\u540d\u79f0\u653e\u5230\u4e00\u4e2alist\u4e2d\n        \"\"\"\n\n        swan_name_list = [i.swan_name for i in rst]\n        swan_push = user_info.project_swan_set.all()\n        user = CustomUser.objects.get(first_name=self.user)\n\n        if user.is_superuser:\n\n            for i in rst:\n                rst_data[str(i.uuid)] = i.swan_name\n\n        else:\n            swan_push = user_info.project_swan_set.all()\n            for i in swan_push:\n                if i.swan_name in swan_name_list:\n                    rst_data[str(i.uuid)] = i.swan_name\n\n        host_list = myform_rst.host_set.all()\n        content = {\"swan_name\": rst_data, \"host\": host_list}\n\n        return content\n\n    def highstate(self):\n        project = Project.objects.get(service_name=self.project_name)\n        # server_list = project.host_set\n        host_list = Host.objects.filter(business=project)\n\n        return True\n\n\n@csrf_exempt\ndef ZtreeIndex(request):\n    \"\"\"\n\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'POST':\n        otherParam = request.POST.get(\"otherParam\")\n        status = request.POST.get(\"status\")\n        line_id = request.POST.get(\"line_id\")\n\n        try:\n            name = request.POST.get(\"name\")\n            id = request.POST.get(\"id\")\n\n        except:\n            name = False\n\n        if not name:\n            ztree = ztree_tag(request.user.username)\n            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))\n\n        elif int(status[0]) == 1:\n            ztree = []\n            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))\n\n        else:\n            ztree = []\n            bus_data = Project.objects.get(service_name=name)\n            server_list = Host.objects.filter(business=bus_data).order_by(\"create_time\")\n\n            s = []\n            for i in server_list:\n                t = i.service.all().values()\n                for b in t:\n                    if b not in s:\n                        s.append(b)\n            tree_id = 0\n            for i in s:\n                tree_id += 1\n\n                token = hashlib.sha1(request.user.username + auth_key + i.get(\"name\") + time.strftime('%Y-%m-%d',\n                                                                                                      time.localtime(\n                                                                                                              time.time()))).hexdigest()\n\n                ztree.append({\"id\": tree_id, \"status\": 3, \"line_id\": line_id, \"name\": i.get(\"name\"), \"token\": token,\n                              \"t\": i.get(\"name\"), \"business\": bus_data.service_name})\n\n            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))\n    content = {\"status\": 403, \"message\": \"auth error\"}\n    return HttpResponse(json.dumps(content, ensure_ascii=False, indent=4))\n","tok_input_length":2581,"tok_output_length":2496,"system_prompt":"","index":11321}
{"question":"This code defines a Python class for controlling an Andor3 camera. To use it, import the necessary modules and create an instance of the Andor3 class. Then, call the appropriate methods to control the camera's settings and acquire images.","input":"","expected_output":"############################################################################\n# This file is part of LImA, a Library for Image Acquisition\n#\n# Copyright (C) : 2009-2014\n# European Synchrotron Radiation Facility\n# BP 220, Grenoble 38043\n# FRANCE\n#\n# This is free software; you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This software is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, see <http:\/\/www.gnu.org\/licenses\/>.\n############################################################################\n#=============================================================================\n#\n# file :        Andor3.py\n#\n# description : Python source for the Andor3 and its commands. \n#                The class is derived from Device. It represents the\n#                CORBA servant object which will be accessed from the\n#                network. All commands which can be executed on the\n#                Pilatus are implemented in this file.\n#\n# project :     TANGO Device Server\n#\n# copyleft :    European Synchrotron Radiation Facility\n#               BP 220, Grenoble 38043\n#               FRANCE\n#\n#=============================================================================\n#         (c) - Bliss - ESRF\n#=============================================================================\n#\nimport PyTango\nimport sys, types, os, time\n\nfrom Lima import Core\nfrom Lima import Andor3 as Andor3Module\n# import some useful helpers to create direct mapping between tango attributes\n# and Lima interfaces.\nfrom Lima.Server import AttrHelper\n\nclass Andor3(PyTango.Device_4Impl):\n\n    Core.DEB_CLASS(Core.DebModApplication, 'LimaCCDs')\n    \n#==================================================================\n#   Andor3 Class Description:\n#\n#\n#==================================================================\n\nclass Andor3(PyTango.Device_4Impl):\n\n#--------- Add you global variables here --------------------------\n    Core.DEB_CLASS(Core.DebModApplication, 'LimaCCDs')\n\n#------------------------------------------------------------------\n#    Device constructor\n#------------------------------------------------------------------\n    @Core.DEB_MEMBER_FUNCT\n    def __init__(self,cl, name):\n        PyTango.Device_4Impl.__init__(self,cl,name)\n        # dictionnaries to be used with AttrHelper.get_attr_4u\n        self.__AdcGain = {'B11_HI_GAIN':  _Andor3Camera.b11_hi_gain,\n                             'B11_LOW_GAIN': _Andor3Camera.b11_low_gain,\n                             'B16_LH_GAIN':  _Andor3Camera.b16_lh_gain,\n                          }\n        self.__AdcRate = {'MHZ10':  _Andor3Camera.MHz10,\n                          'MHZ100': _Andor3Camera.MHz100,\n                          'MHZ200': _Andor3Camera.MHz200,\n                          'MHZ280': _Andor3Camera.MHz280,\n                          }\n        self.__Cooler = {'ON':  True,\n                         'OFF': False}\n        self.__FanSpeed = {'OFF':  _Andor3Camera.Off,\n                           'LOW':  _Andor3Camera.Low,\n                           'HIGH': _Andor3Camera.On,\n                           }\n        self.__ElectronicShutterMode = {'ROLLING': _Andor3Camera.Rolling,\n                                        'GLOBAL': _Andor3Camera.Global,\n                                        }\n        self.__Overlap = {'ON':  True,\n                         'OFF': False}\n        self.__SpuriousNoiseFilter = {'ON':  True,\n                         'OFF': False}\n        self.__Attribute2FunctionBase = {'adc_gain': 'SimpleGain',\n                                         'adc_rate': 'AdcRate',\n                                         'temperature': 'Temperature',\n                                         'temperature_sp': 'TemperatureSP',\n                                         'cooler': 'Cooler',\n                                         'cooling_status': 'CoolingStatus',\n                                         'fan_speed': 'FanSpeed',\n                                         'electronic_shutter_mode': 'ElectronicShutterMode',\n                                         'frame_rate': 'FrameRate',\n                                         'max_frame_rate_transfer': 'MaxFrameRateTransfer',\n                                         'readout_time': 'ReadoutTime',\n                                         'overlap': 'Overlap',\n                                         'spurious_noise_filter': 'SpuriousNoiseFilter',\n                                         }\n        self.init_device()\n                                               \n#------------------------------------------------------------------\n#    Device destructor\n#------------------------------------------------------------------\n    def delete_device(self):\n        pass\n\n\n#------------------------------------------------------------------\n#    Device initialization\n#------------------------------------------------------------------\n    @Core.DEB_MEMBER_FUNCT\n    def init_device(self):\n        self.set_state(PyTango.DevState.ON)\n\n        # Load the properties\n        self.get_device_properties(self.get_device_class())\n\n        # Apply properties if any\n        if self.adc_gain:\n            _Andor3Interface.setAdcGain(self.__AdcGain[self.adc_gain])\n            \n        if self.adc_rate:\n            _Andor3Interface.setAdcRate(self.__AdcRate[self.adc_rate])\n            \n        if self.temperature_sp:            \n            _Andor3Camera.setTemperatureSP(self.temperature_sp)\n            \n        if self.cooler:\n            _Andor3Camera.setCooler(self.__Cooler[self.cooler])\n            \n\n#==================================================================\n#\n#    Andor3 read\/write attribute methods\n#\n#==================================================================\n\n\n    def __getattr__(self,name) :\n        try:\n            return AttrHelper.get_attr_4u(self, name, _Andor3Interface)\n        except:\n            return AttrHelper.get_attr_4u(self, name, _Andor3Camera)\n\n\n#==================================================================\n#\n#    Andor3 command methods\n#\n#==================================================================\n\n#------------------------------------------------------------------\n#    getAttrStringValueList command:\n#\n#    Description: return a list of authorized values if any\n#    argout: DevVarStringArray   \n#------------------------------------------------------------------\n    @Core.DEB_MEMBER_FUNCT\n    def getAttrStringValueList(self, attr_name):\n        return AttrHelper.get_attr_string_value_list(self, attr_name)\n    \n\n#==================================================================\n#\n#    Andor3 class definition\n#\n#==================================================================\nclass Andor3Class(PyTango.DeviceClass):\n\n    #    Class Properties\n    class_property_list = {\n        }\n\n    #    Device Properties\n    device_property_list = {\n        'config_path':\n        [PyTango.DevString,\n         'configuration path directory', []],\n        'camera_number':\n        [PyTango.DevShort,\n         'Camera number', []],\n        'adc_gain':\n        [PyTango.DevString,\n         'Adc Gain', []],\n        'adc_rate':\n        [PyTango.DevString,\n         'Adc readout rate', []],\n        'temperature_sp':\n        [PyTango.DevShort,\n         'Temperature set point in Celsius', []],\n        'cooler':\n        [PyTango.DevString,\n         'Start or stop the cooler (\"ON\"\/\"OFF\")', []],\n        }\n\n\n    #    Command definitions\n    cmd_list = {\n        'getAttrStringValueList':\n        [[PyTango.DevString, \"Attribute name\"],\n         [PyTango.DevVarStringArray, \"Authorized String value list\"]]\n        }\n\n\n    #    Attribute definitions\n    attr_list = {\n       'temperature_sp':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Set\/get the temperature set-point',\n             'unit': 'C',\n             'format': '%f',\n             'description': 'in Celsius',\n             }],\n        'temperature':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'get the current temperature sensor',\n             'unit': 'C',\n             'format': '%f',\n             'description': 'in Celsius',\n             }],\n        'cooler':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Start\/stop the cooler',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'OFF or ON',\n             }],\n        'cooling_status':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Fast trigger mode, see manual for usage',\n             'unit': 'N\/A',\n             'format': '',\n             'description': '0-OFF \/ 1-ON',\n             }],\n        'adc_gain':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'ADC Gain',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'ADC Gain which can be apply to the preamplifier',\n             }],\n        'adc_rate':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label': 'ADC Rate',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'ADC Readout Rate',\n             }],\n        'electronic_shutter_mode':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Electronic Shutter Mode',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'Electronic shutter mode, Rolling or Global',\n             }],\n       'fan_speed':\n       [[PyTango.DevString,\n         PyTango.SCALAR,\n         PyTango.READ_WRITE],\n        {\n            'label':'Fan speed',\n            'unit': 'N\/A',\n            'format': '',\n            'description': 'Fan speed, off, low or High',\n            }],\n        'frame_rate':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Frame rate',\n             'unit': 'Hz',\n             'format': '%f',\n             'description': 'the rate at which frames are delivered to the use',\n             }],\n        'max_frame_rate_transfer':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Maximum frame rate transfer',\n             'unit': 'byte per sec.',\n             'format': '%f',\n             'description': 'Returns the maximum sustainable transfer rate of the interface for the current shutter mode and ROI',\n             }],\n        'readout_time':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Readout time',\n             'unit': 'sec',\n             'format': '%f',\n             'description': 'return the time to readout data from the sensor',\n             }],\n        'overlap':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':' Enable\/Disable overlap mode',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'OFF or ON',\n             }],\n        'spurious_noise_filter':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Enable\/Disable spurious noise filter',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'OFF or ON',\n             }],\n        }\n\n#------------------------------------------------------------------\n#    Andor3Class Constructor\n#------------------------------------------------------------------\n    def __init__(self, name):\n        PyTango.DeviceClass.__init__(self, name)\n        self.set_type(name)\n\n            \n#----------------------------------------------------------------------------\n#                              Plugins\n#----------------------------------------------------------------------------\nfrom Lima  import Andor3 as Andor3Acq\n\n_Andor3Camera = None\n_Andor3Interface = None\n\ndef get_control(config_path='\/users\/blissadm\/local\/Andor3\/andor\/bitflow', camera_number = '0', **keys) :\n    #properties are passed here as string\n    global _Andor3Camera\n    global _Andor3Interface\n    if _Andor3Camera is None:\n        print ('\\n\\nStarting and configuring the Andor3 camera ...')\n        _Andor3Camera = Andor3Acq.Camera(config_path, int(camera_number))\n        _Andor3Interface = Andor3Acq.Interface(_Andor3Camera)\n        print ('\\n\\nAndor3 Camera #%s (%s:%s) is started'%(camera_number,_Andor3Camera.getDetectorType(),_Andor3Camera.getDetectorModel()))\n    return Core.CtControl(_Andor3Interface)\n\n    \ndef get_tango_specific_class_n_device():\n    return Andor3Class,Andor3\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines a Python class for controlling an Andor3 camera. To use it, import the necessary modules and create an instance of the Andor3 class. Then, call the appropriate methods to control the camera's settings and acquire images.\n\n### Input:\n\n\n### Output:\n############################################################################\n# This file is part of LImA, a Library for Image Acquisition\n#\n# Copyright (C) : 2009-2014\n# European Synchrotron Radiation Facility\n# BP 220, Grenoble 38043\n# FRANCE\n#\n# This is free software; you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This software is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, see <http:\/\/www.gnu.org\/licenses\/>.\n############################################################################\n#=============================================================================\n#\n# file :        Andor3.py\n#\n# description : Python source for the Andor3 and its commands. \n#                The class is derived from Device. It represents the\n#                CORBA servant object which will be accessed from the\n#                network. All commands which can be executed on the\n#                Pilatus are implemented in this file.\n#\n# project :     TANGO Device Server\n#\n# copyleft :    European Synchrotron Radiation Facility\n#               BP 220, Grenoble 38043\n#               FRANCE\n#\n#=============================================================================\n#         (c) - Bliss - ESRF\n#=============================================================================\n#\nimport PyTango\nimport sys, types, os, time\n\nfrom Lima import Core\nfrom Lima import Andor3 as Andor3Module\n# import some useful helpers to create direct mapping between tango attributes\n# and Lima interfaces.\nfrom Lima.Server import AttrHelper\n\nclass Andor3(PyTango.Device_4Impl):\n\n    Core.DEB_CLASS(Core.DebModApplication, 'LimaCCDs')\n    \n#==================================================================\n#   Andor3 Class Description:\n#\n#\n#==================================================================\n\nclass Andor3(PyTango.Device_4Impl):\n\n#--------- Add you global variables here --------------------------\n    Core.DEB_CLASS(Core.DebModApplication, 'LimaCCDs')\n\n#------------------------------------------------------------------\n#    Device constructor\n#------------------------------------------------------------------\n    @Core.DEB_MEMBER_FUNCT\n    def __init__(self,cl, name):\n        PyTango.Device_4Impl.__init__(self,cl,name)\n        # dictionnaries to be used with AttrHelper.get_attr_4u\n        self.__AdcGain = {'B11_HI_GAIN':  _Andor3Camera.b11_hi_gain,\n                             'B11_LOW_GAIN': _Andor3Camera.b11_low_gain,\n                             'B16_LH_GAIN':  _Andor3Camera.b16_lh_gain,\n                          }\n        self.__AdcRate = {'MHZ10':  _Andor3Camera.MHz10,\n                          'MHZ100': _Andor3Camera.MHz100,\n                          'MHZ200': _Andor3Camera.MHz200,\n                          'MHZ280': _Andor3Camera.MHz280,\n                          }\n        self.__Cooler = {'ON':  True,\n                         'OFF': False}\n        self.__FanSpeed = {'OFF':  _Andor3Camera.Off,\n                           'LOW':  _Andor3Camera.Low,\n                           'HIGH': _Andor3Camera.On,\n                           }\n        self.__ElectronicShutterMode = {'ROLLING': _Andor3Camera.Rolling,\n                                        'GLOBAL': _Andor3Camera.Global,\n                                        }\n        self.__Overlap = {'ON':  True,\n                         'OFF': False}\n        self.__SpuriousNoiseFilter = {'ON':  True,\n                         'OFF': False}\n        self.__Attribute2FunctionBase = {'adc_gain': 'SimpleGain',\n                                         'adc_rate': 'AdcRate',\n                                         'temperature': 'Temperature',\n                                         'temperature_sp': 'TemperatureSP',\n                                         'cooler': 'Cooler',\n                                         'cooling_status': 'CoolingStatus',\n                                         'fan_speed': 'FanSpeed',\n                                         'electronic_shutter_mode': 'ElectronicShutterMode',\n                                         'frame_rate': 'FrameRate',\n                                         'max_frame_rate_transfer': 'MaxFrameRateTransfer',\n                                         'readout_time': 'ReadoutTime',\n                                         'overlap': 'Overlap',\n                                         'spurious_noise_filter': 'SpuriousNoiseFilter',\n                                         }\n        self.init_device()\n                                               \n#------------------------------------------------------------------\n#    Device destructor\n#------------------------------------------------------------------\n    def delete_device(self):\n        pass\n\n\n#------------------------------------------------------------------\n#    Device initialization\n#------------------------------------------------------------------\n    @Core.DEB_MEMBER_FUNCT\n    def init_device(self):\n        self.set_state(PyTango.DevState.ON)\n\n        # Load the properties\n        self.get_device_properties(self.get_device_class())\n\n        # Apply properties if any\n        if self.adc_gain:\n            _Andor3Interface.setAdcGain(self.__AdcGain[self.adc_gain])\n            \n        if self.adc_rate:\n            _Andor3Interface.setAdcRate(self.__AdcRate[self.adc_rate])\n            \n        if self.temperature_sp:            \n            _Andor3Camera.setTemperatureSP(self.temperature_sp)\n            \n        if self.cooler:\n            _Andor3Camera.setCooler(self.__Cooler[self.cooler])\n            \n\n#==================================================================\n#\n#    Andor3 read\/write attribute methods\n#\n#==================================================================\n\n\n    def __getattr__(self,name) :\n        try:\n            return AttrHelper.get_attr_4u(self, name, _Andor3Interface)\n        except:\n            return AttrHelper.get_attr_4u(self, name, _Andor3Camera)\n\n\n#==================================================================\n#\n#    Andor3 command methods\n#\n#==================================================================\n\n#------------------------------------------------------------------\n#    getAttrStringValueList command:\n#\n#    Description: return a list of authorized values if any\n#    argout: DevVarStringArray   \n#------------------------------------------------------------------\n    @Core.DEB_MEMBER_FUNCT\n    def getAttrStringValueList(self, attr_name):\n        return AttrHelper.get_attr_string_value_list(self, attr_name)\n    \n\n#==================================================================\n#\n#    Andor3 class definition\n#\n#==================================================================\nclass Andor3Class(PyTango.DeviceClass):\n\n    #    Class Properties\n    class_property_list = {\n        }\n\n    #    Device Properties\n    device_property_list = {\n        'config_path':\n        [PyTango.DevString,\n         'configuration path directory', []],\n        'camera_number':\n        [PyTango.DevShort,\n         'Camera number', []],\n        'adc_gain':\n        [PyTango.DevString,\n         'Adc Gain', []],\n        'adc_rate':\n        [PyTango.DevString,\n         'Adc readout rate', []],\n        'temperature_sp':\n        [PyTango.DevShort,\n         'Temperature set point in Celsius', []],\n        'cooler':\n        [PyTango.DevString,\n         'Start or stop the cooler (\"ON\"\/\"OFF\")', []],\n        }\n\n\n    #    Command definitions\n    cmd_list = {\n        'getAttrStringValueList':\n        [[PyTango.DevString, \"Attribute name\"],\n         [PyTango.DevVarStringArray, \"Authorized String value list\"]]\n        }\n\n\n    #    Attribute definitions\n    attr_list = {\n       'temperature_sp':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Set\/get the temperature set-point',\n             'unit': 'C',\n             'format': '%f',\n             'description': 'in Celsius',\n             }],\n        'temperature':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'get the current temperature sensor',\n             'unit': 'C',\n             'format': '%f',\n             'description': 'in Celsius',\n             }],\n        'cooler':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Start\/stop the cooler',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'OFF or ON',\n             }],\n        'cooling_status':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Fast trigger mode, see manual for usage',\n             'unit': 'N\/A',\n             'format': '',\n             'description': '0-OFF \/ 1-ON',\n             }],\n        'adc_gain':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'ADC Gain',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'ADC Gain which can be apply to the preamplifier',\n             }],\n        'adc_rate':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label': 'ADC Rate',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'ADC Readout Rate',\n             }],\n        'electronic_shutter_mode':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Electronic Shutter Mode',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'Electronic shutter mode, Rolling or Global',\n             }],\n       'fan_speed':\n       [[PyTango.DevString,\n         PyTango.SCALAR,\n         PyTango.READ_WRITE],\n        {\n            'label':'Fan speed',\n            'unit': 'N\/A',\n            'format': '',\n            'description': 'Fan speed, off, low or High',\n            }],\n        'frame_rate':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Frame rate',\n             'unit': 'Hz',\n             'format': '%f',\n             'description': 'the rate at which frames are delivered to the use',\n             }],\n        'max_frame_rate_transfer':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Maximum frame rate transfer',\n             'unit': 'byte per sec.',\n             'format': '%f',\n             'description': 'Returns the maximum sustainable transfer rate of the interface for the current shutter mode and ROI',\n             }],\n        'readout_time':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Readout time',\n             'unit': 'sec',\n             'format': '%f',\n             'description': 'return the time to readout data from the sensor',\n             }],\n        'overlap':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':' Enable\/Disable overlap mode',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'OFF or ON',\n             }],\n        'spurious_noise_filter':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Enable\/Disable spurious noise filter',\n             'unit': 'N\/A',\n             'format': '',\n             'description': 'OFF or ON',\n             }],\n        }\n\n#------------------------------------------------------------------\n#    Andor3Class Constructor\n#------------------------------------------------------------------\n    def __init__(self, name):\n        PyTango.DeviceClass.__init__(self, name)\n        self.set_type(name)\n\n            \n#----------------------------------------------------------------------------\n#                              Plugins\n#----------------------------------------------------------------------------\nfrom Lima  import Andor3 as Andor3Acq\n\n_Andor3Camera = None\n_Andor3Interface = None\n\ndef get_control(config_path='\/users\/blissadm\/local\/Andor3\/andor\/bitflow', camera_number = '0', **keys) :\n    #properties are passed here as string\n    global _Andor3Camera\n    global _Andor3Interface\n    if _Andor3Camera is None:\n        print ('\\n\\nStarting and configuring the Andor3 camera ...')\n        _Andor3Camera = Andor3Acq.Camera(config_path, int(camera_number))\n        _Andor3Interface = Andor3Acq.Interface(_Andor3Camera)\n        print ('\\n\\nAndor3 Camera #%s (%s:%s) is started'%(camera_number,_Andor3Camera.getDetectorType(),_Andor3Camera.getDetectorModel()))\n    return Core.CtControl(_Andor3Interface)\n\n    \ndef get_tango_specific_class_n_device():\n    return Andor3Class,Andor3\n\n","tok_input_length":2758,"tok_output_length":2682,"system_prompt":"","index":14574}
{"question":"Create a Python file and import the following modules: math, PIL.Image, PIL.ImageDraw, django.http.HttpResponse, django.http.Http404, and django.shortcuts.render_to_response. Define a variable named \"google_dist\" and set it equal to 20037508.34. Define a function named \"leaflet_polygon_options\" that takes a \"boundary\" argument. Inside the function, count the number of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument and store it in a variable named \"n\". Return a dictionary with keys \"fill\" and \"outline\" and values that are the result of calling the \"leaflet_colour\" function with the \"n\" argument and (0,0,0,170), respectively. Define a function named \"leaflet_popup\" that takes a \"boundary\" argument. Inside the function, create a list of tuples named \"party_list\" where each tuple has a Party object and a queryset of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument and a publisher_party attribute equal to the Party object. Use a list comprehension to generate the Party objects by filtering the Party model for objects that have a leaflet__leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument, then sort the resulting queryset by the \"name\" attribute, and remove duplicates using the \"distinct\" method. Append to the \"party_list\" a tuple with a dictionary with a \"name\" key and \"Uncategorised\" value and a queryset of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument and a publisher_party attribute equal to None if there are any such Leaflet objects. Return a tuple with a string \"boundaries\/leaflets.html\" and a dictionary with keys \"constituency\" and \"party_list\" and values equal to the \"boundary.constituency\" attribute and the \"party_list\" variable, respectively. Define a function named \"leaflet_colour\" that takes an \"n\" argument. Inside the function, calculate a logarithm of \"n+1\" with base 2 and store it in a variable named \"r\". Return a tuple of four integers that are the result of applying mathematical operations to \"r\" and constants. Define a function named \"leaflet_keyvalues\" that returns a list of integers. Define a dictionary named \"maps\" with a key \"leaflets\" and a value that is a dictionary with keys \"polygon_options\", \"template\", \"colour\", and \"keyvalues\" and values that are the \"leaflet_polygon_options\" function, a tuple with a string \"boundaries\/leaflets.html\" and the \"leaflet_popup\" function, the \"leaflet_colour\" function, and the \"leaflet_keyvalues\" function, respectively. Define a function named \"getDBzoom\" that takes a \"z\" argument. Inside the function, check if the integer value of \"z\" is greater than 10. If it is, return 10. Otherwise, return the integer value of \"z\". Define a function named \"view_key\" that takes a \"request\", \"mapname\", \"n\", \"x\", and \"y\" arguments. Inside the function, create an Image object with RGBA mode and dimensions equal to \"x\" and \"y\" arguments, and a color that is the result of calling the \"colour\" function of the \"maps[mapname]\" dictionary with the integer value of \"n\" argument. Create an HttpResponse object with \"image\/png\" mimetype. Save the Image object to the HttpResponse object with \"PNG\" format and return the HttpResponse object. Define a function named \"view_map\" that takes a \"request\" and \"mapname\" arguments. Inside the function, import the \"settings\" module from the \"django.conf\" package. Return a render_to_response function with a string \"boundaries\/map.html\" and a dictionary with keys \"MEDIA_URL\", \"mapname\", and \"keyvalues\" and values that are the \"settings.MEDIA_URL\" attribute, the \"mapname\" argument, and the \"keyvalues\" attribute of the \"maps[mapname]\" dictionary, respectively. Define a function named \"tile\" that takes a \"request\", \"mapname\", \"tz\", \"tx\", \"ty\", \"tilex\", and \"tiley\" arguments. Inside the function, get the \"options\" attribute of the \"maps[str(mapname)]\" dictionary. Calculate the west, south, east, and north coordinates of the tile using the \"getTileRect\" function with \"tx\", \"ty\", and \"tz\" arguments. Calculate the \"zoom\" variable as 2 to the power of the float value of \"tz\" argument. Create an Image object with RGBA mode and dimensions equal to (256, 256) and a color that is a tuple of four integers that represent a transparent color. Create an ImageDraw object with the Image object. Calculate the \"dbz\" variable as the result of calling the \"getDBzoom\" function with the integer value of \"tz\" argument. Filter the Boundary model for objects that have a \"zoom\" attribute equal to \"dbz\" variable and \"south\", \"north\", \"east\", and \"west\" attributes that satisfy certain conditions. Iterate over the resulting queryset and for each object, get the \"polygon_options\" attribute of the \"options\" dictionary by calling the \"polygon_options\" function with the Boundary object as an argument. Evaluate the \"boundary\" attribute of the Boundary object and store it in a variable named \"coords\". Create an empty list named \"l\". Iterate over the \"coords\" variable and for each tuple of coordinates, calculate the \"x\" and \"y\" variables using mathematical operations and append a tuple of two integers to the \"l\" list. Draw a polygon with the \"l\" list and the \"polygon_options\" attribute of the \"options\" dictionary using the ImageDraw object. Delete the ImageDraw object. Create an HttpResponse object with \"image\/png\" mimetype. Save the Image object to the HttpResponse object with \"PNG\" format and return the HttpResponse object. Define a function named \"popup\" that takes a \"request\", \"mapname\", \"x\", \"y\", and \"z\" arguments. Inside the function, get the \"options\" attribute of the \"maps[str(mapname)]\" dictionary. Calculate the \"x\" and \"y\" variables as float values of \"x\" and \"y\" arguments, respectively. Calculate the \"dbz\" variable as the result of calling the \"getDBzoom\" function with the \"z\" argument. Filter the Boundary model for objects that have a \"zoom\" attribute equal to the integer value of \"dbz\" argument and \"south\", \"north\", \"east\", and \"west\" attributes that satisfy certain conditions. Iterate over the resulting queryset and for each object, evaluate the \"boundary\" attribute and store it in a variable named \"coords\". Create a boolean variable named \"inside\" and set it to False. Iterate over the \"coords\" variable and for each pair of consecutive tuples of coordinates, check if the \"y\" variable is between the \"vy0\" and \"vy1\" variables of the tuples and if the \"x\" variable is less than a certain value calculated using mathematical operations. If the conditions are satisfied, toggle the \"inside\" variable. If the \"inside\" variable is True, return a render_to_response function with arguments that are the result of calling the \"template\" attribute of the \"options\" dictionary with the Boundary object as an argument. Raise an Http404 exception if the \"inside\" variable is False after iterating over all the objects. Define a function named \"to_google\" that takes \"x\" and \"tilesAtThisZoom\" arguments. Inside the function, calculate a certain value using mathematical operations and return it. Define a function named \"getTileRect\" that takes \"xt\", \"yt\", and \"zoomt\" arguments. Inside the function, calculate the \"zoom\", \"x\", and \"y\" variables as integer values of \"zoomt\", \"xt\", and \"yt\" arguments, respectively. Calculate the \"tilesAtThisZoom\" variable as 2 to the power of \"zoom\" variable. Calculate the west, south, east, and north coordinates of the tile using the \"to_google\" function with \"x\", \"tilesAtThisZoom\" arguments and certain mathematical operations. Return a tuple of four float values that represent the west, south, east, and north coordinates of the tile.","input":"","expected_output":"import math\n\nfrom PIL import Image, ImageDraw\nfrom django.http import HttpResponse, Http404\nfrom django.shortcuts import render_to_response\n\nfrom boundaries.models import Boundary\nfrom parties.models import Party\nfrom leaflets.models import Leaflet\n\ngoogle_dist = 20037508.34\n\ndef leaflet_polygon_options(boundary):\n    n = Leaflet.objects.filter(leafletconstituency__constituency__boundary = boundary).count()\n    return {\"fill\": leaflet_colour(n), \"outline\": (0,0,0,170)}\n\ndef leaflet_popup(boundary):\n    party_list = [(\n        p, Leaflet.objects.filter(\n            leafletconstituency__constituency__boundary=boundary,\n                                          publisher_party = p))\n          for p  in Party.objects.filter(\n              leaflet__leafletconstituency__constituency__boundary=boundary)\\\n              .distinct().order_by('name')]\n    unclassified_leaflets = Leaflet.objects.filter(\n        leafletconstituency__constituency__boundary=boundary,\n        publisher_party = None)\n    if unclassified_leaflets:\n        party_list = party_list + [({\"name\": \"Uncategorised\"}, unclassified_leaflets)]\n    return \"boundaries\/leaflets.html\", {\"constituency\": boundary.constituency,\n                             \"party_list\": party_list\n                             }\n\ndef leaflet_colour(n):\n    r = math.log((n+1), 2)\n    return  (int(50 + r * 16), int(255 - r * 32), int(100 + r * 16), int(32 + r * 32))\n\ndef leaflet_keyvalues():\n    return [0,2,5,10,20,50,100,200]\n\n\nmaps = {\"leaflets\": {\"polygon_options\": leaflet_polygon_options,\n                     \"template\": leaflet_popup,\n                     \"colour\": leaflet_colour,\n                     \"keyvalues\": leaflet_keyvalues()}\n        }\n\ndef getDBzoom(z):\n    if int(z) > 10:\n        return 10\n    else:\n        return int(z)\n\ndef view_key(request, mapname=None, n=None, x=None, y=None):\n    image = Image.new(\"RGBA\", (int(x), int(y)), maps[mapname][\"colour\"](int(n)))\n    response = HttpResponse(mimetype=\"image\/png\")\n    image.save(response, \"PNG\")\n    return response\n\ndef view_map(request, mapname):\n    from django.conf import settings\n    return render_to_response(\"boundaries\/map.html\", {\"MEDIA_URL\":settings.MEDIA_URL, \"mapname\": mapname, \"keyvalues\":maps[mapname][\"keyvalues\"]})\n\ndef tile(request, mapname, tz=None, tx=None, ty=None, tilex=256, tiley = 256):\n    options = maps[str(mapname)]\n    west, south, east, north = getTileRect(tx, ty, tz)\n    zoom = 2 ** float(tz)\n    tx = float(tx)\n    ty = float(ty)\n    image = Image.new(\"RGBA\", (256, 256), (0, 0, 0, 0))\n    draw = ImageDraw.Draw(image)\n    dbz = getDBzoom(tz)\n\n    boundaries_within = Boundary.objects.filter(zoom=dbz, south__lt=north, north__gt=south, east__gt=west, west__lt=east)\n    for boundary in boundaries_within:\n        polygon_options = options[\"polygon_options\"](boundary)\n        coords = eval(boundary.boundary)\n        l = []\n        for lng, lat in coords:\n            x = 256 * (lng - west) \/ (east - west)\n            y = 256 * (lat - north) \/ (south - north)\n            l.append((int(x), int(y)))\n        draw.polygon(l, **polygon_options)\n    del draw\n    response = HttpResponse(mimetype=\"image\/png\")\n    image.save(response, \"PNG\")\n    return response\n\ndef popup(request, mapname, x=None, y=None, z=None):\n    options = maps[str(mapname)]\n    x = float(x)\n    y = float(y)\n    dbz = getDBzoom(z)\n    possible_boundaries = Boundary.objects.filter(zoom=int(dbz), south__lt=y, north__gt=y, east__gt=x, west__lt=x)\n    for boundary in possible_boundaries:\n        coords = eval(boundary.boundary)\n        inside = False\n        for (vx0, vy0), (vx1, vy1) in zip(coords, coords[1:] + coords[:1]):\n            if ((vy0>y) != (vy1>y)) and (x < (vx1-vx0) * (y-vy0) \/ (vy1-vy0) + vx0):\n                inside = not(inside)\n        if inside:\n            return render_to_response(*options[\"template\"](boundary))\n    raise Http404\n\ndef to_google(x, tilesAtThisZoom):\n  return google_dist * (1 - 2 * float(x) \/ tilesAtThisZoom)\n\ndef getTileRect(xt, yt, zoomt):\n           zoom = int(zoomt)\n           x = int(xt)\n           y = int(yt)\n           tilesAtThisZoom = 2 ** zoom\n\n           return (-to_google(x, tilesAtThisZoom),\n                   to_google(y + 1, tilesAtThisZoom),\n                   -to_google(x + 1, tilesAtThisZoom),\n                   to_google(y, tilesAtThisZoom))\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python file and import the following modules: math, PIL.Image, PIL.ImageDraw, django.http.HttpResponse, django.http.Http404, and django.shortcuts.render_to_response. Define a variable named \"google_dist\" and set it equal to 20037508.34. Define a function named \"leaflet_polygon_options\" that takes a \"boundary\" argument. Inside the function, count the number of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument and store it in a variable named \"n\". Return a dictionary with keys \"fill\" and \"outline\" and values that are the result of calling the \"leaflet_colour\" function with the \"n\" argument and (0,0,0,170), respectively. Define a function named \"leaflet_popup\" that takes a \"boundary\" argument. Inside the function, create a list of tuples named \"party_list\" where each tuple has a Party object and a queryset of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument and a publisher_party attribute equal to the Party object. Use a list comprehension to generate the Party objects by filtering the Party model for objects that have a leaflet__leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument, then sort the resulting queryset by the \"name\" attribute, and remove duplicates using the \"distinct\" method. Append to the \"party_list\" a tuple with a dictionary with a \"name\" key and \"Uncategorised\" value and a queryset of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument and a publisher_party attribute equal to None if there are any such Leaflet objects. Return a tuple with a string \"boundaries\/leaflets.html\" and a dictionary with keys \"constituency\" and \"party_list\" and values equal to the \"boundary.constituency\" attribute and the \"party_list\" variable, respectively. Define a function named \"leaflet_colour\" that takes an \"n\" argument. Inside the function, calculate a logarithm of \"n+1\" with base 2 and store it in a variable named \"r\". Return a tuple of four integers that are the result of applying mathematical operations to \"r\" and constants. Define a function named \"leaflet_keyvalues\" that returns a list of integers. Define a dictionary named \"maps\" with a key \"leaflets\" and a value that is a dictionary with keys \"polygon_options\", \"template\", \"colour\", and \"keyvalues\" and values that are the \"leaflet_polygon_options\" function, a tuple with a string \"boundaries\/leaflets.html\" and the \"leaflet_popup\" function, the \"leaflet_colour\" function, and the \"leaflet_keyvalues\" function, respectively. Define a function named \"getDBzoom\" that takes a \"z\" argument. Inside the function, check if the integer value of \"z\" is greater than 10. If it is, return 10. Otherwise, return the integer value of \"z\". Define a function named \"view_key\" that takes a \"request\", \"mapname\", \"n\", \"x\", and \"y\" arguments. Inside the function, create an Image object with RGBA mode and dimensions equal to \"x\" and \"y\" arguments, and a color that is the result of calling the \"colour\" function of the \"maps[mapname]\" dictionary with the integer value of \"n\" argument. Create an HttpResponse object with \"image\/png\" mimetype. Save the Image object to the HttpResponse object with \"PNG\" format and return the HttpResponse object. Define a function named \"view_map\" that takes a \"request\" and \"mapname\" arguments. Inside the function, import the \"settings\" module from the \"django.conf\" package. Return a render_to_response function with a string \"boundaries\/map.html\" and a dictionary with keys \"MEDIA_URL\", \"mapname\", and \"keyvalues\" and values that are the \"settings.MEDIA_URL\" attribute, the \"mapname\" argument, and the \"keyvalues\" attribute of the \"maps[mapname]\" dictionary, respectively. Define a function named \"tile\" that takes a \"request\", \"mapname\", \"tz\", \"tx\", \"ty\", \"tilex\", and \"tiley\" arguments. Inside the function, get the \"options\" attribute of the \"maps[str(mapname)]\" dictionary. Calculate the west, south, east, and north coordinates of the tile using the \"getTileRect\" function with \"tx\", \"ty\", and \"tz\" arguments. Calculate the \"zoom\" variable as 2 to the power of the float value of \"tz\" argument. Create an Image object with RGBA mode and dimensions equal to (256, 256) and a color that is a tuple of four integers that represent a transparent color. Create an ImageDraw object with the Image object. Calculate the \"dbz\" variable as the result of calling the \"getDBzoom\" function with the integer value of \"tz\" argument. Filter the Boundary model for objects that have a \"zoom\" attribute equal to \"dbz\" variable and \"south\", \"north\", \"east\", and \"west\" attributes that satisfy certain conditions. Iterate over the resulting queryset and for each object, get the \"polygon_options\" attribute of the \"options\" dictionary by calling the \"polygon_options\" function with the Boundary object as an argument. Evaluate the \"boundary\" attribute of the Boundary object and store it in a variable named \"coords\". Create an empty list named \"l\". Iterate over the \"coords\" variable and for each tuple of coordinates, calculate the \"x\" and \"y\" variables using mathematical operations and append a tuple of two integers to the \"l\" list. Draw a polygon with the \"l\" list and the \"polygon_options\" attribute of the \"options\" dictionary using the ImageDraw object. Delete the ImageDraw object. Create an HttpResponse object with \"image\/png\" mimetype. Save the Image object to the HttpResponse object with \"PNG\" format and return the HttpResponse object. Define a function named \"popup\" that takes a \"request\", \"mapname\", \"x\", \"y\", and \"z\" arguments. Inside the function, get the \"options\" attribute of the \"maps[str(mapname)]\" dictionary. Calculate the \"x\" and \"y\" variables as float values of \"x\" and \"y\" arguments, respectively. Calculate the \"dbz\" variable as the result of calling the \"getDBzoom\" function with the \"z\" argument. Filter the Boundary model for objects that have a \"zoom\" attribute equal to the integer value of \"dbz\" argument and \"south\", \"north\", \"east\", and \"west\" attributes that satisfy certain conditions. Iterate over the resulting queryset and for each object, evaluate the \"boundary\" attribute and store it in a variable named \"coords\". Create a boolean variable named \"inside\" and set it to False. Iterate over the \"coords\" variable and for each pair of consecutive tuples of coordinates, check if the \"y\" variable is between the \"vy0\" and \"vy1\" variables of the tuples and if the \"x\" variable is less than a certain value calculated using mathematical operations. If the conditions are satisfied, toggle the \"inside\" variable. If the \"inside\" variable is True, return a render_to_response function with arguments that are the result of calling the \"template\" attribute of the \"options\" dictionary with the Boundary object as an argument. Raise an Http404 exception if the \"inside\" variable is False after iterating over all the objects. Define a function named \"to_google\" that takes \"x\" and \"tilesAtThisZoom\" arguments. Inside the function, calculate a certain value using mathematical operations and return it. Define a function named \"getTileRect\" that takes \"xt\", \"yt\", and \"zoomt\" arguments. Inside the function, calculate the \"zoom\", \"x\", and \"y\" variables as integer values of \"zoomt\", \"xt\", and \"yt\" arguments, respectively. Calculate the \"tilesAtThisZoom\" variable as 2 to the power of \"zoom\" variable. Calculate the west, south, east, and north coordinates of the tile using the \"to_google\" function with \"x\", \"tilesAtThisZoom\" arguments and certain mathematical operations. Return a tuple of four float values that represent the west, south, east, and north coordinates of the tile.\n\n### Input:\n\n\n### Output:\nimport math\n\nfrom PIL import Image, ImageDraw\nfrom django.http import HttpResponse, Http404\nfrom django.shortcuts import render_to_response\n\nfrom boundaries.models import Boundary\nfrom parties.models import Party\nfrom leaflets.models import Leaflet\n\ngoogle_dist = 20037508.34\n\ndef leaflet_polygon_options(boundary):\n    n = Leaflet.objects.filter(leafletconstituency__constituency__boundary = boundary).count()\n    return {\"fill\": leaflet_colour(n), \"outline\": (0,0,0,170)}\n\ndef leaflet_popup(boundary):\n    party_list = [(\n        p, Leaflet.objects.filter(\n            leafletconstituency__constituency__boundary=boundary,\n                                          publisher_party = p))\n          for p  in Party.objects.filter(\n              leaflet__leafletconstituency__constituency__boundary=boundary)\\\n              .distinct().order_by('name')]\n    unclassified_leaflets = Leaflet.objects.filter(\n        leafletconstituency__constituency__boundary=boundary,\n        publisher_party = None)\n    if unclassified_leaflets:\n        party_list = party_list + [({\"name\": \"Uncategorised\"}, unclassified_leaflets)]\n    return \"boundaries\/leaflets.html\", {\"constituency\": boundary.constituency,\n                             \"party_list\": party_list\n                             }\n\ndef leaflet_colour(n):\n    r = math.log((n+1), 2)\n    return  (int(50 + r * 16), int(255 - r * 32), int(100 + r * 16), int(32 + r * 32))\n\ndef leaflet_keyvalues():\n    return [0,2,5,10,20,50,100,200]\n\n\nmaps = {\"leaflets\": {\"polygon_options\": leaflet_polygon_options,\n                     \"template\": leaflet_popup,\n                     \"colour\": leaflet_colour,\n                     \"keyvalues\": leaflet_keyvalues()}\n        }\n\ndef getDBzoom(z):\n    if int(z) > 10:\n        return 10\n    else:\n        return int(z)\n\ndef view_key(request, mapname=None, n=None, x=None, y=None):\n    image = Image.new(\"RGBA\", (int(x), int(y)), maps[mapname][\"colour\"](int(n)))\n    response = HttpResponse(mimetype=\"image\/png\")\n    image.save(response, \"PNG\")\n    return response\n\ndef view_map(request, mapname):\n    from django.conf import settings\n    return render_to_response(\"boundaries\/map.html\", {\"MEDIA_URL\":settings.MEDIA_URL, \"mapname\": mapname, \"keyvalues\":maps[mapname][\"keyvalues\"]})\n\ndef tile(request, mapname, tz=None, tx=None, ty=None, tilex=256, tiley = 256):\n    options = maps[str(mapname)]\n    west, south, east, north = getTileRect(tx, ty, tz)\n    zoom = 2 ** float(tz)\n    tx = float(tx)\n    ty = float(ty)\n    image = Image.new(\"RGBA\", (256, 256), (0, 0, 0, 0))\n    draw = ImageDraw.Draw(image)\n    dbz = getDBzoom(tz)\n\n    boundaries_within = Boundary.objects.filter(zoom=dbz, south__lt=north, north__gt=south, east__gt=west, west__lt=east)\n    for boundary in boundaries_within:\n        polygon_options = options[\"polygon_options\"](boundary)\n        coords = eval(boundary.boundary)\n        l = []\n        for lng, lat in coords:\n            x = 256 * (lng - west) \/ (east - west)\n            y = 256 * (lat - north) \/ (south - north)\n            l.append((int(x), int(y)))\n        draw.polygon(l, **polygon_options)\n    del draw\n    response = HttpResponse(mimetype=\"image\/png\")\n    image.save(response, \"PNG\")\n    return response\n\ndef popup(request, mapname, x=None, y=None, z=None):\n    options = maps[str(mapname)]\n    x = float(x)\n    y = float(y)\n    dbz = getDBzoom(z)\n    possible_boundaries = Boundary.objects.filter(zoom=int(dbz), south__lt=y, north__gt=y, east__gt=x, west__lt=x)\n    for boundary in possible_boundaries:\n        coords = eval(boundary.boundary)\n        inside = False\n        for (vx0, vy0), (vx1, vy1) in zip(coords, coords[1:] + coords[:1]):\n            if ((vy0>y) != (vy1>y)) and (x < (vx1-vx0) * (y-vy0) \/ (vy1-vy0) + vx0):\n                inside = not(inside)\n        if inside:\n            return render_to_response(*options[\"template\"](boundary))\n    raise Http404\n\ndef to_google(x, tilesAtThisZoom):\n  return google_dist * (1 - 2 * float(x) \/ tilesAtThisZoom)\n\ndef getTileRect(xt, yt, zoomt):\n           zoom = int(zoomt)\n           x = int(xt)\n           y = int(yt)\n           tilesAtThisZoom = 2 ** zoom\n\n           return (-to_google(x, tilesAtThisZoom),\n                   to_google(y + 1, tilesAtThisZoom),\n                   -to_google(x + 1, tilesAtThisZoom),\n                   to_google(y, tilesAtThisZoom))\n","tok_input_length":2948,"tok_output_length":1153,"system_prompt":"","index":16317}
{"question":"The given code is a Python class that parses Gitdm files to extract information about identities, organizations, and affiliations. To use this code, create an instance of the `GitdmParser` class and pass in the relevant Gitdm files as arguments. The resulting `GitdmParser` object will have two attributes: `identities` and `organizations`, which are lists of `Identity` and `Organization` objects, respectively. The `Identity` and `Organization` classes are defined in the `model.py` module. The `GitdmParser` class has an optional argument `email_validation` that is set to `True` by default, which can be used to disable email address validation.","input":"","expected_output":"# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2014-2021 Bitergia\n#\n# This program is free software; you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http:\/\/www.gnu.org\/licenses\/>.\n#\n# Authors:\n#     Santiago Due\u00f1as <sduenas@bitergia.com>\n#     Quan Zhou <quan@bitergia.com>\n#\n\nimport dateutil.parser\nimport logging\nimport re\n\n\nfrom ..db.model import MIN_PERIOD_DATE, MAX_PERIOD_DATE, UniqueIdentity,\\\n    Identity, Enrollment, Organization, Domain\nfrom ..exceptions import InvalidFormatError\n\nlogger = logging.getLogger(__name__)\n\n\nclass GitdmParser(object):\n    \"\"\"Parse identities and organizations using Gitdm files.\n\n    Gitdm provides several files that include information about\n    identities, organizations and affiliations. This parser is able\n    to parse anyone of these file formats, together or separate.\n\n    The unique identities are stored in an object named 'uidentities'.\n    The keys of this object are the UUID of the unique identities.\n    Each unique identity object stores a list of identities and\n    enrollments. Email addresses will not be validated when `email_validation`\n    is set to `False`.\n\n    Organizations are stored in 'organizations' object. Its keys\n    are the name of the organizations and each organization object is\n    related to a list of domains.\n\n    :param aliases: aliases stream\n    :param email_to_employer: enrollments stream\n    :param domain_to_employer: organizations stream\n    :param source: source of the data\n    :param email_validation: validate email addresses; set to True by default\n\n    :raises InvalidFormatError: raised when the format of any of the\n        given streams is not valid.\n    \"\"\"\n\n    # Common Gitdm patterns\n    VALID_LINE_REGEX = r\"^(\\S+)[ \\t]+([^#\\n\\r\\f\\v]+[^#\\s]*)(?:([ \\t]+#.*)?|\\s*)$\"\n    LINES_TO_IGNORE_REGEX = r\"^\\s*(?:#.*)?\\s*$\"\n    EMAIL_ADDRESS_REGEX = r\"^(?P<email>[^\\s@]+@[^\\s@.]+\\.[^\\s@]+)$\"\n    ORGANIZATION_REGEX = r\"^(?P<organization>[^#<\\t\\n\\r\\f\\v]*[^#<\\t\\n\\r\\f\\v\\s])?$\"\n    DOMAIN_REGEX = r\"^(?P<domain>\\w\\S+)$\"\n    ENROLLMENT_REGEX = r\"^(?P<organization>[^#<\\n\\r\\f\\v]*[^#<\\t\\n\\r\\f\\v\\s])(?:[ \\t]+<[ \\t]+(?P<date>\\d{4}\\-\\d{2}\\-\\d{2}))?$\"\n\n    def __init__(self, aliases=None, email_to_employer=None,\n                 domain_to_employer=None, source='gitdm', email_validation=True):\n        self._identities = {}\n        self._organizations = {}\n        self.source = source\n        self.email_validation = email_validation\n\n        # Raw data\n        self.__raw_identities = {}\n        self.__raw_aliases = {}\n        self.__raw_orgs = {}\n\n        self.__parse(aliases, email_to_employer,\n                     domain_to_employer)\n\n    @property\n    def identities(self):\n        uids = [u for u in self._identities.values()]\n        uids.sort(key=lambda u: u.uuid)\n        return uids\n\n    @property\n    def organizations(self):\n        orgs = [o for o in self._organizations.values()]\n        orgs.sort(key=lambda o: o.name)\n        return orgs\n\n    def __parse(self, aliases, email_to_employer, domain_to_employer):\n        \"\"\"Parse Gitdm streams\"\"\"\n\n        self.__parse_organizations(domain_to_employer)\n        self.__parse_identities(aliases, email_to_employer)\n\n    def __parse_identities(self, aliases, email_to_employer):\n        \"\"\"Parse Gitdm identities\"\"\"\n\n        # Parse streams\n        self.__parse_aliases_stream(aliases)\n        self.__parse_email_to_employer_stream(email_to_employer)\n\n        # Create unique identities from aliases list\n        for alias, email in self.__raw_aliases.items():\n            uid = self._identities.get(email, None)\n\n            if not uid:\n                uid = UniqueIdentity(uuid=email)\n\n                e = re.match(self.EMAIL_ADDRESS_REGEX, email, re.UNICODE)\n                if e:\n                    identity = Identity(email=email, source=self.source)\n                else:\n                    identity = Identity(username=email, source=self.source)\n\n                uid.identities.append(identity)\n\n                self._identities[email] = uid\n\n            e = re.match(self.EMAIL_ADDRESS_REGEX, alias, re.UNICODE)\n            if e:\n                identity = Identity(email=alias, source=self.source)\n            else:\n                identity = Identity(username=alias, source=self.source)\n\n            uid.identities.append(identity)\n\n        # Create unique identities from enrollments list\n        for email in self.__raw_identities:\n\n            # Do we have it from aliases?\n            if email in self._identities:\n                uid = self._identities[email]\n            elif email in self.__raw_aliases:\n                canonical = self.__raw_aliases[email]\n                uid = self._identities[canonical]\n            else:\n                uid = UniqueIdentity(uuid=email)\n\n                identity = Identity(email=email, source=self.source)\n                uid.identities.append(identity)\n\n                self._identities[email] = uid\n\n            # Assign enrollments\n            enrs = self.__raw_identities[email]\n            enrs.sort(key=lambda r: r[1])\n\n            start_date = MIN_PERIOD_DATE\n\n            for rol in enrs:\n                name = rol[0]\n                org = self._organizations.get(name, None)\n\n                if not org:\n                    org = Organization(name=name)\n                    self._organizations[name] = org\n\n                end_date = rol[1]\n\n                enrollment = Enrollment(start=start_date, end=end_date,\n                                        organization=org)\n                uid.enrollments.append(enrollment)\n\n                if end_date != MAX_PERIOD_DATE:\n                    start_date = end_date\n\n    def __parse_organizations(self, domain_to_employer):\n        \"\"\"Parse Gitdm organizations\"\"\"\n\n        # Parse streams\n        self.__parse_domain_to_employer_stream(domain_to_employer)\n\n        for org in self.__raw_orgs:\n            o = Organization(name=org)\n\n            for dom in self.__raw_orgs[org]:\n                d = Domain(domain=dom, is_top_domain=False)\n                o.domains.append(d)\n\n            self._organizations[org] = o\n\n    def __parse_aliases_stream(self, stream):\n        \"\"\"Parse aliases stream.\n\n        The stream contains a list of usernames (they can be email addresses\n        their username aliases. Each line has a username and an alias separated\n        by tabs. Comment lines start with the hash character (#).\n\n        Example:\n\n        # List of email aliases\n        jsmith@example.com    jsmith@example.net\n        jsmith@example.net    johnsmith@example.com\n        jdoe@example.com      john_doe@example.com\n        jdoe@example          john_doe@example.com\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_aliases_line\n\n        for alias_entries in self.__parse_stream(stream, f):\n            alias = alias_entries[0]\n            username = alias_entries[1]\n\n            self.__raw_aliases[alias] = username\n\n    def __parse_email_to_employer_stream(self, stream):\n        \"\"\"Parse email to employer stream.\n\n        The stream contains a list of email addresses and their employers.\n        Each line has an email address and a organization name separated by\n        tabs. Optionally, the date when the identity withdrew from the\n        organization can be included followed by a '<' character. Comment\n        lines start with the hash character (#).\n\n        Example:\n\n        # List of enrollments\n        jsmith@example.com    Example Company # John Smith\n        jdoe@example.com    Example Company   # John Doe\n        jsmith@example.com    Bitergia < 2015-01-01  # John Smith - Bitergia\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_email_to_employer_line\n\n        for rol in self.__parse_stream(stream, f):\n            email = rol[0]\n            org = rol[1]\n            rol_date = rol[2]\n\n            if org not in self.__raw_orgs:\n                self.__raw_orgs[org] = []\n\n            if email not in self.__raw_identities:\n                self.__raw_identities[email] = [(org, rol_date)]\n            else:\n                self.__raw_identities[email].append((org, rol_date))\n\n    def __parse_domain_to_employer_stream(self, stream):\n        \"\"\"Parse domain to employer stream.\n\n        Each line of the stream has to contain a domain and a organization,\n        or employer, separated by tabs. Comment lines start with the hash\n        character (#)\n\n        Example:\n\n        # Domains from domains.txt\n        example.org        Example\n        example.com        Example\n        bitergia.com       Bitergia\n        libresoft.es       LibreSoft\n        example.org        LibreSoft\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_domain_to_employer_line\n\n        for o in self.__parse_stream(stream, f):\n            org = o[0]\n            dom = o[1]\n\n            if org not in self.__raw_orgs:\n                self.__raw_orgs[org] = []\n\n            self.__raw_orgs[org].append(dom)\n\n    def __parse_stream(self, stream, parse_line):\n        \"\"\"Generic method to parse gitdm streams\"\"\"\n\n        if not stream:\n            raise InvalidFormatError(cause='stream cannot be empty or None')\n\n        nline = 0\n        lines = stream.split('\\n')\n\n        for line in lines:\n            nline += 1\n\n            # Ignore blank lines and comments\n            m = re.match(self.LINES_TO_IGNORE_REGEX, line, re.UNICODE)\n            if m:\n                continue\n\n            m = re.match(self.VALID_LINE_REGEX, line, re.UNICODE)\n            if not m:\n                cause = \"line %s: invalid format\" % str(nline)\n                raise InvalidFormatError(cause=cause)\n\n            try:\n                result = parse_line(m.group(1), m.group(2))\n                yield result\n            except InvalidFormatError as e:\n                cause = \"Skip: '%s' -> line %s: %s\" % (line, str(nline), e)\n                logger.warning(cause)\n                continue\n\n    def __parse_aliases_line(self, raw_alias, raw_username):\n        \"\"\"Parse aliases lines\"\"\"\n\n        alias = self.__encode(raw_alias)\n        username = self.__encode(raw_username)\n\n        return alias, username\n\n    def __parse_email_to_employer_line(self, raw_email, raw_enrollment):\n        \"\"\"Parse email to employer lines\"\"\"\n\n        e = re.match(self.EMAIL_ADDRESS_REGEX, raw_email, re.UNICODE)\n        if not e and self.email_validation:\n            cause = \"invalid email format: '%s'\" % raw_email\n            raise InvalidFormatError(cause=cause)\n\n        if self.email_validation:\n            email = e.group('email').strip()\n        else:\n            email = raw_email\n\n        raw_enrollment = raw_enrollment.strip() if raw_enrollment != ' ' else raw_enrollment\n        r = re.match(self.ENROLLMENT_REGEX, raw_enrollment, re.UNICODE)\n        if not r:\n            cause = \"invalid enrollment format: '%s'\" % raw_enrollment\n            raise InvalidFormatError(cause=cause)\n\n        org = r.group('organization').strip()\n        date = r.group('date')\n\n        if date:\n            try:\n                dt = dateutil.parser.parse(r.group('date'))\n            except Exception as e:\n                cause = \"invalid date: '%s'\" % date\n        else:\n            dt = MAX_PERIOD_DATE\n\n        email = self.__encode(email)\n        org = self.__encode(org)\n\n        return email, org, dt\n\n    def __parse_domain_to_employer_line(self, raw_domain, raw_org):\n        \"\"\"Parse domain to employer lines\"\"\"\n\n        d = re.match(self.DOMAIN_REGEX, raw_domain, re.UNICODE)\n        if not d:\n            cause = \"invalid domain format: '%s'\" % raw_domain\n            raise InvalidFormatError(cause=cause)\n\n        dom = d.group('domain').strip()\n\n        raw_org = raw_org.strip() if raw_org != ' ' else raw_org\n        o = re.match(self.ORGANIZATION_REGEX, raw_org, re.UNICODE)\n        if not o:\n            cause = \"invalid organization format: '%s'\" % raw_org\n            raise InvalidFormatError(cause=cause)\n\n        org = o.group('organization').strip()\n\n        org = self.__encode(org)\n        dom = self.__encode(dom)\n\n        return org, dom\n\n    def __encode(self, s):\n        return s if s else None\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python class that parses Gitdm files to extract information about identities, organizations, and affiliations. To use this code, create an instance of the `GitdmParser` class and pass in the relevant Gitdm files as arguments. The resulting `GitdmParser` object will have two attributes: `identities` and `organizations`, which are lists of `Identity` and `Organization` objects, respectively. The `Identity` and `Organization` classes are defined in the `model.py` module. The `GitdmParser` class has an optional argument `email_validation` that is set to `True` by default, which can be used to disable email address validation.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2014-2021 Bitergia\n#\n# This program is free software; you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http:\/\/www.gnu.org\/licenses\/>.\n#\n# Authors:\n#     Santiago Due\u00f1as <sduenas@bitergia.com>\n#     Quan Zhou <quan@bitergia.com>\n#\n\nimport dateutil.parser\nimport logging\nimport re\n\n\nfrom ..db.model import MIN_PERIOD_DATE, MAX_PERIOD_DATE, UniqueIdentity,\\\n    Identity, Enrollment, Organization, Domain\nfrom ..exceptions import InvalidFormatError\n\nlogger = logging.getLogger(__name__)\n\n\nclass GitdmParser(object):\n    \"\"\"Parse identities and organizations using Gitdm files.\n\n    Gitdm provides several files that include information about\n    identities, organizations and affiliations. This parser is able\n    to parse anyone of these file formats, together or separate.\n\n    The unique identities are stored in an object named 'uidentities'.\n    The keys of this object are the UUID of the unique identities.\n    Each unique identity object stores a list of identities and\n    enrollments. Email addresses will not be validated when `email_validation`\n    is set to `False`.\n\n    Organizations are stored in 'organizations' object. Its keys\n    are the name of the organizations and each organization object is\n    related to a list of domains.\n\n    :param aliases: aliases stream\n    :param email_to_employer: enrollments stream\n    :param domain_to_employer: organizations stream\n    :param source: source of the data\n    :param email_validation: validate email addresses; set to True by default\n\n    :raises InvalidFormatError: raised when the format of any of the\n        given streams is not valid.\n    \"\"\"\n\n    # Common Gitdm patterns\n    VALID_LINE_REGEX = r\"^(\\S+)[ \\t]+([^#\\n\\r\\f\\v]+[^#\\s]*)(?:([ \\t]+#.*)?|\\s*)$\"\n    LINES_TO_IGNORE_REGEX = r\"^\\s*(?:#.*)?\\s*$\"\n    EMAIL_ADDRESS_REGEX = r\"^(?P<email>[^\\s@]+@[^\\s@.]+\\.[^\\s@]+)$\"\n    ORGANIZATION_REGEX = r\"^(?P<organization>[^#<\\t\\n\\r\\f\\v]*[^#<\\t\\n\\r\\f\\v\\s])?$\"\n    DOMAIN_REGEX = r\"^(?P<domain>\\w\\S+)$\"\n    ENROLLMENT_REGEX = r\"^(?P<organization>[^#<\\n\\r\\f\\v]*[^#<\\t\\n\\r\\f\\v\\s])(?:[ \\t]+<[ \\t]+(?P<date>\\d{4}\\-\\d{2}\\-\\d{2}))?$\"\n\n    def __init__(self, aliases=None, email_to_employer=None,\n                 domain_to_employer=None, source='gitdm', email_validation=True):\n        self._identities = {}\n        self._organizations = {}\n        self.source = source\n        self.email_validation = email_validation\n\n        # Raw data\n        self.__raw_identities = {}\n        self.__raw_aliases = {}\n        self.__raw_orgs = {}\n\n        self.__parse(aliases, email_to_employer,\n                     domain_to_employer)\n\n    @property\n    def identities(self):\n        uids = [u for u in self._identities.values()]\n        uids.sort(key=lambda u: u.uuid)\n        return uids\n\n    @property\n    def organizations(self):\n        orgs = [o for o in self._organizations.values()]\n        orgs.sort(key=lambda o: o.name)\n        return orgs\n\n    def __parse(self, aliases, email_to_employer, domain_to_employer):\n        \"\"\"Parse Gitdm streams\"\"\"\n\n        self.__parse_organizations(domain_to_employer)\n        self.__parse_identities(aliases, email_to_employer)\n\n    def __parse_identities(self, aliases, email_to_employer):\n        \"\"\"Parse Gitdm identities\"\"\"\n\n        # Parse streams\n        self.__parse_aliases_stream(aliases)\n        self.__parse_email_to_employer_stream(email_to_employer)\n\n        # Create unique identities from aliases list\n        for alias, email in self.__raw_aliases.items():\n            uid = self._identities.get(email, None)\n\n            if not uid:\n                uid = UniqueIdentity(uuid=email)\n\n                e = re.match(self.EMAIL_ADDRESS_REGEX, email, re.UNICODE)\n                if e:\n                    identity = Identity(email=email, source=self.source)\n                else:\n                    identity = Identity(username=email, source=self.source)\n\n                uid.identities.append(identity)\n\n                self._identities[email] = uid\n\n            e = re.match(self.EMAIL_ADDRESS_REGEX, alias, re.UNICODE)\n            if e:\n                identity = Identity(email=alias, source=self.source)\n            else:\n                identity = Identity(username=alias, source=self.source)\n\n            uid.identities.append(identity)\n\n        # Create unique identities from enrollments list\n        for email in self.__raw_identities:\n\n            # Do we have it from aliases?\n            if email in self._identities:\n                uid = self._identities[email]\n            elif email in self.__raw_aliases:\n                canonical = self.__raw_aliases[email]\n                uid = self._identities[canonical]\n            else:\n                uid = UniqueIdentity(uuid=email)\n\n                identity = Identity(email=email, source=self.source)\n                uid.identities.append(identity)\n\n                self._identities[email] = uid\n\n            # Assign enrollments\n            enrs = self.__raw_identities[email]\n            enrs.sort(key=lambda r: r[1])\n\n            start_date = MIN_PERIOD_DATE\n\n            for rol in enrs:\n                name = rol[0]\n                org = self._organizations.get(name, None)\n\n                if not org:\n                    org = Organization(name=name)\n                    self._organizations[name] = org\n\n                end_date = rol[1]\n\n                enrollment = Enrollment(start=start_date, end=end_date,\n                                        organization=org)\n                uid.enrollments.append(enrollment)\n\n                if end_date != MAX_PERIOD_DATE:\n                    start_date = end_date\n\n    def __parse_organizations(self, domain_to_employer):\n        \"\"\"Parse Gitdm organizations\"\"\"\n\n        # Parse streams\n        self.__parse_domain_to_employer_stream(domain_to_employer)\n\n        for org in self.__raw_orgs:\n            o = Organization(name=org)\n\n            for dom in self.__raw_orgs[org]:\n                d = Domain(domain=dom, is_top_domain=False)\n                o.domains.append(d)\n\n            self._organizations[org] = o\n\n    def __parse_aliases_stream(self, stream):\n        \"\"\"Parse aliases stream.\n\n        The stream contains a list of usernames (they can be email addresses\n        their username aliases. Each line has a username and an alias separated\n        by tabs. Comment lines start with the hash character (#).\n\n        Example:\n\n        # List of email aliases\n        jsmith@example.com    jsmith@example.net\n        jsmith@example.net    johnsmith@example.com\n        jdoe@example.com      john_doe@example.com\n        jdoe@example          john_doe@example.com\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_aliases_line\n\n        for alias_entries in self.__parse_stream(stream, f):\n            alias = alias_entries[0]\n            username = alias_entries[1]\n\n            self.__raw_aliases[alias] = username\n\n    def __parse_email_to_employer_stream(self, stream):\n        \"\"\"Parse email to employer stream.\n\n        The stream contains a list of email addresses and their employers.\n        Each line has an email address and a organization name separated by\n        tabs. Optionally, the date when the identity withdrew from the\n        organization can be included followed by a '<' character. Comment\n        lines start with the hash character (#).\n\n        Example:\n\n        # List of enrollments\n        jsmith@example.com    Example Company # John Smith\n        jdoe@example.com    Example Company   # John Doe\n        jsmith@example.com    Bitergia < 2015-01-01  # John Smith - Bitergia\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_email_to_employer_line\n\n        for rol in self.__parse_stream(stream, f):\n            email = rol[0]\n            org = rol[1]\n            rol_date = rol[2]\n\n            if org not in self.__raw_orgs:\n                self.__raw_orgs[org] = []\n\n            if email not in self.__raw_identities:\n                self.__raw_identities[email] = [(org, rol_date)]\n            else:\n                self.__raw_identities[email].append((org, rol_date))\n\n    def __parse_domain_to_employer_stream(self, stream):\n        \"\"\"Parse domain to employer stream.\n\n        Each line of the stream has to contain a domain and a organization,\n        or employer, separated by tabs. Comment lines start with the hash\n        character (#)\n\n        Example:\n\n        # Domains from domains.txt\n        example.org        Example\n        example.com        Example\n        bitergia.com       Bitergia\n        libresoft.es       LibreSoft\n        example.org        LibreSoft\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_domain_to_employer_line\n\n        for o in self.__parse_stream(stream, f):\n            org = o[0]\n            dom = o[1]\n\n            if org not in self.__raw_orgs:\n                self.__raw_orgs[org] = []\n\n            self.__raw_orgs[org].append(dom)\n\n    def __parse_stream(self, stream, parse_line):\n        \"\"\"Generic method to parse gitdm streams\"\"\"\n\n        if not stream:\n            raise InvalidFormatError(cause='stream cannot be empty or None')\n\n        nline = 0\n        lines = stream.split('\\n')\n\n        for line in lines:\n            nline += 1\n\n            # Ignore blank lines and comments\n            m = re.match(self.LINES_TO_IGNORE_REGEX, line, re.UNICODE)\n            if m:\n                continue\n\n            m = re.match(self.VALID_LINE_REGEX, line, re.UNICODE)\n            if not m:\n                cause = \"line %s: invalid format\" % str(nline)\n                raise InvalidFormatError(cause=cause)\n\n            try:\n                result = parse_line(m.group(1), m.group(2))\n                yield result\n            except InvalidFormatError as e:\n                cause = \"Skip: '%s' -> line %s: %s\" % (line, str(nline), e)\n                logger.warning(cause)\n                continue\n\n    def __parse_aliases_line(self, raw_alias, raw_username):\n        \"\"\"Parse aliases lines\"\"\"\n\n        alias = self.__encode(raw_alias)\n        username = self.__encode(raw_username)\n\n        return alias, username\n\n    def __parse_email_to_employer_line(self, raw_email, raw_enrollment):\n        \"\"\"Parse email to employer lines\"\"\"\n\n        e = re.match(self.EMAIL_ADDRESS_REGEX, raw_email, re.UNICODE)\n        if not e and self.email_validation:\n            cause = \"invalid email format: '%s'\" % raw_email\n            raise InvalidFormatError(cause=cause)\n\n        if self.email_validation:\n            email = e.group('email').strip()\n        else:\n            email = raw_email\n\n        raw_enrollment = raw_enrollment.strip() if raw_enrollment != ' ' else raw_enrollment\n        r = re.match(self.ENROLLMENT_REGEX, raw_enrollment, re.UNICODE)\n        if not r:\n            cause = \"invalid enrollment format: '%s'\" % raw_enrollment\n            raise InvalidFormatError(cause=cause)\n\n        org = r.group('organization').strip()\n        date = r.group('date')\n\n        if date:\n            try:\n                dt = dateutil.parser.parse(r.group('date'))\n            except Exception as e:\n                cause = \"invalid date: '%s'\" % date\n        else:\n            dt = MAX_PERIOD_DATE\n\n        email = self.__encode(email)\n        org = self.__encode(org)\n\n        return email, org, dt\n\n    def __parse_domain_to_employer_line(self, raw_domain, raw_org):\n        \"\"\"Parse domain to employer lines\"\"\"\n\n        d = re.match(self.DOMAIN_REGEX, raw_domain, re.UNICODE)\n        if not d:\n            cause = \"invalid domain format: '%s'\" % raw_domain\n            raise InvalidFormatError(cause=cause)\n\n        dom = d.group('domain').strip()\n\n        raw_org = raw_org.strip() if raw_org != ' ' else raw_org\n        o = re.match(self.ORGANIZATION_REGEX, raw_org, re.UNICODE)\n        if not o:\n            cause = \"invalid organization format: '%s'\" % raw_org\n            raise InvalidFormatError(cause=cause)\n\n        org = o.group('organization').strip()\n\n        org = self.__encode(org)\n        dom = self.__encode(dom)\n\n        return org, dom\n\n    def __encode(self, s):\n        return s if s else None\n","tok_input_length":3006,"tok_output_length":2838,"system_prompt":"","index":17503}
{"question":"This code opens a PDF file and displays its metadata, renders the first page of the PDF with a specified zoom factor and rotation, extracts the text from the page, and displays it in a scrollable window. To use this code, run the Python script with the PDF file name as the first argument and optional arguments for page number, zoom factor, and rotation. The extracted text can be further processed or saved to a file.","input":"","expected_output":"#! \/usr\/bin\/env python\n# -*- Python -*-\n\n####################################################################################################\n\nimport argparse\nimport sys\n\nimport numpy as np\n\nimport mupdf as cmupdf\nfrom MuPDF import *\n\nfrom PyQt4 import QtCore, QtGui\n\n####################################################################################################\n\ndef show_metadata(ctx, doc):\n\n    for key in (\n        'Title',\n        'Subject',\n        'Author',\n        'Creator',\n        'Producer',\n        'CreationDate',\n        'ModDate',\n        ):\n        print cmupdf.get_meta_info(doc, key, 1024)\n    \n    fz_buffer = cmupdf.pdf_metadata(doc)\n    print cmupdf.fz_buffer_data(fz_buffer)\n    cmupdf.fz_drop_buffer(ctx, fz_buffer)\n\n####################################################################################################\n\ndef show_pdf(np_array):\n\n    application = QtGui.QApplication(sys.argv)\n\n    height, width = np_array.shape[:2]\n    image = QtGui.QImage(np_array.data, width, height, QtGui.QImage.Format_ARGB32)\n\n    label = QtGui.QLabel()\n    label.setPixmap(QtGui.QPixmap.fromImage(image))\n\n    area = QtGui.QScrollArea()\n    area.setWidget(label)\n    area.setWindowTitle(args.filename)\n    area.show()\n\n    application.exec_()\n\n####################################################################################################\n\ndef get_font_name(font):\n\n    font_name = cmupdf.get_font_name(font)\n    i = font_name.find('+')\n    if i:\n        font_name = font_name[i+1:] \n\n    return font_name\n\n####################################################################################################\n\ndef dump_bbox(obj):\n\n    return \"[%g %g %g %g]\" % (obj.bbox.x0, obj.bbox.y0,\n                              obj.bbox.x1, obj.bbox.y1)\n\n####################################################################################################\n\ndef dump_text_style(text_sheet):\n\n    style = text_sheet.style\n    while style:\n        font = style.font\n        message = \"span.s%u{font-family:\\\"%s\\\";font-size:%gpt\" % (style.id, get_font_name(font), style.size)\n        if cmupdf.font_is_italic(font):\n            message += ';font-style:italic'\n        if cmupdf.font_is_bold(font):\n            message += ';font-weight:bold;'\n        message += '}'\n        print message\n        style = style.next\n\n####################################################################################################\n\ndef dump_text_page_xml(text_page):\n\n    print \"<page>\"\n    for block in TextBlockIterator(text_page):\n        print \"<block bbox=\\\"\" + dump_bbox(block) + \"\\\">\"\n        for line in TextLineIterator(block):\n            print \" \"*2 + \"<line bbox=\\\"\" + dump_bbox(line) + \"\\\">\"\n            for span in TextSpanIterator(line):\n                print \" \"*4 + \"<span bbox=\\\"\" + dump_bbox(span) + \"\\\" \\\">\"\n                for ch in TextCharIterator(span):\n                    style = ch.style\n                    font_name = get_font_name(style.font)\n                    print \" \"*6 + \"<char \" + \\\n                        u\" c=\\\"%s\\\" font=\\\"%s\\\" size=\\\"%g\\\"\/>\" % (unichr(ch.c), font_name, style.size)\n                print \" \"*4 + \"<\/span>\"\n            print \" \"*2 + \"<\/line>\"\n        print \"<\/block>\"\n    print \"<\/page>\"\n\n\n####################################################################################################\n\ndef dump_text_page(text_page):\n\n    empty_block = False\n    for block in TextBlockIterator(text_page):\n        if not empty_block:\n            print '\\n<Block>'\n        empty_block = True\n        for line in TextLineIterator(block):\n            line_text = u''\n            for span in TextSpanIterator(line):\n                span_text = u''\n                for ch in TextCharIterator(span):\n                    span_text += unichr(ch.c)\n                span_text = span_text.rstrip()\n                if span_text:\n                    line_text += '<Span>' + span_text + '<\/Span>'\n                else:\n                    line_text += '<Empty Span>'\n            if line_text:\n                print line_text\n                empty_block = False\n\n####################################################################################################\n\nclass GrowingTextBrowser(QtGui.QTextBrowser):\n\n    _id = 0\n\n    ##############################################\n\n    def __init__(self, *args, **kwargs):\n\n        GrowingTextBrowser._id += 1\n        self._id = GrowingTextBrowser._id\n\n        super(GrowingTextBrowser, self).__init__(*args, **kwargs)  \n        size_policy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)\n        size_policy.setHeightForWidth(True)\n        self.setSizePolicy(size_policy)\n        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n\n    ##############################################\n\n    def setPlainText(self, text):\n\n        super(GrowingTextBrowser, self).setPlainText(text)\n        self._text = text\n\n    ##############################################\n\n    def print_document_size(self, document=None):\n\n        if document is None:\n            document = self.document()\n        document_size = document.size()\n        print \"Document width\", document_size.width(), 'height', document_size.height()\n\n    ##############################################\n\n    def sizePolicy(self):\n\n        size_policy = super(GrowingTextBrowser, self).sizePolicy()\n        print 'GrowingTextBrowser.sizePolicy', self._id, \\\n            size_policy.horizontalPolicy(), size_policy.verticalPolicy()\n        return size_policy\n\n    ##############################################\n\n    def sizeHint(self):\n\n        size = super(GrowingTextBrowser, self).sizeHint()\n        print 'GrowingTextBrowser.sizeHint', self._id, size.width(), size.height()\n        return QtCore.QSize(0, 0)\n\n    ##############################################\n\n    def minimumSizeHint(self):\n\n        size = super(GrowingTextBrowser, self).minimumSizeHint()\n        print 'GrowingTextBrowser.minimumSizeHint', self._id, size.width(), size.height()\n        return QtCore.QSize(0, 0)\n\n    ##############################################\n\n    def heightForWidth(self, width):\n\n        print 'GrowingTextBrowser.heightForWidth', self._id, width\n        document = QtGui.QTextDocument(self._text)\n        document.setPageSize(QtCore.QSizeF(width, -1))\n        height = document.documentLayout().documentSize().toSize().height()\n        self.print_document_size(document)\n        return height + self.font().pointSize()\n\n    ##############################################\n\n    def resizeEvent(self, event):\n\n        print 'GrowingTextBrowser.resizeEvent', self._id, \\\n            'old', event.oldSize().width(), event.oldSize().height(), \\\n            'new', event.size().width(), event.size().height()\n        self.print_document_size()\n        return super(GrowingTextBrowser, self).resizeEvent(event)\n\n####################################################################################################\n\ndef append_block(parent, vertical_layout, source_text):\n\n    text_browser = GrowingTextBrowser(parent)\n    text_browser.setPlainText(source_text)\n    # vertical_layout.addWidget(text_browser)\n    horizontal_layout = QtGui.QHBoxLayout()\n    horizontal_layout.addWidget(text_browser, 0, QtCore.Qt.AlignTop)\n    vertical_layout.addLayout(horizontal_layout)\n\ndef show_text_page(text_page):\n\n    application = QtGui.QApplication(sys.argv)\n\n    main_window = QtGui.QMainWindow()\n    main_window.resize(1000, 800)\n    main_window.setWindowTitle(args.filename)\n\n    scroll_area = QtGui.QScrollArea(main_window)\n    # scroll_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)\n    scroll_area.setWidgetResizable(True)\n    main_window.setCentralWidget(scroll_area)\n\n    container_widget = QtGui.QWidget()\n    vertical_layout = QtGui.QVBoxLayout(container_widget) # Set container_widget layout\n    scroll_area.setWidget(container_widget)\n\n    for block in TextBlockIterator(text_page):\n        block_text = u''\n        for line in TextLineIterator(block):\n            line_text = u''\n            for span in TextSpanIterator(line):\n                span_text = u''\n                for ch in TextCharIterator(span):\n                    span_text += unichr(ch.c)\n                span_text = span_text.rstrip()\n                if span_text: # Append span to line\n                    line_text += span_text\n                else: # Empty span then append a block\n                    if block_text:\n                        append_block(container_widget, vertical_layout, block_text)\n                    block_text = u''\n                    line_text = u''\n            # Append line to block\n            if block_text:\n                block_text += ' '\n            block_text += line_text\n        if block_text:\n            append_block(container_widget, vertical_layout, block_text)\n\n    spacer_item = QtGui.QSpacerItem(0, 0, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)\n    vertical_layout.addItem(spacer_item)\n\n    print 'Show'\n    #main_window.show()\n    main_window.showMaximized()\n    application.exec_()\n\n####################################################################################################\n\nargument_parser = argparse.ArgumentParser(description='Example.')\n\nargument_parser.add_argument('filename', metavar='FILENAME',\n                             help='PDF file')\n\nargument_parser.add_argument('--page', dest='page_number',\n                             type=int,\n                             default=1,\n                             help='Page number')\n\nargument_parser.add_argument('--zoom', dest='zoom',\n                             type=int,\n                             default=100,\n                             help='Zoom factor in %%')\n\nargument_parser.add_argument('--rotation', dest='rotation',\n                             type=int,\n                             default=0,\n                             help='Rotation')\n\nargs = argument_parser.parse_args()\n\n####################################################################################################\n\n# Create a context to hold the exception stack and various caches.\nctx = cmupdf.fz_new_context(None, None, cmupdf.FZ_STORE_UNLIMITED)\n\n####################################################################################################\n\n# Open the PDF, XPS or CBZ document.\ndoc = cmupdf.fz_open_document(ctx, args.filename)\n\nshow_metadata(ctx, doc)\n\n####################################################################################################\n\n# Retrieve the number of pages (not used in this example).\npage_count = cmupdf.fz_count_pages(doc)\n\n# Load the page we want. Page numbering starts from zero.\npage = cmupdf.fz_load_page(doc, args.page_number -1)\n\n####################################################################################################\n\n# Calculate a transform to use when rendering. This transform contains the scale and\n# rotation. Convert zoom percentage to a scaling factor. Without scaling the resolution is 72 dpi.\ntransform = cmupdf.fz_matrix_s()\ncmupdf.fz_rotate(transform, args.rotation)\ncmupdf.fz_pre_scale(transform, args.zoom \/ 100.0, args.zoom \/ 100.0)\n\n# Take the page bounds and transform them by the same matrix that we will use to render the page.\nbounds = cmupdf.fz_rect_s()\ncmupdf.fz_bound_page(doc, page, bounds)\ncmupdf.fz_transform_rect(bounds, transform)\n\n####################################################################################################\n\n# A page consists of a series of objects (text, line art, images, gradients). These objects are\n# passed to a device when the interpreter runs the page. There are several devices, used for\n# different purposes:\n#\n#\tdraw device -- renders objects to a target pixmap.\n#\n#\ttext device -- extracts the text in reading order with styling\n#\tinformation. This text can be used to provide text search.\n#\n#\tlist device -- records the graphic objects in a list that can\n#\tbe played back through another device. This is useful if you\n#\tneed to run the same page through multiple devices, without\n#\tthe overhead of parsing the page each time.\n\n####################################################################################################\n\n# Create a blank pixmap to hold the result of rendering. The pixmap bounds used here are the same as\n# the transformed page bounds, so it will contain the entire page. The page coordinate space has the\n# origin at the top left corner and the x axis extends to the right and the y axis extends down.\nbbox = cmupdf.fz_irect_s()\ncmupdf.fz_round_rect(bbox, bounds)\nwidth, height = bbox.x1 - bbox.x0, bbox.y1 - bbox.y0\nnp_array = np.zeros((height, width, 4), dtype=np.uint8)\n# pixmap = cmupdf.fz_new_pixmap_with_bbox(ctx, cmupdf.get_fz_device_rgb(), bbox)\npixmap = cmupdf.fz_new_pixmap_with_bbox_and_data(ctx, cmupdf.fz_device_rgb(ctx), bbox,\n                                                 cmupdf.numpy_to_pixmap(np_array))\ncmupdf.fz_clear_pixmap_with_value(ctx, pixmap, 0xff)\n\n# Create a draw device with the pixmap as its target.\n# Run the page with the transform.\ndevice = cmupdf.fz_new_draw_device(ctx, pixmap)\ncmupdf.fz_set_aa_level(ctx, 8)\ncmupdf.fz_run_page(doc, page, device, transform, None)\ncmupdf.fz_free_device(device)\n\nif True:\n    show_pdf(np_array)\n\nif False:\n    # Save the pixmap to a file.\n    cmupdf.fz_write_png(ctx, pixmap, \"out.png\", 0)\n\n####################################################################################################\n\ntext_sheet = cmupdf.fz_new_text_sheet(ctx)\ntext_page = cmupdf.fz_new_text_page(ctx)\n\ndevice = cmupdf.fz_new_text_device(ctx, text_sheet, text_page)\ncmupdf.fz_run_page(doc, page, device, transform, None)\ncmupdf.fz_free_device(device)\n\nif False:\n    # Dump text style and page.\n    dump_text_style(text_sheet)\n    dump_text_page_xml(text_page)\n\nif True:\n    dump_text_page(text_page)\n    show_text_page(text_page)\n\nif False:\n    file_handler = cmupdf.fz_fopen(\"out.css\", \"w+\")\n    output_file = cmupdf.fz_new_output_with_file(ctx, file_handler)\n    cmupdf.fz_print_text_sheet(ctx, output_file, text_sheet)\n    cmupdf.fz_close_output(output_file)\n    cmupdf.fz_fclose(file_handler)\n\n    output_file = cmupdf.fz_fopen(\"out.txt\", \"w+\")\n    output_file = cmupdf.fz_new_output_with_file(ctx, file_handler)\n    # cmupdf.fz_print_text_page(ctx, output_file, text_page)\n    # cmupdf.fz_print_text_page_html(ctx, output_file, text_page)\n    cmupdf.fz_print_text_page_xml(ctx, output_file, text_page)\n    cmupdf.fz_close_output(output_file)\n    cmupdf.fz_fclose(file_handler)\n\n####################################################################################################\n\n# Clean up.\ncmupdf.fz_free_text_sheet(ctx, text_sheet)\ncmupdf.fz_free_text_page(ctx, text_page)\ncmupdf.fz_drop_pixmap(ctx, pixmap)\ncmupdf.fz_free_page(doc, page)\ncmupdf.fz_close_document(doc)\ncmupdf.fz_free_context(ctx)\n\n####################################################################################################\n# \n# End\n# \n####################################################################################################\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code opens a PDF file and displays its metadata, renders the first page of the PDF with a specified zoom factor and rotation, extracts the text from the page, and displays it in a scrollable window. To use this code, run the Python script with the PDF file name as the first argument and optional arguments for page number, zoom factor, and rotation. The extracted text can be further processed or saved to a file.\n\n### Input:\n\n\n### Output:\n#! \/usr\/bin\/env python\n# -*- Python -*-\n\n####################################################################################################\n\nimport argparse\nimport sys\n\nimport numpy as np\n\nimport mupdf as cmupdf\nfrom MuPDF import *\n\nfrom PyQt4 import QtCore, QtGui\n\n####################################################################################################\n\ndef show_metadata(ctx, doc):\n\n    for key in (\n        'Title',\n        'Subject',\n        'Author',\n        'Creator',\n        'Producer',\n        'CreationDate',\n        'ModDate',\n        ):\n        print cmupdf.get_meta_info(doc, key, 1024)\n    \n    fz_buffer = cmupdf.pdf_metadata(doc)\n    print cmupdf.fz_buffer_data(fz_buffer)\n    cmupdf.fz_drop_buffer(ctx, fz_buffer)\n\n####################################################################################################\n\ndef show_pdf(np_array):\n\n    application = QtGui.QApplication(sys.argv)\n\n    height, width = np_array.shape[:2]\n    image = QtGui.QImage(np_array.data, width, height, QtGui.QImage.Format_ARGB32)\n\n    label = QtGui.QLabel()\n    label.setPixmap(QtGui.QPixmap.fromImage(image))\n\n    area = QtGui.QScrollArea()\n    area.setWidget(label)\n    area.setWindowTitle(args.filename)\n    area.show()\n\n    application.exec_()\n\n####################################################################################################\n\ndef get_font_name(font):\n\n    font_name = cmupdf.get_font_name(font)\n    i = font_name.find('+')\n    if i:\n        font_name = font_name[i+1:] \n\n    return font_name\n\n####################################################################################################\n\ndef dump_bbox(obj):\n\n    return \"[%g %g %g %g]\" % (obj.bbox.x0, obj.bbox.y0,\n                              obj.bbox.x1, obj.bbox.y1)\n\n####################################################################################################\n\ndef dump_text_style(text_sheet):\n\n    style = text_sheet.style\n    while style:\n        font = style.font\n        message = \"span.s%u{font-family:\\\"%s\\\";font-size:%gpt\" % (style.id, get_font_name(font), style.size)\n        if cmupdf.font_is_italic(font):\n            message += ';font-style:italic'\n        if cmupdf.font_is_bold(font):\n            message += ';font-weight:bold;'\n        message += '}'\n        print message\n        style = style.next\n\n####################################################################################################\n\ndef dump_text_page_xml(text_page):\n\n    print \"<page>\"\n    for block in TextBlockIterator(text_page):\n        print \"<block bbox=\\\"\" + dump_bbox(block) + \"\\\">\"\n        for line in TextLineIterator(block):\n            print \" \"*2 + \"<line bbox=\\\"\" + dump_bbox(line) + \"\\\">\"\n            for span in TextSpanIterator(line):\n                print \" \"*4 + \"<span bbox=\\\"\" + dump_bbox(span) + \"\\\" \\\">\"\n                for ch in TextCharIterator(span):\n                    style = ch.style\n                    font_name = get_font_name(style.font)\n                    print \" \"*6 + \"<char \" + \\\n                        u\" c=\\\"%s\\\" font=\\\"%s\\\" size=\\\"%g\\\"\/>\" % (unichr(ch.c), font_name, style.size)\n                print \" \"*4 + \"<\/span>\"\n            print \" \"*2 + \"<\/line>\"\n        print \"<\/block>\"\n    print \"<\/page>\"\n\n\n####################################################################################################\n\ndef dump_text_page(text_page):\n\n    empty_block = False\n    for block in TextBlockIterator(text_page):\n        if not empty_block:\n            print '\\n<Block>'\n        empty_block = True\n        for line in TextLineIterator(block):\n            line_text = u''\n            for span in TextSpanIterator(line):\n                span_text = u''\n                for ch in TextCharIterator(span):\n                    span_text += unichr(ch.c)\n                span_text = span_text.rstrip()\n                if span_text:\n                    line_text += '<Span>' + span_text + '<\/Span>'\n                else:\n                    line_text += '<Empty Span>'\n            if line_text:\n                print line_text\n                empty_block = False\n\n####################################################################################################\n\nclass GrowingTextBrowser(QtGui.QTextBrowser):\n\n    _id = 0\n\n    ##############################################\n\n    def __init__(self, *args, **kwargs):\n\n        GrowingTextBrowser._id += 1\n        self._id = GrowingTextBrowser._id\n\n        super(GrowingTextBrowser, self).__init__(*args, **kwargs)  \n        size_policy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)\n        size_policy.setHeightForWidth(True)\n        self.setSizePolicy(size_policy)\n        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n\n    ##############################################\n\n    def setPlainText(self, text):\n\n        super(GrowingTextBrowser, self).setPlainText(text)\n        self._text = text\n\n    ##############################################\n\n    def print_document_size(self, document=None):\n\n        if document is None:\n            document = self.document()\n        document_size = document.size()\n        print \"Document width\", document_size.width(), 'height', document_size.height()\n\n    ##############################################\n\n    def sizePolicy(self):\n\n        size_policy = super(GrowingTextBrowser, self).sizePolicy()\n        print 'GrowingTextBrowser.sizePolicy', self._id, \\\n            size_policy.horizontalPolicy(), size_policy.verticalPolicy()\n        return size_policy\n\n    ##############################################\n\n    def sizeHint(self):\n\n        size = super(GrowingTextBrowser, self).sizeHint()\n        print 'GrowingTextBrowser.sizeHint', self._id, size.width(), size.height()\n        return QtCore.QSize(0, 0)\n\n    ##############################################\n\n    def minimumSizeHint(self):\n\n        size = super(GrowingTextBrowser, self).minimumSizeHint()\n        print 'GrowingTextBrowser.minimumSizeHint', self._id, size.width(), size.height()\n        return QtCore.QSize(0, 0)\n\n    ##############################################\n\n    def heightForWidth(self, width):\n\n        print 'GrowingTextBrowser.heightForWidth', self._id, width\n        document = QtGui.QTextDocument(self._text)\n        document.setPageSize(QtCore.QSizeF(width, -1))\n        height = document.documentLayout().documentSize().toSize().height()\n        self.print_document_size(document)\n        return height + self.font().pointSize()\n\n    ##############################################\n\n    def resizeEvent(self, event):\n\n        print 'GrowingTextBrowser.resizeEvent', self._id, \\\n            'old', event.oldSize().width(), event.oldSize().height(), \\\n            'new', event.size().width(), event.size().height()\n        self.print_document_size()\n        return super(GrowingTextBrowser, self).resizeEvent(event)\n\n####################################################################################################\n\ndef append_block(parent, vertical_layout, source_text):\n\n    text_browser = GrowingTextBrowser(parent)\n    text_browser.setPlainText(source_text)\n    # vertical_layout.addWidget(text_browser)\n    horizontal_layout = QtGui.QHBoxLayout()\n    horizontal_layout.addWidget(text_browser, 0, QtCore.Qt.AlignTop)\n    vertical_layout.addLayout(horizontal_layout)\n\ndef show_text_page(text_page):\n\n    application = QtGui.QApplication(sys.argv)\n\n    main_window = QtGui.QMainWindow()\n    main_window.resize(1000, 800)\n    main_window.setWindowTitle(args.filename)\n\n    scroll_area = QtGui.QScrollArea(main_window)\n    # scroll_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)\n    scroll_area.setWidgetResizable(True)\n    main_window.setCentralWidget(scroll_area)\n\n    container_widget = QtGui.QWidget()\n    vertical_layout = QtGui.QVBoxLayout(container_widget) # Set container_widget layout\n    scroll_area.setWidget(container_widget)\n\n    for block in TextBlockIterator(text_page):\n        block_text = u''\n        for line in TextLineIterator(block):\n            line_text = u''\n            for span in TextSpanIterator(line):\n                span_text = u''\n                for ch in TextCharIterator(span):\n                    span_text += unichr(ch.c)\n                span_text = span_text.rstrip()\n                if span_text: # Append span to line\n                    line_text += span_text\n                else: # Empty span then append a block\n                    if block_text:\n                        append_block(container_widget, vertical_layout, block_text)\n                    block_text = u''\n                    line_text = u''\n            # Append line to block\n            if block_text:\n                block_text += ' '\n            block_text += line_text\n        if block_text:\n            append_block(container_widget, vertical_layout, block_text)\n\n    spacer_item = QtGui.QSpacerItem(0, 0, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)\n    vertical_layout.addItem(spacer_item)\n\n    print 'Show'\n    #main_window.show()\n    main_window.showMaximized()\n    application.exec_()\n\n####################################################################################################\n\nargument_parser = argparse.ArgumentParser(description='Example.')\n\nargument_parser.add_argument('filename', metavar='FILENAME',\n                             help='PDF file')\n\nargument_parser.add_argument('--page', dest='page_number',\n                             type=int,\n                             default=1,\n                             help='Page number')\n\nargument_parser.add_argument('--zoom', dest='zoom',\n                             type=int,\n                             default=100,\n                             help='Zoom factor in %%')\n\nargument_parser.add_argument('--rotation', dest='rotation',\n                             type=int,\n                             default=0,\n                             help='Rotation')\n\nargs = argument_parser.parse_args()\n\n####################################################################################################\n\n# Create a context to hold the exception stack and various caches.\nctx = cmupdf.fz_new_context(None, None, cmupdf.FZ_STORE_UNLIMITED)\n\n####################################################################################################\n\n# Open the PDF, XPS or CBZ document.\ndoc = cmupdf.fz_open_document(ctx, args.filename)\n\nshow_metadata(ctx, doc)\n\n####################################################################################################\n\n# Retrieve the number of pages (not used in this example).\npage_count = cmupdf.fz_count_pages(doc)\n\n# Load the page we want. Page numbering starts from zero.\npage = cmupdf.fz_load_page(doc, args.page_number -1)\n\n####################################################################################################\n\n# Calculate a transform to use when rendering. This transform contains the scale and\n# rotation. Convert zoom percentage to a scaling factor. Without scaling the resolution is 72 dpi.\ntransform = cmupdf.fz_matrix_s()\ncmupdf.fz_rotate(transform, args.rotation)\ncmupdf.fz_pre_scale(transform, args.zoom \/ 100.0, args.zoom \/ 100.0)\n\n# Take the page bounds and transform them by the same matrix that we will use to render the page.\nbounds = cmupdf.fz_rect_s()\ncmupdf.fz_bound_page(doc, page, bounds)\ncmupdf.fz_transform_rect(bounds, transform)\n\n####################################################################################################\n\n# A page consists of a series of objects (text, line art, images, gradients). These objects are\n# passed to a device when the interpreter runs the page. There are several devices, used for\n# different purposes:\n#\n#\tdraw device -- renders objects to a target pixmap.\n#\n#\ttext device -- extracts the text in reading order with styling\n#\tinformation. This text can be used to provide text search.\n#\n#\tlist device -- records the graphic objects in a list that can\n#\tbe played back through another device. This is useful if you\n#\tneed to run the same page through multiple devices, without\n#\tthe overhead of parsing the page each time.\n\n####################################################################################################\n\n# Create a blank pixmap to hold the result of rendering. The pixmap bounds used here are the same as\n# the transformed page bounds, so it will contain the entire page. The page coordinate space has the\n# origin at the top left corner and the x axis extends to the right and the y axis extends down.\nbbox = cmupdf.fz_irect_s()\ncmupdf.fz_round_rect(bbox, bounds)\nwidth, height = bbox.x1 - bbox.x0, bbox.y1 - bbox.y0\nnp_array = np.zeros((height, width, 4), dtype=np.uint8)\n# pixmap = cmupdf.fz_new_pixmap_with_bbox(ctx, cmupdf.get_fz_device_rgb(), bbox)\npixmap = cmupdf.fz_new_pixmap_with_bbox_and_data(ctx, cmupdf.fz_device_rgb(ctx), bbox,\n                                                 cmupdf.numpy_to_pixmap(np_array))\ncmupdf.fz_clear_pixmap_with_value(ctx, pixmap, 0xff)\n\n# Create a draw device with the pixmap as its target.\n# Run the page with the transform.\ndevice = cmupdf.fz_new_draw_device(ctx, pixmap)\ncmupdf.fz_set_aa_level(ctx, 8)\ncmupdf.fz_run_page(doc, page, device, transform, None)\ncmupdf.fz_free_device(device)\n\nif True:\n    show_pdf(np_array)\n\nif False:\n    # Save the pixmap to a file.\n    cmupdf.fz_write_png(ctx, pixmap, \"out.png\", 0)\n\n####################################################################################################\n\ntext_sheet = cmupdf.fz_new_text_sheet(ctx)\ntext_page = cmupdf.fz_new_text_page(ctx)\n\ndevice = cmupdf.fz_new_text_device(ctx, text_sheet, text_page)\ncmupdf.fz_run_page(doc, page, device, transform, None)\ncmupdf.fz_free_device(device)\n\nif False:\n    # Dump text style and page.\n    dump_text_style(text_sheet)\n    dump_text_page_xml(text_page)\n\nif True:\n    dump_text_page(text_page)\n    show_text_page(text_page)\n\nif False:\n    file_handler = cmupdf.fz_fopen(\"out.css\", \"w+\")\n    output_file = cmupdf.fz_new_output_with_file(ctx, file_handler)\n    cmupdf.fz_print_text_sheet(ctx, output_file, text_sheet)\n    cmupdf.fz_close_output(output_file)\n    cmupdf.fz_fclose(file_handler)\n\n    output_file = cmupdf.fz_fopen(\"out.txt\", \"w+\")\n    output_file = cmupdf.fz_new_output_with_file(ctx, file_handler)\n    # cmupdf.fz_print_text_page(ctx, output_file, text_page)\n    # cmupdf.fz_print_text_page_html(ctx, output_file, text_page)\n    cmupdf.fz_print_text_page_xml(ctx, output_file, text_page)\n    cmupdf.fz_close_output(output_file)\n    cmupdf.fz_fclose(file_handler)\n\n####################################################################################################\n\n# Clean up.\ncmupdf.fz_free_text_sheet(ctx, text_sheet)\ncmupdf.fz_free_text_page(ctx, text_page)\ncmupdf.fz_drop_pixmap(ctx, pixmap)\ncmupdf.fz_free_page(doc, page)\ncmupdf.fz_close_document(doc)\ncmupdf.fz_free_context(ctx)\n\n####################################################################################################\n# \n# End\n# \n####################################################################################################\n","tok_input_length":3121,"tok_output_length":3008,"system_prompt":"","index":3332}
{"question":"This code is a job runner for SGE (Sun Grid Engine) that runs jobs in a finite pool of worker threads. To use this code, import the necessary modules and create an instance of the SGEJobRunner class, passing in the app as an argument. Then, call the put method on the instance of the SGEJobRunner class, passing in a job wrapper as an argument to add a job to the queue. The monitor thread will watch the jobs in the queue and deal with state changes and job completion. To shut down the monitor thread, call the shutdown method on the instance of the SGEJobRunner class.","input":"","expected_output":"import os, logging, threading, time\nfrom Queue import Queue, Empty\n\nfrom galaxy import model\nfrom paste.deploy.converters import asbool\n\nimport pkg_resources\n\ntry:\n    pkg_resources.require( \"DRMAA_python\" )\n    DRMAA = __import__( \"DRMAA\" )\nexcept:\n    DRMAA = None\n\nlog = logging.getLogger( __name__ )\n\nif DRMAA is not None:\n    DRMAA_state = {\n        DRMAA.Session.UNDETERMINED: 'process status cannot be determined',\n        DRMAA.Session.QUEUED_ACTIVE: 'job is queued and waiting to be scheduled',\n        DRMAA.Session.SYSTEM_ON_HOLD: 'job is queued and in system hold',\n        DRMAA.Session.USER_ON_HOLD: 'job is queued and in user hold',\n        DRMAA.Session.USER_SYSTEM_ON_HOLD: 'job is queued and in user and system hold',\n        DRMAA.Session.RUNNING: 'job is running',\n        DRMAA.Session.SYSTEM_SUSPENDED: 'job is system suspended',\n        DRMAA.Session.USER_SUSPENDED: 'job is user suspended',\n        DRMAA.Session.DONE: 'job finished normally',\n        DRMAA.Session.FAILED: 'job finished, but failed',\n    }\n\nsge_template = \"\"\"#!\/bin\/sh\n#$ -S \/bin\/sh\nGALAXY_LIB=\"%s\"\nif [ \"$GALAXY_LIB\" != \"None\" ]; then\n    if [ -n \"$PYTHONPATH\" ]; then\n        PYTHONPATH=\"$GALAXY_LIB:$PYTHONPATH\"\n    else\n        PYTHONPATH=\"$GALAXY_LIB\"\n    fi\n    export PYTHONPATH\nfi\ncd %s\n%s\n\"\"\"\n\nclass SGEJobState( object ):\n    def __init__( self ):\n        \"\"\"\n        Encapsulates state related to a job that is being run via SGE and \n        that we need to monitor.\n        \"\"\"\n        self.job_wrapper = None\n        self.job_id = None\n        self.old_state = None\n        self.running = False\n        self.job_file = None\n        self.ofile = None\n        self.efile = None\n        self.runner_url = None\n\nclass SGEJobRunner( object ):\n    \"\"\"\n    Job runner backed by a finite pool of worker threads. FIFO scheduling\n    \"\"\"\n    STOP_SIGNAL = object()\n    def __init__( self, app ):\n        \"\"\"Initialize this job runner and start the monitor thread\"\"\"\n        # Check if SGE was importable, fail if not\n        if DRMAA is None:\n            raise Exception( \"SGEJobRunner requires DRMAA_python which was not found\" )\n        self.app = app\n        # 'watched' and 'queue' are both used to keep track of jobs to watch.\n        # 'queue' is used to add new watched jobs, and can be called from\n        # any thread (usually by the 'queue_job' method). 'watched' must only\n        # be modified by the monitor thread, which will move items from 'queue'\n        # to 'watched' and then manage the watched jobs.\n        self.watched = []\n        self.queue = Queue()\n        self.default_cell = self.determine_sge_cell( self.app.config.default_cluster_job_runner )\n        self.ds = DRMAA.Session()\n        self.ds.init( self.default_cell )\n        self.monitor_thread = threading.Thread( target=self.monitor )\n        self.monitor_thread.start()\n        log.debug( \"ready\" )\n\n    def determine_sge_cell( self, url ):\n        \"\"\"Determine what SGE cell we are using\"\"\"\n        url_split = url.split(\"\/\")\n        if url_split[0] == 'sge:':\n            return url_split[2]\n        # this could happen if sge is started, but is not the default runner\n        else:\n            return ''\n\n    def determine_sge_queue( self, url ):\n        \"\"\"Determine what SGE queue we are submitting to\"\"\"\n        url_split = url.split(\"\/\")\n        queue = url_split[3]\n        if queue == \"\":\n            # None == server's default queue\n            queue = None\n        return queue\n\n    def queue_job( self, job_wrapper ):\n        \"\"\"Create SGE script for a job and submit it to the SGE queue\"\"\"\n\n        try:\n            job_wrapper.prepare()\n            command_line = job_wrapper.get_command_line()\n        except:\n            job_wrapper.fail( \"failure preparing job\", exception=True )\n            log.exception(\"failure running job %d\" % job_wrapper.job_id)\n            return\n\n        runner_url = job_wrapper.tool.job_runner\n        \n        # This is silly, why would we queue a job with no command line?\n        if not command_line:\n            job_wrapper.finish( '', '' )\n            return\n        \n        # Check for deletion before we change state\n        if job_wrapper.get_state() == model.Job.states.DELETED:\n            log.debug( \"Job %s deleted by user before it entered the SGE queue\" % job_wrapper.job_id )\n            job_wrapper.cleanup()\n            return\n\n        # Change to queued state immediately\n        job_wrapper.change_state( model.Job.states.QUEUED )\n        \n        if self.determine_sge_cell( runner_url ) != self.default_cell:\n            # TODO: support multiple cells\n            log.warning( \"(%s) Using multiple SGE cells is not supported.  This job will be submitted to the default cell.\" % job_wrapper.job_id )\n        sge_queue_name = self.determine_sge_queue( runner_url )\n\n        # define job attributes\n        ofile = \"%s\/database\/pbs\/%s.o\" % (os.getcwd(), job_wrapper.job_id)\n        efile = \"%s\/database\/pbs\/%s.e\" % (os.getcwd(), job_wrapper.job_id)\n        jt = self.ds.createJobTemplate()\n        jt.remoteCommand = \"%s\/database\/pbs\/galaxy_%s.sh\" % (os.getcwd(), job_wrapper.job_id)\n        jt.outputPath = \":%s\" % ofile\n        jt.errorPath = \":%s\" % efile\n        if sge_queue_name is not None:\n            jt.setNativeSpecification( \"-q %s\" % sge_queue_name )\n\n        script = sge_template % (job_wrapper.galaxy_lib_dir, os.path.abspath( job_wrapper.working_directory ), command_line)\n        fh = file( jt.remoteCommand, \"w\" )\n        fh.write( script )\n        fh.close()\n        os.chmod( jt.remoteCommand, 0750 )\n\n        # job was deleted while we were preparing it\n        if job_wrapper.get_state() == model.Job.states.DELETED:\n            log.debug( \"Job %s deleted by user before it entered the SGE queue\" % job_wrapper.job_id )\n            self.cleanup( ( ofile, efile, jt.remoteCommand ) )\n            job_wrapper.cleanup()\n            return\n\n        galaxy_job_id = job_wrapper.job_id\n        log.debug(\"(%s) submitting file %s\" % ( galaxy_job_id, jt.remoteCommand ) )\n        log.debug(\"(%s) command is: %s\" % ( galaxy_job_id, command_line ) )\n        # runJob will raise if there's a submit problem\n        job_id = self.ds.runJob(jt)\n        if sge_queue_name is None:\n            log.debug(\"(%s) queued in default queue as %s\" % (galaxy_job_id, job_id) )\n        else:\n            log.debug(\"(%s) queued in %s queue as %s\" % (galaxy_job_id, sge_queue_name, job_id) )\n\n        # store runner information for tracking if Galaxy restarts\n        job_wrapper.set_runner( runner_url, job_id )\n\n        # Store SGE related state information for job\n        sge_job_state = SGEJobState()\n        sge_job_state.job_wrapper = job_wrapper\n        sge_job_state.job_id = job_id\n        sge_job_state.ofile = ofile\n        sge_job_state.efile = efile\n        sge_job_state.job_file = jt.remoteCommand\n        sge_job_state.old_state = 'new'\n        sge_job_state.running = False\n        sge_job_state.runner_url = runner_url\n        \n        # delete the job template\n        self.ds.deleteJobTemplate( jt )\n\n        # Add to our 'queue' of jobs to monitor\n        self.queue.put( sge_job_state )\n\n    def monitor( self ):\n        \"\"\"\n        Watches jobs currently in the PBS queue and deals with state changes\n        (queued to running) and job completion\n        \"\"\"\n        while 1:\n            # Take any new watched jobs and put them on the monitor list\n            try:\n                while 1: \n                    sge_job_state = self.queue.get_nowait()\n                    if sge_job_state is self.STOP_SIGNAL:\n                        # TODO: This is where any cleanup would occur\n                        self.ds.exit()\n                        return\n                    self.watched.append( sge_job_state )\n            except Empty:\n                pass\n            # Iterate over the list of watched jobs and check state\n            self.check_watched_items()\n            # Sleep a bit before the next state check\n            time.sleep( 1 )\n            \n    def check_watched_items( self ):\n        \"\"\"\n        Called by the monitor thread to look at each watched job and deal\n        with state changes.\n        \"\"\"\n        new_watched = []\n        for sge_job_state in self.watched:\n            job_id = sge_job_state.job_id\n            galaxy_job_id = sge_job_state.job_wrapper.job_id\n            old_state = sge_job_state.old_state\n            try:\n                state = self.ds.getJobProgramStatus( job_id )\n            except DRMAA.InvalidJobError:\n                # we should only get here if an orphaned job was put into the queue at app startup\n                log.debug(\"(%s\/%s) job left SGE queue\" % ( galaxy_job_id, job_id ) )\n                self.finish_job( sge_job_state )\n                continue\n            except Exception, e:\n                # so we don't kill the monitor thread\n                log.exception(\"(%s\/%s) Unable to check job status\" % ( galaxy_job_id, job_id ) )\n                log.warning(\"(%s\/%s) job will now be errored\" % ( galaxy_job_id, job_id ) )\n                sge_job_state.job_wrapper.fail( \"Cluster could not complete job\" )\n                continue\n            if state != old_state:\n                log.debug(\"(%s\/%s) state change: %s\" % ( galaxy_job_id, job_id, DRMAA_state[state] ) )\n            if state == DRMAA.Session.RUNNING and not sge_job_state.running:\n                sge_job_state.running = True\n                sge_job_state.job_wrapper.change_state( model.Job.states.RUNNING )\n            if state == DRMAA.Session.DONE:\n                self.finish_job( sge_job_state )\n                continue\n            if state == DRMAA.Session.FAILED:\n                sge_job_state.job_wrapper.fail( \"Cluster could not complete job\" )\n                sge_job_state.job_wrapper.cleanup()\n                continue\n            sge_job_state.old_state = state\n            new_watched.append( sge_job_state )\n        # Replace the watch list with the updated version\n        self.watched = new_watched\n        \n    def finish_job( self, sge_job_state ):\n        \"\"\"\n        Get the output\/error for a finished job, pass to `job_wrapper.finish`\n        and cleanup all the SGE temporary files.\n        \"\"\"\n        ofile = sge_job_state.ofile\n        efile = sge_job_state.efile\n        job_file = sge_job_state.job_file\n        # collect the output\n        try:\n            ofh = file(ofile, \"r\")\n            efh = file(efile, \"r\")\n            stdout = ofh.read()\n            stderr = efh.read()\n        except:\n            stdout = ''\n            stderr = 'Job output not returned from cluster'\n            log.debug(stderr)\n\n        try:\n            sge_job_state.job_wrapper.finish( stdout, stderr )\n        except:\n            log.exception(\"Job wrapper finish method failed\")\n\n        # clean up the sge files\n        self.cleanup( ( ofile, efile, job_file ) )\n\n    def cleanup( self, files ):\n        if not asbool( self.app.config.get( 'debug', False ) ):\n            for file in files:\n                if os.access( file, os.R_OK ):\n                    os.unlink( file )\n\n    def put( self, job_wrapper ):\n        \"\"\"Add a job to the queue (by job identifier)\"\"\"\n        self.queue_job( job_wrapper )\n    \n    def shutdown( self ):\n        \"\"\"Attempts to gracefully shut down the monitor thread\"\"\"\n        log.info( \"sending stop signal to worker threads\" )\n        self.queue.put( self.STOP_SIGNAL )\n        log.info( \"sge job runner stopped\" )\n\n    def stop_job( self, job ):\n        \"\"\"Attempts to delete a job from the SGE queue\"\"\"\n        try:\n            self.ds.control( job.job_runner_external_id, DRMAA.Session.TERMINATE )\n            log.debug( \"(%s\/%s) Removed from SGE queue at user's request\" % ( job.id, job.job_runner_external_id ) )\n        except DRMAA.InvalidJobError:\n            log.debug( \"(%s\/%s) User killed running job, but it was already dead\" % ( job.id, job.job_runner_external_id ) )\n\n    def recover( self, job, job_wrapper ):\n        \"\"\"Recovers jobs stuck in the queued\/running state when Galaxy started\"\"\"\n        sge_job_state = SGEJobState()\n        sge_job_state.ofile = \"%s\/database\/pbs\/%s.o\" % (os.getcwd(), job.id)\n        sge_job_state.efile = \"%s\/database\/pbs\/%s.e\" % (os.getcwd(), job.id)\n        sge_job_state.job_file = \"%s\/database\/pbs\/galaxy_%s.sh\" % (os.getcwd(), job.id)\n        sge_job_state.job_id = str( job.job_runner_external_id )\n        sge_job_state.runner_url = job_wrapper.tool.job_runner\n        job_wrapper.command_line = job.command_line\n        sge_job_state.job_wrapper = job_wrapper\n        if job.state == model.Job.states.RUNNING:\n            log.debug( \"(%s\/%s) is still in running state, adding to the SGE queue\" % ( job.id, job.job_runner_external_id ) )\n            sge_job_state.old_state = DRMAA.Session.RUNNING\n            sge_job_state.running = True\n            self.queue.put( sge_job_state )\n        elif job.state == model.Job.states.QUEUED:\n            log.debug( \"(%s\/%s) is still in SGE queued state, adding to the SGE queue\" % ( job.id, job.job_runner_external_id ) )\n            sge_job_state.old_state = DRMAA.Session.QUEUED\n            sge_job_state.running = False\n            self.queue.put( sge_job_state )\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a job runner for SGE (Sun Grid Engine) that runs jobs in a finite pool of worker threads. To use this code, import the necessary modules and create an instance of the SGEJobRunner class, passing in the app as an argument. Then, call the put method on the instance of the SGEJobRunner class, passing in a job wrapper as an argument to add a job to the queue. The monitor thread will watch the jobs in the queue and deal with state changes and job completion. To shut down the monitor thread, call the shutdown method on the instance of the SGEJobRunner class.\n\n### Input:\n\n\n### Output:\nimport os, logging, threading, time\nfrom Queue import Queue, Empty\n\nfrom galaxy import model\nfrom paste.deploy.converters import asbool\n\nimport pkg_resources\n\ntry:\n    pkg_resources.require( \"DRMAA_python\" )\n    DRMAA = __import__( \"DRMAA\" )\nexcept:\n    DRMAA = None\n\nlog = logging.getLogger( __name__ )\n\nif DRMAA is not None:\n    DRMAA_state = {\n        DRMAA.Session.UNDETERMINED: 'process status cannot be determined',\n        DRMAA.Session.QUEUED_ACTIVE: 'job is queued and waiting to be scheduled',\n        DRMAA.Session.SYSTEM_ON_HOLD: 'job is queued and in system hold',\n        DRMAA.Session.USER_ON_HOLD: 'job is queued and in user hold',\n        DRMAA.Session.USER_SYSTEM_ON_HOLD: 'job is queued and in user and system hold',\n        DRMAA.Session.RUNNING: 'job is running',\n        DRMAA.Session.SYSTEM_SUSPENDED: 'job is system suspended',\n        DRMAA.Session.USER_SUSPENDED: 'job is user suspended',\n        DRMAA.Session.DONE: 'job finished normally',\n        DRMAA.Session.FAILED: 'job finished, but failed',\n    }\n\nsge_template = \"\"\"#!\/bin\/sh\n#$ -S \/bin\/sh\nGALAXY_LIB=\"%s\"\nif [ \"$GALAXY_LIB\" != \"None\" ]; then\n    if [ -n \"$PYTHONPATH\" ]; then\n        PYTHONPATH=\"$GALAXY_LIB:$PYTHONPATH\"\n    else\n        PYTHONPATH=\"$GALAXY_LIB\"\n    fi\n    export PYTHONPATH\nfi\ncd %s\n%s\n\"\"\"\n\nclass SGEJobState( object ):\n    def __init__( self ):\n        \"\"\"\n        Encapsulates state related to a job that is being run via SGE and \n        that we need to monitor.\n        \"\"\"\n        self.job_wrapper = None\n        self.job_id = None\n        self.old_state = None\n        self.running = False\n        self.job_file = None\n        self.ofile = None\n        self.efile = None\n        self.runner_url = None\n\nclass SGEJobRunner( object ):\n    \"\"\"\n    Job runner backed by a finite pool of worker threads. FIFO scheduling\n    \"\"\"\n    STOP_SIGNAL = object()\n    def __init__( self, app ):\n        \"\"\"Initialize this job runner and start the monitor thread\"\"\"\n        # Check if SGE was importable, fail if not\n        if DRMAA is None:\n            raise Exception( \"SGEJobRunner requires DRMAA_python which was not found\" )\n        self.app = app\n        # 'watched' and 'queue' are both used to keep track of jobs to watch.\n        # 'queue' is used to add new watched jobs, and can be called from\n        # any thread (usually by the 'queue_job' method). 'watched' must only\n        # be modified by the monitor thread, which will move items from 'queue'\n        # to 'watched' and then manage the watched jobs.\n        self.watched = []\n        self.queue = Queue()\n        self.default_cell = self.determine_sge_cell( self.app.config.default_cluster_job_runner )\n        self.ds = DRMAA.Session()\n        self.ds.init( self.default_cell )\n        self.monitor_thread = threading.Thread( target=self.monitor )\n        self.monitor_thread.start()\n        log.debug( \"ready\" )\n\n    def determine_sge_cell( self, url ):\n        \"\"\"Determine what SGE cell we are using\"\"\"\n        url_split = url.split(\"\/\")\n        if url_split[0] == 'sge:':\n            return url_split[2]\n        # this could happen if sge is started, but is not the default runner\n        else:\n            return ''\n\n    def determine_sge_queue( self, url ):\n        \"\"\"Determine what SGE queue we are submitting to\"\"\"\n        url_split = url.split(\"\/\")\n        queue = url_split[3]\n        if queue == \"\":\n            # None == server's default queue\n            queue = None\n        return queue\n\n    def queue_job( self, job_wrapper ):\n        \"\"\"Create SGE script for a job and submit it to the SGE queue\"\"\"\n\n        try:\n            job_wrapper.prepare()\n            command_line = job_wrapper.get_command_line()\n        except:\n            job_wrapper.fail( \"failure preparing job\", exception=True )\n            log.exception(\"failure running job %d\" % job_wrapper.job_id)\n            return\n\n        runner_url = job_wrapper.tool.job_runner\n        \n        # This is silly, why would we queue a job with no command line?\n        if not command_line:\n            job_wrapper.finish( '', '' )\n            return\n        \n        # Check for deletion before we change state\n        if job_wrapper.get_state() == model.Job.states.DELETED:\n            log.debug( \"Job %s deleted by user before it entered the SGE queue\" % job_wrapper.job_id )\n            job_wrapper.cleanup()\n            return\n\n        # Change to queued state immediately\n        job_wrapper.change_state( model.Job.states.QUEUED )\n        \n        if self.determine_sge_cell( runner_url ) != self.default_cell:\n            # TODO: support multiple cells\n            log.warning( \"(%s) Using multiple SGE cells is not supported.  This job will be submitted to the default cell.\" % job_wrapper.job_id )\n        sge_queue_name = self.determine_sge_queue( runner_url )\n\n        # define job attributes\n        ofile = \"%s\/database\/pbs\/%s.o\" % (os.getcwd(), job_wrapper.job_id)\n        efile = \"%s\/database\/pbs\/%s.e\" % (os.getcwd(), job_wrapper.job_id)\n        jt = self.ds.createJobTemplate()\n        jt.remoteCommand = \"%s\/database\/pbs\/galaxy_%s.sh\" % (os.getcwd(), job_wrapper.job_id)\n        jt.outputPath = \":%s\" % ofile\n        jt.errorPath = \":%s\" % efile\n        if sge_queue_name is not None:\n            jt.setNativeSpecification( \"-q %s\" % sge_queue_name )\n\n        script = sge_template % (job_wrapper.galaxy_lib_dir, os.path.abspath( job_wrapper.working_directory ), command_line)\n        fh = file( jt.remoteCommand, \"w\" )\n        fh.write( script )\n        fh.close()\n        os.chmod( jt.remoteCommand, 0750 )\n\n        # job was deleted while we were preparing it\n        if job_wrapper.get_state() == model.Job.states.DELETED:\n            log.debug( \"Job %s deleted by user before it entered the SGE queue\" % job_wrapper.job_id )\n            self.cleanup( ( ofile, efile, jt.remoteCommand ) )\n            job_wrapper.cleanup()\n            return\n\n        galaxy_job_id = job_wrapper.job_id\n        log.debug(\"(%s) submitting file %s\" % ( galaxy_job_id, jt.remoteCommand ) )\n        log.debug(\"(%s) command is: %s\" % ( galaxy_job_id, command_line ) )\n        # runJob will raise if there's a submit problem\n        job_id = self.ds.runJob(jt)\n        if sge_queue_name is None:\n            log.debug(\"(%s) queued in default queue as %s\" % (galaxy_job_id, job_id) )\n        else:\n            log.debug(\"(%s) queued in %s queue as %s\" % (galaxy_job_id, sge_queue_name, job_id) )\n\n        # store runner information for tracking if Galaxy restarts\n        job_wrapper.set_runner( runner_url, job_id )\n\n        # Store SGE related state information for job\n        sge_job_state = SGEJobState()\n        sge_job_state.job_wrapper = job_wrapper\n        sge_job_state.job_id = job_id\n        sge_job_state.ofile = ofile\n        sge_job_state.efile = efile\n        sge_job_state.job_file = jt.remoteCommand\n        sge_job_state.old_state = 'new'\n        sge_job_state.running = False\n        sge_job_state.runner_url = runner_url\n        \n        # delete the job template\n        self.ds.deleteJobTemplate( jt )\n\n        # Add to our 'queue' of jobs to monitor\n        self.queue.put( sge_job_state )\n\n    def monitor( self ):\n        \"\"\"\n        Watches jobs currently in the PBS queue and deals with state changes\n        (queued to running) and job completion\n        \"\"\"\n        while 1:\n            # Take any new watched jobs and put them on the monitor list\n            try:\n                while 1: \n                    sge_job_state = self.queue.get_nowait()\n                    if sge_job_state is self.STOP_SIGNAL:\n                        # TODO: This is where any cleanup would occur\n                        self.ds.exit()\n                        return\n                    self.watched.append( sge_job_state )\n            except Empty:\n                pass\n            # Iterate over the list of watched jobs and check state\n            self.check_watched_items()\n            # Sleep a bit before the next state check\n            time.sleep( 1 )\n            \n    def check_watched_items( self ):\n        \"\"\"\n        Called by the monitor thread to look at each watched job and deal\n        with state changes.\n        \"\"\"\n        new_watched = []\n        for sge_job_state in self.watched:\n            job_id = sge_job_state.job_id\n            galaxy_job_id = sge_job_state.job_wrapper.job_id\n            old_state = sge_job_state.old_state\n            try:\n                state = self.ds.getJobProgramStatus( job_id )\n            except DRMAA.InvalidJobError:\n                # we should only get here if an orphaned job was put into the queue at app startup\n                log.debug(\"(%s\/%s) job left SGE queue\" % ( galaxy_job_id, job_id ) )\n                self.finish_job( sge_job_state )\n                continue\n            except Exception, e:\n                # so we don't kill the monitor thread\n                log.exception(\"(%s\/%s) Unable to check job status\" % ( galaxy_job_id, job_id ) )\n                log.warning(\"(%s\/%s) job will now be errored\" % ( galaxy_job_id, job_id ) )\n                sge_job_state.job_wrapper.fail( \"Cluster could not complete job\" )\n                continue\n            if state != old_state:\n                log.debug(\"(%s\/%s) state change: %s\" % ( galaxy_job_id, job_id, DRMAA_state[state] ) )\n            if state == DRMAA.Session.RUNNING and not sge_job_state.running:\n                sge_job_state.running = True\n                sge_job_state.job_wrapper.change_state( model.Job.states.RUNNING )\n            if state == DRMAA.Session.DONE:\n                self.finish_job( sge_job_state )\n                continue\n            if state == DRMAA.Session.FAILED:\n                sge_job_state.job_wrapper.fail( \"Cluster could not complete job\" )\n                sge_job_state.job_wrapper.cleanup()\n                continue\n            sge_job_state.old_state = state\n            new_watched.append( sge_job_state )\n        # Replace the watch list with the updated version\n        self.watched = new_watched\n        \n    def finish_job( self, sge_job_state ):\n        \"\"\"\n        Get the output\/error for a finished job, pass to `job_wrapper.finish`\n        and cleanup all the SGE temporary files.\n        \"\"\"\n        ofile = sge_job_state.ofile\n        efile = sge_job_state.efile\n        job_file = sge_job_state.job_file\n        # collect the output\n        try:\n            ofh = file(ofile, \"r\")\n            efh = file(efile, \"r\")\n            stdout = ofh.read()\n            stderr = efh.read()\n        except:\n            stdout = ''\n            stderr = 'Job output not returned from cluster'\n            log.debug(stderr)\n\n        try:\n            sge_job_state.job_wrapper.finish( stdout, stderr )\n        except:\n            log.exception(\"Job wrapper finish method failed\")\n\n        # clean up the sge files\n        self.cleanup( ( ofile, efile, job_file ) )\n\n    def cleanup( self, files ):\n        if not asbool( self.app.config.get( 'debug', False ) ):\n            for file in files:\n                if os.access( file, os.R_OK ):\n                    os.unlink( file )\n\n    def put( self, job_wrapper ):\n        \"\"\"Add a job to the queue (by job identifier)\"\"\"\n        self.queue_job( job_wrapper )\n    \n    def shutdown( self ):\n        \"\"\"Attempts to gracefully shut down the monitor thread\"\"\"\n        log.info( \"sending stop signal to worker threads\" )\n        self.queue.put( self.STOP_SIGNAL )\n        log.info( \"sge job runner stopped\" )\n\n    def stop_job( self, job ):\n        \"\"\"Attempts to delete a job from the SGE queue\"\"\"\n        try:\n            self.ds.control( job.job_runner_external_id, DRMAA.Session.TERMINATE )\n            log.debug( \"(%s\/%s) Removed from SGE queue at user's request\" % ( job.id, job.job_runner_external_id ) )\n        except DRMAA.InvalidJobError:\n            log.debug( \"(%s\/%s) User killed running job, but it was already dead\" % ( job.id, job.job_runner_external_id ) )\n\n    def recover( self, job, job_wrapper ):\n        \"\"\"Recovers jobs stuck in the queued\/running state when Galaxy started\"\"\"\n        sge_job_state = SGEJobState()\n        sge_job_state.ofile = \"%s\/database\/pbs\/%s.o\" % (os.getcwd(), job.id)\n        sge_job_state.efile = \"%s\/database\/pbs\/%s.e\" % (os.getcwd(), job.id)\n        sge_job_state.job_file = \"%s\/database\/pbs\/galaxy_%s.sh\" % (os.getcwd(), job.id)\n        sge_job_state.job_id = str( job.job_runner_external_id )\n        sge_job_state.runner_url = job_wrapper.tool.job_runner\n        job_wrapper.command_line = job.command_line\n        sge_job_state.job_wrapper = job_wrapper\n        if job.state == model.Job.states.RUNNING:\n            log.debug( \"(%s\/%s) is still in running state, adding to the SGE queue\" % ( job.id, job.job_runner_external_id ) )\n            sge_job_state.old_state = DRMAA.Session.RUNNING\n            sge_job_state.running = True\n            self.queue.put( sge_job_state )\n        elif job.state == model.Job.states.QUEUED:\n            log.debug( \"(%s\/%s) is still in SGE queued state, adding to the SGE queue\" % ( job.id, job.job_runner_external_id ) )\n            sge_job_state.old_state = DRMAA.Session.QUEUED\n            sge_job_state.running = False\n            self.queue.put( sge_job_state )\n","tok_input_length":3282,"tok_output_length":3127,"system_prompt":"","index":6584}
{"question":"This code is a mini key\/password manager written in Python using the AES encryption algorithm. To use it, create an instance of the KeyBox class with a file path to store the keys. You can then list, search, add, view, modify, or delete keys. To import keys from a text file, use the \"import\" sub-command followed by the file path. To export keys to a file, use the \"export\" sub-command followed by an optional file path. To reset the master password, use the \"reset\" sub-command.","input":"","expected_output":"#!\/usr\/bin\/env python\n\n\"\"\"A mini key\/password manager written in python using the AES encryption algorithm.\"\"\"\n\nimport os\nimport sys\nimport time\nimport os.path\nimport random\nimport sqlite3\nimport hashlib\nimport getpass\nimport argparse\n\nimport Crypto.Cipher.AES\n\n\nclass KeyBox(object):\n    TABLE_NAME = \"keybox\"\n    MASTER_KEY_TITLE = \"<MASTER>\"\n\n    def __init__(self, a_file):\n        # the AES key of the master password, to encrypt key content\n        self.aes_key = None\n\n        self.conn = sqlite3.connect(a_file)\n        # Use 8-bit string instead of unicode string, in order to read\/write\n        # international characters like Chinese\n        self.conn.text_factory = str\n        # The following line would use unicode string\n        # self.conn.text_factory = lambda x: unicode(x, 'utf-8', 'ignore')\n        self.cursor = self.conn.cursor()\n        self.cursor.execute('CREATE TABLE IF NOT EXISTS %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' %\n                            KeyBox.TABLE_NAME)\n        self.conn.commit()\n\n    def list(self):\n        title_time_list = []\n        self.cursor.execute('SELECT title,time FROM %s ORDER BY time DESC' % KeyBox.TABLE_NAME)\n        for row in self.cursor:\n            if row[0] != KeyBox.MASTER_KEY_TITLE:\n                title_time_list.append((row[0], row[1]))\n        return title_time_list\n\n    def search(self, keywords):\n        keywords_lower = {keyword.lower() for keyword in keywords}\n        matching_title_time_list = []\n        for title, mod_time in self.list():\n            title_lower = title.lower()\n            match = True\n            for keyword in keywords_lower:\n                if title_lower.find(keyword) == -1:\n                    match = False\n                    break\n            if match:\n                matching_title_time_list.append((title, mod_time))\n        return matching_title_time_list\n\n    def exists(self, title):\n        self.cursor.execute(\"SELECT time FROM %s WHERE title=?\" % KeyBox.TABLE_NAME, (title,))\n        return self.cursor.fetchone() is not None\n\n    def init_master_password(self, table=TABLE_NAME):\n        password = input_password(\"Create a new master password: \")\n        if password == input_password(\"Confirm the master password: \"):\n            self.aes_key = hashlib.sha256(password).digest()\n            # the hash of the AES key, stored in db for master password verification\n            key_hash = hashlib.sha256(self.aes_key).hexdigest()\n            self.cursor.execute(\"INSERT OR REPLACE INTO %s VALUES (?,?,?)\" % table,\n                                (KeyBox.MASTER_KEY_TITLE, time.time(), key_hash))\n            self.conn.commit()\n        else:\n            exit_with_error(\"Error: password not match, please retry\")\n\n    def verify_master_password(self):\n        # get the stored key hash\n        self.cursor.execute(\"SELECT content FROM %s WHERE title=?\"\n                            % KeyBox.TABLE_NAME, (KeyBox.MASTER_KEY_TITLE,))\n        stored_key_hash = self.cursor.fetchone()[0]\n        # input master password\n        password = input_password(\"Master password: \")\n        self.aes_key = hashlib.sha256(password).digest()\n        # compare key hash\n        if hashlib.sha256(self.aes_key).hexdigest() != stored_key_hash:\n            exit_with_error(\"Error: incorrect master password, please retry\")\n\n    def view(self, title):\n        self.cursor.execute(\"SELECT time, content FROM %s WHERE title=?\"\n                            % KeyBox.TABLE_NAME, (title,))\n        mod_time, encrypted = self.cursor.fetchone()\n        return mod_time, decrypt(encrypted, self.aes_key)\n\n    def set(self, title, plain, mod_time=time.time(), table=TABLE_NAME):\n        # for better print effect\n        if plain[-1] != \"\\n\": plain += \"\\n\"\n        encrypted = encrypt(plain, self.aes_key)\n        self.cursor.execute(\"INSERT OR REPLACE INTO %s VALUES (?,?,?)\" % table,\n                            (title, mod_time, sqlite3.Binary(encrypted)))\n        self.conn.commit()\n\n    def delete(self, title):\n        mod_time, plain = self.view(title)\n        self.cursor.execute(\"DELETE FROM %s WHERE title=?\" % KeyBox.TABLE_NAME, (title,))\n        self.conn.commit()\n        return mod_time, plain\n\n    def reset(self):\n        tmp_table = \"_tmp_\"\n        self.cursor.execute('DROP TABLE IF EXISTS %s' % tmp_table)\n        self.cursor.execute('CREATE TABLE %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' % tmp_table)\n        keys = []\n        for title, mod_time in self.list():\n            content = self.view(title)\n            keys.append((title, mod_time, content))\n        self.init_master_password(table=tmp_table)\n        for title, mod_time, content in keys:\n            self.set(title, content, mod_time=mod_time, table=tmp_table)\n        self.cursor.execute(\"DROP TABLE %s\" % KeyBox.TABLE_NAME)\n        self.cursor.execute(\"ALTER TABLE %s RENAME TO %s\" % (tmp_table, KeyBox.TABLE_NAME))\n        self.conn.commit()\n\n\ndef input_content(title):\n    sys.stdout.write(\"Input content of '%s', enter an empty line to finish:\\n\" % title)\n    lines = []\n    while True:\n        line = raw_input()\n        if line:\n            lines.append(line)\n        else:\n            break\n    return '\\n'.join(lines)\n\n\ndef input_password(text):\n    password = getpass.getpass(text)\n    if password == \"\":\n        exit_with_error(\"Error: password not given\")\n    return password\n\n\ndef encrypt(plain, aes_key):\n    iv = ''.join(chr(random.randint(0, 0xFF)) for _ in range(Crypto.Cipher.AES.block_size))\n    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)\n    return iv + cipher.encrypt(plain)\n\n\ndef decrypt(encrypted, aes_key):\n    iv = encrypted[0:Crypto.Cipher.AES.block_size]\n    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)\n    return cipher.decrypt(encrypted[Crypto.Cipher.AES.block_size:])\n\n\ndef read_keys(a_file):\n    \"\"\"\n    Supported text file format is as follows:\n\n    KEY: key title1\n    MOD: 1540820240.0\n    key content line 11\n    key content line 12\n    ...\n\n    KEY: key title2\n    key content line 21\n    key content line 22\n    ...\n\n    \"\"\"\n    keys = []\n    with open(a_file, 'r') as fd:\n        title = ''\n        mod_time = -1\n        content_lines = []\n        for line in fd:\n            line = line.strip()\n            if line.startswith(\"KEY: \"):  # title line\n                if title != '' and content_lines != []:\n                    # remove the empty lines at the end\n                    while len(content_lines) > 0 and content_lines[-1] == \"\\n\":\n                        content_lines = content_lines[:-1]\n                    # add to keys for return\n                    if mod_time < 0: mod_time = time.time()\n                    keys.append((title, mod_time, '\\n'.join([aLine for aLine in content_lines])))\n                # set next key title, and clear content\n                title = line[5:]\n                content_lines = []\n            elif line.startswith(\"MOD: \"):\n                mod_time = float(line[5:])\n            elif title != \"\":\n                content_lines.append(line)\n            else:\n                sys.stderr.write(\"Warn: line '%s' ignored: title missing\\n\" % line)\n    # process the last key\n    if title != '' and content_lines != []:\n        # remove the empty lines at the end\n        while len(content_lines) > 0 and content_lines[-1] == \"\\n\":\n            content_lines = content_lines[:-1]\n        # add to keys for return\n        if mod_time < 0: mod_time = time.time()\n        keys.append((title, mod_time, '\\n'.join([aLine for aLine in content_lines])))\n\n    return keys\n\n\ndef exit_with_error(err_msg, err_code=-1):\n    sys.stderr.write(err_msg + \"\\n\")\n    sys.exit(err_code)\n\n\ndef get_default_db_file():\n    keybox_file = \"%s\/.keybox\" % os.environ['HOME']\n    if not os.path.exists(keybox_file):\n        return \"%s\/%s.keybox\" % (os.environ['HOME'], os.environ['USER'])\n\n    with open(keybox_file, 'r') as fd:\n        for line in fd:\n            return line\n\n\ndef set_default_db_file(a_file):\n    keybox_file = \"%s\/.keybox\" % os.environ['HOME']\n    with open(keybox_file, 'w') as fd:\n        fd.write(os.path.abspath(a_file))\n\n\ndef main():\n    # parse command line arguments\n    parser = argparse.ArgumentParser(add_help=False)\n    parser.add_argument('-d', '--database',\n                        help=('the sqlite database file to store keys. ' +\n                              'Default: the previously used database file (see its location in %s\/.keybox), ' +\n                              'or %s\/%s.keybox') % (os.environ[\"HOME\"], os.environ[\"HOME\"], os.environ['USER']))\n    subparsers = parser.add_subparsers(title=\"sub_commands\", dest=\"action\",\n                                       metavar='help|list|view|add|mod|del|import|export|reset')\n    subparsers.add_parser(\"help\", help=\"show this help message and exit\")\n\n    subparsers.add_parser(\"list\", help=\"list all key titles (this is default)\")\n\n    sub_parser = subparsers.add_parser(\"add\", help=\"add a new key title and content\")\n    sub_parser.add_argument(\"title\", help=\"a key title\")\n\n    sub_parser = subparsers.add_parser(\"view\", help=\"view the content for the key title matching the given keywords\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n    sub_parser = subparsers.add_parser(\"mod\", help=\"modify the content for the key title matching the given keywords\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n    sub_parser = subparsers.add_parser(\"del\",\n                                       help=\"delete an existing key title matching the given keywords and the key \" +\n                                            \"content\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n\n    sub_parser = subparsers.add_parser(\"import\", help=\"import all key titles and contents from a text file\")\n    sub_parser.add_argument(\"file\", help=\"a text file containing key titles and contents to import\")\n    sub_parser = subparsers.add_parser(\"export\", help=\"export all key titles and contents to stdout or a file\")\n    sub_parser.add_argument(\"file\", nargs='?', help=\"a text file to export the key titles and contents\")\n\n    subparsers.add_parser(\"reset\", help=\"reset the master password\")\n\n    # 'list' if no sub-command is given\n    if len(sys.argv) == 1:\n        sys.argv.append('list')\n\n    args = parser.parse_args()\n\n    if args.action == 'help':\n        parser.print_help()\n        sys.exit(0)\n\n    if args.database is None:\n        args.database = get_default_db_file()  # type: str\n    else:\n        set_default_db_file(args.database)\n    keybox = KeyBox(args.database)\n    if args.action == 'list':\n        title_time_array = keybox.list()\n        if len(title_time_array) == 0:\n            sys.stdout.write(\"No item found\\n\")\n        else:\n            for title, mod_time in title_time_array:\n                print time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time)) + \" - \" + title\n        sys.exit(0)\n\n    # check errors before init or verify master password\n    if args.action == 'add':\n        if keybox.exists(args.title):\n            exit_with_error(\"Error: '%s' exists, try to view it or add with another title\" % args.title)\n    if args.action in ['view', 'mod', 'del']:\n        matches = keybox.search(args.keyword)\n        if len(matches) == 0:\n            exit_with_error(\n                \"Error: no title matching the given keywords, try to list all titles or change to another title\")\n        else:\n            sys.stdout.write(\"Found the following titles:\\n\")\n            for index, (title, mod_time) in enumerate(matches):\n                mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n                print \"[%d] %s - %s\" % (index, mod_str, title)\n\n            index = 0\n            if len(matches) > 1:\n                index = -1\n                while index < 0 or index >= len(matches):\n                    index = raw_input(\"Select: [0] \").strip()\n                    if len(index) == 0:\n                        index = 0\n                        break\n                    else:\n                        try:\n                            index = int(index)\n                        except ValueError:\n                            pass\n\n            args.title = matches[index][0]\n\n    elif args.action == \"import\":\n        if not os.path.exists(args.file):\n            exit_with_error(\"Error: file '%s' not found.\" % args.file)\n    elif args.action == \"export\":\n        fd = sys.stdout\n        if args.file is not None:\n            if os.path.exists(args.file):\n                exit_with_error(\"Error: file exists, please choose a different file to export\")\n            else:\n                fd = open(args.file, 'w')\n    elif args.action == \"reset\":\n        if not keybox.exists(KeyBox.MASTER_KEY_TITLE):\n            exit_with_error(\"Error: master password is not set yet\")\n\n    if not keybox.exists(KeyBox.MASTER_KEY_TITLE):\n        keybox.init_master_password()\n    else:\n        keybox.verify_master_password()\n\n    if args.action == 'add':\n        plain = input_content(args.title)\n        keybox.set(args.title, plain)\n    elif args.action == \"view\":\n        mod_time, plain = keybox.view(args.title)\n        mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n        sys.stdout.write(\"---\\nKEY: %s\\nMOD: %s\\n%s---\\n\" % (args.title, mod_str, plain))\n    elif args.action == \"mod\":\n        sys.stdout.write(\"---\\n%s---\\n\" % keybox.view(args.title)[1])\n        plain = input_content(args.title)\n        keybox.set(args.title, plain)\n    elif args.action == \"del\":\n        mod_time, plain = keybox.view(args.title)\n        mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n        sys.stdout.write(\"---\\nKEY: %s:\\nMOD: %s\\n%s---\\n\" % (args.title, mod_str, plain))\n        confirm = raw_input(\"Confirm to delete key '%s' [yes\/no]? \" % args.title)\n        while confirm not in ['yes', 'no']:\n            confirm = raw_input(\"Confirm to delete key '%s' [yes\/no]? \" % args.title)\n        if confirm == 'yes':\n            keybox.delete(args.title)\n            sys.stdout.write(\"Deleted.\\n\")\n    elif args.action == \"import\":\n        for title, mod_time, content in read_keys(args.file):\n            if keybox.exists(title):\n                sys.stdout.write(\"skipped %s: exists in database\\n\" % title)\n            else:\n                keybox.set(title, content, mod_time=mod_time)\n                sys.stdout.write(\"imported %s\\n\" % title)\n    elif args.action == \"export\":\n        if fd == sys.stdout: fd.write(\"---\\n\")\n        for title, mod_time in keybox.list():\n            fd.write(\"KEY: %s\\n\" % title)\n            fd.write(\"MOD: %s\\n\" % mod_time)\n            fd.write(\"%s\" % keybox.view(title)[1])\n            if fd == sys.stdout:\n                fd.write(\"---\\n\")\n            else:\n                fd.write(\"\\n\")\n        if fd != sys.stdout:\n            sys.stdout.write(\"Exported to file %s\\n\" % args.file)\n    elif args.action == \"reset\":\n        keybox.reset()\n\n\nif __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        sys.stdout.write(\"\\nUser aborted.\\n\")\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a mini key\/password manager written in Python using the AES encryption algorithm. To use it, create an instance of the KeyBox class with a file path to store the keys. You can then list, search, add, view, modify, or delete keys. To import keys from a text file, use the \"import\" sub-command followed by the file path. To export keys to a file, use the \"export\" sub-command followed by an optional file path. To reset the master password, use the \"reset\" sub-command.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\n\"\"\"A mini key\/password manager written in python using the AES encryption algorithm.\"\"\"\n\nimport os\nimport sys\nimport time\nimport os.path\nimport random\nimport sqlite3\nimport hashlib\nimport getpass\nimport argparse\n\nimport Crypto.Cipher.AES\n\n\nclass KeyBox(object):\n    TABLE_NAME = \"keybox\"\n    MASTER_KEY_TITLE = \"<MASTER>\"\n\n    def __init__(self, a_file):\n        # the AES key of the master password, to encrypt key content\n        self.aes_key = None\n\n        self.conn = sqlite3.connect(a_file)\n        # Use 8-bit string instead of unicode string, in order to read\/write\n        # international characters like Chinese\n        self.conn.text_factory = str\n        # The following line would use unicode string\n        # self.conn.text_factory = lambda x: unicode(x, 'utf-8', 'ignore')\n        self.cursor = self.conn.cursor()\n        self.cursor.execute('CREATE TABLE IF NOT EXISTS %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' %\n                            KeyBox.TABLE_NAME)\n        self.conn.commit()\n\n    def list(self):\n        title_time_list = []\n        self.cursor.execute('SELECT title,time FROM %s ORDER BY time DESC' % KeyBox.TABLE_NAME)\n        for row in self.cursor:\n            if row[0] != KeyBox.MASTER_KEY_TITLE:\n                title_time_list.append((row[0], row[1]))\n        return title_time_list\n\n    def search(self, keywords):\n        keywords_lower = {keyword.lower() for keyword in keywords}\n        matching_title_time_list = []\n        for title, mod_time in self.list():\n            title_lower = title.lower()\n            match = True\n            for keyword in keywords_lower:\n                if title_lower.find(keyword) == -1:\n                    match = False\n                    break\n            if match:\n                matching_title_time_list.append((title, mod_time))\n        return matching_title_time_list\n\n    def exists(self, title):\n        self.cursor.execute(\"SELECT time FROM %s WHERE title=?\" % KeyBox.TABLE_NAME, (title,))\n        return self.cursor.fetchone() is not None\n\n    def init_master_password(self, table=TABLE_NAME):\n        password = input_password(\"Create a new master password: \")\n        if password == input_password(\"Confirm the master password: \"):\n            self.aes_key = hashlib.sha256(password).digest()\n            # the hash of the AES key, stored in db for master password verification\n            key_hash = hashlib.sha256(self.aes_key).hexdigest()\n            self.cursor.execute(\"INSERT OR REPLACE INTO %s VALUES (?,?,?)\" % table,\n                                (KeyBox.MASTER_KEY_TITLE, time.time(), key_hash))\n            self.conn.commit()\n        else:\n            exit_with_error(\"Error: password not match, please retry\")\n\n    def verify_master_password(self):\n        # get the stored key hash\n        self.cursor.execute(\"SELECT content FROM %s WHERE title=?\"\n                            % KeyBox.TABLE_NAME, (KeyBox.MASTER_KEY_TITLE,))\n        stored_key_hash = self.cursor.fetchone()[0]\n        # input master password\n        password = input_password(\"Master password: \")\n        self.aes_key = hashlib.sha256(password).digest()\n        # compare key hash\n        if hashlib.sha256(self.aes_key).hexdigest() != stored_key_hash:\n            exit_with_error(\"Error: incorrect master password, please retry\")\n\n    def view(self, title):\n        self.cursor.execute(\"SELECT time, content FROM %s WHERE title=?\"\n                            % KeyBox.TABLE_NAME, (title,))\n        mod_time, encrypted = self.cursor.fetchone()\n        return mod_time, decrypt(encrypted, self.aes_key)\n\n    def set(self, title, plain, mod_time=time.time(), table=TABLE_NAME):\n        # for better print effect\n        if plain[-1] != \"\\n\": plain += \"\\n\"\n        encrypted = encrypt(plain, self.aes_key)\n        self.cursor.execute(\"INSERT OR REPLACE INTO %s VALUES (?,?,?)\" % table,\n                            (title, mod_time, sqlite3.Binary(encrypted)))\n        self.conn.commit()\n\n    def delete(self, title):\n        mod_time, plain = self.view(title)\n        self.cursor.execute(\"DELETE FROM %s WHERE title=?\" % KeyBox.TABLE_NAME, (title,))\n        self.conn.commit()\n        return mod_time, plain\n\n    def reset(self):\n        tmp_table = \"_tmp_\"\n        self.cursor.execute('DROP TABLE IF EXISTS %s' % tmp_table)\n        self.cursor.execute('CREATE TABLE %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' % tmp_table)\n        keys = []\n        for title, mod_time in self.list():\n            content = self.view(title)\n            keys.append((title, mod_time, content))\n        self.init_master_password(table=tmp_table)\n        for title, mod_time, content in keys:\n            self.set(title, content, mod_time=mod_time, table=tmp_table)\n        self.cursor.execute(\"DROP TABLE %s\" % KeyBox.TABLE_NAME)\n        self.cursor.execute(\"ALTER TABLE %s RENAME TO %s\" % (tmp_table, KeyBox.TABLE_NAME))\n        self.conn.commit()\n\n\ndef input_content(title):\n    sys.stdout.write(\"Input content of '%s', enter an empty line to finish:\\n\" % title)\n    lines = []\n    while True:\n        line = raw_input()\n        if line:\n            lines.append(line)\n        else:\n            break\n    return '\\n'.join(lines)\n\n\ndef input_password(text):\n    password = getpass.getpass(text)\n    if password == \"\":\n        exit_with_error(\"Error: password not given\")\n    return password\n\n\ndef encrypt(plain, aes_key):\n    iv = ''.join(chr(random.randint(0, 0xFF)) for _ in range(Crypto.Cipher.AES.block_size))\n    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)\n    return iv + cipher.encrypt(plain)\n\n\ndef decrypt(encrypted, aes_key):\n    iv = encrypted[0:Crypto.Cipher.AES.block_size]\n    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)\n    return cipher.decrypt(encrypted[Crypto.Cipher.AES.block_size:])\n\n\ndef read_keys(a_file):\n    \"\"\"\n    Supported text file format is as follows:\n\n    KEY: key title1\n    MOD: 1540820240.0\n    key content line 11\n    key content line 12\n    ...\n\n    KEY: key title2\n    key content line 21\n    key content line 22\n    ...\n\n    \"\"\"\n    keys = []\n    with open(a_file, 'r') as fd:\n        title = ''\n        mod_time = -1\n        content_lines = []\n        for line in fd:\n            line = line.strip()\n            if line.startswith(\"KEY: \"):  # title line\n                if title != '' and content_lines != []:\n                    # remove the empty lines at the end\n                    while len(content_lines) > 0 and content_lines[-1] == \"\\n\":\n                        content_lines = content_lines[:-1]\n                    # add to keys for return\n                    if mod_time < 0: mod_time = time.time()\n                    keys.append((title, mod_time, '\\n'.join([aLine for aLine in content_lines])))\n                # set next key title, and clear content\n                title = line[5:]\n                content_lines = []\n            elif line.startswith(\"MOD: \"):\n                mod_time = float(line[5:])\n            elif title != \"\":\n                content_lines.append(line)\n            else:\n                sys.stderr.write(\"Warn: line '%s' ignored: title missing\\n\" % line)\n    # process the last key\n    if title != '' and content_lines != []:\n        # remove the empty lines at the end\n        while len(content_lines) > 0 and content_lines[-1] == \"\\n\":\n            content_lines = content_lines[:-1]\n        # add to keys for return\n        if mod_time < 0: mod_time = time.time()\n        keys.append((title, mod_time, '\\n'.join([aLine for aLine in content_lines])))\n\n    return keys\n\n\ndef exit_with_error(err_msg, err_code=-1):\n    sys.stderr.write(err_msg + \"\\n\")\n    sys.exit(err_code)\n\n\ndef get_default_db_file():\n    keybox_file = \"%s\/.keybox\" % os.environ['HOME']\n    if not os.path.exists(keybox_file):\n        return \"%s\/%s.keybox\" % (os.environ['HOME'], os.environ['USER'])\n\n    with open(keybox_file, 'r') as fd:\n        for line in fd:\n            return line\n\n\ndef set_default_db_file(a_file):\n    keybox_file = \"%s\/.keybox\" % os.environ['HOME']\n    with open(keybox_file, 'w') as fd:\n        fd.write(os.path.abspath(a_file))\n\n\ndef main():\n    # parse command line arguments\n    parser = argparse.ArgumentParser(add_help=False)\n    parser.add_argument('-d', '--database',\n                        help=('the sqlite database file to store keys. ' +\n                              'Default: the previously used database file (see its location in %s\/.keybox), ' +\n                              'or %s\/%s.keybox') % (os.environ[\"HOME\"], os.environ[\"HOME\"], os.environ['USER']))\n    subparsers = parser.add_subparsers(title=\"sub_commands\", dest=\"action\",\n                                       metavar='help|list|view|add|mod|del|import|export|reset')\n    subparsers.add_parser(\"help\", help=\"show this help message and exit\")\n\n    subparsers.add_parser(\"list\", help=\"list all key titles (this is default)\")\n\n    sub_parser = subparsers.add_parser(\"add\", help=\"add a new key title and content\")\n    sub_parser.add_argument(\"title\", help=\"a key title\")\n\n    sub_parser = subparsers.add_parser(\"view\", help=\"view the content for the key title matching the given keywords\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n    sub_parser = subparsers.add_parser(\"mod\", help=\"modify the content for the key title matching the given keywords\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n    sub_parser = subparsers.add_parser(\"del\",\n                                       help=\"delete an existing key title matching the given keywords and the key \" +\n                                            \"content\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n\n    sub_parser = subparsers.add_parser(\"import\", help=\"import all key titles and contents from a text file\")\n    sub_parser.add_argument(\"file\", help=\"a text file containing key titles and contents to import\")\n    sub_parser = subparsers.add_parser(\"export\", help=\"export all key titles and contents to stdout or a file\")\n    sub_parser.add_argument(\"file\", nargs='?', help=\"a text file to export the key titles and contents\")\n\n    subparsers.add_parser(\"reset\", help=\"reset the master password\")\n\n    # 'list' if no sub-command is given\n    if len(sys.argv) == 1:\n        sys.argv.append('list')\n\n    args = parser.parse_args()\n\n    if args.action == 'help':\n        parser.print_help()\n        sys.exit(0)\n\n    if args.database is None:\n        args.database = get_default_db_file()  # type: str\n    else:\n        set_default_db_file(args.database)\n    keybox = KeyBox(args.database)\n    if args.action == 'list':\n        title_time_array = keybox.list()\n        if len(title_time_array) == 0:\n            sys.stdout.write(\"No item found\\n\")\n        else:\n            for title, mod_time in title_time_array:\n                print time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time)) + \" - \" + title\n        sys.exit(0)\n\n    # check errors before init or verify master password\n    if args.action == 'add':\n        if keybox.exists(args.title):\n            exit_with_error(\"Error: '%s' exists, try to view it or add with another title\" % args.title)\n    if args.action in ['view', 'mod', 'del']:\n        matches = keybox.search(args.keyword)\n        if len(matches) == 0:\n            exit_with_error(\n                \"Error: no title matching the given keywords, try to list all titles or change to another title\")\n        else:\n            sys.stdout.write(\"Found the following titles:\\n\")\n            for index, (title, mod_time) in enumerate(matches):\n                mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n                print \"[%d] %s - %s\" % (index, mod_str, title)\n\n            index = 0\n            if len(matches) > 1:\n                index = -1\n                while index < 0 or index >= len(matches):\n                    index = raw_input(\"Select: [0] \").strip()\n                    if len(index) == 0:\n                        index = 0\n                        break\n                    else:\n                        try:\n                            index = int(index)\n                        except ValueError:\n                            pass\n\n            args.title = matches[index][0]\n\n    elif args.action == \"import\":\n        if not os.path.exists(args.file):\n            exit_with_error(\"Error: file '%s' not found.\" % args.file)\n    elif args.action == \"export\":\n        fd = sys.stdout\n        if args.file is not None:\n            if os.path.exists(args.file):\n                exit_with_error(\"Error: file exists, please choose a different file to export\")\n            else:\n                fd = open(args.file, 'w')\n    elif args.action == \"reset\":\n        if not keybox.exists(KeyBox.MASTER_KEY_TITLE):\n            exit_with_error(\"Error: master password is not set yet\")\n\n    if not keybox.exists(KeyBox.MASTER_KEY_TITLE):\n        keybox.init_master_password()\n    else:\n        keybox.verify_master_password()\n\n    if args.action == 'add':\n        plain = input_content(args.title)\n        keybox.set(args.title, plain)\n    elif args.action == \"view\":\n        mod_time, plain = keybox.view(args.title)\n        mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n        sys.stdout.write(\"---\\nKEY: %s\\nMOD: %s\\n%s---\\n\" % (args.title, mod_str, plain))\n    elif args.action == \"mod\":\n        sys.stdout.write(\"---\\n%s---\\n\" % keybox.view(args.title)[1])\n        plain = input_content(args.title)\n        keybox.set(args.title, plain)\n    elif args.action == \"del\":\n        mod_time, plain = keybox.view(args.title)\n        mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n        sys.stdout.write(\"---\\nKEY: %s:\\nMOD: %s\\n%s---\\n\" % (args.title, mod_str, plain))\n        confirm = raw_input(\"Confirm to delete key '%s' [yes\/no]? \" % args.title)\n        while confirm not in ['yes', 'no']:\n            confirm = raw_input(\"Confirm to delete key '%s' [yes\/no]? \" % args.title)\n        if confirm == 'yes':\n            keybox.delete(args.title)\n            sys.stdout.write(\"Deleted.\\n\")\n    elif args.action == \"import\":\n        for title, mod_time, content in read_keys(args.file):\n            if keybox.exists(title):\n                sys.stdout.write(\"skipped %s: exists in database\\n\" % title)\n            else:\n                keybox.set(title, content, mod_time=mod_time)\n                sys.stdout.write(\"imported %s\\n\" % title)\n    elif args.action == \"export\":\n        if fd == sys.stdout: fd.write(\"---\\n\")\n        for title, mod_time in keybox.list():\n            fd.write(\"KEY: %s\\n\" % title)\n            fd.write(\"MOD: %s\\n\" % mod_time)\n            fd.write(\"%s\" % keybox.view(title)[1])\n            if fd == sys.stdout:\n                fd.write(\"---\\n\")\n            else:\n                fd.write(\"\\n\")\n        if fd != sys.stdout:\n            sys.stdout.write(\"Exported to file %s\\n\" % args.file)\n    elif args.action == \"reset\":\n        keybox.reset()\n\n\nif __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        sys.stdout.write(\"\\nUser aborted.\\n\")\n","tok_input_length":3609,"tok_output_length":3471,"system_prompt":"","index":18237}
{"question":"Create a genealogy program called Gramps using GTK+\/GNOME. The program is licensed under the GNU General Public License. The program allows users to create family trees and view them on a map. The map displays all events with a latitude and longitude associated with them. The program also allows users to edit families, persons, and events. The program has a menu bar, toolbar, and specific entry in the navigation menu. The program has a sidebar and bottom bar that display the \"Family Filter\" gramplet.","input":"","expected_output":"# -*- python -*-\n# -*- coding: utf-8 -*-\n#\n# Gramps - a GTK+\/GNOME based genealogy program\n#\n# Copyright (C) 2011-2016  Serge Noiraud\n#\n# This program is free software; you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n\n\"\"\"\nGeography for one family\n\"\"\"\n#-------------------------------------------------------------------------\n#\n# Python modules\n#\n#-------------------------------------------------------------------------\nimport operator\nfrom gi.repository import Gdk\nKEY_TAB = Gdk.KEY_Tab\nfrom gi.repository import Gtk\n\n#-------------------------------------------------------------------------\n#\n# set up logging\n#\n#-------------------------------------------------------------------------\nimport logging\n_LOG = logging.getLogger(\"GeoGraphy.geofamily\")\n\n#-------------------------------------------------------------------------\n#\n# Gramps Modules\n#\n#-------------------------------------------------------------------------\nfrom gramps.gen.const import GRAMPS_LOCALE as glocale\n_ = glocale.translation.gettext\nfrom gramps.gen.lib import EventRoleType, EventType\nfrom gramps.gen.config import config\nfrom gramps.gen.datehandler import displayer\nfrom gramps.gen.display.name import displayer as _nd\nfrom gramps.gen.display.place import displayer as _pd\nfrom gramps.gen.utils.place import conv_lat_lon\nfrom gramps.gui.views.bookmarks import FamilyBookmarks\nfrom gramps.plugins.lib.maps.geography import GeoGraphyView\n\n#-------------------------------------------------------------------------\n#\n# Constants\n#\n#-------------------------------------------------------------------------\n\n_UI_DEF = '''\\\n<ui>\n<menubar name=\"MenuBar\">\n<menu action=\"GoMenu\">\n  <placeholder name=\"CommonGo\">\n    <menuitem action=\"Back\"\/>\n    <menuitem action=\"Forward\"\/>\n    <separator\/>\n  <\/placeholder>\n<\/menu>\n<menu action=\"EditMenu\">\n  <placeholder name=\"CommonEdit\">\n    <menuitem action=\"PrintView\"\/>\n  <\/placeholder>\n<\/menu>\n<menu action=\"BookMenu\">\n  <placeholder name=\"AddEditBook\">\n    <menuitem action=\"AddBook\"\/>\n    <menuitem action=\"EditBook\"\/>\n  <\/placeholder>\n<\/menu>\n<\/menubar>\n<toolbar name=\"ToolBar\">\n<placeholder name=\"CommonNavigation\">\n  <toolitem action=\"Back\"\/>\n  <toolitem action=\"Forward\"\/>\n<\/placeholder>\n<placeholder name=\"CommonEdit\">\n  <toolitem action=\"PrintView\"\/>\n<\/placeholder>\n<\/toolbar>\n<\/ui>\n'''\n\n# pylint: disable=no-member\n# pylint: disable=unused-variable\n# pylint: disable=unused-argument\n\n#-------------------------------------------------------------------------\n#\n# GeoView\n#\n#-------------------------------------------------------------------------\nclass GeoFamily(GeoGraphyView):\n    \"\"\"\n    The view used to render family map.\n    \"\"\"\n\n    def __init__(self, pdata, dbstate, uistate, nav_group=0):\n        GeoGraphyView.__init__(self, _('Family places map'),\n                                      pdata, dbstate, uistate,\n                                      FamilyBookmarks,\n                                      nav_group)\n        self.dbstate = dbstate\n        self.uistate = uistate\n        self.place_list = []\n        self.place_without_coordinates = []\n        self.minlat = self.maxlat = self.minlon = self.maxlon = 0.0\n        self.minyear = 9999\n        self.maxyear = 0\n        self.nbplaces = 0\n        self.nbmarkers = 0\n        self.sort = []\n        self.additional_uis.append(self.additional_ui())\n        self.no_show_places_in_status_bar = False\n        self.cal = None\n\n    def get_title(self):\n        \"\"\"\n        Used to set the titlebar in the configuration window.\n        \"\"\"\n        return _('GeoFamily')\n\n    def get_stock(self):\n        \"\"\"\n        Returns the name of the stock icon to use for the display.\n        This assumes that this icon has already been registered\n        as a stock icon.\n        \"\"\"\n        return 'geo-show-family'\n\n    def get_viewtype_stock(self):\n        \"\"\"Type of view in category\n        \"\"\"\n        return 'geo-show-family'\n\n    def additional_ui(self):\n        \"\"\"\n        Specifies the UIManager XML code that defines the menus and buttons\n        associated with the interface.\n        \"\"\"\n        return _UI_DEF\n\n    def navigation_type(self):\n        \"\"\"\n        Indicates the navigation type. Navigation type can be the string\n        name of any of the primary objects.\n        \"\"\"\n        return 'Family'\n\n    def goto_handle(self, handle=None):\n        \"\"\"\n        Rebuild the tree with the given person handle as the root.\n        \"\"\"\n        self.build_tree()\n\n    def build_tree(self):\n        \"\"\"\n        This is called by the parent class when the view becomes visible. Since\n        all handling of visibility is now in rebuild_trees, see that for more\n        information.\n        \"\"\"\n        if not self.dbstate.is_open():\n            return\n        if self.uistate.get_active('Family'):\n            self._createmap(self.uistate.get_active('Family'))\n        else:\n            self._createmap(self.uistate.get_active('Person'))\n\n    def _createpersonmarkers(self, dbstate, person, comment, fam_id):\n        \"\"\"\n        Create all markers for the specified person.\n        \"\"\"\n        self.cal = config.get('preferences.calendar-format-report')\n        latitude = longitude = \"\"\n        if person:\n            # For each event, if we have a place, set a marker.\n            for event_ref in person.get_event_ref_list():\n                if not event_ref:\n                    continue\n                role = event_ref.get_role()\n                event = dbstate.db.get_event_from_handle(event_ref.ref)\n                eyear = event.get_date_object().to_calendar(self.cal).get_year()\n                place_handle = event.get_place_handle()\n                if place_handle:\n                    place = dbstate.db.get_place_from_handle(place_handle)\n                    if place:\n                        longitude = place.get_longitude()\n                        latitude = place.get_latitude()\n                        latitude, longitude = conv_lat_lon(latitude,\n                                                           longitude, \"D.D8\")\n                        descr = _pd.display(dbstate.db, place)\n                        evt = EventType(event.get_type())\n                        descr1 = _(\"%(eventtype)s : %(name)s\") % {\n                                        'eventtype': evt,\n                                        'name': _nd.display(person)}\n                        # place.get_longitude and place.get_latitude return\n                        # one string. We have coordinates when the two values\n                        # contains non null string.\n                        if longitude and latitude:\n                            if not self._present_in_places_list(2,\n                                                str(descr1 + descr + str(evt))):\n                                self._append_to_places_list(descr,\n                                    str(descr1 + descr + str(evt)),\n                                    _nd.display(person),\n                                    latitude, longitude,\n                                    role, eyear,\n                                    event.get_type(),\n                                    person.gramps_id,\n                                    place.gramps_id,\n                                    event.gramps_id,\n                                    fam_id\n                                    )\n                        else:\n                            self._append_to_places_without_coord(\n                                                        place.gramps_id, descr)\n            family_list = person.get_family_handle_list()\n            for family_hdl in family_list:\n                family = self.dbstate.db.get_family_from_handle(family_hdl)\n                if family is not None:\n                    for event_ref in family.get_event_ref_list():\n                        if event_ref:\n                            event = dbstate.db.get_event_from_handle(\n                                                                  event_ref.ref)\n                            role = event_ref.get_role()\n                            if event.get_place_handle():\n                                place_handle = event.get_place_handle()\n                                if place_handle:\n                                    place = dbstate.db.get_place_from_handle(\n                                                                   place_handle)\n                                    if place:\n                                        longitude = place.get_longitude()\n                                        latitude = place.get_latitude()\n                                        (latitude,\n                                         longitude) = conv_lat_lon(latitude,\n                                                                   longitude,\n                                                                   \"D.D8\")\n                                        descr = _pd.display(dbstate.db, place)\n                                        evt = EventType(event.get_type())\n                                        (father_name,\n                          mother_name) = self._get_father_and_mother_name(event)\n                                        descr1 = \"%s : %s - \" % (evt,\n                                                                 father_name)\n                                        descr1 = \"%s%s\" % (descr1, mother_name)\n                                        eyear = event.get_date_object().to_calendar(self.cal).get_year()\n                                        if longitude and latitude:\n                                            if not self._present_in_places_list(\n                                             2, str(descr1 + descr + str(evt))):\n                                                self._append_to_places_list(\n                                                 descr,\n                                                 str(descr1 + descr + str(evt)),\n                                                 _nd.display(person),\n                                                 latitude, longitude,\n                                                 role, eyear,\n                                                 event.get_type(),\n                                                 person.gramps_id,\n                                                 place.gramps_id,\n                                                 event.gramps_id,\n                                                 family.gramps_id\n                                                 )\n                                        else:\n                                            self._append_to_places_without_coord(place.gramps_id, descr)\n\n    def family_label(self, family):\n        \"\"\"\n        Create the family label depending on existence of the father and mother\n        \"\"\"\n        if family is None:\n            return \"Unknown\"\n        father = mother = None\n        hdl = family.get_father_handle()\n        if hdl:\n            father = self.dbstate.db.get_person_from_handle(hdl)\n        hdl = family.get_mother_handle()\n        if hdl:\n            mother = self.dbstate.db.get_person_from_handle(hdl)\n        if father and mother:\n            label = _(\"%(gramps_id)s : %(father)s and %(mother)s\") % {\n                'father' : _nd.display(father),\n                'mother' : _nd.display(mother),\n                'gramps_id' : family.gramps_id,\n                }\n        elif father:\n            label = \"%(gramps_id)s : %(father)s\" % {\n                'father' : _nd.display(father),\n                'gramps_id' : family.gramps_id,\n                }\n        elif mother:\n            label = \"%(gramps_id)s : %(mother)s\" % {\n                'mother' : _nd.display(mother),\n                'gramps_id' : family.gramps_id,\n                }\n        else:\n            # No translation for bare gramps_id\n            label = \"%(gramps_id)s :\" % {\n                'gramps_id' : family.gramps_id,\n                }\n        return label\n\n    def _createmap_for_one_family(self, family):\n        \"\"\"\n        Create all markers for one family : all event's places with a lat\/lon.\n        \"\"\"\n        dbstate = self.dbstate\n        self.message_layer.add_message(\n                          _(\"Family places for %s\") % self.family_label(family))\n        person = None\n        if family:\n            person = dbstate.db.get_person_from_handle(\n                                                     family.get_father_handle())\n        else:\n            return\n        family_id = family.gramps_id\n        if person is None: # family without father ?\n            handle = family.get_mother_handle()\n            if handle:\n                person = dbstate.db.get_person_from_handle(handle)\n        if person is None:\n            handle = self.uistate.get_active('Person')\n            if handle:\n                person = dbstate.db.get_person_from_handle(handle)\n        if person is not None:\n            family_list = person.get_family_handle_list()\n            if len(family_list) > 0:\n                fhandle = family_list[0] # first is primary\n                fam = dbstate.db.get_family_from_handle(fhandle)\n                father = mother = None\n                handle = fam.get_father_handle()\n                if handle:\n                    father = dbstate.db.get_person_from_handle(handle)\n                if father:\n                    comment = _(\"Father : %(id)s : %(name)s\") % {\n                                                   'id': father.gramps_id,\n                                                   'name': _nd.display(father)}\n                    self._createpersonmarkers(dbstate, father,\n                                              comment, family_id)\n                handle = fam.get_mother_handle()\n                if handle:\n                    mother = dbstate.db.get_person_from_handle(handle)\n                if mother:\n                    comment = _(\"Mother : %(id)s : %(name)s\") % {\n                                                   'id': mother.gramps_id,\n                                                   'name': _nd.display(mother)}\n                    self._createpersonmarkers(dbstate, mother,\n                                              comment, family_id)\n                index = 0\n                child_ref_list = fam.get_child_ref_list()\n                if child_ref_list:\n                    for child_ref in child_ref_list:\n                        child = dbstate.db.get_person_from_handle(child_ref.ref)\n                        if child:\n                            index += 1\n                            comment = _(\"Child : %(id)s - %(index)d \"\n                                        \": %(name)s\") % {\n                                            'id'    : child.gramps_id,\n                                            'index' : index,\n                                            'name'  : _nd.display(child)\n                                         }\n                            self._createpersonmarkers(dbstate, child,\n                                                      comment, family_id)\n            else:\n                comment = _(\"Person : %(id)s %(name)s has no family.\") % {\n                                'id' : person.gramps_id,\n                                'name' : _nd.display(person)\n                                }\n                self._createpersonmarkers(dbstate, person, comment, family_id)\n\n    def _createmap(self, handle):\n        \"\"\"\n        Create all markers for each people's event in the database which has\n        a lat\/lon.\n        \"\"\"\n        if not handle:\n            return\n        self.place_list = []\n        self.place_without_coordinates = []\n        self.places_found = []\n        self.nbplaces = 0\n        self.nbmarkers = 0\n        self.minlat = self.maxlat = self.minlon = self.maxlon = 0.0\n        self.minyear = 9999\n        self.maxyear = 0\n        self.message_layer.clear_messages()\n        if self.dbstate.db.has_family_handle(handle):\n            family = self.dbstate.db.get_family_from_handle(handle)\n            self._createmap_for_one_family(family)\n        else:\n            person = self.dbstate.db.get_person_from_handle(handle)\n            if not person:\n                return\n            family_list = person.get_family_handle_list()\n            for family_hdl in family_list:\n                family = self.dbstate.db.get_family_from_handle(family_hdl)\n                if family is not None:\n                    self._createmap_for_one_family(family)\n        self.sort = sorted(self.place_list,\n                           key=operator.itemgetter(3, 4, 6)\n                          )\n        self._create_markers()\n\n    def add_event_bubble_message(self, event, lat, lon, mark, menu):\n        \"\"\"\n        Add an item to the popup menu.\n        \"\"\"\n        self.itemoption = Gtk.Menu()\n        itemoption = self.itemoption\n        itemoption.show()\n        menu.set_submenu(itemoption)\n        modify = Gtk.MenuItem(label=_(\"Edit Family\"))\n        modify.show()\n        modify.connect(\"activate\", self.edit_family, event, lat, lon, mark)\n        itemoption.append(modify)\n        modify = Gtk.MenuItem(label=_(\"Edit Person\"))\n        modify.show()\n        modify.connect(\"activate\", self.edit_person, event, lat, lon, mark)\n        itemoption.append(modify)\n        modify = Gtk.MenuItem(label=_(\"Edit Event\"))\n        modify.show()\n        modify.connect(\"activate\", self.edit_event, event, lat, lon, mark)\n        itemoption.append(modify)\n        center = Gtk.MenuItem(label=_(\"Center on this place\"))\n        center.show()\n        center.connect(\"activate\", self.center_here, event, lat, lon, mark)\n        itemoption.append(center)\n\n    def bubble_message(self, event, lat, lon, marks):\n        \"\"\"\n        Add the popup menu.\n        \"\"\"\n        self.menu = Gtk.Menu()\n        menu = self.menu\n        menu.set_title(\"family\")\n        message = \"\"\n        oldplace = \"\"\n        prevmark = None\n        for mark in marks:\n            if message != \"\":\n                add_item = Gtk.MenuItem(label=message)\n                add_item.show()\n                menu.append(add_item)\n                self.add_event_bubble_message(event, lat, lon,\n                                              prevmark, add_item)\n            if mark[0] != oldplace:\n                message = \"%s :\" % mark[0]\n                self.add_place_bubble_message(event, lat, lon,\n                                              marks, menu, message, mark)\n                oldplace = mark[0]\n            evt = self.dbstate.db.get_event_from_gramps_id(mark[10])\n            # format the date as described in preferences.\n            date = displayer.display(evt.get_date_object())\n            if date == \"\":\n                date = _(\"Unknown\")\n            if mark[5] == EventRoleType.PRIMARY:\n                message = \"(%s) %s : %s\" % (date, mark[7], mark[1])\n            elif mark[5] == EventRoleType.FAMILY:\n                evt = self.dbstate.db.get_event_from_gramps_id(mark[10])\n                (father_name,\n                 mother_name) = self._get_father_and_mother_name(evt)\n                message = \"(%s) %s : %s - %s\" % (date, mark[7],\n                                                 father_name, mother_name)\n            else:\n                evt = self.dbstate.db.get_event_from_gramps_id(mark[10])\n                descr = evt.get_description()\n                if descr == \"\":\n                    descr = _('No description')\n                message = \"(%s) %s => %s\" % (date, mark[5], descr)\n            prevmark = mark\n        add_item = Gtk.MenuItem(label=message)\n        add_item.show()\n        menu.append(add_item)\n        self.add_event_bubble_message(event, lat, lon, prevmark, add_item)\n        menu.popup(None, None, None,\n                   None, event.button, event.time)\n        return 1\n\n    def add_specific_menu(self, menu, event, lat, lon):\n        \"\"\"\n        Add specific entry to the navigation menu.\n        \"\"\"\n        return\n\n    def get_default_gramplets(self):\n        \"\"\"\n        Define the default gramplets for the sidebar and bottombar.\n        \"\"\"\n        return ((\"Family Filter\",),\n                ())\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a genealogy program called Gramps using GTK+\/GNOME. The program is licensed under the GNU General Public License. The program allows users to create family trees and view them on a map. The map displays all events with a latitude and longitude associated with them. The program also allows users to edit families, persons, and events. The program has a menu bar, toolbar, and specific entry in the navigation menu. The program has a sidebar and bottom bar that display the \"Family Filter\" gramplet.\n\n### Input:\n\n\n### Output:\n# -*- python -*-\n# -*- coding: utf-8 -*-\n#\n# Gramps - a GTK+\/GNOME based genealogy program\n#\n# Copyright (C) 2011-2016  Serge Noiraud\n#\n# This program is free software; you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n\n\"\"\"\nGeography for one family\n\"\"\"\n#-------------------------------------------------------------------------\n#\n# Python modules\n#\n#-------------------------------------------------------------------------\nimport operator\nfrom gi.repository import Gdk\nKEY_TAB = Gdk.KEY_Tab\nfrom gi.repository import Gtk\n\n#-------------------------------------------------------------------------\n#\n# set up logging\n#\n#-------------------------------------------------------------------------\nimport logging\n_LOG = logging.getLogger(\"GeoGraphy.geofamily\")\n\n#-------------------------------------------------------------------------\n#\n# Gramps Modules\n#\n#-------------------------------------------------------------------------\nfrom gramps.gen.const import GRAMPS_LOCALE as glocale\n_ = glocale.translation.gettext\nfrom gramps.gen.lib import EventRoleType, EventType\nfrom gramps.gen.config import config\nfrom gramps.gen.datehandler import displayer\nfrom gramps.gen.display.name import displayer as _nd\nfrom gramps.gen.display.place import displayer as _pd\nfrom gramps.gen.utils.place import conv_lat_lon\nfrom gramps.gui.views.bookmarks import FamilyBookmarks\nfrom gramps.plugins.lib.maps.geography import GeoGraphyView\n\n#-------------------------------------------------------------------------\n#\n# Constants\n#\n#-------------------------------------------------------------------------\n\n_UI_DEF = '''\\\n<ui>\n<menubar name=\"MenuBar\">\n<menu action=\"GoMenu\">\n  <placeholder name=\"CommonGo\">\n    <menuitem action=\"Back\"\/>\n    <menuitem action=\"Forward\"\/>\n    <separator\/>\n  <\/placeholder>\n<\/menu>\n<menu action=\"EditMenu\">\n  <placeholder name=\"CommonEdit\">\n    <menuitem action=\"PrintView\"\/>\n  <\/placeholder>\n<\/menu>\n<menu action=\"BookMenu\">\n  <placeholder name=\"AddEditBook\">\n    <menuitem action=\"AddBook\"\/>\n    <menuitem action=\"EditBook\"\/>\n  <\/placeholder>\n<\/menu>\n<\/menubar>\n<toolbar name=\"ToolBar\">\n<placeholder name=\"CommonNavigation\">\n  <toolitem action=\"Back\"\/>\n  <toolitem action=\"Forward\"\/>\n<\/placeholder>\n<placeholder name=\"CommonEdit\">\n  <toolitem action=\"PrintView\"\/>\n<\/placeholder>\n<\/toolbar>\n<\/ui>\n'''\n\n# pylint: disable=no-member\n# pylint: disable=unused-variable\n# pylint: disable=unused-argument\n\n#-------------------------------------------------------------------------\n#\n# GeoView\n#\n#-------------------------------------------------------------------------\nclass GeoFamily(GeoGraphyView):\n    \"\"\"\n    The view used to render family map.\n    \"\"\"\n\n    def __init__(self, pdata, dbstate, uistate, nav_group=0):\n        GeoGraphyView.__init__(self, _('Family places map'),\n                                      pdata, dbstate, uistate,\n                                      FamilyBookmarks,\n                                      nav_group)\n        self.dbstate = dbstate\n        self.uistate = uistate\n        self.place_list = []\n        self.place_without_coordinates = []\n        self.minlat = self.maxlat = self.minlon = self.maxlon = 0.0\n        self.minyear = 9999\n        self.maxyear = 0\n        self.nbplaces = 0\n        self.nbmarkers = 0\n        self.sort = []\n        self.additional_uis.append(self.additional_ui())\n        self.no_show_places_in_status_bar = False\n        self.cal = None\n\n    def get_title(self):\n        \"\"\"\n        Used to set the titlebar in the configuration window.\n        \"\"\"\n        return _('GeoFamily')\n\n    def get_stock(self):\n        \"\"\"\n        Returns the name of the stock icon to use for the display.\n        This assumes that this icon has already been registered\n        as a stock icon.\n        \"\"\"\n        return 'geo-show-family'\n\n    def get_viewtype_stock(self):\n        \"\"\"Type of view in category\n        \"\"\"\n        return 'geo-show-family'\n\n    def additional_ui(self):\n        \"\"\"\n        Specifies the UIManager XML code that defines the menus and buttons\n        associated with the interface.\n        \"\"\"\n        return _UI_DEF\n\n    def navigation_type(self):\n        \"\"\"\n        Indicates the navigation type. Navigation type can be the string\n        name of any of the primary objects.\n        \"\"\"\n        return 'Family'\n\n    def goto_handle(self, handle=None):\n        \"\"\"\n        Rebuild the tree with the given person handle as the root.\n        \"\"\"\n        self.build_tree()\n\n    def build_tree(self):\n        \"\"\"\n        This is called by the parent class when the view becomes visible. Since\n        all handling of visibility is now in rebuild_trees, see that for more\n        information.\n        \"\"\"\n        if not self.dbstate.is_open():\n            return\n        if self.uistate.get_active('Family'):\n            self._createmap(self.uistate.get_active('Family'))\n        else:\n            self._createmap(self.uistate.get_active('Person'))\n\n    def _createpersonmarkers(self, dbstate, person, comment, fam_id):\n        \"\"\"\n        Create all markers for the specified person.\n        \"\"\"\n        self.cal = config.get('preferences.calendar-format-report')\n        latitude = longitude = \"\"\n        if person:\n            # For each event, if we have a place, set a marker.\n            for event_ref in person.get_event_ref_list():\n                if not event_ref:\n                    continue\n                role = event_ref.get_role()\n                event = dbstate.db.get_event_from_handle(event_ref.ref)\n                eyear = event.get_date_object().to_calendar(self.cal).get_year()\n                place_handle = event.get_place_handle()\n                if place_handle:\n                    place = dbstate.db.get_place_from_handle(place_handle)\n                    if place:\n                        longitude = place.get_longitude()\n                        latitude = place.get_latitude()\n                        latitude, longitude = conv_lat_lon(latitude,\n                                                           longitude, \"D.D8\")\n                        descr = _pd.display(dbstate.db, place)\n                        evt = EventType(event.get_type())\n                        descr1 = _(\"%(eventtype)s : %(name)s\") % {\n                                        'eventtype': evt,\n                                        'name': _nd.display(person)}\n                        # place.get_longitude and place.get_latitude return\n                        # one string. We have coordinates when the two values\n                        # contains non null string.\n                        if longitude and latitude:\n                            if not self._present_in_places_list(2,\n                                                str(descr1 + descr + str(evt))):\n                                self._append_to_places_list(descr,\n                                    str(descr1 + descr + str(evt)),\n                                    _nd.display(person),\n                                    latitude, longitude,\n                                    role, eyear,\n                                    event.get_type(),\n                                    person.gramps_id,\n                                    place.gramps_id,\n                                    event.gramps_id,\n                                    fam_id\n                                    )\n                        else:\n                            self._append_to_places_without_coord(\n                                                        place.gramps_id, descr)\n            family_list = person.get_family_handle_list()\n            for family_hdl in family_list:\n                family = self.dbstate.db.get_family_from_handle(family_hdl)\n                if family is not None:\n                    for event_ref in family.get_event_ref_list():\n                        if event_ref:\n                            event = dbstate.db.get_event_from_handle(\n                                                                  event_ref.ref)\n                            role = event_ref.get_role()\n                            if event.get_place_handle():\n                                place_handle = event.get_place_handle()\n                                if place_handle:\n                                    place = dbstate.db.get_place_from_handle(\n                                                                   place_handle)\n                                    if place:\n                                        longitude = place.get_longitude()\n                                        latitude = place.get_latitude()\n                                        (latitude,\n                                         longitude) = conv_lat_lon(latitude,\n                                                                   longitude,\n                                                                   \"D.D8\")\n                                        descr = _pd.display(dbstate.db, place)\n                                        evt = EventType(event.get_type())\n                                        (father_name,\n                          mother_name) = self._get_father_and_mother_name(event)\n                                        descr1 = \"%s : %s - \" % (evt,\n                                                                 father_name)\n                                        descr1 = \"%s%s\" % (descr1, mother_name)\n                                        eyear = event.get_date_object().to_calendar(self.cal).get_year()\n                                        if longitude and latitude:\n                                            if not self._present_in_places_list(\n                                             2, str(descr1 + descr + str(evt))):\n                                                self._append_to_places_list(\n                                                 descr,\n                                                 str(descr1 + descr + str(evt)),\n                                                 _nd.display(person),\n                                                 latitude, longitude,\n                                                 role, eyear,\n                                                 event.get_type(),\n                                                 person.gramps_id,\n                                                 place.gramps_id,\n                                                 event.gramps_id,\n                                                 family.gramps_id\n                                                 )\n                                        else:\n                                            self._append_to_places_without_coord(place.gramps_id, descr)\n\n    def family_label(self, family):\n        \"\"\"\n        Create the family label depending on existence of the father and mother\n        \"\"\"\n        if family is None:\n            return \"Unknown\"\n        father = mother = None\n        hdl = family.get_father_handle()\n        if hdl:\n            father = self.dbstate.db.get_person_from_handle(hdl)\n        hdl = family.get_mother_handle()\n        if hdl:\n            mother = self.dbstate.db.get_person_from_handle(hdl)\n        if father and mother:\n            label = _(\"%(gramps_id)s : %(father)s and %(mother)s\") % {\n                'father' : _nd.display(father),\n                'mother' : _nd.display(mother),\n                'gramps_id' : family.gramps_id,\n                }\n        elif father:\n            label = \"%(gramps_id)s : %(father)s\" % {\n                'father' : _nd.display(father),\n                'gramps_id' : family.gramps_id,\n                }\n        elif mother:\n            label = \"%(gramps_id)s : %(mother)s\" % {\n                'mother' : _nd.display(mother),\n                'gramps_id' : family.gramps_id,\n                }\n        else:\n            # No translation for bare gramps_id\n            label = \"%(gramps_id)s :\" % {\n                'gramps_id' : family.gramps_id,\n                }\n        return label\n\n    def _createmap_for_one_family(self, family):\n        \"\"\"\n        Create all markers for one family : all event's places with a lat\/lon.\n        \"\"\"\n        dbstate = self.dbstate\n        self.message_layer.add_message(\n                          _(\"Family places for %s\") % self.family_label(family))\n        person = None\n        if family:\n            person = dbstate.db.get_person_from_handle(\n                                                     family.get_father_handle())\n        else:\n            return\n        family_id = family.gramps_id\n        if person is None: # family without father ?\n            handle = family.get_mother_handle()\n            if handle:\n                person = dbstate.db.get_person_from_handle(handle)\n        if person is None:\n            handle = self.uistate.get_active('Person')\n            if handle:\n                person = dbstate.db.get_person_from_handle(handle)\n        if person is not None:\n            family_list = person.get_family_handle_list()\n            if len(family_list) > 0:\n                fhandle = family_list[0] # first is primary\n                fam = dbstate.db.get_family_from_handle(fhandle)\n                father = mother = None\n                handle = fam.get_father_handle()\n                if handle:\n                    father = dbstate.db.get_person_from_handle(handle)\n                if father:\n                    comment = _(\"Father : %(id)s : %(name)s\") % {\n                                                   'id': father.gramps_id,\n                                                   'name': _nd.display(father)}\n                    self._createpersonmarkers(dbstate, father,\n                                              comment, family_id)\n                handle = fam.get_mother_handle()\n                if handle:\n                    mother = dbstate.db.get_person_from_handle(handle)\n                if mother:\n                    comment = _(\"Mother : %(id)s : %(name)s\") % {\n                                                   'id': mother.gramps_id,\n                                                   'name': _nd.display(mother)}\n                    self._createpersonmarkers(dbstate, mother,\n                                              comment, family_id)\n                index = 0\n                child_ref_list = fam.get_child_ref_list()\n                if child_ref_list:\n                    for child_ref in child_ref_list:\n                        child = dbstate.db.get_person_from_handle(child_ref.ref)\n                        if child:\n                            index += 1\n                            comment = _(\"Child : %(id)s - %(index)d \"\n                                        \": %(name)s\") % {\n                                            'id'    : child.gramps_id,\n                                            'index' : index,\n                                            'name'  : _nd.display(child)\n                                         }\n                            self._createpersonmarkers(dbstate, child,\n                                                      comment, family_id)\n            else:\n                comment = _(\"Person : %(id)s %(name)s has no family.\") % {\n                                'id' : person.gramps_id,\n                                'name' : _nd.display(person)\n                                }\n                self._createpersonmarkers(dbstate, person, comment, family_id)\n\n    def _createmap(self, handle):\n        \"\"\"\n        Create all markers for each people's event in the database which has\n        a lat\/lon.\n        \"\"\"\n        if not handle:\n            return\n        self.place_list = []\n        self.place_without_coordinates = []\n        self.places_found = []\n        self.nbplaces = 0\n        self.nbmarkers = 0\n        self.minlat = self.maxlat = self.minlon = self.maxlon = 0.0\n        self.minyear = 9999\n        self.maxyear = 0\n        self.message_layer.clear_messages()\n        if self.dbstate.db.has_family_handle(handle):\n            family = self.dbstate.db.get_family_from_handle(handle)\n            self._createmap_for_one_family(family)\n        else:\n            person = self.dbstate.db.get_person_from_handle(handle)\n            if not person:\n                return\n            family_list = person.get_family_handle_list()\n            for family_hdl in family_list:\n                family = self.dbstate.db.get_family_from_handle(family_hdl)\n                if family is not None:\n                    self._createmap_for_one_family(family)\n        self.sort = sorted(self.place_list,\n                           key=operator.itemgetter(3, 4, 6)\n                          )\n        self._create_markers()\n\n    def add_event_bubble_message(self, event, lat, lon, mark, menu):\n        \"\"\"\n        Add an item to the popup menu.\n        \"\"\"\n        self.itemoption = Gtk.Menu()\n        itemoption = self.itemoption\n        itemoption.show()\n        menu.set_submenu(itemoption)\n        modify = Gtk.MenuItem(label=_(\"Edit Family\"))\n        modify.show()\n        modify.connect(\"activate\", self.edit_family, event, lat, lon, mark)\n        itemoption.append(modify)\n        modify = Gtk.MenuItem(label=_(\"Edit Person\"))\n        modify.show()\n        modify.connect(\"activate\", self.edit_person, event, lat, lon, mark)\n        itemoption.append(modify)\n        modify = Gtk.MenuItem(label=_(\"Edit Event\"))\n        modify.show()\n        modify.connect(\"activate\", self.edit_event, event, lat, lon, mark)\n        itemoption.append(modify)\n        center = Gtk.MenuItem(label=_(\"Center on this place\"))\n        center.show()\n        center.connect(\"activate\", self.center_here, event, lat, lon, mark)\n        itemoption.append(center)\n\n    def bubble_message(self, event, lat, lon, marks):\n        \"\"\"\n        Add the popup menu.\n        \"\"\"\n        self.menu = Gtk.Menu()\n        menu = self.menu\n        menu.set_title(\"family\")\n        message = \"\"\n        oldplace = \"\"\n        prevmark = None\n        for mark in marks:\n            if message != \"\":\n                add_item = Gtk.MenuItem(label=message)\n                add_item.show()\n                menu.append(add_item)\n                self.add_event_bubble_message(event, lat, lon,\n                                              prevmark, add_item)\n            if mark[0] != oldplace:\n                message = \"%s :\" % mark[0]\n                self.add_place_bubble_message(event, lat, lon,\n                                              marks, menu, message, mark)\n                oldplace = mark[0]\n            evt = self.dbstate.db.get_event_from_gramps_id(mark[10])\n            # format the date as described in preferences.\n            date = displayer.display(evt.get_date_object())\n            if date == \"\":\n                date = _(\"Unknown\")\n            if mark[5] == EventRoleType.PRIMARY:\n                message = \"(%s) %s : %s\" % (date, mark[7], mark[1])\n            elif mark[5] == EventRoleType.FAMILY:\n                evt = self.dbstate.db.get_event_from_gramps_id(mark[10])\n                (father_name,\n                 mother_name) = self._get_father_and_mother_name(evt)\n                message = \"(%s) %s : %s - %s\" % (date, mark[7],\n                                                 father_name, mother_name)\n            else:\n                evt = self.dbstate.db.get_event_from_gramps_id(mark[10])\n                descr = evt.get_description()\n                if descr == \"\":\n                    descr = _('No description')\n                message = \"(%s) %s => %s\" % (date, mark[5], descr)\n            prevmark = mark\n        add_item = Gtk.MenuItem(label=message)\n        add_item.show()\n        menu.append(add_item)\n        self.add_event_bubble_message(event, lat, lon, prevmark, add_item)\n        menu.popup(None, None, None,\n                   None, event.button, event.time)\n        return 1\n\n    def add_specific_menu(self, menu, event, lat, lon):\n        \"\"\"\n        Add specific entry to the navigation menu.\n        \"\"\"\n        return\n\n    def get_default_gramplets(self):\n        \"\"\"\n        Define the default gramplets for the sidebar and bottombar.\n        \"\"\"\n        return ((\"Family Filter\",),\n                ())\n","tok_input_length":3920,"tok_output_length":3789,"system_prompt":"","index":8987}
{"question":"Create a Python class called \"Project\" with various properties and methods for managing a Python project. The class should have methods for adding and removing packages from the Pipfile, creating a Pipfile, and writing data out as TOML. It should also have properties for accessing information about the project, such as the project name, the location of the virtual environment, and the location of the Pipfile. Additionally, the class should have properties for accessing information about the project's dependencies, such as a list of all packages, a list of packages for pip-tools to","input":"","expected_output":"# -*- coding: utf-8 -*-\nimport json\nimport os\nimport re\nimport sys\nimport base64\nimport hashlib\n\nimport contoml\nimport delegator\nimport pipfile\nimport toml\n\nfrom .utils import (\n    mkdir_p, convert_deps_from_pip, pep423_name, recase_file,\n    find_requirements, is_file, is_vcs, python_version, cleanup_toml,\n    is_installable_file, is_valid_url\n)\nfrom .environments import PIPENV_MAX_DEPTH, PIPENV_VENV_IN_PROJECT\nfrom .environments import PIPENV_VIRTUALENV, PIPENV_PIPFILE\n\nif PIPENV_PIPFILE:\n    if not os.path.isfile(PIPENV_PIPFILE):\n        raise RuntimeError('Given PIPENV_PIPFILE is not found!')\n    else:\n        PIPENV_PIPFILE = os.path.abspath(PIPENV_PIPFILE)\n\n\nclass Project(object):\n    \"\"\"docstring for Project\"\"\"\n\n    def __init__(self, chdir=True):\n        super(Project, self).__init__()\n        self._name = None\n        self._virtualenv_location = None\n        self._download_location = None\n        self._proper_names_location = None\n        self._pipfile_location = None\n        self._requirements_location = None\n        self._original_dir = os.path.abspath(os.curdir)\n\n        # Hack to skip this during pipenv run, or -r.\n        if ('run' not in sys.argv) and chdir:\n            try:\n                os.chdir(self.project_directory)\n            except (TypeError, AttributeError):\n                pass\n\n    def path_to(self, p):\n        \"\"\"Returns the absolute path to a given relative path.\"\"\"\n        if os.path.isabs(p):\n            return p\n\n        return os.sep.join([self._original_dir, p])\n\n    def _build_package_list(self, package_section):\n        \"\"\"Returns a list of packages for pip-tools to consume.\"\"\"\n        ps = {}\n        # TODO: Separate the logic for showing packages from the filters for supplying pip-tools\n        for k, v in self.parsed_pipfile.get(package_section, {}).items():\n            # Skip editable VCS deps.\n            if hasattr(v, 'keys'):\n                # When a vcs url is gven without editable it only appears as a key\n                # Eliminate any vcs, path, or url entries which are not editable\n                # Since pip-tools can't do deep resolution on them, even setuptools-installable ones\n                if (is_vcs(v) or is_vcs(k) or (is_installable_file(k) or is_installable_file(v)) or\n                        any((prefix in v and\n                             (os.path.isfile(v[prefix]) or is_valid_url(v[prefix])))\n                            for prefix in ['path', 'file'])):\n                    # If they are editable, do resolve them\n                    if 'editable' not in v:\n                        continue\n                    else:\n                        ps.update({k: v})\n                else:\n                    ps.update({k: v})\n            else:\n                # Since these entries have no attributes we know they are not editable\n                # So we can safely exclude things that need to be editable in order to be resolved\n                # First exclude anything that is a vcs entry either in the key or value\n                if not (any(is_vcs(i) for i in [k, v]) or\n                        # Then exclude any installable files that are not directories\n                        # Because pip-tools can resolve setup.py for example\n                        any(is_installable_file(i) for i in [k, v]) or\n                        # Then exclude any URLs because they need to be editable also\n                        # Things that are excluded can only be 'shallow resolved'\n                        any(is_valid_url(i) for i in [k, v])):\n                    ps.update({k: v})\n        return ps\n\n    @property\n    def name(self):\n        if self._name is None:\n            self._name = self.pipfile_location.split(os.sep)[-2]\n        return self._name\n\n    @property\n    def pipfile_exists(self):\n        return bool(self.pipfile_location)\n\n    @property\n    def required_python_version(self):\n        if self.pipfile_exists:\n            required = self.parsed_pipfile.get('requires', {}).get('python_full_version')\n            if not required:\n                required = self.parsed_pipfile.get('requires', {}).get('python_version')\n            if required != \"*\":\n                return required\n\n    @property\n    def project_directory(self):\n        if self.pipfile_location is not None:\n            return os.path.abspath(os.path.join(self.pipfile_location, os.pardir))\n        else:\n            return None\n\n    @property\n    def requirements_exists(self):\n        return bool(self.requirements_location)\n\n    @property\n    def virtualenv_exists(self):\n        # TODO: Decouple project from existence of Pipfile.\n        if self.pipfile_exists and os.path.exists(self.virtualenv_location):\n            if os.name == 'nt':\n                extra = ['Scripts', 'activate.bat']\n            else:\n                extra = ['bin', 'activate']\n            return os.path.isfile(os.sep.join([self.virtualenv_location] + extra))\n\n        return False\n\n    @property\n    def virtualenv_name(self):\n        # Replace dangerous characters into '_'. The length of the sanitized\n        # project name is limited as 42 because of the limit of linux kernel\n        #\n        # 42 = 127 - len('\/home\/\/.local\/share\/virtualenvs\/\/bin\/python2') - 32 - len('-HASHHASH')\n        #\n        #      127 : BINPRM_BUF_SIZE - 1\n        #       32 : Maximum length of username\n        #\n        # References:\n        #   https:\/\/www.gnu.org\/software\/bash\/manual\/html_node\/Double-Quotes.html\n        #   http:\/\/www.tldp.org\/LDP\/abs\/html\/special-chars.html#FIELDREF\n        #   https:\/\/github.com\/torvalds\/linux\/blob\/2bfe01ef\/include\/uapi\/linux\/binfmts.h#L18\n        sanitized = re.sub(r'[ $`!*@\"\\\\\\r\\n\\t]', '_', self.name)[0:42]\n\n        # Hash the full path of the pipfile\n        hash = hashlib.sha256(self.pipfile_location.encode()).digest()[:6]\n        encoded_hash = base64.urlsafe_b64encode(hash).decode()\n\n        # If the pipfile was located at '\/home\/user\/MY_PROJECT\/Pipfile',\n        # the name of its virtualenv will be 'my-project-wyUfYPqE'\n        return sanitized + '-' + encoded_hash\n\n    @property\n    def virtualenv_location(self):\n\n        # if VIRTUAL_ENV is set, use that.\n        if PIPENV_VIRTUALENV:\n            return PIPENV_VIRTUALENV\n\n        # Use cached version, if available.\n        if self._virtualenv_location:\n            return self._virtualenv_location\n\n        # The user wants the virtualenv in the project.\n        if not PIPENV_VENV_IN_PROJECT:\n            c = delegator.run('pew dir \"{0}\"'.format(self.virtualenv_name))\n            loc = c.out.strip()\n        # Default mode.\n        else:\n            loc = os.sep.join(self.pipfile_location.split(os.sep)[:-1] + ['.venv'])\n\n        self._virtualenv_location = loc\n        return loc\n\n    @property\n    def virtualenv_src_location(self):\n        loc = os.sep.join([self.virtualenv_location, 'src'])\n        mkdir_p(loc)\n        return loc\n\n    @property\n    def download_location(self):\n        if self._download_location is None:\n            loc = os.sep.join([self.virtualenv_location, 'downloads'])\n            self._download_location = loc\n\n        # Create the directory, if it doesn't exist.\n        mkdir_p(self._download_location)\n\n        return self._download_location\n\n    @property\n    def proper_names_location(self):\n        if self._proper_names_location is None:\n            loc = os.sep.join([self.virtualenv_location, 'pipenv-proper-names.txt'])\n            self._proper_names_location = loc\n\n        # Create the database, if it doesn't exist.\n        open(self._proper_names_location, 'a').close()\n\n        return self._proper_names_location\n\n    @property\n    def proper_names(self):\n        with open(self.proper_names_location) as f:\n            return f.read().splitlines()\n\n    def register_proper_name(self, name):\n        \"\"\"Registers a proper name to the database.\"\"\"\n        with open(self.proper_names_location, 'a') as f:\n            f.write('{0}\\n'.format(name))\n\n    @property\n    def pipfile_location(self):\n        if PIPENV_PIPFILE:\n            return PIPENV_PIPFILE\n\n        if self._pipfile_location is None:\n            try:\n                loc = pipfile.Pipfile.find(max_depth=PIPENV_MAX_DEPTH)\n            except RuntimeError:\n                loc = None\n            self._pipfile_location = loc\n\n        return self._pipfile_location\n\n    @property\n    def requirements_location(self):\n        if self._requirements_location is None:\n            try:\n                loc = find_requirements(max_depth=PIPENV_MAX_DEPTH)\n            except RuntimeError:\n                loc = None\n            self._requirements_location = loc\n\n        return self._requirements_location\n\n    @property\n    def parsed_pipfile(self):\n        # Open the pipfile, read it into memory.\n        with open(self.pipfile_location) as f:\n            contents = f.read()\n\n        # If any outline tables are present...\n        if ('[packages.' in contents) or ('[dev-packages.' in contents):\n\n            data = toml.loads(contents)\n\n            # Convert all outline tables to inline tables.\n            for section in ('packages', 'dev-packages'):\n                for package in data.get(section, {}):\n\n                    # Convert things to inline tables \u2014 fancy :)\n                    if hasattr(data[section][package], 'keys'):\n                        _data = data[section][package]\n                        data[section][package] = toml._get_empty_inline_table(dict)\n                        data[section][package].update(_data)\n\n            # We lose comments here, but it's for the best.)\n            try:\n                return contoml.loads(toml.dumps(data, preserve=True))\n            except RuntimeError:\n                return toml.loads(toml.dumps(data, preserve=True))\n\n        else:\n            # Fallback to toml parser, for large files.\n            try:\n                return contoml.loads(contents)\n            except Exception:\n                return toml.loads(contents)\n\n    @property\n    def _pipfile(self):\n        \"\"\"Pipfile divided by PyPI and external dependencies.\"\"\"\n        pfile = self.parsed_pipfile\n        for section in ('packages', 'dev-packages'):\n            p_section = pfile.get(section, {})\n\n            for key in list(p_section.keys()):\n                # Normalize key name to PEP 423.\n                norm_key = pep423_name(key)\n                p_section[norm_key] = p_section.pop(key)\n\n        return pfile\n\n    @property\n    def settings(self):\n        \"\"\"A dictionary of the settings added to the Pipfile.\"\"\"\n        return self.parsed_pipfile.get('pipenv', {})\n\n    def update_settings(self, d):\n        settings = self.settings\n\n        changed = False\n        for new in d:\n            if new not in settings:\n                settings[new] = d[new]\n                changed = True\n\n        if changed:\n            p = self.parsed_pipfile\n            p['pipenv'] = settings\n\n            # Write the changes to disk.\n            self.write_toml(p)\n\n    @property\n    def _lockfile(self):\n        \"\"\"Pipfile.lock divided by PyPI and external dependencies.\"\"\"\n        pfile = pipfile.load(self.pipfile_location)\n        lockfile = json.loads(pfile.lock())\n\n        for section in ('default', 'develop'):\n            lock_section = lockfile.get(section, {})\n\n            for key in list(lock_section.keys()):\n                norm_key = pep423_name(key)\n                lockfile[section][norm_key] = lock_section.pop(key)\n\n        return lockfile\n\n    @property\n    def lockfile_location(self):\n        return '{0}.lock'.format(self.pipfile_location)\n\n    @property\n    def lockfile_exists(self):\n        return os.path.isfile(self.lockfile_location)\n\n    @property\n    def lockfile_content(self):\n        with open(self.lockfile_location) as lock:\n            return json.load(lock)\n\n    @property\n    def vcs_packages(self):\n        \"\"\"Returns a list of VCS packages, for not pip-tools to consume.\"\"\"\n        ps = {}\n        for k, v in self.parsed_pipfile.get('packages', {}).items():\n            if is_vcs(v) or is_vcs(k):\n                ps.update({k: v})\n        return ps\n\n    @property\n    def vcs_dev_packages(self):\n        \"\"\"Returns a list of VCS packages, for not pip-tools to consume.\"\"\"\n        ps = {}\n        for k, v in self.parsed_pipfile.get('dev-packages', {}).items():\n            if is_vcs(v) or is_vcs(k):\n                ps.update({k: v})\n        return ps\n\n    @property\n    def all_packages(self):\n        \"\"\"Returns a list of all packages.\"\"\"\n        p = dict(self.parsed_pipfile.get('dev-packages', {}))\n        p.update(self.parsed_pipfile.get('packages', {}))\n        return p\n\n    @property\n    def packages(self):\n        \"\"\"Returns a list of packages, for pip-tools to consume.\"\"\"\n        return self._build_package_list('packages')\n\n    @property\n    def dev_packages(self):\n        \"\"\"Returns a list of dev-packages, for pip-tools to consume.\"\"\"\n        return self._build_package_list('dev-packages')\n\n    def touch_pipfile(self):\n        \"\"\"Simply touches the Pipfile, for later use.\"\"\"\n        with open('Pipfile', 'a'):\n            os.utime('Pipfile', None)\n\n    @property\n    def pipfile_is_empty(self):\n        if not self.pipfile_exists:\n            return True\n\n        with open(self.pipfile_location, 'r') as f:\n            if not f.read():\n                return True\n\n        return False\n\n    def create_pipfile(self, python=None):\n        \"\"\"Creates the Pipfile, filled with juicy defaults.\"\"\"\n        data = {\n            # Default source.\n            u'source': [\n                {u'url': u'https:\/\/pypi.python.org\/simple', u'verify_ssl': True, 'name': 'pypi'}\n            ],\n\n            # Default packages.\n            u'packages': {},\n            u'dev-packages': {},\n\n        }\n\n        # Default requires.\n        if python:\n            data[u'requires'] = {'python_version': python_version(python)[:len('2.7')]}\n\n        self.write_toml(data, 'Pipfile')\n\n    def write_toml(self, data, path=None):\n        \"\"\"Writes the given data structure out as TOML.\"\"\"\n        if path is None:\n            path = self.pipfile_location\n\n        try:\n            formatted_data = contoml.dumps(data).rstrip()\n        except Exception:\n            for section in ('packages', 'dev-packages'):\n                for package in data[section]:\n\n                    # Convert things to inline tables \u2014 fancy :)\n                    if hasattr(data[section][package], 'keys'):\n                        _data = data[section][package]\n                        data[section][package] = toml._get_empty_inline_table(dict)\n                        data[section][package].update(_data)\n\n            formatted_data = toml.dumps(data).rstrip()\n\n        formatted_data = cleanup_toml(formatted_data)\n        with open(path, 'w') as f:\n            f.write(formatted_data)\n\n    @property\n    def sources(self):\n        if self.lockfile_exists:\n            meta_ = self.lockfile_content['_meta']\n            sources_ = meta_.get('sources')\n            if sources_:\n                return sources_\n        if 'source' in self.parsed_pipfile:\n            return self.parsed_pipfile['source']\n        else:\n            return [{u'url': u'https:\/\/pypi.python.org\/simple', u'verify_ssl': True, 'name': 'pypi'}]\n\n    def get_source(self, name=None, url=None):\n        for source in self.sources:\n            if name:\n                if source.get('name') == name:\n                    return source\n            elif url:\n                if source.get('url') in url:\n                    return source\n\n    def destroy_lockfile(self):\n        \"\"\"Deletes the lockfile.\"\"\"\n        try:\n            return os.remove(self.lockfile_location)\n        except OSError:\n            pass\n\n    def remove_package_from_pipfile(self, package_name, dev=False):\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        package_name = pep423_name(package_name)\n\n        key = 'dev-packages' if dev else 'packages'\n\n        if key in p and package_name in p[key]:\n            del p[key][package_name]\n\n        # Write Pipfile.\n        self.write_toml(recase_file(p))\n\n    def add_package_to_pipfile(self, package_name, dev=False):\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        # Don't re-capitalize file URLs or VCSs.\n        converted = convert_deps_from_pip(package_name)\n        converted = converted[[k for k in converted.keys()][0]]\n\n        if not (is_file(package_name) or is_vcs(converted) or 'path' in converted):\n            package_name = pep423_name(package_name)\n\n        key = 'dev-packages' if dev else 'packages'\n\n        # Set empty group if it doesn't exist yet.\n        if key not in p:\n            p[key] = {}\n\n        package = convert_deps_from_pip(package_name)\n        package_name = [k for k in package.keys()][0]\n\n        # Add the package to the group.\n        p[key][package_name] = package[package_name]\n\n        # Write Pipfile.\n        self.write_toml(p)\n\n    def add_index_to_pipfile(self, index):\n        \"\"\"Adds a given index to the Pipfile.\"\"\"\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        source = {'url': index, 'verify_ssl': True}\n\n        # Add the package to the group.\n        if 'source' not in p:\n            p['source'] = [source]\n\n        else:\n            p['source'].append(source)\n\n        # Write Pipfile.\n        self.write_toml(p)\n\n    def recase_pipfile(self):\n        self.write_toml(recase_file(self._pipfile))\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called \"Project\" with various properties and methods for managing a Python project. The class should have methods for adding and removing packages from the Pipfile, creating a Pipfile, and writing data out as TOML. It should also have properties for accessing information about the project, such as the project name, the location of the virtual environment, and the location of the Pipfile. Additionally, the class should have properties for accessing information about the project's dependencies, such as a list of all packages, a list of packages for pip-tools to\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\nimport json\nimport os\nimport re\nimport sys\nimport base64\nimport hashlib\n\nimport contoml\nimport delegator\nimport pipfile\nimport toml\n\nfrom .utils import (\n    mkdir_p, convert_deps_from_pip, pep423_name, recase_file,\n    find_requirements, is_file, is_vcs, python_version, cleanup_toml,\n    is_installable_file, is_valid_url\n)\nfrom .environments import PIPENV_MAX_DEPTH, PIPENV_VENV_IN_PROJECT\nfrom .environments import PIPENV_VIRTUALENV, PIPENV_PIPFILE\n\nif PIPENV_PIPFILE:\n    if not os.path.isfile(PIPENV_PIPFILE):\n        raise RuntimeError('Given PIPENV_PIPFILE is not found!')\n    else:\n        PIPENV_PIPFILE = os.path.abspath(PIPENV_PIPFILE)\n\n\nclass Project(object):\n    \"\"\"docstring for Project\"\"\"\n\n    def __init__(self, chdir=True):\n        super(Project, self).__init__()\n        self._name = None\n        self._virtualenv_location = None\n        self._download_location = None\n        self._proper_names_location = None\n        self._pipfile_location = None\n        self._requirements_location = None\n        self._original_dir = os.path.abspath(os.curdir)\n\n        # Hack to skip this during pipenv run, or -r.\n        if ('run' not in sys.argv) and chdir:\n            try:\n                os.chdir(self.project_directory)\n            except (TypeError, AttributeError):\n                pass\n\n    def path_to(self, p):\n        \"\"\"Returns the absolute path to a given relative path.\"\"\"\n        if os.path.isabs(p):\n            return p\n\n        return os.sep.join([self._original_dir, p])\n\n    def _build_package_list(self, package_section):\n        \"\"\"Returns a list of packages for pip-tools to consume.\"\"\"\n        ps = {}\n        # TODO: Separate the logic for showing packages from the filters for supplying pip-tools\n        for k, v in self.parsed_pipfile.get(package_section, {}).items():\n            # Skip editable VCS deps.\n            if hasattr(v, 'keys'):\n                # When a vcs url is gven without editable it only appears as a key\n                # Eliminate any vcs, path, or url entries which are not editable\n                # Since pip-tools can't do deep resolution on them, even setuptools-installable ones\n                if (is_vcs(v) or is_vcs(k) or (is_installable_file(k) or is_installable_file(v)) or\n                        any((prefix in v and\n                             (os.path.isfile(v[prefix]) or is_valid_url(v[prefix])))\n                            for prefix in ['path', 'file'])):\n                    # If they are editable, do resolve them\n                    if 'editable' not in v:\n                        continue\n                    else:\n                        ps.update({k: v})\n                else:\n                    ps.update({k: v})\n            else:\n                # Since these entries have no attributes we know they are not editable\n                # So we can safely exclude things that need to be editable in order to be resolved\n                # First exclude anything that is a vcs entry either in the key or value\n                if not (any(is_vcs(i) for i in [k, v]) or\n                        # Then exclude any installable files that are not directories\n                        # Because pip-tools can resolve setup.py for example\n                        any(is_installable_file(i) for i in [k, v]) or\n                        # Then exclude any URLs because they need to be editable also\n                        # Things that are excluded can only be 'shallow resolved'\n                        any(is_valid_url(i) for i in [k, v])):\n                    ps.update({k: v})\n        return ps\n\n    @property\n    def name(self):\n        if self._name is None:\n            self._name = self.pipfile_location.split(os.sep)[-2]\n        return self._name\n\n    @property\n    def pipfile_exists(self):\n        return bool(self.pipfile_location)\n\n    @property\n    def required_python_version(self):\n        if self.pipfile_exists:\n            required = self.parsed_pipfile.get('requires', {}).get('python_full_version')\n            if not required:\n                required = self.parsed_pipfile.get('requires', {}).get('python_version')\n            if required != \"*\":\n                return required\n\n    @property\n    def project_directory(self):\n        if self.pipfile_location is not None:\n            return os.path.abspath(os.path.join(self.pipfile_location, os.pardir))\n        else:\n            return None\n\n    @property\n    def requirements_exists(self):\n        return bool(self.requirements_location)\n\n    @property\n    def virtualenv_exists(self):\n        # TODO: Decouple project from existence of Pipfile.\n        if self.pipfile_exists and os.path.exists(self.virtualenv_location):\n            if os.name == 'nt':\n                extra = ['Scripts', 'activate.bat']\n            else:\n                extra = ['bin', 'activate']\n            return os.path.isfile(os.sep.join([self.virtualenv_location] + extra))\n\n        return False\n\n    @property\n    def virtualenv_name(self):\n        # Replace dangerous characters into '_'. The length of the sanitized\n        # project name is limited as 42 because of the limit of linux kernel\n        #\n        # 42 = 127 - len('\/home\/\/.local\/share\/virtualenvs\/\/bin\/python2') - 32 - len('-HASHHASH')\n        #\n        #      127 : BINPRM_BUF_SIZE - 1\n        #       32 : Maximum length of username\n        #\n        # References:\n        #   https:\/\/www.gnu.org\/software\/bash\/manual\/html_node\/Double-Quotes.html\n        #   http:\/\/www.tldp.org\/LDP\/abs\/html\/special-chars.html#FIELDREF\n        #   https:\/\/github.com\/torvalds\/linux\/blob\/2bfe01ef\/include\/uapi\/linux\/binfmts.h#L18\n        sanitized = re.sub(r'[ $`!*@\"\\\\\\r\\n\\t]', '_', self.name)[0:42]\n\n        # Hash the full path of the pipfile\n        hash = hashlib.sha256(self.pipfile_location.encode()).digest()[:6]\n        encoded_hash = base64.urlsafe_b64encode(hash).decode()\n\n        # If the pipfile was located at '\/home\/user\/MY_PROJECT\/Pipfile',\n        # the name of its virtualenv will be 'my-project-wyUfYPqE'\n        return sanitized + '-' + encoded_hash\n\n    @property\n    def virtualenv_location(self):\n\n        # if VIRTUAL_ENV is set, use that.\n        if PIPENV_VIRTUALENV:\n            return PIPENV_VIRTUALENV\n\n        # Use cached version, if available.\n        if self._virtualenv_location:\n            return self._virtualenv_location\n\n        # The user wants the virtualenv in the project.\n        if not PIPENV_VENV_IN_PROJECT:\n            c = delegator.run('pew dir \"{0}\"'.format(self.virtualenv_name))\n            loc = c.out.strip()\n        # Default mode.\n        else:\n            loc = os.sep.join(self.pipfile_location.split(os.sep)[:-1] + ['.venv'])\n\n        self._virtualenv_location = loc\n        return loc\n\n    @property\n    def virtualenv_src_location(self):\n        loc = os.sep.join([self.virtualenv_location, 'src'])\n        mkdir_p(loc)\n        return loc\n\n    @property\n    def download_location(self):\n        if self._download_location is None:\n            loc = os.sep.join([self.virtualenv_location, 'downloads'])\n            self._download_location = loc\n\n        # Create the directory, if it doesn't exist.\n        mkdir_p(self._download_location)\n\n        return self._download_location\n\n    @property\n    def proper_names_location(self):\n        if self._proper_names_location is None:\n            loc = os.sep.join([self.virtualenv_location, 'pipenv-proper-names.txt'])\n            self._proper_names_location = loc\n\n        # Create the database, if it doesn't exist.\n        open(self._proper_names_location, 'a').close()\n\n        return self._proper_names_location\n\n    @property\n    def proper_names(self):\n        with open(self.proper_names_location) as f:\n            return f.read().splitlines()\n\n    def register_proper_name(self, name):\n        \"\"\"Registers a proper name to the database.\"\"\"\n        with open(self.proper_names_location, 'a') as f:\n            f.write('{0}\\n'.format(name))\n\n    @property\n    def pipfile_location(self):\n        if PIPENV_PIPFILE:\n            return PIPENV_PIPFILE\n\n        if self._pipfile_location is None:\n            try:\n                loc = pipfile.Pipfile.find(max_depth=PIPENV_MAX_DEPTH)\n            except RuntimeError:\n                loc = None\n            self._pipfile_location = loc\n\n        return self._pipfile_location\n\n    @property\n    def requirements_location(self):\n        if self._requirements_location is None:\n            try:\n                loc = find_requirements(max_depth=PIPENV_MAX_DEPTH)\n            except RuntimeError:\n                loc = None\n            self._requirements_location = loc\n\n        return self._requirements_location\n\n    @property\n    def parsed_pipfile(self):\n        # Open the pipfile, read it into memory.\n        with open(self.pipfile_location) as f:\n            contents = f.read()\n\n        # If any outline tables are present...\n        if ('[packages.' in contents) or ('[dev-packages.' in contents):\n\n            data = toml.loads(contents)\n\n            # Convert all outline tables to inline tables.\n            for section in ('packages', 'dev-packages'):\n                for package in data.get(section, {}):\n\n                    # Convert things to inline tables \u2014 fancy :)\n                    if hasattr(data[section][package], 'keys'):\n                        _data = data[section][package]\n                        data[section][package] = toml._get_empty_inline_table(dict)\n                        data[section][package].update(_data)\n\n            # We lose comments here, but it's for the best.)\n            try:\n                return contoml.loads(toml.dumps(data, preserve=True))\n            except RuntimeError:\n                return toml.loads(toml.dumps(data, preserve=True))\n\n        else:\n            # Fallback to toml parser, for large files.\n            try:\n                return contoml.loads(contents)\n            except Exception:\n                return toml.loads(contents)\n\n    @property\n    def _pipfile(self):\n        \"\"\"Pipfile divided by PyPI and external dependencies.\"\"\"\n        pfile = self.parsed_pipfile\n        for section in ('packages', 'dev-packages'):\n            p_section = pfile.get(section, {})\n\n            for key in list(p_section.keys()):\n                # Normalize key name to PEP 423.\n                norm_key = pep423_name(key)\n                p_section[norm_key] = p_section.pop(key)\n\n        return pfile\n\n    @property\n    def settings(self):\n        \"\"\"A dictionary of the settings added to the Pipfile.\"\"\"\n        return self.parsed_pipfile.get('pipenv', {})\n\n    def update_settings(self, d):\n        settings = self.settings\n\n        changed = False\n        for new in d:\n            if new not in settings:\n                settings[new] = d[new]\n                changed = True\n\n        if changed:\n            p = self.parsed_pipfile\n            p['pipenv'] = settings\n\n            # Write the changes to disk.\n            self.write_toml(p)\n\n    @property\n    def _lockfile(self):\n        \"\"\"Pipfile.lock divided by PyPI and external dependencies.\"\"\"\n        pfile = pipfile.load(self.pipfile_location)\n        lockfile = json.loads(pfile.lock())\n\n        for section in ('default', 'develop'):\n            lock_section = lockfile.get(section, {})\n\n            for key in list(lock_section.keys()):\n                norm_key = pep423_name(key)\n                lockfile[section][norm_key] = lock_section.pop(key)\n\n        return lockfile\n\n    @property\n    def lockfile_location(self):\n        return '{0}.lock'.format(self.pipfile_location)\n\n    @property\n    def lockfile_exists(self):\n        return os.path.isfile(self.lockfile_location)\n\n    @property\n    def lockfile_content(self):\n        with open(self.lockfile_location) as lock:\n            return json.load(lock)\n\n    @property\n    def vcs_packages(self):\n        \"\"\"Returns a list of VCS packages, for not pip-tools to consume.\"\"\"\n        ps = {}\n        for k, v in self.parsed_pipfile.get('packages', {}).items():\n            if is_vcs(v) or is_vcs(k):\n                ps.update({k: v})\n        return ps\n\n    @property\n    def vcs_dev_packages(self):\n        \"\"\"Returns a list of VCS packages, for not pip-tools to consume.\"\"\"\n        ps = {}\n        for k, v in self.parsed_pipfile.get('dev-packages', {}).items():\n            if is_vcs(v) or is_vcs(k):\n                ps.update({k: v})\n        return ps\n\n    @property\n    def all_packages(self):\n        \"\"\"Returns a list of all packages.\"\"\"\n        p = dict(self.parsed_pipfile.get('dev-packages', {}))\n        p.update(self.parsed_pipfile.get('packages', {}))\n        return p\n\n    @property\n    def packages(self):\n        \"\"\"Returns a list of packages, for pip-tools to consume.\"\"\"\n        return self._build_package_list('packages')\n\n    @property\n    def dev_packages(self):\n        \"\"\"Returns a list of dev-packages, for pip-tools to consume.\"\"\"\n        return self._build_package_list('dev-packages')\n\n    def touch_pipfile(self):\n        \"\"\"Simply touches the Pipfile, for later use.\"\"\"\n        with open('Pipfile', 'a'):\n            os.utime('Pipfile', None)\n\n    @property\n    def pipfile_is_empty(self):\n        if not self.pipfile_exists:\n            return True\n\n        with open(self.pipfile_location, 'r') as f:\n            if not f.read():\n                return True\n\n        return False\n\n    def create_pipfile(self, python=None):\n        \"\"\"Creates the Pipfile, filled with juicy defaults.\"\"\"\n        data = {\n            # Default source.\n            u'source': [\n                {u'url': u'https:\/\/pypi.python.org\/simple', u'verify_ssl': True, 'name': 'pypi'}\n            ],\n\n            # Default packages.\n            u'packages': {},\n            u'dev-packages': {},\n\n        }\n\n        # Default requires.\n        if python:\n            data[u'requires'] = {'python_version': python_version(python)[:len('2.7')]}\n\n        self.write_toml(data, 'Pipfile')\n\n    def write_toml(self, data, path=None):\n        \"\"\"Writes the given data structure out as TOML.\"\"\"\n        if path is None:\n            path = self.pipfile_location\n\n        try:\n            formatted_data = contoml.dumps(data).rstrip()\n        except Exception:\n            for section in ('packages', 'dev-packages'):\n                for package in data[section]:\n\n                    # Convert things to inline tables \u2014 fancy :)\n                    if hasattr(data[section][package], 'keys'):\n                        _data = data[section][package]\n                        data[section][package] = toml._get_empty_inline_table(dict)\n                        data[section][package].update(_data)\n\n            formatted_data = toml.dumps(data).rstrip()\n\n        formatted_data = cleanup_toml(formatted_data)\n        with open(path, 'w') as f:\n            f.write(formatted_data)\n\n    @property\n    def sources(self):\n        if self.lockfile_exists:\n            meta_ = self.lockfile_content['_meta']\n            sources_ = meta_.get('sources')\n            if sources_:\n                return sources_\n        if 'source' in self.parsed_pipfile:\n            return self.parsed_pipfile['source']\n        else:\n            return [{u'url': u'https:\/\/pypi.python.org\/simple', u'verify_ssl': True, 'name': 'pypi'}]\n\n    def get_source(self, name=None, url=None):\n        for source in self.sources:\n            if name:\n                if source.get('name') == name:\n                    return source\n            elif url:\n                if source.get('url') in url:\n                    return source\n\n    def destroy_lockfile(self):\n        \"\"\"Deletes the lockfile.\"\"\"\n        try:\n            return os.remove(self.lockfile_location)\n        except OSError:\n            pass\n\n    def remove_package_from_pipfile(self, package_name, dev=False):\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        package_name = pep423_name(package_name)\n\n        key = 'dev-packages' if dev else 'packages'\n\n        if key in p and package_name in p[key]:\n            del p[key][package_name]\n\n        # Write Pipfile.\n        self.write_toml(recase_file(p))\n\n    def add_package_to_pipfile(self, package_name, dev=False):\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        # Don't re-capitalize file URLs or VCSs.\n        converted = convert_deps_from_pip(package_name)\n        converted = converted[[k for k in converted.keys()][0]]\n\n        if not (is_file(package_name) or is_vcs(converted) or 'path' in converted):\n            package_name = pep423_name(package_name)\n\n        key = 'dev-packages' if dev else 'packages'\n\n        # Set empty group if it doesn't exist yet.\n        if key not in p:\n            p[key] = {}\n\n        package = convert_deps_from_pip(package_name)\n        package_name = [k for k in package.keys()][0]\n\n        # Add the package to the group.\n        p[key][package_name] = package[package_name]\n\n        # Write Pipfile.\n        self.write_toml(p)\n\n    def add_index_to_pipfile(self, index):\n        \"\"\"Adds a given index to the Pipfile.\"\"\"\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        source = {'url': index, 'verify_ssl': True}\n\n        # Add the package to the group.\n        if 'source' not in p:\n            p['source'] = [source]\n\n        else:\n            p['source'].append(source)\n\n        # Write Pipfile.\n        self.write_toml(p)\n\n    def recase_pipfile(self):\n        self.write_toml(recase_file(self._pipfile))\n","tok_input_length":4059,"tok_output_length":3919,"system_prompt":"","index":2885}
